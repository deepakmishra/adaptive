[{"question": "<p>Which of the following machine models is required for the <strong>lexical analysis</strong> of a modern computer language\u00a0such as Java?</p>", "options": [{"option": "Non-Deterministic pushdown automata   ", "correct": false}, {"option": "Deterministic pushdown automata   ", "correct": false}, {"option": "Finite state automata   ", "correct": true}, {"option": "Turing machine   ", "correct": false}], "level": "Hard"}, {"question": "<p>What happens if a class does not have name in Java?</p>", "options": [{"option": "It will have a destructor.  ", "correct": false}, {"option": "It will have a constructor.  ", "correct": false}, {"option": "It can not have a constructor or a destructor.", "correct": false}, {"option": "An error occurs.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following lists contains keywords related to Java?</p>", "options": [{"option": "class, if, void, long, Int, continue  ", "correct": false}, {"option": "goto, instanceof, native, finally, default, throws  ", "correct": false}, {"option": "try, virtual, throw, final, volatile, transient  ", "correct": true}, {"option": "strictfp, constant, super, implements, do  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a reserved keyword in Java?</p>", "options": [{"option": "Method  ", "correct": false}, {"option": "Native  ", "correct": true}, {"option": "Subclasses  ", "correct": false}, {"option": "Reference  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, which of the following statements compiles without an error?</p>", "options": [{"option": "int a = Math.abs(-5); ", "correct": true}, {"option": "int b = Math.abs(5.0); ", "correct": false}, {"option": "int c = Math.abs(5.5F); ", "correct": false}, {"option": "int d = Math.abs(5L); ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following are valid <strong>constructors</strong> of the <strong>Thread</strong> class:</p>\n<ol>\n<li>Thread(Runnable r, String name)</li>\n<li>Thread()</li>\n<li>Thread(int priority)</li>\n<li>Thread(Runnable r, ThreadGroup g)</li>\n<li>Thread(Runnable r, int priority)</li>\n</ol>", "options": [{"option": "1 and 3  ", "correct": false}, {"option": "2 and 4  ", "correct": false}, {"option": "1 and 2  ", "correct": true}, {"option": "2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about Java is true:</p>\n\n<ol>\n\t<li>A static method cannot be synchronized.</li>\n\t<li>If a class contains synchronized code, then multiple threads can still access the non-synchronized code.</li>\n\t<li>Variables can be protected from concurrent access problems by marking them with a synchronized keyword.</li>\n\t<li>When a thread sleeps, it releases its locks.</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "The notifyAll() method must be called from a synchronized context. ", "correct": true}, {"option": "To call wait(), an object must own the lock on the thread.", "correct": false}, {"option": "The notify() method is defined in class java.lang.Thread.", "correct": false}, {"option": "The notify() method causes a thread to immediately release its locks.", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the most restrictive <strong>access specifier</strong> that allows <strong>sub</strong> classes in any package to access the members of a <strong>super</strong> class?</p>", "options": [{"option": "Public ", "correct": false}, {"option": "Private ", "correct": false}, {"option": "Protected ", "correct": true}, {"option": "Transient ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration of a string in Java?</p>", "options": [{"option": "String s1 = null;  ", "correct": true}, {"option": "String s2 = 'null';  ", "correct": false}, {"option": "String s3 = (String) 'abc';  ", "correct": false}, {"option": "String s4 = (String) '\\ufeed';  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to retain the <strong>t</strong> thread in the <strong>run</strong> state?</p>", "options": [{"option": "t.start()    ", "correct": true}, {"option": "t.run()    ", "correct": false}, {"option": "t.setRun( )    ", "correct": false}, {"option": "t.yield()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to throw an error, when the <strong>param</strong> given to the thread\u2019s <strong>setPriority( )</strong> method is not in the 1 to 10 range?</p>", "options": [{"option": "ArithmeticException   ", "correct": false}, {"option": "IllegalArgumentException   ", "correct": true}, {"option": "IllegalValueException    ", "correct": false}, {"option": "NullPointerException", "correct": false}], "level": "Medium"}, {"question": "<p>John has written an app without using any thread priorities. When John compiles the Java program, does JVM apply any thread priorities?</p>", "options": [{"option": "Yes", "correct": true}, {"option": "No", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is correct, if a user defines a <strong>protected</strong> method in a <strong>public</strong> class?</p>", "options": [{"option": "This method is accessible only from inside the class and from inside all of its sub classes.", "correct": false}, {"option": "In a class, you cannot declare methods with visibility lower than the visibility of the class in which it is defined.", "correct": false}, {"option": "Public methods cannot be accessed from inside the protected methods.", "correct": false}, {"option": "This method is accessible from within the class and from within all classes defined in the same package as the class.", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of\u00a0the\u00a0code as follows:</p>\n\n<pre class=\"prettyprint\"><code> class Hacker{\n    public void disp(){\n        System.out.print(\"I am a Hacker \");\n    }\n}\n\nclass Teacher extends Hacker {\n    public void disp(){\n        System.out.print(\"I am a Teacher \");\n    }\n}\n class HackerEarth{\n    public static void main(String args[]){\n        Hacker h = new Teacher();\n        h.disp();\n    }\n}\n</code></pre>", "options": [{"option": "I am a Hacker", "correct": false}, {"option": "I am a Teacher", "correct": true}, {"option": "I am a Hacker I am a Teacher", "correct": false}, {"option": "I am a Teacher I am a Hacker", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Game { \n    public int number;\n}\n\n class HackerEarth{\n    public void PlayIt(int i , Game p){\n        i = 5;\n        p.number = 8;\n    }\n\n    public static void main(String args[]){\n        int x = 0;\n        Game p = new Game();\n        new HackerEarth().PlayIt(x, p);\n        System.out.println(x + \" \" + p.number);\n    }\n}\n\n</code></pre>", "options": [{"option": "0 8   ", "correct": true}, {"option": "5 0   ", "correct": false}, {"option": "0 0   ", "correct": false}, {"option": "5 8   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following collection classes is used to do the following:</p>\n\n<ul>\n\t<li>Link values with keys</li>\n\t<li>Order the keys based on their natural order</li>\n</ul>", "options": [{"option": "java.util.HashSet   ", "correct": false}, {"option": "java.util.LinkedList   ", "correct": false}, {"option": "java.util.TreeMap   ", "correct": true}, {"option": "java.util.SortedSet   ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>GUI</strong> components is incorrect?</p>", "options": [{"option": "Swing exists from version 1.2 of the jdk. ", "correct": false}, {"option": "AWT stands for Abstract Window Toolkit. ", "correct": false}, {"option": "AWT components can not be placed on Swing containers. ", "correct": false}, {"option": "The AWT classes are deprecated. ", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements\u00a0describes how is an object <strong>serialized</strong>?</p>", "options": [{"option": "The class of the object is made to implement the interface Serializable.", "correct": true}, {"option": "The method 'serializeObject()' is invoked on the object.", "correct": false}, {"option": "The static method 'serialize(Object obj)' is invoked from the class 'Serializer'.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is true for this Java code:</p>\n<pre class=\"prettyprint\"><code>\nclass MyThread extends Thread{\n\n    public String hel;\n\n    public void run(){\n        System.out.print(hel);\n    }\n\n}\n\npublic class TestClass{\n\n    public static void main(String args[]){\n\n        MyThread t1 = new MyThread();\n        MyThread t2 = new MyThread();\n        t1.start();\n        t2.start();\n        System.out.print(\"3 \");\n    }\n}\n\n</code></pre>", "options": [{"option": "If you execute this program, the result is always one two three.\r\n  ", "correct": false}, {"option": "If you execute this program, the result is always three one two.\r\n  ", "correct": false}, {"option": "The result of this program is undetermined.  ", "correct": true}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, a new Map instance is to be created and it should have an iteration order same as that of an existing Map instance. Which concrete implementation of the <strong>Map</strong> interface should be used for the new instance?</p>", "options": [{"option": "TreeMap ", "correct": false}, {"option": "HashMap ", "correct": false}, {"option": "LinkedHashMap ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following <strong>asynchronous collection</strong> classes is used to grow or reduce its size and to allow\u00a0<strong>indexed</strong> access to its elements?</p>", "options": [{"option": "java.util.HashSet ", "correct": false}, {"option": "java.util.LinkedHashSet ", "correct": false}, {"option": "java.util.List ", "correct": false}, {"option": "java.util.ArrayList ", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is used to save unique elements in collections and to enable accessibility in the natural order?</p>", "options": [{"option": "java.util.Map ", "correct": false}, {"option": "java.util.Set ", "correct": true}, {"option": "java.util.List ", "correct": false}, {"option": "java.util.Collection ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    package foo; \n    import java.util.Vector; /* Line 2 */\n    private class MyWord extends Word \n    {\n        int i = 4; /* Line 5 */\n        public MyWord() \n        { \n            i = 2; \n        } \n    } \n    public class MyNewWord extends MyWord \n    {\n        public MyNewVector () \n        { \n            i = 4; /* Line 15 */\n        } \n        public static void main (String args []) \n        { \n            MyWord v = new MyNewWord(); /* Line 19 */\n        } \n    }\n</code></pre><p></p>", "options": [{"option": "  Compilation will succeed.  ", "correct": false}, {"option": "  Compilation will fail at line 3  ", "correct": true}, {"option": "  Compilation will fail at line 5.  ", "correct": false}, {"option": "  Compilation will fail at line 15.  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these fragments when inserted is used to compile the following Java code:\n</p><pre class=\"prettyprint\"><code>public class Vat \n    { \n        public void someOuterMethod() \n        {\n            //Line 5 \n        } \n        public class Var { } \n\n        public static void main(String[] argv) \n        {\n            Vat ot = new Vat(); \n            //Line 10\n        } \n    }\n\n</code></pre><p></p>", "options": [{"option": "  new Inner(); //At line 5  ", "correct": true}, {"option": "  new Inner(); //At line 10  ", "correct": false}, {"option": "  new ot.Inner(); //At line 10  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class fun1 \n    {\n        final public int Output(int x, int y) { return 0; } \n    } \n    class fun2 extends fun1 \n    { \n        public int Output(int x, int y) {return 1; } \n    } \n     class HackerEarth \n    {\n        public static void main(String args[]) \n        { \n            fun2 obj = new fun2(); \n            System.out.println(\"x = \" + obj.Output(0, 1));  \n        } \n    }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": " x = 0   ", "correct": false}, {"option": " x = 1   ", "correct": false}, {"option": " Compilation error", "correct": true}, {"option": " An exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> public class HackerEarth\n{ \n    public int a = 0; \n\n    public HackerEarth(String Hack)\n    {\n        a = 1; \n    } \n} \n\nclass Company extends HackerEarth\n{\n    public Company(String Hack)\n    {\n        a = 2; \n    } \n\n    public static void main(String args[])\n    {\n        Company comp = new Company(\"Hello HackerEarth\"); \n        System.out.println(comp.a); \n    } \n}\n</code></pre>", "options": [{"option": "0  ", "correct": false}, {"option": "1  ", "correct": false}, {"option": "2   ", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements are true for any concrete class implementing the <strong>java.lang.Runnable</strong> interface?</p>\n<ol>\n<li>The <strong>Runnable</strong> interface can be extended as long as the <strong>public</strong> <strong>run()</strong> method can be overridden.</li>\n<li>The class must contain a method called <strong>run()</strong> from which all code for that thread will be initiated.</li>\n<li>The class must contain an empty <strong>public void</strong> method, namely <strong>run()</strong>.</li>\n<li>The class must contain a <strong>public void</strong> method, namely <strong>runnable()</strong>.</li>\n<li>The class definition must include the words <strong>implements Thread</strong> and contain a method called <strong>run()</strong>.</li>\n<li>The mandatory method must be <strong>public</strong> with a return type of <strong>void</strong>, must be called <strong>run()</strong>, and must not take any arguments.</li>\n</ol>", "options": [{"option": "1 and 3 ", "correct": false}, {"option": "2 and 4 ", "correct": false}, {"option": "1 and 5 ", "correct": false}, {"option": "2 and 6 ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements, when added to the beginning of the following Java code, will allow it to compile:</p>\n<pre class=\"prettyprint\"><code>    public class NewSet extends java.util.TreeSet\n    {\n        public static void main(String [] args) \n        {\n            java.util.Set t = new java.util.Set();\n            t.clear();\n        }\n        public void clear() \n        {\n            TreeMap m = new TreeMap();\n            m.clear();\n        }\n    }\n\n</code></pre>", "options": [{"option": "No statement required", "correct": false}, {"option": "import java.util.*; and import java.util.TreeMap;", "correct": true}, {"option": "import.java.util.Tree*; and import java.util.TreeSet;", "correct": false}, {"option": "import.java.util.Tree*; and import java.util.TreeMap;", "correct": false}], "level": "Hard"}, {"question": "<p>Based on the following information, in Java,\u00a0the\u00a0<strong>File</strong> class references an <strong>ImageFile</strong> object in the memory and invokes the <strong>toFile</strong> method.</p>\n\n<ul>\n\t<li><strong>File</strong> is an abstract class and the <strong>toFile()</strong> method is defined in this class.</li>\n\t<li><strong>ImageFile</strong> and <strong>BinaryFile</strong> are concrete classes of the abstract class <strong>File</strong>.</li>\n\t<li><strong>toFile()</strong> is implemented in both the <strong>ImageFile</strong> and <strong>BinaryFile</strong> classes.</li>\n</ul>\n\n<p>Which of the following classes does this method belong to?</p>", "options": [{"option": "Binary file ", "correct": false}, {"option": "Image file ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth \n    {\n        public static void main(String [] args) \n        {\n            HackerEarth he = new HackerEarth();\n            he.output();\n        }\n\n        void output() \n        {\n            long [] x = {7,8,9};\n            long [] y = fix(x);\n            System.out.print(x[0] + x[1] + x[2] + \" \");\n            System.out.println(y[0] + y[1] + y[2]);\n        }\n\n        long [] fix(long [] z) \n        {\n            z[1] = 4;\n            return z;\n        }\n    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "15  20  ", "correct": false}, {"option": "20 20", "correct": true}, {"option": "7 8 9 7 4 9  ", "correct": false}, {"option": "7 4 9 7 4 9  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n    {\n    public static void main(String [] args) \n    {\n        HackerEarth p = new HackerEarth();\n        p.output();\n    }\n\n    void output() \n    {\n        boolean a = false;\n        boolean b = set(a);\n        System.out.println(a + \" \" + b);\n    }\n\n    boolean set(boolean a) \n    {\n        a = true;\n        return a;\n    }\n    }\n</code></pre>", "options": [{"option": "true true ", "correct": false}, {"option": "false true ", "correct": true}, {"option": "true false ", "correct": false}, {"option": "false false ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n    {\n        public static void main(String [] args) \n        {\n            HackerEarth h = new HackerEarth();\n            h.start();\n        }\n\n        void start() \n        {\n            String s1 = \"hack\";\n            String s2 = val(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String val(String s1) \n        {\n            s1 = s1 + \"earth\";\n            System.out.print(s1 + \" \");\n            return \"hackathons\";\n        }\n    }\n</code></pre>", "options": [{"option": "hack hackathons ", "correct": false}, {"option": "hackearth hackathons ", "correct": false}, {"option": "hackearth hackearth hackathons", "correct": false}, {"option": "hackearth hack hackathons", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class PassS \n    {\n        public static void main(String [] args) \n        {\n            PassS p = new PassS();\n            p.start();\n        }\n\n        void start() \n        {\n            String s1 = \"step\";\n            String s2 = fix(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String fix(String s1) \n        {\n            s1 = s1 + \"steem\";\n            System.out.print(s1 + \" \");\n            return \"steem\";\n        }\n    }\n</code></pre>", "options": [{"option": "step steem  ", "correct": false}, {"option": "stepsteem steem   ", "correct": false}, {"option": "steem step steem\t   ", "correct": false}, {"option": "stepsteem step steem   ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>reserved word</strong> in the Java?</p>", "options": [{"option": "   method   ", "correct": false}, {"option": "   native   ", "correct": true}, {"option": "   subclasses   ", "correct": false}, {"option": "   reference   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a valid declaration within an <strong>interface</strong> definition?</p>", "options": [{"option": "  public double method();  ", "correct": true}, {"option": "  public final double method();  ", "correct": false}, {"option": "  static void method(double d1);  ", "correct": false}, {"option": "  protected void method(double d1);  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>method-local inner class</strong> is correct?</p>", "options": [{"option": "  It must be marked 'final'  ", "correct": false}, {"option": "  It can be marked 'abstract'  ", "correct": true}, {"option": "  It can be marked 'public'  ", "correct": false}, {"option": "  It can be marked 'static'  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>static nested class</strong> is correct?</p>", "options": [{"option": "You must have a reference to an instance of the enclosing class in order to instantiate it.  ", "correct": false}, {"option": "It does not have access to non-static members of the enclosing class.  ", "correct": true}, {"option": "Its variables and methods must be static.  ", "correct": false}, {"option": "It must extend the enclosing class.  ", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Func \n    {\n        class TestHack{ }\n    }\n    class HackerEarth \n    {\n        public static void main (String [] args) \n        {\n            Func f = new Func();\n            /* Line 10: Missing statement ? */\n        }\n    }</code></pre>\n\n<p>Which of the following statements, inserted at line 10, creates an instance of TestHack?</p>\n\n<p>\u00a0</p>", "options": [{"option": "Func.TestHack b = new Func.TestHack();   ", "correct": false}, {"option": "Func.TestHack b = f.new TestHack();   ", "correct": true}, {"option": "TestHack b = new f.TestHack();   ", "correct": false}, {"option": "TestHack b = f.new TestHack();   ", "correct": false}], "level": "Hard"}, {"question": "<p>The JDBC-ODBC bridge is ________________.</p>", "options": [{"option": "Three tiered  ", "correct": false}, {"option": "Multithreaded  ", "correct": true}, {"option": "Two tiered", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the correct representation of a method in the <strong>abstract</strong> class?</p>", "options": [{"option": "abstract double area() { }  ", "correct": false}, {"option": "abstract double area()  ", "correct": false}, {"option": "abstract double area();  ", "correct": true}, {"option": "abstract double area(); { }  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following modules is synchronized in Java?</p>", "options": [{"option": "Set    ", "correct": false}, {"option": "LinkedList    ", "correct": false}, {"option": "Vector    ", "correct": true}, {"option": "WeakHashMap    ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the use of an instance of <strong>DataInputStream</strong>?</p>", "options": [{"option": "Converts a binary stream into a character stream", "correct": true}, {"option": "Converts a character stream into a binary stream", "correct": false}, {"option": "Writes data into an output object", "correct": false}, {"option": "Converts a character stream into a buffer stream", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following keywords is used to execute threads one after the other?</p>", "options": [{"option": "synchronize", "correct": false}, {"option": "synchronizable", "correct": false}, {"option": "synchronized", "correct": true}, {"option": "sync", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following can be thrown by using the <strong>throw</strong> keyword in Java?</p>\n<ol>\n<li>Error</li>\n<li>Event</li>\n<li>Object</li>\n<li>Throwable</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n</ol>", "options": [{"option": " 1, 2, 3 and 4 ", "correct": false}, {"option": " 2, 3, 4 and 5 ", "correct": false}, {"option": " 1, 4, 5 and 6 ", "correct": true}, {"option": " 2, 4, 5 and 6 ", "correct": false}], "level": "Medium"}, {"question": "<p>In <strong>nested-if</strong> statements, is the last <strong>else</strong> associated with the nearest <strong>if</strong> without <strong>else</strong>?</p>", "options": [{"option": "True\r\n\t\r\n    ", "correct": true}, {"option": "False\r\n\t    ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is called only once during the run time of an <strong>applet</strong>?</p>", "options": [{"option": "   init()\t   ", "correct": true}, {"option": "   update()\t   ", "correct": false}, {"option": "   start()\t   ", "correct": false}, {"option": "   destroy()   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following StringBuffer methods is used to insert the String <strong>s2</strong> at the position <strong>n</strong> of the string S1?</p>", "options": [{"option": "    s2.insert(s1,n)    ", "correct": false}, {"option": "    s1.insert(n,s2)    ", "correct": true}, {"option": "    s2.insert(n,s1)    ", "correct": false}, {"option": "    s1.insert(s2,n)    ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are constructors for Thread in Java?</p>\n<p>1 Thread(Runnable r, String name)</p>\n<p>2 Thread()</p>\n<p>3 Thread(int priority)</p>\n<p>4 Thread(Runnable r, ThreadGroup g)</p>\n<p>5 Thread(Runnable r, int priority)</p>", "options": [{"option": "     1 and 3\t\r\n     ", "correct": false}, {"option": "     1 and 2\t     ", "correct": true}, {"option": "     2 and 5     ", "correct": false}, {"option": "     2 and 4     ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>         try \n        { \n            int var1 = 0; \n            int var2 = 5 / var1; \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"Exception found\"); \n        } \n        catch (ArithmeticException ae) \n        {\n            System.out.println(\"Arithmetic Exception found\"); \n        } \n        System.out.println(\"finished\");\n</code></pre>", "options": [{"option": "finished\t", "correct": false}, {"option": "Compilation failure", "correct": true}, {"option": "Exception  found", "correct": false}, {"option": "Arithmetic Exception  found", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n        {  \n            public static void main(String [] args) \n            {\n                try \n                {\n                    hackMethod();  \n                    System.out.print(\"H\"); \n                }  \n                catch (Exception ex) \n                {\n                    System.out.print(\"A\");  \n                } \n                finally \n                {\n                    System.out.print(\"C\"); \n                } \n                System.out.print(\"K\"); \n            }  \n            public static void hackMethod() \n            {\n                throw new Error(); \n            } \n        }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HACK", "correct": false}, {"option": "Compilation failure", "correct": false}, {"option": "C is printed before exiting with an error message", "correct": true}, {"option": "AC is printed before exiting with an error message      ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth\n        {  \n            public static void main(String [] args) \n            {\n                try \n                {\n                    hackMethod();  \n                    System.out.print(\"H\");  \n                } \n                catch (RuntimeException ex) \n                { \n                    System.out.print(\"A\"); \n                } \n                catch (Exception ex1) \n                { \n                    System.out.print(\"C\"); \n                } \n                finally \n                {\n                    System.out.print(\"K\"); \n                } \n                System.out.print(\"E\"); \n            } \n            public static void hackMethod() \n            { \n                throw new RuntimeException(); \n            } \n        }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HC\r\n    ", "correct": false}, {"option": "AKE", "correct": true}, {"option": "AC", "correct": false}, {"option": "HACK   ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth\n        {\n            public static void languages () \n            {\n                System.out.print(\"languages \");\n                throw new RuntimeException();\n            }\n            public static void main(String [] args) \n            {\n                try \n                {\n                    System.out.print(\"programming \");\n                    languages();\n                }\n                catch (Exception re ) \n                {\n                    System.out.print(\"java \");\n                }\n                finally \n                {\n                    System.out.print(\"scala \");\n                }\n                System.out.println(\"python \");\n            }\n        }\n</code></pre>", "options": [{"option": "programming languages java", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "programming languages RuntimeException java python", "correct": false}, {"option": "programming languages java scala python   ", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>        class HackerEarth \n        {  \n            public static void func1() throws Exception \n            {\n                try /* Line 5 */\n                {\n                    throw new Exception(); /* Line 7 */\n                } \n                finally /* Line 9 */\n                {\n                    System.out.print(\"HackerEarth \"); /* Line 11 */\n                } \n            } \n            public static void main(String args[]) \n            {\n                try \n                {\n                    func1();  \n                } \n                catch (Exception e) /* Line 20 */\n                {\n                    System.out.print(\"Hackathons \"); \n                } \n                System.out.print(\"Challenges\"); /* Line 24 */\n            } \n        }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HackerEarth", "correct": false}, {"option": "Hackathons Challenges", "correct": false}, {"option": "HackerEarth Hackathons Challenges", "correct": true}, {"option": "Compilation fails     ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static void Method() {\n\n    } \n    public static void main(String [] args){\n        try{\n            Method();\n            System.out.print(\"H\");\n        }catch (Exception ex) {\n            System.out.print(\"A\");\n        } finally {\n            System.out.print(\"C\");\n        }\n        System.out.print(\"K\");\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HC\t\r\n    ", "correct": false}, {"option": "HCK ", "correct": true}, {"option": "AC    ", "correct": false}, {"option": "HACK", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:\n</p><pre class=\"prettyprint\"><code>        public class X \n        {  \n            public static void main(String [] args) \n            {\n                try \n                {\n                    badMethod(); \n                    System.out.print(\"A\"); \n                } \n                catch (Exception ex) \n                {\n                    System.out.print(\"B\"); \n                } \n                finally /* Line 14 */\n                {\n                    System.out.print(\"C\"); \n                }  \n                System.out.print(\"D\"); \n            } \n            public static void badMethod() \n            {\n                throw new RuntimeException(); \n            } \n        }\n</code></pre><p></p>", "options": [{"option": "     AB\t\r\n     ", "correct": false}, {"option": "     ABC\t     ", "correct": false}, {"option": "     BC     ", "correct": false}, {"option": "     BCD     ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n\n    public static void main(String args[]){\n        try {\n            System.out.print(\"Java \");\n        }finally {\n            System.out.println(\"Programming Languages\");\n        }\n    }\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The program will not compile because no exceptions are specified", "correct": false}, {"option": "The program will not compile because no catch clauses are specified", "correct": false}, {"option": "Java", "correct": false}, {"option": "Java Programming Languages", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:\n</p><pre class=\"prettyprint\"><code>        public class MyProgram \n        {\n            public static void main(String args[])\n            {\n                try \n                {\n                    System.out.print(\"Hello world \");\n                }\n                finally \n                {\n                    System.out.println(\"Finally executing \");\n                }\n            }\n        }\n</code></pre><p></p>", "options": [{"option": "    Hello world Finally executing    ", "correct": true}, {"option": "    Nothing. The program will not compile because no exceptions are specified.\r\n\r\n    ", "correct": false}, {"option": "    Hello world.    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.    ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>class hack extends Exception { } \nclass earth extends hack { } /* Line 2 */\nclass HackerEarth \n        {  \n            public static void main(String args[]) \n            { \n                try \n                {  \n                    throw new earth(); /* Line 9 */\n                } \n                catch (hack e0) /* Line 11 */\n                {\n                    System.out.println(\"hack caught\"); \n                } \n                catch (Exception e) \n                {\n                    System.out.println(\"exception caught\");  \n                } \n            } \n        }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hack caught", "correct": true}, {"option": "exception caught", "correct": false}, {"option": "Compilation fails because of an error at line 9   ", "correct": false}, {"option": "Compilation fails because of an error at line 2  ", "correct": false}], "level": "Medium"}, {"question": "<p>In the following Java program, when is the B object, created in line 3, eligible for garbage collection:\n</p><pre class=\"prettyprint\"><code>void start() {  \n            A a = new A(); \n            B b = new B(); \n            a.s(b);  \n            b = null; /* Line 5 */\n            a = null;  /* Line 6 */\n            System.out.println(\"start completed\"); /* Line 7 */\n        } \n</code></pre><p></p>", "options": [{"option": "     after line 5\r\n     ", "correct": false}, {"option": "     after line 6\r\n     ", "correct": false}, {"option": "     after line 7\r\n     ", "correct": false}, {"option": "     Can not be determined", "correct": true}], "level": "Medium"}, {"question": "<p>In the following Java program, where will the <strong>garbage collector</strong> most likely be invoked:</p>\n\n<pre class=\"prettyprint\"><code>class TestHack \n        { \n            public static void main(String args[]) \n            {\n                TestHack t = new TestHack(); \n                t.func(); /* Line 6 */\n            } \n            Object func() \n            {\n                Object x = new Object(); \n                Object [] y = new Object[1]; \n                y[0] = x; \n                x = null; \n                return y[0]; \n            } \n        }\n</code></pre>", "options": [{"option": "After line 9", "correct": false}, {"option": "After line 10", "correct": false}, {"option": "After line 11", "correct": false}, {"option": "Garbage collector never invoked in func()   ", "correct": true}], "level": "Easy"}, {"question": "<p>In the following Java program, when is the <code>Bar</code> object, created on line 6, eligible for <strong>garbage collection</strong>:</p>\n\n<pre class=\"prettyprint\"><code>class TestHack {} \n\nclass Hack {  \n\n    TestHack funcB() {\n        TestHack b = new TestHack(); /* Line 6 */\n        return b; /* Line 7 */\n    }\n\n    public static void main (String args[]) {\n        Hack h = new Hack();  /* Line 11 */\n        TestHack funcA = h.funcB();  /* Line 12 */\n        System.out.println(\"funcA\"); \n        funcA = new TestHack(); /* Line 14 */\n        System.out.println(\"finishing\"); /* Line 15 */\n    } \n}\n</code></pre>", "options": [{"option": "After line 12", "correct": false}, {"option": "After line 14", "correct": true}, {"option": "After line 7, when funcB()  completes", "correct": false}, {"option": "After line 15, when main() completes     ", "correct": false}], "level": "Easy"}, {"question": "<p>In the following Java program, how many objects are eligible for <strong>garbage collection</strong> after line 8 runs:</p>\n\n<pre class=\"prettyprint\"><code>class Hack {\n\n    public static void main(String [] args) {\n\n        Hack h1 = new Hack();\n        Hack h2 = funcA(h1); /* Line 6 */\n        Hack h3 = new Hack();\n        h2 = h3; /* Line 8 */\n        Output();\n    }\n\n    static void Output(){\n\n    } \n\n    static Hack funcA(Hack a) {\n        a = new Hack();\n        return a;\n    }\n}   \n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1", "correct": true}], "level": "Easy"}, {"question": "<p>In the following Java program, when is the <strong>Float</strong> object, created in line 3, eligible for <strong>garbage collection</strong>:\n</p><pre class=\"prettyprint\"><code>public Object m() \n    {  \n        Object o = new Float(3.14F); \n\n        Object [] oa = new Object[l];\n        oa[0] = o; /* Line 5 */\n        o = null;  /* Line 6 */\n        oa[0] = null; /* Line 7 */\n        return o; /* Line 8 */\n    }\n</code></pre><p></p>", "options": [{"option": "   Just after line 5\r\n   ", "correct": false}, {"option": "   Just after line 7\t   ", "correct": true}, {"option": "   Just after line 6   ", "correct": false}, {"option": "   Just after line 8   ", "correct": false}], "level": "Easy"}, {"question": "<p>In the following Java program, how many objects are eligible for garbage collection after line 11 runs:\n</p><pre class=\"prettyprint\"><code>class X2 \n    {\n        public X2 x;\n        public static void main(String [] args) \n        {\n            X2 x2 = new X2();  /* Line 6 */\n            X2 x3 = new X2();  /* Line 7 */\n            x2.x = x3;\n            x3.x = x2;\n            x2 = new X2();\n            x3 = x2; /* Line 11 */\n            doComplexStuff();\n        }\n    }\n</code></pre><p></p>", "options": [{"option": "   0\r\n   ", "correct": false}, {"option": "   2   ", "correct": true}, {"option": "   1   ", "correct": false}, {"option": "   3   ", "correct": false}], "level": "Medium"}, {"question": "<p>In the following Java program, how many objects are eligible for garbage collection after line 11 runs:\n</p><pre class=\"prettyprint\"><code>class X2 \n    {\n      public X2 x;\n      public static void main(String [] args) \n      {\n         X2 x2 = new X2();  /* Line 6 */\n         X2 x3 = new X2();  /* Line 7 */\n         x2.x = x3;\n         x3.x = x2;\n         x2 = new X2();\n         x3 = x2; /* Line 11 */\n         doComplexStuff();\n      }\n    }\n</code></pre><p></p>", "options": [{"option": "   0\r\n   ", "correct": false}, {"option": "   2   ", "correct": true}, {"option": "   1   ", "correct": false}, {"option": "   3   ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is used to destroy an object <code>x</code>?</p>", "options": [{"option": "x.delete()", "correct": false}, {"option": "x.finalize()", "correct": false}, {"option": "Only the garbage collection system can destroy an object", "correct": true}, {"option": "Runtime.getRuntime().gc()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following types of access is specified for a <strong>subclass</strong> in a package such that it can access the members of any <strong>superclass</strong>?</p>", "options": [{"option": "Public   ", "correct": false}, {"option": "Private   ", "correct": false}, {"option": "Protected   ", "correct": true}, {"option": "Transient   ", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following Java program:</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code> class TestHack \n    { \n        public void Disp() \n        {\n            //Line 5 \n        } \n        public class Output { } \n\n        public static void main(String[] argv) \n        {\n            TestHack ot = new TestHack(); \n            //Line 10\n        } \n    } \n</code></pre>\n\n<p>Which of the following code fragments, when inserted, will allow compilation?</p>\n\n<p>\u00a0</p>", "options": [{"option": "new Inner(); //At line 5", "correct": false}, {"option": "new Inner(); //At line 10   ", "correct": false}, {"option": "new ot.Inner(); //At line 10  ", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, prototype of the default <strong>constructor</strong> is _______________________________.</p>", "options": [{"option": "Test( )\t  ", "correct": false}, {"option": "Test(void)", "correct": false}, {"option": "public Test( )\t  ", "correct": true}, {"option": "public Test(void)  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following causes a compiler error in C?</p>", "options": [{"option": "Integer results[] = {new Integer(3), new Integer(5), new Integer(8)};  ", "correct": false}, {"option": "boolean results[] = new boolean [] {true, false, true};  ", "correct": false}, {"option": "String cats[] = {\"Fluffy\", \"Spot\", \"Zeus\"};  ", "correct": false}, {"option": "int[][] scores = {2, 7, 6}, {9, 3, 45};  ", "correct": true}, {"option": "int[] scores = {3, 5, 7};  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, what is the largest valid ReturnType of methodA:</p>\n<pre class=\"prettyprint\"><code>    class ReturnIt \n    { \n        ReturnType methodA(byte x, double y) \n        { \n            return (long)x / y * 2; \n        } \n    }\n</code></pre>", "options": [{"option": "int    ", "correct": false}, {"option": "byte    ", "correct": false}, {"option": "long    ", "correct": false}, {"option": "double    ", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a valid declaration?</p>", "options": [{"option": "protected int a;", "correct": false}, {"option": "transient int b = 3;", "correct": false}, {"option": "private synchronized int e;", "correct": true}, {"option": "volatile int d;  ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, to create an instance of a new map that has an iteration order same as that of an existing instance of a map, the _____________________________ implementation of the <strong>map</strong> interface is used for the new instance.</p>", "options": [{"option": "TreeMap  ", "correct": false}, {"option": "HashMap ", "correct": false}, {"option": "LinkedHashMap  ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following classes does not override the <strong><code>equals()</code></strong> and <strong><code>hashCode()</code></strong> methods in Java?</p>", "options": [{"option": "java.lang.String\t  ", "correct": false}, {"option": "java.lang.Double\r\n  ", "correct": false}, {"option": "java.lang.StringBuffer  ", "correct": true}, {"option": "java.lang.Character  ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the size of the ____________________________ collection class can be increased or decreased but the methods of this class are not <strong>synchronized</strong>.</p>", "options": [{"option": "java.util.HashSet  ", "correct": false}, {"option": "java.util.LinkedHashSet  ", "correct": false}, {"option": "java.util.List  ", "correct": false}, {"option": "java.util.ArrayList     ", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the interfaces is capable of the following:</p>\n<ul>\n<li>Store elements in a collection that guarantee that no duplicates </li>\n<li>Accessing elements in the natural order</li>\n</ul>", "options": [{"option": "java.util.Map ", "correct": false}, {"option": "java.util.Set ", "correct": true}, {"option": "java.util.List ", "correct": false}, {"option": "java.util.Collection", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following interface does <strong>java.util.Hashtable</strong> class implement in Java?</p>", "options": [{"option": "Java.util.Collection  ", "correct": false}, {"option": "Java.util.HashTable  ", "correct": false}, {"option": "Java.util.Map  ", "correct": true}, {"option": "Java.util.List  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the elements of the ____________________________ <strong>collection</strong> class are associated with key values and the objects of this class are retrieved in a FIFO sequence.</p>", "options": [{"option": "java.util.ArrayList\t\r\n  ", "correct": false}, {"option": "java.util.HashMap  ", "correct": false}, {"option": "java.util.LinkedHashMap  ", "correct": true}, {"option": "java.util.TreeMap  ", "correct": false}], "level": "Easy"}, {"question": "<p>Why are functions declared to return a reference type?</p>", "options": [{"option": "The information being returned is large enough an object that returning a reference is more efficient than returning a copy.   ", "correct": false}, {"option": "The type of the function must be an R-value.\r\n.   ", "correct": false}, {"option": "Both of these\r\n   ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In C, the size of the dynamically allocated array is increased.</p>", "options": [{"option": "True    ", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>In C, for the <strong>string</strong> functions to work efficiently, the strings must be terminated with <strong>'\\0'</strong>.</p>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>In C, the <strong>FILE</strong> is a structure declared as <strong>typedef</strong> in the _____________ header file.</p>", "options": [{"option": "Stdio.h ", "correct": true}, {"option": "Conio.h ", "correct": false}, {"option": "Stdlib.h ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>\"i'm a lasagna hog\".split(\"\").reverse().join(\"\");\n</code></pre>", "options": [{"option": "\"i'm a lasagna hog\"", "correct": false}, {"option": "\"goh angasal a m'i\"", "correct": true}, {"option": "\"m'i a angasal goh\"", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>~~3.14\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.1", "correct": false}, {"option": "3", "correct": true}, {"option": "3.2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <strong>window.foo</strong> in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>( window.foo || ( window.foo = \"bar\" ) )\n</code></pre>", "options": [{"option": "'bar' if window.foo is false else it retains its value", "correct": false}, {"option": "'bar' if window.foo is true", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code> var var1 = \"JavaScript\";\n(function()\n { \n    var var2 = \" Scripting Language\";\n    alert(var1 + var2); \n })();\nalert(var1 + var2);</code></pre>", "options": [{"option": "JavaScript Scripting Language", "correct": false}, {"option": "Reference Error: bar is not defined", "correct": false}, {"option": "Error: No output", "correct": false}, {"option": "Options (1) and (2)\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>What is the value of <code>foo.length</code> in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var foo = [];\nfoo.push(1);\nfoo.push(2);\nfoo.push(3);\n</code></pre>", "options": [{"option": "1  ", "correct": false}, {"option": "2  ", "correct": false}, {"option": "3  ", "correct": true}, {"option": "0  ", "correct": false}], "level": "Easy"}, {"question": "<p>If the <strong>doctype</strong> declaration is not included in a document in JavaScript, ____________________________________.</p>", "options": [{"option": "The page is not rendered correctly", "correct": false}, {"option": "The page may not be rendered correctly in some cases", "correct": true}, {"option": "There is no effect on page rendering", "correct": false}, {"option": "The page is not rendered", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the difference between <strong><code>==</code></strong> and <strong><code>===</code></strong> operators?</p>", "options": [{"option": "== performs strict comparison and === performs type converting comparison", "correct": false}, {"option": "=== performs strict comparison and == performs type converting comparison", "correct": true}, {"option": "Both the operators perform strict comparison.", "correct": false}, {"option": "Both the operators perform type converting comparison.", "correct": false}], "level": "Easy"}, {"question": "<p>Who developed the JavaScript programming language?</p>", "options": [{"option": "Brendan Eich ", "correct": true}, {"option": "Tim Duncan ", "correct": false}, {"option": "Bjarne Stroustrup ", "correct": false}, {"option": "Dennis Ritchie ", "correct": false}], "level": "Easy"}, {"question": "<p>What is JavaScript used for?</p>", "options": [{"option": "Server-side web development ", "correct": false}, {"option": "Client-side web development ", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following companies is credited with the development of JavaScript?</p>", "options": [{"option": "Microsoft ", "correct": false}, {"option": "IBM ", "correct": false}, {"option": "Google ", "correct": false}, {"option": "Netscape", "correct": true}], "level": "Easy"}, {"question": "<p>JavaScript was originally called ___________________.</p>", "options": [{"option": "Oak", "correct": false}, {"option": "Mocha", "correct": true}, {"option": "JScript", "correct": false}, {"option": "JSL", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these pop-up boxes is used to verify something from the user?</p>", "options": [{"option": "alert(\"Write some text here\") ;", "correct": false}, {"option": "confirm(\"Write some text here\");", "correct": true}, {"option": "prompt(\"Write some text here\",\"Write the default value here\") ;", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following pop up boxes is used to confirm that the information comes from the user?</p>", "options": [{"option": "alert(\"Write some text here\") ", "correct": true}, {"option": "confirm(\"Write some text here\") ", "correct": false}, {"option": "prompt(\"Write some text here\",\"Write the default value here\") ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following commands is used to set up the window to capture all the <strong>Click</strong> events?</p>", "options": [{"option": "window.captureEvents(Event.CLICK);", "correct": true}, {"option": "window.handleEvents (Event.CLICK);", "correct": false}, {"option": "window.routeEvents(Event.CLICK );", "correct": false}, {"option": "window.raiseEvents(Event.CLICK );", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following window object attributes is tainted?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Protocol", "correct": false}, {"option": "Default status", "correct": true}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, ____ is an object of the target language data type that encloses an object of the source language.</p>", "options": [{"option": "a wrapper ", "correct": true}, {"option": "a link ", "correct": false}, {"option": "a cursor ", "correct": false}, {"option": "a form ", "correct": false}], "level": "Easy"}, {"question": "<p>Which type of wrapper is created by the runtime engine when a JavaScript object is sent to a Java code?</p>", "options": [{"option": "Jobject", "correct": false}, {"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following classes provides an interface to call JavaScript methods and inspect JavaScript properties?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following <strong>wrapped</strong> Java arrays can be retrieved in JavaScript?</p>", "options": [{"option": "JavaArray", "correct": true}, {"option": "JavaClass", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following exceptions of JavaScript exists in a Java code?</p>", "options": [{"option": "netscape.javascript.JSException", "correct": true}, {"option": "netscape.javascript.JSObject", "correct": false}, {"option": "netscape.plugin.JSException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>If the console opens automatically due to a JavaScript error, which of the following statements is added to the <strong>prefs.js</strong> file?</p>", "options": [{"option": "user_pref(\"javascript.console.open_on_error\", true);", "correct": true}, {"option": "user_pref(\"javascript.console.open_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", false);", "correct": false}, {"option": "user_pref(\" javascript.console.open_on_error\", false);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, if an error occurs while opening a dialog box, which of the following statements is added to the <strong>test.js</strong> file?</p>", "options": [{"option": "user_test(\"javascript.classic.error_alerts\", true);", "correct": true}, {"option": "user_test(\"javascript.classic.error_alerts \", false);", "correct": false}, {"option": "user_test(\"javascript.console.open_on_error \", false);", "correct": false}, {"option": "user_test(\"javascript.console.open_on_error \", true);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the syntax of the <strong>blur</strong> method in a <strong>button</strong> object?</p>", "options": [{"option": "blur()", "correct": true}, {"option": "blur(contrast)", "correct": false}, {"option": "blur(value)", "correct": false}, {"option": "blur(depth)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the correct representation of the <strong>captureEvents</strong> method for a <strong>document</strong> object?</p>", "options": [{"option": "captureEvents(eventVal)", "correct": false}, {"option": "captureEvents(args eventType)", "correct": false}, {"option": "captureEvents(eventType)", "correct": true}, {"option": "captureEvents()", "correct": false}], "level": "Hard"}, {"question": "<p>_________________________ is the representation of the <strong>close</strong> method for a <strong>document</strong> object.</p>", "options": [{"option": "close(object)    ", "correct": false}, {"option": "close(doc)    ", "correct": false}, {"option": "close(val)    ", "correct": false}, {"option": "close()    ", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these statements is used to print the following output:</p>\n<pre class=\"prettyprint\"><code>Holla you!\n</code></pre>", "options": [{"option": "document.write (\"Holla you!\") ", "correct": true}, {"option": "print (\"Holla you!\") ", "correct": false}, {"option": "print.write (\"Holla you!\") ", "correct": false}, {"option": "script.write (\"Holla you!\") ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the correct representation of the <strong>for</strong> loop?</p>", "options": [{"option": "for(i=0; i<=5; i++)", "correct": true}, {"option": "for(i<=5; i++)", "correct": false}, {"option": "for i = 1 to 5", "correct": false}, {"option": "for(i=0; i<=5)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>client-side</strong> object?</p>", "options": [{"option": "Database  ", "correct": false}, {"option": "Cursor  ", "correct": false}, {"option": "Client  ", "correct": false}, {"option": "FileUpload  ", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not an operator?</p>", "options": [{"option": "new ", "correct": false}, {"option": "this ", "correct": true}, {"option": "delete ", "correct": false}, {"option": "typeof ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functions evaluates JavaScript code that is represented as a string?</p>", "options": [{"option": "eval ", "correct": true}, {"option": "parseInt ", "correct": false}, {"option": "parseString", "correct": false}, {"option": "exec", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to declare the <strong>language</strong> attribute?</p>", "options": [{"option": "<language=\"JavaScriptVersion\">", "correct": false}, {"option": "<script language=\"JavaScriptVersion\">", "correct": false}, {"option": "<script language=\"JavaScriptVersion\"> JavaScript statements </script>", "correct": true}, {"option": "<script language=\"JavaScriptVersion\"!> JavaScript statements </script>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to refer an external script called <strong>xyz.js</strong>?</p>", "options": [{"option": "<script href=\"xyz.js\">", "correct": false}, {"option": "<script name=\"xyz.js\">", "correct": false}, {"option": "<script src=\"xyz.js\">", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following <strong>image maps</strong> is used?</p>", "options": [{"option": "Server-side ", "correct": false}, {"option": "Client-side", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following <strong>navigator object</strong> attributes is the same in the <strong>Netscape</strong> and <strong>Internet Explorer</strong> browsers?</p>", "options": [{"option": "navigator.appCodeName", "correct": true}, {"option": "navigator.appName", "correct": false}, {"option": "navigator.appVersion", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to define an array?</p>", "options": [{"option": "var txt = new Array(1:\"tim\",2:\"kim\",3:\"jim\")", "correct": false}, {"option": "var txt = new Array:1=(\"tim\")2=(\"kim\")3=(\"jim\")", "correct": false}, {"option": "var txt = new Array(\"tim\",\"kim\",\"jim\")", "correct": true}, {"option": "var txt = new Array=\"tim\",\"kim\",\"jim\"", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to create a <strong>multiline</strong> comment?</p>", "options": [{"option": " //This comment has\r\nmore than one line//", "correct": false}, {"option": "/*This comment has\r\nmore than one line*/", "correct": true}, {"option": "*/This comment has\r\nmore than one line*/", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to round off 7.25 to the nearest integer?</p>", "options": [{"option": "Math.round(7.25)", "correct": true}, {"option": "Math.rnd(7.25)", "correct": false}, {"option": "round(7.25)", "correct": false}, {"option": "rnd(7.25)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to return the larger of the two numbers <code>x</code> and <code>y</code>?</p>", "options": [{"option": "Math.high(x,y)", "correct": false}, {"option": "Math.greater(x,y)", "correct": false}, {"option": "Math.ceil(x,y)", "correct": false}, {"option": "Math.max(x,y)", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to set the text in the Status bar of the browser?</p>", "options": [{"option": "status(put your message here?)", "correct": false}, {"option": "window.status = \"put your message here\"", "correct": true}, {"option": "statusbar = put your message here?", "correct": false}, {"option": "window.status(put your message here?)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to find the name of the client's browser?</p>", "options": [{"option": "navigator.name", "correct": false}, {"option": "navigator.appName", "correct": true}, {"option": "client.browserName", "correct": false}, {"option": "navigator.browser", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is a <strong>reserved keyword</strong>?</p>", "options": [{"option": "pointer", "correct": false}, {"option": "native", "correct": true}, {"option": "subclasses", "correct": false}, {"option": "array", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements can be used to fill <strong><em>Line 3</em></strong> in the following Java code:</p>\n<pre class=\"prettyprint\"><code>public interface Foo \n\n{ \n    int a = 6; /* Line 3 */\n}  \n</code></pre>\n<ol>\n<li>\n<p>final int a = 6;</p>\n</li>\n<li>\n<p>public int a = 6;</p>\n</li>\n<li>\n<p>static int a = 6;</p>\n</li>\n<li>\n<p>abstract int a = 6;</p>\n</li>\n<li>\n<p>volatile int a = 6;</p>\n</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 5", "correct": false}, {"option": "3, 4, and 5", "correct": false}, {"option": "4, 5, and 1", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration in Java?</p>", "options": [{"option": "public double methodx();", "correct": true}, {"option": "public final double methodx();", "correct": false}, {"option": "static void methodx(double d1);", "correct": false}, {"option": "protected void methodx(double d1);", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is true in Java?</p>", "options": [{"option": "AbstractSet extends AbstractClass", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": true}, {"option": "HashSet extends AbstractCollection", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements is true in Java?</p>", "options": [{"option": "The default char data type is character.", "correct": false}, {"option": "The default integer data type is int and real data type is double.", "correct": true}, {"option": "The default integer data type is long and real data type is float.", "correct": false}, {"option": "The default integer data type is int and real data type is char.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements regarding an <strong>anonymous</strong> inner class is false?</p>", "options": [{"option": "It can extend exactly one class.", "correct": false}, {"option": "It can extend exactly two classes and can implement more than one interfaces.", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is incorrect?</p>", "options": [{"option": "Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms.", "correct": false}, {"option": "Assignment operators run faster than their equivalent long forms.", "correct": false}, {"option": "Assignment operators can be used only with numeric and character data type.", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements, when placed in a class other than the <code>HackerEarth</code> or <code>TestHack</code> class, instantiate an instance of the <strong>nested</strong> class in this Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static class TestHack \n    {\n        public static void func() { }\n    }\n}\n</code></pre>", "options": [{"option": "HackerEarth.TestHack m = new HackerEarth.TestHack();", "correct": true}, {"option": "HackerEarth.TestHack mi = new TestHack();", "correct": false}, {"option": "TestHack mi = new HackerEarth.TestHack();", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about\u00a0a <strong>static</strong> nested class in Java\u00a0is not true?</p>\n\n<p>\u00a0</p>", "options": [{"option": "It does not have access to non static members of the enclosing class.", "correct": false}, {"option": "One must not have a reference to an instance of the enclosing class in order to instantiate it.", "correct": true}, {"option": "It's variables and methods must be static.", "correct": false}, {"option": "None of these\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is inserted at the end of this Java code such that it compiles successfully:</p>\n<pre class=\"prettyprint\"><code>interface Doadd\n\n{\n    double getArea(int rad); \n}\n\ninterface MathPlus \n\n{\n    double getVol(int b, int h);\n\n}\n/* Missing Statements ? */\n</code></pre>\n<ol>\n<li>\n<p>class AllMath extends DoAdd { double getArea(int r); }</p>\n</li>\n<li>\n<p>interface AllMath implements MathPlus { double getVol(int x, int y); }</p>\n</li>\n<li>\n<p>interface AllMath extends DoAdd { float getAvg(int h, int l); }</p>\n</li>\n<li>\n<p>class AllMath implements MathPlus { double getArea(int rad); }</p>\n</li>\n<li>\n<p>abstract class AllMath implements DoAdd, MathPlus { public double getArea(int rad) { return rad * rad * 3.14; } }</p>\n</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "3, 5", "correct": true}, {"option": "2", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is the correct declaration of a <strong>String</strong> in Java?</p>", "options": [{"option": "String s1 = null;", "correct": true}, {"option": "String s2 = ?null?;", "correct": false}, {"option": "String s3 = (String) 'abc';", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>Java hotspot virtual machine </strong>is true?</p>", "options": [{"option": "It is an additional virtual machine that improves the performance of an application.", "correct": true}, {"option": "It is an internal device that converts source code into byte code.", "correct": false}, {"option": "It is a virtual machine that detects runtime exceptions.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a not <strong>command-line</strong> tool in Java?</p>", "options": [{"option": "java", "correct": false}, {"option": "javaw", "correct": false}, {"option": "javapath", "correct": true}, {"option": "javadoc", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is not true?</p>", "options": [{"option": "The Java platform is faster than the actual CPU platform.", "correct": true}, {"option": "javac is compiler tool.", "correct": false}, {"option": "The java command launches an application.", "correct": false}, {"option": "javadoc is a documentation tool.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following commands is used to create and start this thread:</p>\n<pre class=\"prettyprint\"><code>public class MyThread implements Runnable \n\n{\n\n    public void run() \n    {\n        // some code here\n    }\n}\n</code></pre>", "options": [{"option": "(new Runnable(MyThread)).start();", "correct": false}, {"option": "(new Thread(MyThread)).run();", "correct": false}, {"option": "(new Thread(new MyThread())).start();", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a valid declaration of an array:</p>\n<ol>\n<li>public int x [ ]</li>\n<li>static int [ ] x</li>\n<li>public [ ] int x</li>\n<li>private int x [3]</li>\n<li>private int [3] x [ ]</li>\n</ol>", "options": [{"option": "1, 3", "correct": false}, {"option": "4, 5", "correct": false}, {"option": "1, 2 ", "correct": true}, {"option": "2, 5", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about\u00a0<strong>synchronization\u00a0</strong>is true?</p>", "options": [{"option": "A method that allows more than one thread to access any information required.", "correct": false}, {"option": "A process by which no thread is able to access the same shared resource simultaneously.", "correct": false}, {"option": "A process by which a method is able to access many different threads simultaneously.", "correct": false}, {"option": "A process of handling situations where two or more threads need access to a shared resource.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>access modifiers</strong> allows members of a class to have access to members of another class within the same package?</p>", "options": [{"option": "abstract ", "correct": false}, {"option": "protected ", "correct": false}, {"option": "default access ", "correct": true}, {"option": "synchronized\t ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>        public static void main(String[] args) \n    {\n        Demo obj = new Demo() \n        {\n            public int hashCode() \n            {\n                return 40;\n            }\n        }; \n        System.out.println(obj.hashCode()); \n    }\n</code></pre>", "options": [{"option": "40 ", "correct": true}, {"option": "Runtime Exception ", "correct": false}, {"option": "Compile Error at line 5 ", "correct": false}, {"option": "Compile Error at line 2 ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java,  the <strong>Serializable</strong> interface has ________________ methods.</p>", "options": [{"option": "Three ", "correct": false}, {"option": "Zero", "correct": false}, {"option": "Infinite ", "correct": true}, {"option": "Two", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following is not supported?</p>", "options": [{"option": "Signed numbers ", "correct": false}, {"option": "Unsigned numbers ", "correct": true}, {"option": "Signed right shifts ", "correct": false}, {"option": "Unsigned right shifts ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these statements about the <strong>new</strong> operator is not true?</p>", "options": [{"option": "'new' is a reserved keyword in Java.", "correct": false}, {"option": "It dynamically allocates memory.", "correct": false}, {"option": "If the 'new' operator is not able to allocate memory for an object, a run time exception will occur.", "correct": false}, {"option": "With the help of the 'delete' keyword, we can release the memory space allocated by the 'new' operator.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following\u00a0is used to create an instance of an array?</p>", "options": [{"option": "int[ ] i = new int[15];", "correct": false}, {"option": "int i[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };", "correct": false}, {"option": "char[ ] c = \"Some String\";", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is a valid <strong>class-level</strong> variable declaration in Java?</p>", "options": [{"option": "protected int i;", "correct": false}, {"option": "transient int j = 3;", "correct": false}, {"option": "private synchronized int k;", "correct": true}, {"option": "volatile int l;", "correct": false}], "level": "Easy"}, {"question": "<p>What is the error in the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class cube \n{\n    int w;\n    int h;\n    int l;\n} \nclass example \n{\n   public static void main(String args[]) \n     {        \n           cube ob=new cube();\n           System.out.println(super.w);\n     } \n }\n\t   \n\t   </code></pre>", "options": [{"option": "No constructors available in the class for default initialization of the value", "correct": false}, {"option": "None of the methods in the class initialize the values", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the\u00a0<strong>default priority\u00a0</strong>number of the thread in given code:</p>\n\n<pre class=\"prettyprint\"><code>class example {\n            public static void main(String args[]) {\n                Thread t = Thread.currentThread();\n                System.out.println(t);        \n            }\n        }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is not true?</p>", "options": [{"option": "Two or more methods with the same name can be differentiated on the basis of data types of their parameters.", "correct": false}, {"option": "Two or more methods having the same name can be differentiated on the basis of number of parameters.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "If a method is returning a value, then the calling statement must have a variable to store that value.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods belong to the <strong>Object</strong> class:</p>\n\n<ol>\n\t<li>\n\t<p>notify();</p>\n\t</li>\n\t<li>\n\t<p>notifyAll();</p>\n\t</li>\n\t<li>\n\t<p>isInterrupted();</p>\n\t</li>\n\t<li>\n\t<p>synchronized();</p>\n\t</li>\n</ol>", "options": [{"option": "1, 3\t", "correct": false}, {"option": "2, 4", "correct": false}, {"option": "1, 2", "correct": true}, {"option": "2, 3", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following does not stop the execution of a thread?</p>", "options": [{"option": "Calling the SetPriority() method on a Thread object", "correct": false}, {"option": "Calling notify() method on an object", "correct": true}, {"option": "Calling the wait() method on an object", "correct": false}, {"option": "Calling read() method on an InputStream object", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following packages is used for handling <strong>security</strong> issues in a Java program?</p>", "options": [{"option": "java.security", "correct": true}, {"option": "java.lang.sec", "correct": false}, {"option": "java.awt.image", "correct": false}, {"option": "java.io.lang.security", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the following loop is valid:</p>\n<pre class=\"prettyprint\"><code>while(1)\n{\n\n//some code\n\n}\n</code></pre>", "options": [{"option": "False", "correct": true}, {"option": "True", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is defined by a class for implementing the <strong>java.lang.Runnable interface</strong>?</p>", "options": [{"option": "void run()", "correct": false}, {"option": "public void run()", "correct": true}, {"option": "public void start()", "correct": false}, {"option": "void run(int x)", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is a not a part of <strong>Abstract Window Toolkit</strong> (AWT) ?</p>", "options": [{"option": "volatile()", "correct": false}, {"option": "transient()", "correct": false}, {"option": "notify()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>The following method in Java is properly <strong>synchronized</strong> and called from a thread <em>A</em> on an object <em>B</em>:</p>\n\n<pre class=\"prettyprint\"><code>wait(5000);\n</code></pre>\n\n<p>After calling this method, thread <em>A</em> gets another turn at the CPU ___________________________________.</p>\n\n<p>\u00a0</p>", "options": [{"option": "Five seconds after thread A is notified", "correct": false}, {"option": "After the lock on B is released, or after five seconds", "correct": false}, {"option": "After thread A is notified or after five seconds", "correct": true}, {"option": "Five seconds after lock B is released", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is not used by <strong>character</strong> streams for input and output operations?</p>", "options": [{"option": "InputStream", "correct": false}, {"option": "ReadStream", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following actions will be performed by <strong>finally</strong> in the below code?</p>\n\n<pre class=\"prettyprint\"><code>try {\n//some code\nreturn();\n}\n\nfinally {\n//some code\n}\n</code></pre>", "options": [{"option": "Nothing, as it exits the program", "correct": false}, {"option": "'finally' always gets executed", "correct": true}, {"option": "Every try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, does the block\u00a0<strong>finally\u00a0</strong>get executed in the following code:</p>\n\n<pre class=\"prettyprint\"><code>try {\n    //some code\n    System.exit();\n}\n\nfinally {\n    //some code\n}\n</code></pre>", "options": [{"option": "No, as it exits the program", "correct": true}, {"option": "finally always gets executed", "correct": false}, {"option": "A try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The value of <em>a</em> in the following Java code is _______________.</p>\n<pre class=\"prettyprint\"><code>double a = Math.round ( 2.5 + Math.random() );\n</code></pre>", "options": [{"option": "2.0", "correct": false}, {"option": "3.0", "correct": false}, {"option": "2.5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>____________ objects will be created by the following Java code:</p>\n<pre class=\"prettyprint\"><code>String obj1=\"JAVA\";\n\nString obj2=\"JAVA\";\n\nString obj3=\"JAVA\";\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following two statements are equivalent:</p>\n\n<ol>\n\t<li>3/2</li>\n\t<li>3&lt;&lt;2</li>\n\t<li>3*4</li>\n\t<li>3&lt;&lt;&lt;2</li>\n</ol>", "options": [{"option": "1, 2", "correct": false}, {"option": "2, 3", "correct": true}, {"option": "3, 4", "correct": false}, {"option": "1, 4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the <strong>base</strong> class for errors and exceptions?</p>", "options": [{"option": "Throwable", "correct": true}, {"option": "Runnable", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, to create a new Map instance that has an iteration order not same as that of an existing Map instance, which of the following concrete implementations of the <strong>Map</strong> interface should be used?</p>", "options": [{"option": "TreeMap", "correct": false}, {"option": "HashMap", "correct": false}, {"option": "LinkedHashMap", "correct": false}, {"option": "Both TreeMap and HashMap", "correct": true}], "level": "Medium"}, {"question": "<p>Which <strong>collection</strong> class does not allow growing or shrinking of its size, provides <strong>indexed</strong> access to its elements, and whose methods are not <strong>synchronized</strong>?</p>", "options": [{"option": "java.util.HashSet", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.List", "correct": false}, {"option": "Both a and c", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is not implemented by the <strong>java.util.Hashtable</strong> class?</p>", "options": [{"option": "Java.util.List", "correct": false}, {"option": "Java.util.HashTable", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these protocols is not used for breaking and sending packets to an address across a network in Java?</p>", "options": [{"option": "TCIP/IP", "correct": false}, {"option": "DNS", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following does the <strong>marker interface</strong> contain?</p>", "options": [{"option": "Data members and methods of its own", "correct": false}, {"option": "Methods", "correct": false}, {"option": "No data member and method of its own", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>After the execution of <em>Line 8</em> in the following Java code, _________________ objects are eligible for garbage collection.</p>\n<pre class=\"prettyprint\"><code>  public class sample \n{\n    public static void main(String [] args) \n    {\n        sample x = new sample();\n        sample x2 = m1(x); /* Line 6 */\n        sample x4 = new sample();\n        x2 = x4; /* Line 8 */\n        doComplexStuff();\n    }\n    static sample m1(sample mx) \n    {\n        mx = new sample();\n        return mx;\n    }\n}\n\n</code></pre>", "options": [{"option": "0 ", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>The <strong>priority</strong> number of the thread in the following Java code is __________________________.</p>\n<pre class=\"prettyprint\"><code>            class example {\n            public static void main(String args[]) {\n                Thread t = Thread.currentThread();\n                System.out.println(t);        \n            }\n        }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "0", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, an object <em>x</em> of a class is destroyed by using _____________________________.</p>", "options": [{"option": "A garbage collector", "correct": false}, {"option": "x.finalize()", "correct": false}, {"option": "Runtime.getRuntime().gc()", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following does not extend the <strong>java.lang.Number</strong> class?</p>", "options": [{"option": "Float ", "correct": false}, {"option": "Boolean ", "correct": true}, {"option": "Long ", "correct": false}, {"option": "BigDecimal", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following default\u00a0<strong>layout managers</strong>\u00a0is used for\u00a0<strong>panels\u00a0</strong>and\u00a0<strong>applets?</strong></p>", "options": [{"option": "FlowLayout ", "correct": true}, {"option": "GridLayout", "correct": false}, {"option": "BorderLayout", "correct": false}, {"option": "GridBagLayout", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true regarding the passing of an argument using the <strong>call-by-value</strong> process?</p>", "options": [{"option": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument. ", "correct": false}, {"option": "Reference to original argument is passed to formal parameter of the subroutine.", "correct": false}, {"option": "Copy of argument is made into the formal parameter of the subroutine", "correct": true}, {"option": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument.\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>________________ is stored in <em>x</em> in the following Java code.</p>\n<pre class=\"prettyprint\"><code>sample x;\n</code></pre>", "options": [{"option": "The memory address of allocated memory of object\r\n", "correct": false}, {"option": "NULL", "correct": true}, {"option": "An arbitrary pointer", "correct": false}, {"option": "A garbage value\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, do <strong>virtual</strong> functions exist?</p>", "options": [{"option": "Yes, they can be invoked by using the virtual keyword.", "correct": false}, {"option": "No, they do not exist.", "correct": false}, {"option": "All functions are virtual by default.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used by the <strong>Object</strong> class to obtain run time class of its instances?</p>", "options": [{"option": "get()", "correct": false}, {"option": "void getclass()", "correct": false}, {"option": "Class getclass()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these classes can never be a subclass?</p>", "options": [{"option": "Abstract class", "correct": false}, {"option": "Parent class", "correct": false}, {"option": "Final class", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>collection</strong> classes associates values with keys?</p>", "options": [{"option": "java.util.HashSet", "correct": false}, {"option": "java.util.LinkedList", "correct": false}, {"option": "java.util.TreeMap", "correct": true}, {"option": "java.util.SortedSet", "correct": false}], "level": "Medium"}, {"question": "<p>How is a Java program executed without the <strong>main()</strong> method?</p>", "options": [{"option": "Using the abstract keyword", "correct": false}, {"option": "Using an interface", "correct": false}, {"option": "Using a static block", "correct": true}, {"option": "Using the final keyword", "correct": false}], "level": "Medium"}, {"question": "<p>What is the numerical value of <strong>false</strong> in Java?</p>", "options": [{"option": "Zero", "correct": false}, {"option": "Zero and all negative integers", "correct": false}, {"option": "No numerical value is supported", "correct": true}, {"option": "Any integer", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "Switch statements are slower than if - else ladders.", "correct": false}, {"option": "A nested switch case is not possible.", "correct": false}, {"option": "A switch statement without any case is possible.", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes relies on its <strong>subclasses</strong> for the implementation of its methods?</p>", "options": [{"option": "TreeSet class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these statements about a\u00a0<strong>class loader\u00a0</strong>is correct?</p>", "options": [{"option": "It is a subsystem of the JVM that is used to load classes and interfaces.", "correct": true}, {"option": "It is a part of the JVM that loads classes and interfaces.", "correct": false}, {"option": "It is not a part of the JVM but is used to load classes and interfaces.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about\u00a0the<strong> native\u00a0</strong>method\u00a0is true?</p>", "options": [{"option": "It is possible to execute C or C++ code through a Java application, but it is done by taking into consideration certain performance issues. Access to the host operating system is not always necessary. \r\nTo execute these programs, Java Native Interface framework is not required.", "correct": false}, {"option": "It is possible to execute C or C++ code through a Java application, but it is done by taking certain performance issues and access to the underlying host operating system into consideration. \r\nTo execute these programs, Java Native Interface framework is used.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following events is activated when the size of a component is being changed?</p>", "options": [{"option": "ItemEvent", "correct": false}, {"option": "ActionEvent", "correct": false}, {"option": "FocusEvent", "correct": false}, {"option": "ComponentEvent", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to get the reference to a component that has been removed from the container?</p>", "options": [{"option": "getComponent()", "correct": false}, {"option": "getContainerComponent()", "correct": false}, {"option": "getchild()", "correct": true}, {"option": "child()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the base class of the <strong>ContainerEvent</strong> class is _____________________________.</p>", "options": [{"option": "WindowClosingEvent", "correct": false}, {"option": "ActionEvent", "correct": false}, {"option": "ItemEvent", "correct": false}, {"option": "ComponentEvent", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods is used to change the location of an event in Java?</p>", "options": [{"option": "ChangePoint()", "correct": false}, {"option": "ChangeLocation()", "correct": false}, {"option": "ChangeCordinates()", "correct": false}, {"option": "TranslatePoint()\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is a constant that is defined in the <strong>WindowEvent</strong> class in Java?</p>", "options": [{"option": "WINDOW_MAXIMIZED", "correct": false}, {"option": "WINDOW_OPENED", "correct": false}, {"option": "WINDOW_DEICONIFIED", "correct": true}, {"option": "None of these\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces defines the <strong>itemStateChanged()</strong> method?</p>", "options": [{"option": "WindowClosingListener", "correct": false}, {"option": "ContainerListener", "correct": false}, {"option": "ActionListener", "correct": false}, {"option": "ItemListener", "correct": true}], "level": "Easy"}, {"question": "<p>In\u00a0Java, how are <strong>JavaBeans</strong> used by <strong>JSP</strong> pages?</p>", "options": [{"option": "<jsp:useBean id=\"beanName\" class=\"fully_qualified_classname\" scope=\"scope\"/>", "correct": true}, {"option": "<jsp:useBean id=\"beanName\" value=\"fully_qualified_classname\" scope=\"scope\"/>", "correct": false}, {"option": "<jsp:useBean id=\"beanName\" scope=\"scope\"/>", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following classes is a <strong>superclass</strong> for the <strong>String</strong> and <strong>StringBuffer</strong> classes?</p>", "options": [{"option": "java.swingx", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.string", "correct": false}, {"option": "java.awt", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about\u00a0<strong>Servlet Chaining </strong>is\u00a0true?</p>", "options": [{"option": "It is the last servlet in the chain that provides the output to the web browser.", "correct": false}, {"option": "It is a method in which the output of one servlet is piped into the next servlet.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "The term thread safety means that a method, in a multi threaded environment, can be accessed by multiple threads at the same time. Synchronization is a way of facilitating resource sharing between threads and thus ensuring thread safety.", "correct": false}, {"option": "The term thread safety means that a method, in a multi threaded environment, cannot be accessed by multiple threads at the same time. Synchronization is a way of providing a secured environment and thus ensuring thread safety.", "correct": true}, {"option": "A piece of code is thread-safe, if it functions correctly during simultaneous execution by multiple threads. Java enables coordinating the actions of multiple threads without using synchronized methods and synchronized statements.", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>Once a <strong>JComboBox</strong> is constructed in Java, new items are added to it by __________________________________.</p>", "options": [{"option": "Using the addItem method", "correct": true}, {"option": "Having the user add the item through the GUI", "correct": false}, {"option": "Adding the item as you would add a new value to an array, such as by doing jlist[num+1] = new String(...);. ", "correct": false}, {"option": "Using the add method \r\n ", "correct": false}], "level": "Easy"}, {"question": "<p>What can be done in order to determine the type that a polymorphic variable refers to?</p>", "options": [{"option": "Operating system when the program is loaded into memory.", "correct": false}, {"option": "Java run-time environment at run time", "correct": true}, {"option": "Compiler at compile time. ", "correct": false}, {"option": "Programmer at the time the program is written", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>iterators</strong> is used only with lists?</p>", "options": [{"option": "Setiterator", "correct": false}, {"option": "ListIterator", "correct": true}, {"option": "HashIterator", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these interfaces is extended by the <strong>AWT event listeners</strong> in Java?</p>", "options": [{"option": "java.util.Event interface\r\n\r\n ", "correct": false}, {"option": "java.util.EventListener interface", "correct": true}, {"option": "java.util.EventComponentListener interface", "correct": false}, {"option": "java.util.awt.event interface", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these statements is used in <strong>JDBC</strong>?</p>", "options": [{"option": "Statement using SQL", "correct": false}, {"option": "Prepared statement", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Non-Callable statements", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the difference between <strong>Swing</strong> and <strong>JSF</strong>?</p>", "options": [{"option": "JSF applications cannot be operated when the network is present, while Swing applications can operate on local data when the network is absent.", "correct": false}, {"option": "JSF applications can operate when the network is not present, while Swing applications cannot operate on local data when the network is absent,", "correct": false}, {"option": "JSF applications cannot operate when the network is not present, while Swing applications can operate on local data when the network is absent.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>How do Java <strong>applets</strong> communicate with each other?</p>", "options": [{"option": "If the applets belong to the same class, they can communicate via shared static variables.", "correct": false}, {"option": "If the applets belong to different classes, then each of them will need a reference to the same class with static variables. ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is not true?</p>", "options": [{"option": "Java deallocates memory automatically.", "correct": false}, {"option": "The 'finalize' method is called before garbage collection.", "correct": false}, {"option": "Garbage collection runs when there is a reference to an object. It runs periodically.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is used to compare a specific region in a string with another specific region in another string in Java?</p>", "options": [{"option": "regionMatches()", "correct": true}, {"option": "match()", "correct": false}, {"option": "RegionMatches()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What value is returned when the invoking string is less than the string being compared to by the function <strong>compareTo()</strong>?</p>", "options": [{"option": "Value always greater than zero", "correct": false}, {"option": " Value less than zero", "correct": true}, {"option": " Zero", "correct": false}, {"option": " None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements differentiates between\u00a0<strong>keywords</strong> and <strong>identifiers</strong>?</p>", "options": [{"option": "There is no difference between keywords and identifiers.", "correct": false}, {"option": "Java does not allow identifiers; it only has keywords.", "correct": false}, {"option": "Java does not allow keywords; it only has identifiers.", "correct": false}, {"option": "An identifier identifies something in a programming language. It may be a variable, a method, a class, a package, or an interface. \r\nA keyword has a special meaning and conveys some information to the compiler.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following\u00a0can be used to fully abstract a class from its implementation?</p>", "options": [{"option": "Objects", "correct": false}, {"option": "Classes", "correct": false}, {"option": "Interfaces", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how does an object maintain a record of all the threads that have accessed it?</p>", "options": [{"option": "By using join() method to record the accessing threads", "correct": false}, {"option": "By using Thread.currentThread() method to record the accessing thread", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following differentiates between an\u00a0<strong>application</strong>\u00a0and an\u00a0<strong>applet</strong>?</p>", "options": [{"option": "An application can, in general, be trusted, whereas an applet cannot be. ", "correct": false}, {"option": "An applet must be executed in a browser environment.", "correct": false}, {"option": "An applet is not able to access files of the computer on which it runs.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods is used as a <strong>wrapper</strong> Integer for obtaining the hash code of the invoking object in Java?</p>", "options": [{"option": "int hash()", "correct": false}, {"option": "int hashcode()", "correct": false}, {"option": "int hashCode()", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to return the remainder of a dividend/divisor in Java?</p>", "options": [{"option": "remainder()", "correct": false}, {"option": "modulous()", "correct": false}, {"option": "CSIremainder()", "correct": false}, {"option": "IEEEremainder()\r\n", "correct": true}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>\n</code></pre>\n<p>Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?</p>", "options": [{"option": " java.util.HashSet ", "correct": false}, {"option": " java.util.LinkedHashSet ", "correct": false}, {"option": " java.util.List ", "correct": false}, {"option": " java.util.ArrayList    ", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements are incorrect?            </p>", "options": [{"option": "Two or more methods with same name can be differentiated on the basis of their parameters data type.", "correct": false}, {"option": "Two or more method having same name can be differentiated on basis of number of parameters.", "correct": false}, {"option": "Any already defined method in java?s library can be defined again in the program with different data type of parameters.", "correct": false}, {"option": "If a method is returning a value the calling statement must have a variable to store that value.\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>Mr. Vijay has written an application without using any thread priorities. When he runs the program, does JVM impose any thread priorities on the code ?</p>", "options": [{"option": "imposes", "correct": false}, {"option": "does not impose", "correct": true}, {"option": "depends on the underlying system", "correct": false}, {"option": "none", "correct": false}], "level": "Medium"}, {"question": "<p>Does the finally gets executed in the below code?\ntry{\n//some code\nSystem.exit();\n}\nfinally{\n//some code\n}</p>", "options": [{"option": "no,as it exits the program", "correct": true}, {"option": "finally always gets executed", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used as a wrapper Integer for obtaining hash code for the invoking object?           </p>", "options": [{"option": "int hash()", "correct": false}, {"option": "int hashcode()", "correct": false}, {"option": "int hashCode()", "correct": true}, {"option": "any of these", "correct": false}], "level": "Medium"}, {"question": "<p>Suppose a class has public visibility. In this class we define a protected method. Which of the following statements is correct?</p>", "options": [{"option": "This method is only accessible from inside the class itself and from inside all subclasses.", "correct": false}, {"option": "In a class, you can not declare methods with a lower visibility than the visibility of the class in which it is defined.\r\n", "correct": false}, {"option": "From within protected methods you do not have access to public methods.\r\n", "correct": false}, {"option": "This method is accessible from within the class itself and from within all classes defined in the same package as the class itself.\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?</p>", "options": [{"option": "java.util.Map", "correct": false}, {"option": "java.util.Set", "correct": true}, {"option": "java.util.List", "correct": false}, {"option": "java.util.Collection", "correct": false}], "level": "Easy"}, {"question": "<p>Which three form part of correct array declarations?\n1. public int a [ ]\n2. static int [ ] a\n3. public [ ] int a\n4. private int a [3]\n5. private int [3] a [ ]\n6. public final int [ ] a</p>", "options": [{"option": "1, 3, 4", "correct": false}, {"option": " 2, 4, 5", "correct": false}, {"option": " 1, 2, 6", "correct": true}, {"option": " 2, 5, 6", "correct": false}], "level": "Easy"}, {"question": "<p>Which two statements are true for any concrete class implementing the java.lang.Runnable interface?\n1.  You can extend the Runnable interface as long as you override the public run() method.\n2.  The class must contain a method called run() from which all code for that thread will be          initiated.\n3.  The class must contain an empty public void method named run().\n4.  The class must contain a public void method named runnable().\n5.  The class definition must include the words implements Threads and contain a method    called run().\n6.  The mandatory method must be public, with a return type of void, must be called run(), and cannot take any arguments.</p>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "1 and 5", "correct": false}, {"option": "2 and 6", "correct": true}], "level": "Medium"}, {"question": "<p>Which four can be thrown using the throw statement?</p>\n<ol>\n<li>Error</li>\n<li>Event</li>\n<li>Object</li>\n<li>Throwable</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n</ol>", "options": [{"option": "1, 2, 3 and 4", "correct": false}, {"option": "2, 3, 4 and 5", "correct": false}, {"option": "1, 4, 5 and 6", "correct": true}, {"option": "2, 4, 5 and 6", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are incorrect?            </p>", "options": [{"option": "Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms", "correct": false}, {"option": "Assignment operators run faster than their equivalent long forms.", "correct": false}, {"option": "Assignment operators can be used only with numeric and character data type.", "correct": false}, {"option": "None of the above", "correct": true}], "level": "Easy"}, {"question": "<p>Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?</p>", "options": [{"option": "java.util.HashSet", "correct": false}, {"option": "java.util.LinkedHashSet", "correct": false}, {"option": "java.util.List", "correct": false}, {"option": "java.util.ArrayList", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What is result of this code:</p>\n<pre><code>var str = \"The best things in life are free\";\nvar patt = new RegExp(\"e\");\nvar res = patt.test(str);\n</code></pre>", "options": [{"option": "true", "correct": true}, {"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "' '", "correct": false}], "level": ""}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\n    ", "correct": false}, {"option": "    Hello world.\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of below code:</p>\n<pre class=\"prettyprint\"><code>class multidimention_array {\n        public static void main(String args[])\n        {\n            int arr[][] = new int[3][];\n            arr[0] = new int[1];\n            arr[1] = new int[2];\n            arr[2] = new int[3];               \n        int sum = 0;\n        for (int i = 0; i &lt; 3; ++i) \n            for (int j = 0; j &lt; i + 1; ++j)\n                    arr[i][j] = j + 1;\n        for (int i = 0; i &lt; 3; ++i) \n            for (int j = 0; j &lt; i + 1; ++j)\n                    sum + = arr[i][j];\n        System.out.print(sum);  \n        } \n    }\n</code></pre>", "options": [{"option": "21", "correct": false}, {"option": "11", "correct": false}, {"option": "10", "correct": true}, {"option": "14", "correct": false}], "level": ""}, {"question": "<p>Which of the following is incorrect statement about packages?</p>", "options": [{"option": "Interfaces are specified public if they are to be accessed by any code in the program.", "correct": false}, {"option": "All variables in interface are implicitly final and static.", "correct": false}, {"option": "All variables are static and methods are public if interface is defined pubic.", "correct": true}, {"option": "Interfaces specifies what class must do but not how it does.", "correct": false}], "level": ""}, {"question": "<p>What is the output of the code below:</p>\n<pre class=\"prettyprint\"><code>interface calculate {\n        void cal(int item);\n    }\n    class display implements calculate {\n        int x;\n        public void cal(int item) {\n            x = item * item;            \n        }\n    }\n    class interfaces {\n        public static void main(String args[]) {\n            display arr = new display;\n            arr.x = 0;      \n            arr.cal(2);\n            System.out.print(arr.x);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "4", "correct": true}, {"option": "8", "correct": false}], "level": ""}, {"question": "<p>Which one of the following methods keeps the Thread t in run state ?</p>", "options": [{"option": " t.start() ", "correct": true}, {"option": " t.run() ", "correct": false}, {"option": " t.setRun( ) ", "correct": false}, {"option": "  t.stop ", "correct": false}, {"option": " when a thread is instantiated, it comes automatically into run state  ", "correct": false}, {"option": " none ", "correct": false}], "level": "Easy"}, {"question": "<p>You need to store elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in natural order. Which interface provides that capability?</p>", "options": [{"option": " Array ", "correct": false}, {"option": " Set ", "correct": true}, {"option": " List ", "correct": false}, {"option": " Queue ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements are incorrect?            </p>", "options": [{"option": "Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms", "correct": false}, {"option": "Assignment operators run faster than their equivalent long forms.", "correct": false}, {"option": "Assignment operators can be used only with numeric and character data type.", "correct": false}, {"option": "None of the above", "correct": true}], "level": "Easy"}, {"question": "<p>Which two are methods of the Object class?\n1.notify();\n2.notifyAll();\n3.isInterrupted();\n4.synchronized();            </p>", "options": [{"option": "1, 3\t", "correct": false}, {"option": "2, 4", "correct": false}, {"option": "1, 2", "correct": true}, {"option": "2, 3", "correct": false}], "level": "Easy"}, {"question": "<p>Is following loop valid in java?\nwhile(1)\n{\n//some code\n}</p>", "options": [{"option": "no", "correct": true}, {"option": "yes", "correct": false}, {"option": "depends upon compiler", "correct": false}, {"option": "none of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statement is incorrect about java?</p>", "options": [{"option": "Java deallocates memory automatically", "correct": false}, {"option": "Finalize method is just called before garbage collection.", "correct": false}, {"option": "Garbage collection runs when there is reference with object and runs periodically", "correct": true}, {"option": "Inside finalize method we keep those code which must be executed before object is destroyed by garbage collection.", "correct": false}], "level": "Easy"}, {"question": "<p>Mr. Vijay has written an application without using any thread priorities. When he runs the program, does JVM impose any thread priorities on the code ?</p>", "options": [{"option": " imposes ", "correct": false}, {"option": " does not impose ", "correct": true}, {"option": " depends on the underlying system ", "correct": false}, {"option": " none ", "correct": false}], "level": "Medium"}, {"question": "<p>The JDBC-ODBC bridge is</p>", "options": [{"option": "  Three tiered  ", "correct": false}, {"option": "  Multithreaded  ", "correct": true}, {"option": "  Best for any platform  ", "correct": false}, {"option": "  All of the above  ", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>   class Bar { } \n    class Test \n    {  \n        Bar doBar() \n        {\n            Bar b = new Bar(); /* Line 6 */\n            return b; /* Line 7 */\n        } \n        public static void main (String args[]) \n        { \n            Test t = new Test();  /* Line 11 */\n            Bar newBar = t.doBar();  /* Line 12 */\n            System.out.println(\"newBar\"); \n            newBar = new Bar(); /* Line 14 */\n            System.out.println(\"finishing\"); /* Line 15 */\n        } \n    }\n</code></pre>\n<p>At what point is the Bar object, created on line 6, eligible for garbage collection?</p>", "options": [{"option": "   after line 12\r\n   ", "correct": false}, {"option": "   after line 14\r\n   ", "correct": true}, {"option": "   after line 7, when doBar() completes\r\n   ", "correct": false}, {"option": "   after line 15, when main() completes     ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the class given below relies upon its subclasses for complete implementation of its methods?            </p>", "options": [{"option": "TreeSet class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the difference between Swing and JSF?</p>", "options": [{"option": "JSF applications cannot be operated when a network is present while\r\nSwing applications can operate on local data when the network is absent", "correct": false}, {"option": "JSF applications can operate when a network is not present while\r\nSwing applications cannot operate on local data when the network is not there", "correct": false}, {"option": "JSF applications cannot operate when a network is not present while\r\nSwing applications can operate on local data when the network is not there", "correct": true}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the methods is used to compare a specific region inside one string with another specific region in another string?      </p>", "options": [{"option": "regionMatches()", "correct": true}, {"option": "match()", "correct": false}, {"option": "RegionMatches()", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>var subArr:Array=sub.split(\u2018 \u2018);\n    sub = subArr.join(\u2018%20\u2019);\n</code></pre>", "options": [{"option": "Search and replace", "correct": true}, {"option": "Search only", "correct": false}, {"option": "Replace only", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what does the following\u00a0code do:</p>\n\n<pre class=\"prettyprint\"><code>    var xyFile:File = File.createTempFile();\n    if (xyFile.isDirectory() == true)\n    xyFile.deleteDirectory(true)\n    else\n    xyFile.deleteFile();\n</code></pre>", "options": [{"option": "Examines if it is a file or directory and then deletes it", "correct": true}, {"option": "Creates a file or directory and then deletes it\r\n   ", "correct": false}, {"option": "Deletes the file   ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth { \n\n    static{ \n        System.out.print(\"Hacker \"); \n    } \n\n    public static void main(String... args) { \n\n    } \n\n    static { \n        System.out.print(\"Earth \"); \n    } \n}\n</code></pre>", "options": [{"option": "Earth Hacker", "correct": false}, {"option": "Hacker Earth", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Hacker", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth { \n\n    static int j = 20; \n\n    public static void main(String argv[]) {\n\n        int i = 10; \n        HackerEarth h = new HackerEarth(); \n        h.programming(i); \n        System.out.print(i + \", \"); \n        System.out.println(j); \n    }\n\n    public void programming(int x) { \n        x = x*2; \n        j = j*2; \n    } \n}\n</code></pre>", "options": [{"option": "10, 40", "correct": true}, {"option": "20, 40 ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10, 20", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth { \n\n    public static void main(String args[]) { \n        String val1 = \"Hello\"; \n        StringBuffer val2 = new StringBuffer(val1); \n\n        val2.reverse(); \n        val1.concat(val2.toString()); \n\n        System.out.println(val1 + val2 + val1.length() + val2.length()); \n    }\n}\n</code></pre>", "options": [{"option": "HelloolleH55", "correct": true}, {"option": "HelloolleH44", "correct": false}, {"option": "HelloHello44", "correct": false}, {"option": "HelloHello33", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>finalize()</strong> method is correct?</p>", "options": [{"option": "The finalize() method can be overloaded. ", "correct": false}, {"option": "The finalize() method is called when an object becomes eligible for garbage collection.", "correct": false}, {"option": "When the finalize() method is called, the object becomes eligible for garbage collection.", "correct": false}, {"option": "The finalize() method is guaranteed to run only once before the garbage collector deletes an object.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class ExampleFive {\n    public static void main(String[] args) {\n    final int i = 22;\n    byte b = i;\n    System.out.println(i + \", \" + b);\n    }\n    }\n</code></pre>", "options": [{"option": "22, 20 ", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "22, 22", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth extends Thread{\n\n    public static void main(String[] args) {\n        Thread hack = new Thread(\"Hack\");\n        Thread hack1 = new Thread(\"Hack1\");\n        try {\n            hack.join();\n            hack1.join();\n        } catch (InterruptedException e) {\n            System.out.println(\"Main Thread interrupted.\");\n        }\n    }\n\n    public void run(){\n        System.out.println(\"Run executed\");\n    }\n}\n</code></pre>", "options": [{"option": "Run-time error ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Main thread interrupted", "correct": false}, {"option": "No output", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n\n    public static void main(String st[])\n    {\n        String val1 = \"hackathons\";\n        String val2 = \"hackathons\";\n        String val3 = \"HACKATHONS\";\n        val2.toUpperCase();\n        val3.toUpperCase();\n        boolean b1 = val1==val2;\n        boolean b2 = val1==val3;\n        System.out.print(b1);\n        System.out.print(\" \"+b2);\n    }\n}\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "true false ", "correct": true}, {"option": "false false", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>First Alphabet</p>", "options": [{"option": "A", "correct": true}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": ""}, {"question": "<p>Which of the following folders in <strong>Tomcat</strong> saves the <strong>web application</strong> in Java?</p>", "options": [{"option": "web-app", "correct": false}, {"option": "web-apps", "correct": false}, {"option": "webapp", "correct": false}, {"option": "webapps", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following <strong>http</strong> methods is used to show to the client what the server is receiving?</p>", "options": [{"option": "doGet", "correct": false}, {"option": "doOption", "correct": false}, {"option": "doTrace", "correct": true}, {"option": "doPost", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following tags is used to define the <strong>ServletContext</strong> interface?</p>", "options": [{"option": "config-param", "correct": false}, {"option": "context-param", "correct": true}, {"option": "init-param", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following number of characters can be sent by\u00a0the <strong>get()</strong> function at a time?</p>", "options": [{"option": "1024", "correct": true}, {"option": "1082", "correct": false}, {"option": "1084", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, under which of the following conditions does the container read the\u00a0<strong>init</strong> parameters?</p>", "options": [{"option": "Container starts", "correct": false}, {"option": "doGet/doPost is called", "correct": false}, {"option": "Servlet is initialized", "correct": true}, {"option": "Constuctor is called", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    package com.java.test;\n    public class TestHack {\n        public int x;\n        public static int y;\n        protected static int z;\n    }\n\n    package com.java.test1;\n    import com.java.test.TestHack;\n    public class HackerEarth {\n        public static void main(String[] args) {\n            TestHack a = new TestHack(), b = new TestHack();\n            a.x++;\n            b.y++;\n            a.z++;\n            System.out.print(a.x + \" \" + a.y + \" \" + b.x + \" \" + b.y + \" \" a.z);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error: 'a.z is not visible'", "correct": true}, {"option": "1 0 0 1 0", "correct": false}, {"option": "0 0 0 0 0", "correct": false}, {"option": "1 1 0 1 1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>        import java.util.*;\n        class HackerEarth{\n            public static void main(String[] args) {\n                Set val = new HashSet();\n                val.add(\"java\");\n                val.add(\"scala\");\n                val.add(\"python\");\n                val.add(\"hadoop\");\n                val.add(\"java\");\n                val.add(\"hadoop\");\n                List var = new ArrayList();\n                var.add(\"java\");\n                var.add(\"scala\");\n                var.add(\"python\");\n                val.retainAll(var);\n                System.out.println(\"Size:\" + var.size()+ val.size());\n            }\n        }\n</code></pre>", "options": [{"option": "Size: 36", "correct": false}, {"option": "Size: 33", "correct": true}, {"option": "Size: 63", "correct": false}, {"option": "Size: 66", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth{\n        public static void main(String args[]) {\n            String s = \"hackerearth hackathons\";\n            StringTokenizer val = new StringTokenizer(s, \"h\");\n            while(val.hasMoreElements())\n                System.out.print(val.nextToken());\n        }\n    }\n</code></pre>", "options": [{"option": "hackerearth hackathons", "correct": false}, {"option": "ackereart ackatons", "correct": true}, {"option": "hackathons hackerearth", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "The external JavaScript file must contain the <script> tag.", "correct": true}, {"option": "JavaScript is a loosely typed language.", "correct": false}, {"option": "The blur() method is used to remove focus from the specified object.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how is a function named <strong>myFunction</strong> called?</p>", "options": [{"option": "myFunction() ", "correct": true}, {"option": "call function myFunction() ", "correct": false}, {"option": "call myFunction()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how is <strong>if \"i\" is NOT equal to</strong> written in code?</p>", "options": [{"option": "if i <> 5 ", "correct": false}, {"option": "if (i != 5) ", "correct": true}, {"option": "if i =! 5 then ", "correct": false}, {"option": "if (i <> 5) ", "correct": false}], "level": "Easy"}, {"question": "<p>JavaScript is inserted in ____________________________ of a document.</p>", "options": [{"option": "The <head> section", "correct": false}, {"option": "The <body> section", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to refer this script:</p>\n<p><strong><code>java.js</code></strong></p>", "options": [{"option": "<script href=\"java.js\"> ", "correct": false}, {"option": "<script name=\"java.js\"> ", "correct": false}, {"option": "<script src=\"java.js\"> ", "correct": true}, {"option": "<script =\"java.js\"> ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to define \"Hello World\" alert?</p>", "options": [{"option": "msg(\"Hello World\"); ", "correct": false}, {"option": "alert(\"Hello World\"); \t", "correct": true}, {"option": "msgBox(\"Hello World\"); ", "correct": false}, {"option": "alertBox(\"Hello World\"); ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags is used to insert JavaScript in an HTML element?</p>", "options": [{"option": "js tag ", "correct": false}, {"option": "javascript tag ", "correct": false}, {"option": "script tag ", "correct": true}, {"option": "scripting tag ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these syntaxes is used to write an <strong>IF</strong> statement?</p>", "options": [{"option": "if i = 5 then ", "correct": false}, {"option": "if i = 5 ", "correct": false}, {"option": "if i == 5 then ", "correct": false}, {"option": "if (i == 5) ", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following commands is used to print <code>Hello World</code> on the screen?</p>", "options": [{"option": "(\"Hello World\"); ", "correct": false}, {"option": "echo \"Hello World\"; ", "correct": false}, {"option": "document.write(\"Hello World\"); ", "correct": true}, {"option": "response.write(\"Hello World\"); ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to define a function?</p>", "options": [{"option": "function myFunction() ", "correct": true}, {"option": "function = myFunction() ", "correct": false}, {"option": "function:myFunction() ", "correct": false}, {"option": "my function()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to open a new window?</p>", "options": [{"option": "q1 = window.open(\"http://www.xyz.com\");", "correct": true}, {"option": "q1 = window.new(\"http://www.xyz.com\");", "correct": false}, {"option": "q1 = window.create(\"http://www.xyz.com\");", "correct": false}, {"option": "open(\"http://www.xyz.com\");", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to insert a comment having more than one line?</p>", "options": [{"option": "//This comment has\r\nmore than one line// ", "correct": false}, {"option": "<!--This comment has \r\nmore than one line--> ", "correct": false}, {"option": "/*This comment has \r\nmore than one line*/ ", "correct": true}, {"option": "/*!This comment has \r\nmore than one line!*/ ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following commands is used to start a <strong>for</strong> loop in JavaScript?</p>", "options": [{"option": "for (i = 0; i <= 5; i++)", "correct": true}, {"option": "for i = 1 to 5", "correct": false}, {"option": "for (i = 0; i <= 5)", "correct": false}, {"option": "for (i <= 5; i++)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to create an array?</p>", "options": [{"option": "var colors = [\"red\", \"green\", \"blue\"]", "correct": true}, {"option": "var colors = (1:\"red\", 2:\"green\", 3:\"blue\")", "correct": false}, {"option": "var colors = \"red\", \"green\", \"blue\"", "correct": false}, {"option": "var colors = 1 = (\"red\"), 2 = (\"green\"), 3 = (\"blue\")", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these methods is used to round the number <code>11.49</code> to its nearest integer?</p>", "options": [{"option": "Math.round(11.49)", "correct": true}, {"option": "Math.ceil(11.49)", "correct": false}, {"option": "Math.floor(11.49) + 1", "correct": false}, {"option": "Math.int(11.49)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to add a one-line comment?</p>", "options": [{"option": "//This is a comment", "correct": true}, {"option": "\"This is a comment\"", "correct": false}, {"option": "<!--This is a comment\u2192", "correct": false}, {"option": "*/This is a comment/", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to start a <strong>while</strong> loop?</p>", "options": [{"option": "while (i <= 10){};", "correct": true}, {"option": "while i = 1 to 10", "correct": false}, {"option": "while (i <= 10; i++)", "correct": false}, {"option": "while(i:10)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to detect the client\u00b4s browser name?</p>", "options": [{"option": "navigator.appName", "correct": true}, {"option": "browser.name", "correct": false}, {"option": "client.navName", "correct": false}, {"option": "server.appName", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these methods is used to find the maximum of two values?</p>", "options": [{"option": "Math.ceil(x, y)", "correct": false}, {"option": "Math.max(x, y)", "correct": true}, {"option": "ceil(x, y)", "correct": false}, {"option": "top(x, y)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these parameters is not valid?</p>", "options": [{"option": "Text", "correct": false}, {"option": "Variable", "correct": false}, {"option": "Operator", "correct": true}, {"option": "Number", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these methods is used to run JavaScript after the page has loaded?</p>", "options": [{"option": "onfinished", "correct": false}, {"option": "onload", "correct": true}, {"option": "onunload", "correct": false}, {"option": "oncomplete", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following classes is used to call a method?</p>", "options": [{"option": "obj.method", "correct": false}, {"option": "obj.method[]", "correct": false}, {"option": "obj.method()", "correct": true}, {"option": "obj-method", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is true:    </p>\n<ol>\n<li>HTML can be coded in a text string in contrast to JavaScript.  </li>\n<li>The search() method searches a string for a specified value and returns the position of the match.  </li>\n<li>The two methods, indexOf() and search(), are equal.</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1, 2", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these methods obtains a random number between <code>5</code> and <code>9</code>?</p>", "options": [{"option": "Math.floor((Math.random() * 5) + 4);", "correct": false}, {"option": "Math.floor((Math.random() * 4) + 4)", "correct": false}, {"option": "Math.floor((Math.random() * 4) + 5)", "correct": false}, {"option": "Math.floor((Math.random() * 5) + 5)", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is not a comparison operator?</p>", "options": [{"option": "<", "correct": false}, {"option": ">", "correct": false}, {"option": "=", "correct": true}, {"option": "!=", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is a keyboard specific event?</p>", "options": [{"option": "onclick", "correct": false}, {"option": "onfocus", "correct": false}, {"option": "onkeydown", "correct": true}, {"option": "onkeyboardpress", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to check whether all the variables have equal values?</p>", "options": [{"option": "A = B = C", "correct": false}, {"option": "(A == B) && (B = C)", "correct": false}, {"option": "(A = B) && (B = C)", "correct": false}, {"option": "(A == B) && (B == C)", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how many parameters can be passed to a single function?</p>", "options": [{"option": "None", "correct": false}, {"option": "As many as you like", "correct": false}, {"option": "One for each argument", "correct": true}, {"option": "Cannot be determined", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is equivalent to <code>A ? B : C</code>?</p>", "options": [{"option": "if (A != B) {C}", "correct": false}, {"option": "if (C) {A} else {B}", "correct": false}, {"option": "if (A) {B} else {C}", "correct": true}, {"option": "if (B) {A} else {C}", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a mouse event?</p>", "options": [{"option": "onmousescroller", "correct": false}, {"option": "onclick", "correct": false}, {"option": "onmouseover", "correct": true}, {"option": "onmousemove", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these catches all the values except those which are not specified?</p>", "options": [{"option": "otherwise", "correct": false}, {"option": "default", "correct": true}, {"option": "any", "correct": false}, {"option": "all", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following does not result in a variable going out of scope?</p>", "options": [{"option": "End of the block in which it was defined.", "correct": false}, {"option": "Start of a block in which a like named variable is defined.", "correct": false}, {"option": "When a function is called.", "correct": true}, {"option": "When the program finishes running.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is an antonym for <strong>onmouseover</strong>?</p>", "options": [{"option": "onmouseoff", "correct": false}, {"option": "onmouseout", "correct": true}, {"option": "onmouseunder", "correct": false}, {"option": "onnotmouseover", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these supplies the value of a function?</p>", "options": [{"option": "return", "correct": true}, {"option": "cancel", "correct": false}, {"option": "continue", "correct": false}, {"option": "valueOf", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a property of the window object?</p>", "options": [{"option": "document", "correct": true}, {"option": "menu", "correct": false}, {"option": "navigator", "correct": false}, {"option": "history", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a property is an object-oriented equivalent to _____________________________.</p>", "options": [{"option": "A function", "correct": false}, {"option": "An if statement", "correct": false}, {"option": "A variable", "correct": true}, {"option": "A reserved word", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a valid function call?</p>", "options": [{"option": "var x = myfunc();", "correct": false}, {"option": "myfunc;", "correct": true}, {"option": "x = myfunc();", "correct": false}, {"option": "myfunc();", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following actions is done by the browsers which\u00a0do not understand JavaScript?</p>", "options": [{"option": "Ignore all <script> and <noscript> tags", "correct": false}, {"option": "Display the content of <script> tags", "correct": false}, {"option": "Display the content of <noscript> tags", "correct": true}, {"option": "Display the content of <script> and <noscript> tags", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "External scripts must include the <script> tag.", "correct": true}, {"option": "slice() extracts a part of a string and returns the extracted part in a new string.", "correct": false}, {"option": "substring() is similar to slice().", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>You cannot trigger JavaScript from an event handler ____.</p>", "options": [{"option": "when another event is still being processed", "correct": false}, {"option": "when JavaScript is disabled", "correct": true}, {"option": "when the page uses stylesheets", "correct": false}, {"option": "when it is running locally instead of on the web", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is true?</p>", "options": [{"option": "Arguments are parameters.", "correct": false}, {"option": "Arguments and parameters must have the same name.", "correct": false}, {"option": "Arguments are placeholders.", "correct": false}, {"option": "Arguments are disagreements between parameters.", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these contains an executable statement?</p>", "options": [{"option": "// var a = 0; // var b = 0;", "correct": false}, {"option": "/* var a = 0; // var b = 0; */", "correct": false}, {"option": "/* var a = 0; */ var b = 0;", "correct": true}, {"option": "// var a = 0; /* var b = 0; */", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following options is used to turn on the Debug mode in Internet Explorer?</p>", "options": [{"option": "General ", "correct": false}, {"option": "Content ", "correct": false}, {"option": "Programs ", "correct": false}, {"option": "Advanced ", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following helps in defining the property of <strong>myobj</strong>?</p>", "options": [{"option": "property myobj x", "correct": false}, {"option": "myobj.x", "correct": true}, {"option": "myobj property x", "correct": false}, {"option": "var x propertyOf myobj", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is used to identify that a JavaScript is added to a web page?</p>", "options": [{"option": "<javascript>", "correct": false}, {"option": "<program>", "correct": false}, {"option": "<script>", "correct": true}, {"option": "<js>", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to locate the third character in a string?</p>", "options": [{"option": "Substring()", "correct": false}, {"option": "String()", "correct": false}, {"option": "Stringlength()", "correct": false}, {"option": "CharAt()", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these prompts a user with a message and requests user input?</p>", "options": [{"option": "alert()", "correct": false}, {"option": "display()", "correct": false}, {"option": "prompt()", "correct": true}, {"option": "confirm()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the correct syntax for the <strong>for</strong> loop?</p>", "options": [{"option": "for ( increment; initialize; test)", "correct": false}, {"option": "for ( initialize; test), increment", "correct": false}, {"option": "for ( initialize; test; increment)", "correct": true}, {"option": "for ( test; initalize; increment)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is done before designing a form validation mechanism using string methods?</p>", "options": [{"option": "Check for the presence of certain characters", "correct": false}, {"option": "Check the position of substrings", "correct": false}, {"option": "Test the length of data", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is the minimum browser version that supports JavaScript?</p>", "options": [{"option": "Navigator v2.0", "correct": true}, {"option": "Mozilla V1.5", "correct": false}, {"option": "IE 2.0", "correct": false}, {"option": "Navigator V1.0", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following should be used for a multi-way branch?</p>", "options": [{"option": "If", "correct": false}, {"option": "Ifthen", "correct": false}, {"option": "Ifelse", "correct": false}, {"option": "switch", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used by the <strong>date</strong> object to call a function based on its elapsed time?</p>", "options": [{"option": "setElapsedTime()", "correct": false}, {"option": "Timeout()", "correct": false}, {"option": "setTimeout()", "correct": false}, {"option": "setTime()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is true?</p>", "options": [{"option": "JavaScript is Object-oriented.", "correct": false}, {"option": "JavaScript is Object-based.", "correct": true}, {"option": "JavaScript is Object-driven.", "correct": false}, {"option": "JavaScript has no relationship with objects.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is used to restart the inner most loop?</p>", "options": [{"option": "Abort", "correct": false}, {"option": "Breakloop", "correct": false}, {"option": "Stop", "correct": false}, {"option": "Continue label", "correct": true}], "level": "Medium"}, {"question": "<p>Which line contains an error in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    a = new Array(); \n    a[0] = 12; \n    a[1] = false; \n    a[2] = \"text\"; \n    a[3] = a;\n</code></pre>", "options": [{"option": "Line 3", "correct": true}, {"option": "Line 4", "correct": false}, {"option": "Line 5", "correct": false}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements for the following\u00a0JavaScript code is true:</p>\n\n<pre class=\"prettyprint\"><code>    var a = new Array(2,4)\n</code></pre>", "options": [{"option": "It defines a new two-dimensional array a whose dimensions are 2 and 4.", "correct": false}, {"option": "It defines an array 'a' and assigns the values 2 and 4 to a[1] and a[2].", "correct": false}, {"option": "It defines an array 'a' and assigns the values 2 and 4 to a[0] and a[1].", "correct": true}, {"option": "It defines an array 'a' of length 4 and assigns the value 2 to a[0].", "correct": false}], "level": "Easy"}, {"question": "<p>How many times does the alert box appear for the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    a = new Array(1,2,3); \n    for (i in a) alert(\"a[i]=\"+a[i]);\n</code></pre>", "options": [{"option": "3 times", "correct": false}, {"option": "4 times ", "correct": false}, {"option": "Either 3 or 4 times, depending on the browser.", "correct": true}, {"option": "The for loop in the above code will cause an error.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following browsers supports the <strong>sort()</strong> method?</p>", "options": [{"option": "Netscape Navigator 2.0", "correct": false}, {"option": "Netscape Navigator 3.0", "correct": true}, {"option": "Microsoft Internet Explorer 3.0", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods uses arrays?</p>", "options": [{"option": "k = a(i)", "correct": false}, {"option": "k = a[i]", "correct": true}, {"option": "k = a >> i", "correct": false}, {"option": "k = a ^ i", "correct": false}], "level": "Medium"}, {"question": "<p>What is the order of the elements in the array <strong>a</strong> after the following JavaScript code is executed:</p>\n\n<pre class=\"prettyprint\"><code>    a=(new Array(\"test\",1,2,3,-1,-2,-3,0xFFFFF)).sort()\n</code></pre>", "options": [{"option": "-1,-2,-3,1,1048575,2,3,\"test\"", "correct": true}, {"option": "-1,-2,-3,1,2,3,1048575,\"test\"", "correct": false}, {"option": "\"test\",-1,-2,-3,1,2,3,1048575", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <strong>a</strong> after the following JavaScript code is executed:</p>\n\n<pre class=\"prettyprint\"><code>     var a=(new Array(10)).toString()\n</code></pre>", "options": [{"option": "String \"10\"", "correct": false}, {"option": "Array of 10 empty strings", "correct": false}, {"option": "String \",,,,,,,,,\"", "correct": true}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <strong>a</strong> after the following JavaScript code is executed:</p>\n<pre class=\"prettyprint\"><code>    function myarr(arr) {arr[1]++;arr=arr+arr} \n    a = new Array(1,3,2,5); \n    myarrr(a);\n</code></pre>", "options": [{"option": "1,3,2,5", "correct": false}, {"option": "1,4,2,5", "correct": false}, {"option": "1,4,2,5,1,4,2,5", "correct": false}, {"option": "Error is thrown", "correct": true}], "level": "Easy"}, {"question": "<p>What are the values of <code>a[1]</code> and <code>a[2]</code> after the following JavaScript is executed:</p>\n\n<pre class=\"prettyprint\"><code>    a = new Array(); \n    b = new Array(); \n    a[1] = 3; \n    b[2] = 5; \n    a = b;\n</code></pre>", "options": [{"option": "Value of a[1] is 3 and a[2] is 5.", "correct": false}, {"option": "a[1] is undefined and the value of a[2] is 5.", "correct": true}, {"option": "Both a[1] and a[2] are undefined.", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    \"1\" - - \"1\";\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "2", "correct": true}, {"option": "11", "correct": false}, {"option": "\"11\"", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    Number(\"1\") - 1 == 0;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    new Array(5).toString();\n</code></pre>", "options": [{"option": "[]", "correct": false}, {"option": "\"[]\"", "correct": false}, {"option": "\",,,,\"", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    function console() { \n        return func; \n        func = 10; \n        function func() {} \n        var func = 11; \n    } \n    alert(typeof console());\n</code></pre>", "options": [{"option": "A number", "correct": false}, {"option": "A function", "correct": true}, {"option": "Undefined", "correct": false}, {"option": "A string", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:   </p>\n<pre class=\"prettyprint\"><code> var func = function func() { \n    console.log(func === func); \n }; \n func();\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "ReferenceError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    (true + false) &gt; 2 + true;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "TypeError", "correct": false}, {"option": "NAN", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    function bbb() { \n        return \n        { \n        test: 1 \n        }; \n    } \n    alert(typeof bbb());\n</code></pre>", "options": [{"option": "Function", "correct": false}, {"option": "Number", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "NAN", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    String('Hello') === 'Hello';\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>     new String(\"This is a string\") instanceof String;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    8 &gt; 7 &lt; 6;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TrueFalse", "correct": false}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    function func(a, b) { \n        arguments[1] = 2; \n        alert(b); \n    } \n    func(1);\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "NAN", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    NaN === NaN;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "NaN", "correct": false}, {"option": "Uncaught exception", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var x = 0; \n    function func() { \n    x++; \n    this.x = x; \n    return func; \n    } \n    var bar = new new func; \n    console.log(bar.x);\n</code></pre>", "options": [{"option": "ReferrenceError", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    \"This is a string\" instanceof String;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In  JavaScript, what is the purpose of the <code>&lt;noscript&gt;</code> tag?</p>", "options": [{"option": "It prevents scripts on the page from executing.", "correct": false}, {"option": "It encloses text to be displayed by non-JavaScript browsers.", "correct": true}, {"option": "It suppresses the result to be displayed on the web page.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these  actually executes the JavaScript?</p>", "options": [{"option": "Prevents scripts on the page from executing.", "correct": false}, {"option": "Enclose text to be displayed by non-JavaScript browsers", "correct": false}, {"option": "Suppresses the result to be displayed on the web page", "correct": false}, {"option": "The machine which is running a web browser", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes is used to hold the version?</p>", "options": [{"option": "SCRIPT", "correct": false}, {"option": "VERSION", "correct": false}, {"option": "LANGUAGE", "correct": true}, {"option": "VER", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a capability of functions?</p>", "options": [{"option": "Returning multiple values", "correct": false}, {"option": "Accepting parameters and returning values", "correct": true}, {"option": "Accepting parameters", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to insert special characters?</p>", "options": [{"option": "&", "correct": false}, {"option": "/", "correct": true}, {"option": "-", "correct": false}, {"option": "%", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "File is a server-side JavaScript object.", "correct": true}, {"option": "substring() cannot accept negative indexes.", "correct": false}, {"option": "substr() is similar to slice().", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is negative infinity?</p>", "options": [{"option": "A number which is derived by dividing a negative number by zero.", "correct": false}, {"option": "A number which is derived by dividing a number by a negative number.", "correct": false}, {"option": "A number which is derived by dividing a number by zero.", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a client-side object?</p>", "options": [{"option": "File", "correct": false}, {"option": "Function", "correct": false}, {"option": "FileUpload", "correct": true}, {"option": "Time", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "JavaScript ignores extra spaces. ", "correct": true}, {"option": "JavaScript is not case sensitive.", "correct": false}, {"option": "The char() method is used to find out the character at a position in a string. ", "correct": false}, {"option": "JavaScript does not ignore extra spaces.  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n            var myVar = \"HELLO\"; \n            function checkscope( ) {\n                var myVar = \"HI\";  \n                document.write(myVar);\n            }\n            checkscope();\n    &lt;/script&gt;\n</code></pre>", "options": [{"option": "HI", "correct": true}, {"option": "HELLO", "correct": false}, {"option": "HI HELLO", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these statements about Java and JavaScript is true?</p>", "options": [{"option": "The syntax of JavaScript is loosely based on the Java syntax.", "correct": true}, {"option": "JavaScript is a stripped-down version of Java.", "correct": false}, {"option": "They both support Object Oriented Programming.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following ways of instantiating a date is incorrect?</p>", "options": [{"option": "new Date(dateString)", "correct": false}, {"option": "new Date()", "correct": false}, {"option": "new Date(seconds)", "correct": true}, {"option": "new Date(year, month, day, hours, minutes, seconds, milliseconds)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how do you refer an external script named as <strong>script.js</strong>?</p>", "options": [{"option": "< script href = \"script.js\">", "correct": false}, {"option": "< script source = \"script.js\">", "correct": false}, {"option": "< script name = \"script.js\">", "correct": false}, {"option": "< script src = \"script.js\">", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is false for JavaScript?</p>", "options": [{"option": "JavaScript supports all Boolean operators. ", "correct": true}, {"option": "The replace() method replaces a specified value with another value in a string. ", "correct": false}, {"option": "The replace() method can also take a regular expression as the search value. ", "correct": false}, {"option": "JavaScript does not support all Boolean operators. ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following settings is used to make the elements invisible?</p>", "options": [{"option": "visibilty", "correct": true}, {"option": "visible", "correct": false}, {"option": "invisibility", "correct": false}, {"option": "invisible", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not a variable name in JavaScript?</p>", "options": [{"option": "2java ", "correct": true}, {"option": " _java_and_ java _names ", "correct": false}, {"option": "javaandjava ", "correct": false}, {"option": "java2java ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is correct?</p>", "options": [{"option": "JavaScript is not case sensitive.", "correct": false}, {"option": "JavaScript statements can be grouped together in blocks.", "correct": true}, {"option": "The semicolon at the end of the statements is mandatory.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is incorrect?</p>", "options": [{"option": "JavaScript can react to events.", "correct": false}, {"option": "JavaScript can read and write HTML elements.", "correct": false}, {"option": "JavaScript can not be used to create cookies.", "correct": true}, {"option": "JavaScript is case-sensitive.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the entities begin with ____________ and the end with _____________.</p>", "options": [{"option": "A semicolon, a colon ", "correct": false}, {"option": "A semicolon, an ampersand ", "correct": false}, {"option": "An ampersand, a colon ", "correct": false}, {"option": "An ampersand, a semicolon ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is a server-side object in JavaScript?</p>", "options": [{"option": "Function", "correct": false}, {"option": "File", "correct": true}, {"option": "FileUpload", "correct": false}, {"option": "Date", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to display \u201cHello World\u201d on the web page?</p>", "options": [{"option": "System.out.println(\"Hello World\")", "correct": false}, {"option": "print(\"Hello World\")", "correct": false}, {"option": "document.write(\"Hello World\")", "correct": true}, {"option": "response.write(\"Hello World\")", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is generated if a JavaScript object is sent to Java?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}, {"option": "JSObject", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is triggered when the <code>&lt;button&gt;</code> and the <code>&lt;textarea&gt;</code> form elements lose focus?</p>", "options": [{"option": "Onclick", "correct": false}, {"option": "Ondblclick", "correct": false}, {"option": "Onfocus", "correct": false}, {"option": "Onblur", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is used to write arrays in JavaScript?</p>", "options": [{"option": "var salaries = new Array( 1:39438, 2:39839 3:83729)", "correct": false}, {"option": "var salaries = new (Array:1=39438, Array:2=39839, Array:3=83729)", "correct": false}, {"option": "var salaries = new Array(39438,39839,83729)", "correct": true}, {"option": "var salaries = new Array() values=39438,39839,83729", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to append the specified value to an array?</p>", "options": [{"option": "arr[arr.length] = value", "correct": true}, {"option": "arr[arr.length+1] = new Arrays()", "correct": false}, {"option": "arr[arr.length-1] = value", "correct": false}, {"option": "arr[arr.length*1] = value", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following holds true for writing an array?</p>", "options": [{"option": "var txt = new Array(1:\"arr\",2:\"kim\",3:\"jim\")", "correct": false}, {"option": "var txt = new Array:1=(\" arr \")2=(\"kim\")3=(\"jim\")", "correct": false}, {"option": "var txt = new Array(\"arr \",\"kim\",\"jim\")", "correct": true}, {"option": "var txt = new Array=\" arr \",\"kim\",\"jim\"", "correct": false}], "level": "Hard"}, {"question": "<p>______________________ is used to define the behavior of a web page.</p>", "options": [{"option": "HTML", "correct": false}, {"option": "CSS", "correct": false}, {"option": "XML", "correct": false}, {"option": "JavaScript", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to evaluate a string in the context in which an object is specified?</p>", "options": [{"option": "Eval", "correct": true}, {"option": "ParseDoule", "correct": false}, {"option": "ParseObject", "correct": false}, {"option": "Efloat", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>  var a = 5; \n    function one() { \n        a = 6; \n    } \n    function two() { \n        alert(a); \n    } \n    two();\n</code></pre><p></p>", "options": [{"option": "0", "correct": false}, {"option": "5", "correct": true}, {"option": "6", "correct": false}, {"option": "null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(({ valueOf:function() { return 1; } }) === true);\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    var a = (function a() { \n        return '1'; \n    }, \n    function b() { \n        return 2; \n    })(); \n    alert(typeof a);\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A function", "correct": false}, {"option": "A string", "correct": false}, {"option": "A number", "correct": true}, {"option": "Uncaught exception", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the <code>my_func(2)</code> function in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    function my_func(a) { \n        var temp = 2; \n        function self(b) { \n            alert(a + b + (++temp)); \n        } \n        self(9); \n    } \n    my_func(2);\n</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "16", "correct": false}, {"option": "13", "correct": false}, {"option": "14", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    var p = 1, \n    q = function p(x) { \n            x &amp;&amp; p(x); \n        }; \n    alert(p);\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    !function () {}();\n</code></pre><p></p>", "options": [{"option": "Undefined", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "Error ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    x = 0.000002; \n    y = 0.000003; \n    result = (Math.abs(x,y) &lt; 0.000001) \n    alert(result);\n</code></pre><p></p>", "options": [{"option": "Error ", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function my_func(a, b, c) { \n        arguments[2] = 10; \n        alert(c); \n    } \n    my_func(20, 20, 20);\n</code></pre><p></p>", "options": [{"option": "Error ", "correct": false}, {"option": "10", "correct": true}, {"option": "20", "correct": false}, {"option": "2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    alert(typeof typeof(typeof(undefined)));\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Null", "correct": false}, {"option": "A string", "correct": true}, {"option": "Undefined", "correct": false}, {"option": "An object", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(({ valueOf:function() { return 2; } }) == 2);\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    (1.22e-10).toFixed(2)\n</code></pre><p></p>", "options": [{"option": "0.00", "correct": true}, {"option": "122000000000000000000.00", "correct": false}, {"option": "0", "correct": false}, {"option": "0.0", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    ~~(-5.5)\n</code></pre>", "options": [{"option": "-5.5", "correct": false}, {"option": "-6", "correct": false}, {"option": "-5", "correct": true}, {"option": "-4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    alert(parseInt(1 / 0, 19));\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "19", "correct": false}, {"option": "18", "correct": true}, {"option": "20", "correct": false}, {"option": "Infinity", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    (function () {})()\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "Error ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    [1,2,3,4][1,2]\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "30", "correct": false}, {"option": "10", "correct": false}, {"option": "3", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    [[[[[[[22]]]]]]] == 22;\n</code></pre><p></p>", "options": [{"option": "True ", "correct": true}, {"option": "False ", "correct": false}, {"option": "Undefined ", "correct": false}, {"option": "Null", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>  parseInt( null, 24 ) === 23\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "Undefined", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    null == undefined\n</code></pre>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "Error ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    [,,,] == Array(4)\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "False ", "correct": false}, {"option": "True ", "correct": true}, {"option": "Undefined ", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code> a = 5; \n b = 4; \n alert(a + +(+(+(+b))));\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "9", "correct": true}, {"option": "14", "correct": false}, {"option": "19", "correct": false}, {"option": "18", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    !!~1\n</code></pre><p></p>", "options": [{"option": "Null", "correct": false}, {"option": "True", "correct": true}, {"option": "Error", "correct": false}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about the relationship behavior between JavaScript and DHTML is correct?</p>", "options": [{"option": "JavaScript is DHTML plus CSS plus Document Object Model.", "correct": false}, {"option": "DHTML is Document Object Model plus JavaScript plus CSS.", "correct": false}, {"option": "Document Object Model is JavaScript plus DHTML plus CSS.", "correct": true}, {"option": "JavaScript has nothing to do with DHTML.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about the relationship behavior between JavaScript and Java is correct?</p>", "options": [{"option": "JavaScript and Java are different names of the same thing.", "correct": false}, {"option": "The JavaScript code can call Java code.", "correct": true}, {"option": "Both the JavaScript code and the Java code is compiled into byte-code, which is then interpreted by the browser.", "correct": false}, {"option": "Browsers supporting Java support JavaScript as well.", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following JavaScript versions introduced the <strong>image swapping</strong> or the <strong>image roll-overs</strong> features?</p>", "options": [{"option": "JavaScript 1.0", "correct": false}, {"option": "JavaScript 1.1", "correct": true}, {"option": "JavaScript 1.2", "correct": false}, {"option": "JavaScript 1.3", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following corporations first implemented the JavaScript language?</p>", "options": [{"option": "Netscape Communications ", "correct": true}, {"option": "Microsoft ", "correct": false}, {"option": "Sun Microsystems ", "correct": false}, {"option": "A consortium of all the companies", "correct": false}], "level": "Medium"}, {"question": "<p>When was the first release of the browser that supports JavaScript?</p>", "options": [{"option": "1994", "correct": false}, {"option": "1995", "correct": true}, {"option": "1996", "correct": false}, {"option": "1997", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about comments is incorrect?</p>", "options": [{"option": "The comments can make the code easier to understand. ", "correct": false}, {"option": "The comments can not help hide the code from browsers that cannot interpret JavaScript. ", "correct": true}, {"option": "The comments can help display a warning to the users of the old browsers that do not support JavaScript. ", "correct": false}, {"option": "The comments can not make the code easier to understand. ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following browsers does not support JavaScript?</p>", "options": [{"option": "Microsoft Internet Explorer 3.02", "correct": false}, {"option": "Netscape Navigator 3.02", "correct": false}, {"option": "Opera 3.51", "correct": false}, {"option": "SunSoft HotJava 1.0", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is the original name of JavaScript?</p>", "options": [{"option": "JavaScript", "correct": false}, {"option": "LiveScript", "correct": true}, {"option": "WireScript", "correct": false}, {"option": "ECMAScript", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is the international standard of JavaScript?</p>", "options": [{"option": "ECMA-262 ", "correct": true}, {"option": "DHTML ", "correct": false}, {"option": "JavaScript 1.3 ", "correct": false}, {"option": "ISO-262 ", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following browsers was the first to support JavaScript?</p>", "options": [{"option": "Microsoft Internet Explorer 2.0 beta", "correct": false}, {"option": "Netscape Navigator 2.0 beta", "correct": true}, {"option": "Opera 2.0 beta", "correct": false}, {"option": "SunSoft HotJava 2.0 beta", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not a logical operator in JavaScript?</p>", "options": [{"option": "&&", "correct": false}, {"option": "&", "correct": true}, {"option": "||", "correct": false}, {"option": "!", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how does <strong>alert</strong> help in finding errors?</p>", "options": [{"option": "Displaying the current values of variables", "correct": false}, {"option": "Indicating the execution path", "correct": false}, {"option": "Pausing the execution", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>The Javascript code is not triggered from an event handler when _______________.</p>", "options": [{"option": "Another event is still being processed", "correct": false}, {"option": "Javascript is disabled", "correct": true}, {"option": "The page uses stylesheets", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following options are provided by Netscape?</p>", "options": [{"option": "Debugger and error finder", "correct": false}, {"option": "Console and debugger", "correct": true}, {"option": "Debugger and trace", "correct": false}, {"option": "Trace and error finder", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is triggered automatically at regular intervals?</p>", "options": [{"option": "onload", "correct": false}, {"option": "setTimeout", "correct": false}, {"option": "setInterval", "correct": true}, {"option": "setAutomatic", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a valid argument in JavaScript?</p>", "options": [{"option": "x", "correct": true}, {"option": "3", "correct": false}, {"option": "4.5", "correct": false}, {"option": "None of  these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following can cause a <strong>while</strong> loop to exit?</p>", "options": [{"option": "Any variable in the loop set to false", "correct": false}, {"option": "A break statement", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not just a <strong>mathematical</strong> <strong>operator</strong>?</p>", "options": [{"option": "/", "correct": false}, {"option": "*", "correct": false}, {"option": "-", "correct": false}, {"option": "+", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how many semi-colon separated statements are used to control the <strong>for</strong> loop?</p>", "options": [{"option": "One", "correct": false}, {"option": "Two", "correct": false}, {"option": "Three", "correct": true}, {"option": "Four", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of the <strong>a</strong> variable in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = \u00b4A\u00b4; var b = 2; a = b;\n</code></pre><p></p>", "options": [{"option": "Text", "correct": false}, {"option": "A number", "correct": true}, {"option": "True", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following statement in JavaScript:</p>\n\n<pre class=\"prettyprint\"><code>12%5\n</code></pre>", "options": [{"option": "7", "correct": false}, {"option": "2", "correct": true}, {"option": "60", "correct": false}, {"option": "17", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about loops is correct?</p>", "options": [{"option": "It is an executable statement or a block.", "correct": true}, {"option": "It is a group of individual statements.", "correct": false}, {"option": "It is a group of individual blocks.", "correct": false}, {"option": "It is a function call statement.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements about strings is incorrect?</p>", "options": [{"option": "A string is converted to upper case with UpperCase().", "correct": false}, {"option": "A string is converted to lower case with LowerCase():", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following DOM methods is supported by Netscape 4?</p>", "options": [{"option": "getElementById ", "correct": false}, {"option": "layer ", "correct": true}, {"option": "getElementsByTagName ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements about the running behavior of <code>do while (a &lt; b)</code> is correct?</p>", "options": [{"option": "until a >= b", "correct": true}, {"option": "until a < b", "correct": false}, {"option": "until a > b", "correct": false}, {"option": "until a <= b", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is emitted when an input field loses focus?</p>", "options": [{"option": "onfocusout", "correct": false}, {"option": "onblur", "correct": true}, {"option": "onunfocus", "correct": false}, {"option": "onfocus", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to define an array?</p>", "options": [{"option": "var new array = myarray;", "correct": false}, {"option": "var myarray = array new;", "correct": false}, {"option": "var new Array() = myarray;", "correct": false}, {"option": "var myarray = new Array();", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following keywords is used to catch all the values except those specified?</p>", "options": [{"option": "otherwise ", "correct": false}, {"option": "default ", "correct": true}, {"option": "any ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to add seven days to the current date?</p>", "options": [{"option": "myDate.chgDate(7);", "correct": false}, {"option": "myDate.setDate(myDate.getDate()+7);", "correct": true}, {"option": "myDate.setDate(+7);", "correct": false}, {"option": "myDate.chgDate(myDate.getDate()+7);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to reference a part of the string?</p>", "options": [{"option": "txt.substr(5,6);", "correct": true}, {"option": "text.part(5,6);", "correct": false}, {"option": "text.piece(5,6);", "correct": false}, {"option": "text.split(5,6);", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to define a numerical value?</p>", "options": [{"option": "var mynum = new Math;", "correct": false}, {"option": "var mynum = Math(6);", "correct": false}, {"option": "var mynum = 6;", "correct": true}, {"option": "Math.mynum = 6;", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to locate the first occurrence of the specified character in a string?</p>", "options": [{"option": "findIndexOf()", "correct": false}, {"option": "index()", "correct": false}, {"option": "indexOf() ", "correct": true}, {"option": "find() ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements is used to attach an external JavaScript file?</p>", "options": [{"option": "<script source=ext.js\" ...", "correct": false}, {"option": "<script src=\"ext.js\" ...", "correct": true}, {"option": "<script external=\"ext.js\" ...", "correct": false}, {"option": "<external src=\"ext.js\" ...", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how many alert boxes can appear in a browser at once?</p>", "options": [{"option": "One", "correct": true}, {"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "There is no count restriction.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following internet-options tabs is used to switch on debugging in Internet Explorer?</p>", "options": [{"option": "General", "correct": false}, {"option": "Content", "correct": false}, {"option": "Programs", "correct": false}, {"option": "Advanced", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following operators is used to perform multiplication?</p>", "options": [{"option": "x", "correct": false}, {"option": "*", "correct": true}, {"option": "X", "correct": false}, {"option": "+", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, when is the <strong>control</strong> statement in the\u00a0<strong>do-while</strong> loops\u00a0tested?</p>", "options": [{"option": "Before the loop each time", "correct": false}, {"option": "After the loop each time", "correct": true}, {"option": "Once at the end", "correct": false}, {"option": "Once at the start", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to calculate the area of a circle?</p>", "options": [{"option": "area = pi * r ^2;", "correct": false}, {"option": "area = Math.PI * r^2;", "correct": false}, {"option": "area = Math.PI * Math.sqr(r);", "correct": false}, {"option": "area = Math.PI * r * r;", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is true for JavaScript?</p>", "options": [{"option": "We can code for multiple DOMs in the same web page. ", "correct": false}, {"option": "JavaScript is untyped language. ", "correct": false}, {"option": "A global variable has global scope which means it can be defined anywhere in the JavaScript code. ", "correct": false}, {"option": "All of these ", "correct": true}], "level": "Medium"}, {"question": "<p>Where are the event handlers added in JavaScript?</p>", "options": [{"option": "At the external Javascript.", "correct": false}, {"option": "In the Javascript code.", "correct": false}, {"option": "At the HTML.", "correct": false}, {"option": "Within the HTML that is to trigger the event", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what does the <strong>View Source</strong> Bookmarklet display?</p>", "options": [{"option": "The original source", "correct": false}, {"option": "The source and all Javascript values", "correct": false}, {"option": "The source after applying changes", "correct": true}, {"option": "The source and all images", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to set a four digit year?</p>", "options": [{"option": "setyear()", "correct": false}, {"option": "setfullyear()", "correct": false}, {"option": "setYear()", "correct": false}, {"option": "setFullYear()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events causes a delay?</p>", "options": [{"option": "ondelay", "correct": false}, {"option": "setTimeout", "correct": true}, {"option": "setDelay", "correct": false}, {"option": "ontimeout", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following values can be returned by the functions in JavaScript?</p>", "options": [{"option": "Text", "correct": false}, {"option": "True or False", "correct": false}, {"option": "Numbers", "correct": false}, {"option": "Variable or object", "correct": true}], "level": "Easy"}, {"question": "<p>___________________________ is used to find errors in a JavaScript program.</p>", "options": [{"option": "Displaying the current values of the variables", "correct": false}, {"option": "Indicating the execution path", "correct": false}, {"option": "Pausing the execution", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is not triggered by clicking the field with the mouse?</p>", "options": [{"option": "onfocus", "correct": false}, {"option": "onclick", "correct": false}, {"option": "onkeydown", "correct": true}, {"option": "onmousedown", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to reference an entry in an array?</p>", "options": [{"option": "myarray(entry)", "correct": false}, {"option": "myarray[entry]", "correct": true}, {"option": "myarray{entry}", "correct": false}, {"option": "myarray<entry>", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>++</strong> operator in JavaScript?</p>", "options": [{"option": "It adds two numbers.", "correct": false}, {"option": "It joins two text strings together.", "correct": false}, {"option": "It adds 1 to the number.", "correct": true}, {"option": "It adds 2 to the number.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how many <strong>event triggers</strong> can a web page contain?</p>", "options": [{"option": "One", "correct": false}, {"option": "One per HTML tag", "correct": false}, {"option": "As many as needed", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following characters is at the beginning of variable names?</p>", "options": [{"option": "An underscore", "correct": false}, {"option": "A comma", "correct": false}, {"option": "A letter", "correct": false}, {"option": "An underscore or a letter", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these is the main purpose of JavaScript in a web browser?</p>", "options": [{"option": "Creating animations and other visual effects ", "correct": true}, {"option": "User interface ", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "Visual effects", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is used to traverse and manipulate the document contents of the program?</p>", "options": [{"option": "Element ", "correct": false}, {"option": "Document ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to define the behavior of the document element?</p>", "options": [{"option": "Document object", "correct": false}, {"option": "Registering appropriate event handlers", "correct": true}, {"option": "Element object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the service that enables networking through scripted HTTP requests is called as the ________________________.</p>", "options": [{"option": "XMLHttpResponse ", "correct": false}, {"option": "XMLRequest ", "correct": false}, {"option": "XMLHttpRequest ", "correct": true}, {"option": "XMLHttpsRequest ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is specified by HTML5 in contrast to JavaScript?</p>", "options": [{"option": "Data storage ", "correct": false}, {"option": "Graphics APIs ", "correct": false}, {"option": "Other APIs for the web apps ", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the code between a pair of the <strong>script</strong> tags is referred to as the _____________.</p>", "options": [{"option": "Non-inline", "correct": false}, {"option": "External", "correct": false}, {"option": "Referenced", "correct": false}, {"option": "Inline", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following does a Client-side JavaScript code is embedded within HTML documents?</p>", "options": [{"option": " A URL that uses the special javascript:encoding", "correct": false}, {"option": "A URL that uses the special javascript:stack", "correct": false}, {"option": "A URL that uses the special javascript:protocol", "correct": true}, {"option": " A URL that uses the special javascript:code\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not an advanced service in JavaScript?</p>", "options": [{"option": "Data storage", "correct": false}, {"option": "Networking", "correct": false}, {"option": "XMLHttpRequest object", "correct": false}, {"option": "None of these\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>What is the reason behind the philosophy that argues that content and behaviour should as much as possible be kept separate?</p>", "options": [{"option": "Unobtrusive JavaScript", "correct": true}, {"option": "Obtrusive JavaScript", "correct": false}, {"option": " Inherited JavaScript", "correct": false}, {"option": "Modular JavaScript\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web pages is used to communicate with server-side CGI scripts through HTML form submissions?</p>", "options": [{"option": "Static ", "correct": false}, {"option": "Interactive ", "correct": true}, {"option": "Conditional ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why do JavaScript and Java have similar names?</p>", "options": [{"option": "JavaScript is a stripped-down version of Java.", "correct": false}, {"option": "JavaScript's syntax is loosely based on that of Java's.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, ________________________ helps in executing when a user views a page containing a JavaScript program ?</p>", "options": [{"option": "The User's machine running a web browser", "correct": true}, {"option": "The Web server", "correct": false}, {"option": "A central machine deep within Netscape's corporate offices", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is also called as the client-side JavaScript?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Navigator", "correct": true}, {"option": "LiveWire", "correct": false}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is also called as the server-side JavaScript?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Navigator", "correct": false}, {"option": "LiveWire", "correct": true}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following variables can be used in the programs?</p>", "options": [{"option": "Storing numbers, dates, or other values", "correct": true}, {"option": "Varying randomly", "correct": false}, {"option": "Causing high-school algebra flashbacks\r\n", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following can respond to user events which are listed below?</p>\n<p>a) mouse-clicks</p>\n<p>b) form input</p>\n<p>c) page navigation</p>", "options": [{"option": "Client-side", "correct": true}, {"option": "Server-side", "correct": false}, {"option": "Local", "correct": false}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "<p>What should appear at the end of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    The &lt;script LANGUAGE=\"\"JavaScript\"\"&gt;tag\"\n</code></pre><p></p>", "options": [{"option": "</script>", "correct": true}, {"option": "<script>", "correct": false}, {"option": "The END statement", "correct": false}, {"option": "LANGUAGE", "correct": false}], "level": "Easy"}, {"question": "<p>What cannot be done with client-side JavaScript?</p>", "options": [{"option": "Validating a form", "correct": false}, {"option": "Sending a form's contents by email", "correct": false}, {"option": "Storing the form's contents to a database file on the server", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following capabilities are included in functions?</p>", "options": [{"option": "Return values", "correct": false}, {"option": "Accept parameters and return values", "correct": false}, {"option": "Accept parameters", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a valid variable name?</p>", "options": [{"option": "2names", "correct": true}, {"option": " _first_and_last_names", "correct": false}, {"option": "FirstAndLast", "correct": false}, {"option": "name12", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags is used to encircle multiple statements in JavaScript?</p>", "options": [{"option": "<SCRIPT>", "correct": true}, {"option": "<BODY>", "correct": false}, {"option": "<HEAD>", "correct": false}, {"option": "<TITLE>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes includes the version details?</p>", "options": [{"option": "Language", "correct": true}, {"option": "Script", "correct": false}, {"option": "Version", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to indicate the <strong>LANGUAGE</strong> attribute?</p>", "options": [{"option": "<LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">    JavaScript statements\u2026</SCRIPT>", "correct": true}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\"!>    JavaScript statements\u2026</SCRIPT>", "correct": false}], "level": "Easy"}, {"question": "<p>Which of following image maps is used in JavaScript?</p>", "options": [{"option": "Server-side ", "correct": false}, {"option": "Client-side ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to change the text within the paragraph which includes the <strong>para1</strong> DOM object?</p>", "options": [{"option": "\"New Text\"", "correct": false}, {"option": "para1.value=\"New Text\";", "correct": true}, {"option": "para1.firstChild.nodeValue= \"New Text\";", "correct": false}, {"option": "para1.nodeValue=\"New Text\";", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about JavaScript is correct?</p>", "options": [{"option": "It is a low-level programming language.", "correct": false}, {"option": "It is a scripting language pre-compiled in the browser.", "correct": false}, {"option": "It is a compiled scripting language.", "correct": false}, {"option": "It is an object-oriented scripting language.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following operators is not supported by JavaScript?</p>", "options": [{"option": "new", "correct": false}, {"option": "this", "correct": true}, {"option": "delete", "correct": false}, {"option": "typeof", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is fired when the <strong>form</strong> element loses focus?</p>", "options": [{"option": "onfocus", "correct": false}, {"option": "onblur", "correct": true}, {"option": "onclick", "correct": false}, {"option": "ondblclick", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the correct syntax for the <strong>Eval</strong> function?</p>", "options": [{"option": "[objectName.]eval(numeric)].", "correct": false}, {"option": "[objectName.]eval(string)", "correct": true}, {"option": "[EvalName.]eval(string)", "correct": false}, {"option": "[EvalName.]eval(numeriC.\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is used to interpret JavaScript code?</p>", "options": [{"option": "Client", "correct": true}, {"option": "Server", "correct": false}, {"option": "Object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to test for a specific condition in JavaScript?</p>", "options": [{"option": "Select", "correct": true}, {"option": "If", "correct": false}, {"option": "Switch", "correct": false}, {"option": "For", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following algorithms supports the <strong>blob</strong> objects in JavaScript?</p>", "options": [{"option": "Structured clone", "correct": true}, {"option": "Double buffer", "correct": false}, {"option": "Chen\u2019s ", "correct": false}, {"option": "Retrieval ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to create the <strong>Date</strong> objects in JavaScript?</p>", "options": [{"option": "dateObjectName = new Date([parameters])", "correct": true}, {"option": "dateObjectName.new Date([parameters])", "correct": false}, {"option": "dateObjectName += new Date([parameters])", "correct": false}, {"option": "dateObjectName Date([parameters])", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to add or remove elements from arrays?</p>", "options": [{"option": "Reverse", "correct": false}, {"option": "Shift", "correct": false}, {"option": "Slice", "correct": false}, {"option": "Splice", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to mount up the windows that can capture all <strong>Click</strong> events?</p>", "options": [{"option": "window.captureEvents(Event.CLICK);", "correct": true}, {"option": "window.handleEvents (Event.CLICK);", "correct": false}, {"option": "window.routeEvents(Event.CLICK );", "correct": false}, {"option": "window.raiseEvents(Event.CLICK );", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following elements is used to handle the mouse events in Netscape?</p>", "options": [{"option": "<IMG>", "correct": false}, {"option": "<A>", "correct": true}, {"option": "<BR>", "correct": false}, {"option": "<h>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a tainted property of the window object?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Protocol", "correct": false}, {"option": "Defaultstatus", "correct": true}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to enable data tainting in JavaScript?</p>", "options": [{"option": "ENABLE_TAINT", "correct": false}, {"option": "MS_ENABLE_TAINT", "correct": false}, {"option": "NS_ENABLE_TAINT", "correct": true}, {"option": "ENABLE_TAINT_NS", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is created when an object is sent to Java?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is used to provide an interface that can invoke methods and examine properties?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a wrapped array that is accessed from its code?</p>", "options": [{"option": "JavaArray", "correct": true}, {"option": "JavaClass", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a reference to the classes in the Java package?</p>", "options": [{"option": "JavaArray", "correct": false}, {"option": "JavaClass", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following instances is available to the Java code?</p>", "options": [{"option": "netscape.javascript.JSObject", "correct": false}, {"option": "netscape.javascript.JSException", "correct": true}, {"option": "netscape.plugin.JSException", "correct": false}, {"option": "netscape.java.JSException", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is added to the <strong>prefs.js</strong> file to automatically open the console at the occurrence of an error?</p>", "options": [{"option": "user_pref(\" javascript.console.open_on_error\", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error\", true);", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is added to the <strong>prefs.js</strong> file to open a dialog box at the occurrence of an error?</p>", "options": [{"option": "user_pref(\"javascript.classic.error_alerts\", true);", "correct": true}, {"option": "user_pref(\"javascript.classic.error_alerts \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", false);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the correct syntax of the <strong>blur</strong> method in the <strong>button</strong> object?</p>", "options": [{"option": "Blur()", "correct": true}, {"option": "Blur(contrast)", "correct": false}, {"option": "Blur(value)", "correct": false}, {"option": "Blur(depth)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the correct syntax for the <strong>capture events</strong> method of the <strong>document</strong> object?</p>", "options": [{"option": "captureEvents()", "correct": false}, {"option": "captureEvents(args eventType)", "correct": false}, {"option": "captureEvents(eventType)", "correct": true}, {"option": "captureEvents(eventVal)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the correct syntax of the <strong>close</strong> method for the <strong>document</strong> object?</p>", "options": [{"option": "Close(doC.)", "correct": false}, {"option": "Close(object)", "correct": false}, {"option": "Close(val)", "correct": false}, {"option": "Close()", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n        y=4+\"4\";\n        document.write(y);\n    &lt;/script&gt;\n</code></pre><p></p>", "options": [{"option": "44", "correct": true}, {"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "4\"4\"", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about declarations is correct?</p>", "options": [{"option": "Storing a value in a variable is called variable declaration.", "correct": false}, {"option": "The var keyword is used only for declarations.", "correct": false}, {"option": "The var keyword is used for the declarations or the initialization.", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the scripting language is a _____________ level programming language.</p>", "options": [{"option": "High", "correct": true}, {"option": "Assembly ", "correct": false}, {"option": "Machine ", "correct": false}, {"option": "Low ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what does the <strong>getSelection()</strong> method return?</p>", "options": [{"option": "The value of a selected option", "correct": false}, {"option": "The document.URL of the window in focus", "correct": false}, {"option": "The value of the cursor-selected text", "correct": true}, {"option": "The value of a checked radio input", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a client-side object in JavaScript?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Medium"}, {"question": "<p>What is the significance of the \"this\" keyword in JavaScript?</p>", "options": [{"option": "It refers the current object.", "correct": true}, {"option": "It refers the previous object.", "correct": false}, {"option": "It is a variable which contains a value.", "correct": false}, {"option": "It refers to the current-next value.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    d();\n    console.log(a);\n\n    var a='abc';\n    function d()\n    {\n        console.log(\"called d!\");\n    }\n\n</code></pre><p></p>", "options": [{"option": "Undefined\r\n ", "correct": false}, {"option": "called d!\r\nundefined", "correct": true}, {"option": "called d!\r\nabc", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var a;\n\nif (a===undefined)\n\n{\n\n    console.log('a is not defined!');\n\n }\n\nelse\n\n{\n\n    console.log('a is defined!');\n\n}\n</code></pre>", "options": [{"option": "a is defined!  ", "correct": false}, {"option": "a is not defined!  ", "correct": true}, {"option": "Runtime error  ", "correct": false}, {"option": "Compilation error  ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>     var a = 'Hello World!';\n     console.log(a);\n     a = undefined;\n     if(a===undefined)  {\n        console.log('a is not defined!');\n     } else  {\n        console.log('a is defined!');\n     }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Hello World!\r\na is not defined!", "correct": true}, {"option": "Hello World!\r\na is defined!", "correct": false}, {"option": "a is defined!", "correct": false}, {"option": "Hello World!", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hack(){\n        var myvar;\n        console.log(myvar);\n    }\n\n    function hacker(){\n        var myvar=2;\n        console.log(myvar);\n        hack();\n    }\n    var myvar=5;\n    console.log(myvar);\n    hacker();\n    console.log(myvar);\n</code></pre><p></p>", "options": [{"option": "Undefined\r\n2\r\n5\r\n5", "correct": false}, {"option": "5\r\n2\r\nUndefined\r\n5", "correct": true}, {"option": "5\r\n5\r\nUndefined\r\n2", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hack(){\n        console.log(myvar);\n    }\n\n    function hacker(){\n        var myvar=2;\n        hack();\n    }\n    var myvar=1;\n    hacker();\n</code></pre><p></p>", "options": [{"option": "Undefined", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Undefined\r\n1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>        function hack(){\n            function hacker(){\n               console.log(myvar);\n            }\n            var myvar=2;\n            hacker();\n        }\n        var myvar=1;\n        hack();\n        hacker();\n</code></pre><p></p>", "options": [{"option": "2, undefined  ", "correct": false}, {"option": "2, Uncaught referenceError: hacker is not defined", "correct": true}, {"option": "2, 1  ", "correct": false}, {"option": "1, 2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a=4,b=6,c=9;\n\n    c=b=a;\n    console.log(c);\n\n</code></pre><p></p>", "options": [{"option": "9", "correct": false}, {"option": "4", "correct": true}, {"option": "6", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = 1 + '1'\n    console.log(a);\n</code></pre><p></p>", "options": [{"option": "2", "correct": false}, {"option": "11 ", "correct": true}, {"option": "101 ", "correct": false}, {"option": "0 ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>console.log(3&lt;2&lt;1);\n</code></pre>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>console.log(\" \"== 0);\n</code></pre>", "options": [{"option": "false   ", "correct": false}, {"option": "true  ", "correct": true}, {"option": "uncaught syntaxError  ", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a;\n    a=0;\n    if(a||a ===0)\n    {\n    console.log('Hack');\n    }\n\n</code></pre><p></p>", "options": [{"option": "Uncaught referenceError", "correct": false}, {"option": "Hack", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following languages is used by HTML <strong>canvas</strong> to draw 2D images?</p>", "options": [{"option": "XML", "correct": false}, {"option": "HTML", "correct": false}, {"option": "Javascript", "correct": true}, {"option": "XHTML", "correct": false}], "level": "Easy"}, {"question": "<p>Assume that File is an abstract class and has <strong>toFile()</strong> method. <strong>ImageFile</strong> and <strong>BinaryFile</strong> are concrete classes of the abstract class File. Also, assume that the method toFile() is implemented in both Binary File and Image File. A File references an ImageFile object in memory and the toFile method is called, which implementation method will be called?</p>", "options": [{"option": "Binary File", "correct": false}, {"option": "Image File", "correct": true}, {"option": "Both File and Binary Files", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre><code>class PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}\n</code></pre>", "options": [{"option": " 12 15 ", "correct": false}, {"option": " 15 15\r\n ", "correct": true}, {"option": " 3 4 5 3 7 5 ", "correct": false}, {"option": " 3 7 5 3 7 5 ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class Test \n{\n    public static void main(String [] args) \n    {\n        Test p = new Test();\n        p.start();\n    }\n\n    void start() \n    {\n        boolean b1 = false;\n        boolean b2 = fix(b1);\n        System.out.println(b1 + \" \" + b2);\n    }\n\n    boolean fix(boolean b1) \n    {\n        b1 = true;\n        return b1;\n    }\n}\n</code></pre>", "options": [{"option": " true true", "correct": false}, {"option": " false true", "correct": true}, {"option": " true false", "correct": false}, {"option": " false false", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre><code>class PassS \n{\n    public static void main(String [] args) \n    {\n        PassS p = new PassS();\n        p.start();\n    }\n\n    void start() \n    {\n        String s1 = \"slip\";\n        String s2 = fix(s1);\n        System.out.println(s1 + \" \" + s2);\n    }\n\n    String fix(String s1) \n    {\n        s1 = s1 + \"stream\";\n        System.out.print(s1 + \" \");\n        return \"stream\";\n    }\n}\n</code></pre>", "options": [{"option": " slip stream ", "correct": false}, {"option": " slipstream stream ", "correct": false}, {"option": " stream slip stream\t ", "correct": false}, {"option": " slipstream slip stream ", "correct": true}], "level": "Medium"}, {"question": "<p>Which is true about a method-local inner class?</p>", "options": [{"option": " It must be marked final ", "correct": false}, {"option": " It can be marked abstract ", "correct": true}, {"option": " It can be marked public. ", "correct": false}, {"option": " It can be marked static ", "correct": false}], "level": "Easy"}, {"question": "<p>Which statement is true about a static nested class?</p>", "options": [{"option": " You must have a reference to an instance of the enclosing class in order to instantiate it. ", "correct": false}, {"option": " It does not have access to nonstatic members of the enclosing class. ", "correct": true}, {"option": " It's variables and methods must be static. ", "correct": false}, {"option": " It must extend the enclosing class. ", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>class Foo \n{\n    class Bar{ }\n}\nclass Test \n{\n    public static void main (String [] args) \n    {\n        Foo f = new Foo();\n        /* Line 10: Missing statement ? */\n    }\n}\n</code></pre>\n<p>which statement, inserted at line 10, creates an instance of Bar?</p>", "options": [{"option": "  Foo.Bar b = new Foo.Bar();  ", "correct": false}, {"option": "  Foo.Bar b = f.new Bar();  ", "correct": true}, {"option": "  Bar b = new f.Bar();  ", "correct": false}, {"option": "  Bar b = f.new Bar();  ", "correct": false}], "level": "Medium"}, {"question": "<p>What happens if you call deleteRow() on a ResultSet object?</p>", "options": [{"option": " The row you are positioned on is deleted from the ResultSet, but not from the database. ", "correct": false}, {"option": " The row you are positioned on is deleted from the ResultSet and from the database ", "correct": true}, {"option": " The result depends on whether the property synchronizeWithDataSource is set to true or false ", "correct": false}, {"option": " You will get a compile error: the method does not exist because you can not delete rows from a ResultSet ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is synchronized?</p>", "options": [{"option": " Set ", "correct": false}, {"option": " LinkedList ", "correct": false}, {"option": " Vector ", "correct": true}, {"option": " WeakHashMap ", "correct": false}], "level": "Easy"}, {"question": "<p>The object of DataInputStream is used to</p>", "options": [{"option": "To covert binary stream into character stream", "correct": true}, {"option": "To covert character stream into binary stream", "correct": false}, {"option": "To write data onto output object", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Medium"}, {"question": "<p>To execute the threads one after another         </p>", "options": [{"option": "the keyword synchronize is used", "correct": false}, {"option": "the keyword synchronizable is used", "correct": true}, {"option": "the keyword synchronized is used", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which two are valid constructors for Thread?</p>\n<p>1 Thread(Runnable r, String name)</p>\n<p>2 Thread()</p>\n<p>3 Thread(int priority)</p>\n<p>4 Thread(Runnable r, ThreadGroup g)</p>\n<p>5 Thread(Runnable r, int priority)    </p>", "options": [{"option": "    1 and 3\t\r\n    ", "correct": false}, {"option": "    1 and 2\t    ", "correct": true}, {"option": "    2 and 5    ", "correct": false}, {"option": "    2 and 4    ", "correct": false}], "level": "Medium"}, {"question": "<p>What allows the programmer to destroy an object x in Java?</p>", "options": [{"option": "  x.delete().  ", "correct": false}, {"option": "  x.finalize()\r\n  ", "correct": false}, {"option": "  Runtime.getRuntime().gc()\r\n  ", "correct": false}, {"option": "  Only the garbage collection system can destroy an object  ", "correct": true}], "level": "Easy"}, {"question": "<p>Which cause a compiler error?</p>", "options": [{"option": " Integer results[ ] = {new Integer(3), new Integer(5), new Integer(8)}; ", "correct": false}, {"option": " boolean results[ ] = new boolean [] {true, false, true}; ", "correct": false}, {"option": " String cats[ ] = {\"Fluffy\", \"Spot\", \"Zeus\"}; ", "correct": false}, {"option": " int [ ][ ] scores = {2,7,6}, {9,3,45}; ", "correct": true}, {"option": " int[ ] scores = {3, 5, 7}; ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the widest valid returnType for methodA in line 3?</p>\n<pre class=\"prettyprint\"><code>class ReturnIt \n{ \n    returnType methodA(byte x, double y) /* Line 3 */\n    { \n        return (long)x / y * 2; \n    } \n}\n</code></pre>", "options": [{"option": "   int   ", "correct": false}, {"option": "   byte   ", "correct": false}, {"option": "   long   ", "correct": false}, {"option": "   double   ", "correct": true}], "level": "Easy"}, {"question": "<p>Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?    </p>", "options": [{"option": " TreeMap\r\n ", "correct": false}, {"option": " HashMap\r\n ", "correct": false}, {"option": " LinkedHashMap\r\n ", "correct": true}, {"option": " The answer depends on the implementation of the existing instance. ", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>\n</code></pre>\n<p>Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?</p>", "options": [{"option": " java.util.HashSet ", "correct": false}, {"option": " java.util.LinkedHashSet ", "correct": false}, {"option": " java.util.List ", "correct": false}, {"option": " java.util.ArrayList    ", "correct": true}], "level": "Easy"}, {"question": "<p>Which interface does java.util.Hashtable implement?</p>", "options": [{"option": " Java.util.Collection ", "correct": false}, {"option": " Java.util.HashTable ", "correct": false}, {"option": " Java.util.Map ", "correct": true}, {"option": " Java.util.List ", "correct": false}], "level": "Easy"}, {"question": "<p>Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?      </p>", "options": [{"option": " java.util.ArrayList\t\r\n ", "correct": false}, {"option": " java.util.HashMap ", "correct": false}, {"option": " java.util.LinkedHashMap ", "correct": true}, {"option": " java.util.TreeMap ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is/are true statements?</p>", "options": [{"option": "AbstractSet extends AbstractClass", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": true}, {"option": "HashSet extends AbstractCollection\r\n ", "correct": false}, {"option": "all of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which statement,when placed in a class other than output or input, would instantiates an instance of the nested class?</p>\n<p>public class output \n    public static class input \n    {\n        public static void foo() { }\n    }\n}</p>", "options": [{"option": "output.input m = new output.input();", "correct": true}, {"option": "output.input mi = new input();", "correct": false}, {"option": "output m = new output();\r\noutput.input mi = m.new output.input();", "correct": false}, {"option": "input mi = new output.input();", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the most restrictive access modifier that will allow members of one class to have access to members of another class within in the same package?</p>", "options": [{"option": "abstract", "correct": false}, {"option": "protected", "correct": false}, {"option": "default access", "correct": true}, {"option": "synchronized\t", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is used to create an instance of an array?            </p>", "options": [{"option": "int[ ] i = new int[15];", "correct": true}, {"option": "float f = new float[20];", "correct": false}, {"option": "char[ ] c = \"Some String\";", "correct": false}, {"option": "int i[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };", "correct": false}], "level": "Easy"}, {"question": "<p>Is following loop valid in java?\nwhile(1)\n{\n//some code\n}</p>", "options": [{"option": "no", "correct": true}, {"option": "yes", "correct": false}, {"option": "depends upon compiler", "correct": false}, {"option": "none of these", "correct": false}], "level": "Easy"}, {"question": "<p>What action will be performed by finally in the below code?\ntry{\n//some code\nreturn();\n}\nfinally{\n//some code\n}</p>", "options": [{"option": "no,as it exits the program", "correct": false}, {"option": "finally always gets executed", "correct": true}, {"option": "none of these", "correct": false}], "level": "Easy"}, {"question": "<p>Does the finally gets executed in the below code?\ntry{\n//some code\nSystem.exit();\n}\nfinally{\n//some code\n}</p>", "options": [{"option": "no,as it exits the program", "correct": true}, {"option": "finally always gets executed", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>How can a <strong>dead thread</strong> be restarted? </p>", "options": [{"option": "with the help of danging pointers", "correct": false}, {"option": "garbage collector", "correct": false}, {"option": "cannot be restarted", "correct": true}], "level": "Easy"}, {"question": "<p>Does a class inherit the constructors of its superclass?</p>", "options": [{"option": "A class does inherit constructors from any of its super classes", "correct": false}, {"option": "A class does not inherit constructors from any of its super classes", "correct": true}, {"option": "none of these", "correct": false}], "level": ""}, {"question": "<p>Can an object be garbage collected while it is still reachable? </p>", "options": [{"option": "A reachable object cannot be garbage collected", "correct": true}, {"option": "A reachable object can always be garbage collected", "correct": false}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>Can an anonymous class be declared as implementing an interface and extending a class?</p>", "options": [{"option": "An anonymous class cannot implement an interface or extend a superclass, but can be declared to do both", "correct": false}, {"option": "An anonymous class may implement an interface or extend a superclass, but may not be declared to do both", "correct": true}, {"option": "none of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which two are valid constructors for Thread?      </p>\n<pre class=\"prettyprint\"><code>1. Thread(Runnable r, String name)\n2.  Thread()\n3.  Thread(int priority)\n4.  Thread(Runnable r, ThreadGroup g)\n5.  Thread(Runnable r, int priority)\n</code></pre>", "options": [{"option": "  1 and 3  ", "correct": false}, {"option": "  2 and 4  ", "correct": false}, {"option": "  1 and 2  ", "correct": true}, {"option": "  2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given these classes:</p>\n<pre class=\"prettyprint\"><code>public class Person{\npublic void talk(){\nSystem.out.print(\"I am a Person \");\n}\npublic class Student extends Person {\npublic void talk(){\nSystem.out.print(\"I am a Student \");\n}\n</code></pre>\n<p>what is the result of this piece of code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String args[]){\nPerson p = new Student();\np.talk();\n}\n}\n</code></pre>", "options": [{"option": "  I am a Person  ", "correct": false}, {"option": "  I am a Student  ", "correct": true}, {"option": "  I am a Person I am a Student  ", "correct": false}, {"option": "   I am a Student I am a Person  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following piece of code:</p>\n<pre class=\"prettyprint\"><code>class Person { public int number; }\n\npublic class Test{\npublic void doIt(int i , Person p){\ni = 5;\np.number = 8;\n}\n\npublic static void main(String args[]){\nint x = 0;\nPerson p = new Person();\nnew Test().doIt(x, p);\nSystem.out.println(x + \" \" + p.number);\n\n}\n}\n</code></pre>\n<p>What is the result?</p>", "options": [{"option": "  0 8  ", "correct": true}, {"option": "  5 0  ", "correct": false}, {"option": "  0 0  ", "correct": false}, {"option": "  5 8  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following piece of code:</p>\n<pre class=\"prettyprint\"><code>public class MyThread extends Thread{\nprivate String text;\npublic MyThread(String text)\n{\n   this.text=text;\n }\npublic void run(){\nSystem.out.print(text);\n}\n}\n\npublic class Test{\npublic static void main(String args[]){\nMyThread t1 = new MyThread(\"One\");\nMyThread t2 = new MyThread(\"Two\");\nt1.start();\nt2.start();\nSystem.out.print(\"three \");\n\n}\n\n}\n</code></pre>\n<p>Which of the following statements is true?</p>", "options": [{"option": "  If you execute this program, the result is always one two three\n  ", "correct": false}, {"option": "  If you execute this program, the result is always three one two\n  ", "correct": false}, {"option": "  The result of this program is undetermined.  ", "correct": true}, {"option": "  Compilation will fail.  ", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>public class Outer \n{ \n    public void someOuterMethod() \n    {\n        //Line 5 \n    } \n    public class Inner { }\n\n    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n}\n</code></pre>\n<p>Which of the following code fragments inserted, will allow to compile?</p>", "options": [{"option": "  new Inner(); //At line 5  ", "correct": true}, {"option": "  new Inner(); //At line 10  ", "correct": false}, {"option": "  new ot.Inner(); //At line 10  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class A \n{\n    final public int GetResult(int a, int b) { return 0; } \n} \nclass B extends A \n{ \n    public int GetResult(int a, int b) {return 1; } \n} \npublic class Test \n{\n    public static void main(String args[]) \n    { \n        B b = new B(); \n        System.out.println(\"x = \" + b.GetResult(0, 1));  \n    } \n}\n</code></pre>", "options": [{"option": " x = 0   ", "correct": false}, {"option": " x = 1   ", "correct": true}, {"option": " Compilation fails.   ", "correct": false}, {"option": " An exception is thrown at runtime.   ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class Super\n{ \n    public int i = 0;\n\n    public Super(String text) /* Line 4 */\n    {\n        i = 1; \n    } \n}\n\nclass Sub extends Super\n{\n    public Sub(String text)\n    {\n        i = 2; \n    }\n\n    public static void main(String args[])\n    {\n        Sub sub = new Sub(\"Hello\"); \n        System.out.println(sub.i); \n    } \n}\n</code></pre>", "options": [{"option": "  0  ", "correct": false}, {"option": "  1  ", "correct": false}, {"option": "  2   ", "correct": false}, {"option": "  Compilation fails.  ", "correct": true}], "level": "Hard"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}\n</code></pre>", "options": [{"option": "  12 15  ", "correct": false}, {"option": "  15 15\r\n  ", "correct": true}, {"option": "  3 4 5 3 7 5  ", "correct": false}, {"option": "  3 7 5 3 7 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which two are valid constructors for Thread?      </p>\n<pre class=\"prettyprint\"><code>1. Thread(Runnable r, String name)\n2.  Thread()\n3.  Thread(int priority)\n4.  Thread(Runnable r, ThreadGroup g)\n5.  Thread(Runnable r, int priority)\n</code></pre>", "options": [{"option": "  1 and 3  ", "correct": false}, {"option": "  2 and 4  ", "correct": false}, {"option": "  1 and 2  ", "correct": true}, {"option": "  2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given these classes:</p>\n<pre class=\"prettyprint\"><code>public class Person{\npublic void talk(){\nSystem.out.print(\"I am a Person \");\n}\npublic class Student extends Person {\npublic void talk(){\nSystem.out.print(\"I am a Student \");\n}\n</code></pre>\n<p>what is the result of this piece of code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String args[]){\nPerson p = new Student();\np.talk();\n}\n}\n</code></pre>", "options": [{"option": "  I am a Person  ", "correct": false}, {"option": "  I am a Student  ", "correct": true}, {"option": "  I am a Person I am a Student  ", "correct": false}, {"option": "   I am a Student I am a Person  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following piece of code:</p>\n<pre class=\"prettyprint\"><code>class Person { public int number; }\n\npublic class Test{\npublic void doIt(int i , Person p){\ni = 5;\np.number = 8;\n}\n\npublic static void main(String args[]){\nint x = 0;\nPerson p = new Person();\nnew Test().doIt(x, p);\nSystem.out.println(x + \" \" + p.number);\n\n}\n}\n</code></pre>\n<p>What is the result?</p>", "options": [{"option": "  0 8  ", "correct": true}, {"option": "  5 0  ", "correct": false}, {"option": "  0 0  ", "correct": false}, {"option": "  5 8  ", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following piece of code:</p>\n<pre class=\"prettyprint\"><code>public class MyThread extends Thread{\nprivate String text;\npublic MyThread(String text)\n{\n   this.text=text;\n }\npublic void run(){\nSystem.out.print(text);\n}\n}\n\npublic class Test{\npublic static void main(String args[]){\nMyThread t1 = new MyThread(\"One\");\nMyThread t2 = new MyThread(\"Two\");\nt1.start();\nt2.start();\nSystem.out.print(\"three \");\n\n}\n\n}\n</code></pre>\n<p>Which of the following statements is true?</p>", "options": [{"option": "  If you execute this program, the result is always one two three\n  ", "correct": false}, {"option": "  If you execute this program, the result is always three one two\n  ", "correct": false}, {"option": "  The result of this program is undetermined.  ", "correct": true}, {"option": "  Compilation will fail.  ", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>public class Outer \n{ \n    public void someOuterMethod() \n    {\n        //Line 5 \n    } \n    public class Inner { }\n\n    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n}\n</code></pre>\n<p>Which of the following code fragments inserted, will allow to compile?</p>", "options": [{"option": "  new Inner(); //At line 5  ", "correct": true}, {"option": "  new Inner(); //At line 10  ", "correct": false}, {"option": "  new ot.Inner(); //At line 10  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class A \n{\n    final public int GetResult(int a, int b) { return 0; } \n} \nclass B extends A \n{ \n    public int GetResult(int a, int b) {return 1; } \n} \npublic class Test \n{\n    public static void main(String args[]) \n    { \n        B b = new B(); \n        System.out.println(\"x = \" + b.GetResult(0, 1));  \n    } \n}\n</code></pre>", "options": [{"option": " x = 0   ", "correct": false}, {"option": " x = 1   ", "correct": true}, {"option": " Compilation fails.   ", "correct": false}, {"option": " An exception is thrown at runtime.   ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class Super\n{ \n    public int i = 0;\n\n    public Super(String text) /* Line 4 */\n    {\n        i = 1; \n    } \n}\n\nclass Sub extends Super\n{\n    public Sub(String text)\n    {\n        i = 2; \n    }\n\n    public static void main(String args[])\n    {\n        Sub sub = new Sub(\"Hello\"); \n        System.out.println(sub.i); \n    } \n}\n</code></pre>", "options": [{"option": "  0  ", "correct": false}, {"option": "  1  ", "correct": false}, {"option": "  2   ", "correct": false}, {"option": "  Compilation fails.  ", "correct": true}], "level": "Hard"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class PassA \n{\n    public static void main(String [] args) \n    {\n        PassA p = new PassA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}\n</code></pre>", "options": [{"option": "  12 15  ", "correct": false}, {"option": "  15 15\r\n  ", "correct": true}, {"option": "  3 4 5 3 7 5  ", "correct": false}, {"option": "  3 7 5 3 7 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to declare a module in <strong>JSON</strong>?</p>", "options": [{"option": "<module name=\"xyz\" path=\"link\" style=\"display\">", "correct": false}, {"option": "<module id=\"xyz\" url=\"link\" style=\"display\">", "correct": false}, {"option": "<module name=\"xyz\"  src=\"link\" style=\"display\">", "correct": false}, {"option": "<module id=\"xyz\" src=\"link\" style=\"display\">", "correct": true}], "level": "Medium"}, {"question": "<p>In the following JavaScript code, the <strong><code>getAvg()</code></strong> function _________________________________________.</p>\n\n<pre class=\"prettyprint\"><code>&lt;script&gt;\n    function getAvg(){\n    var average = 0;\n    for(var x = 0; x &lt; 500; x++){\n    average += x;\n    }\n    return(avg/500);\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Multiplies the numbers from 0 to 500", "correct": false}, {"option": "Adds the numbers from 0 to 500", "correct": false}, {"option": "Simply traverses the numbers from 0 to 500", "correct": false}, {"option": "Finds the average of 499 numbers", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code> const pi=3.14;\n    var pi=3;\n    console.log(pi);\n</code></pre>", "options": [{"option": " Flashes an error", "correct": true}, {"option": "Prints 3", "correct": false}, {"option": "Prints 3.14", "correct": false}, {"option": "The code is ambiguous", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript code snippet, the output of <strong><code>oddsums(5)</code></strong> is ________________________________.</p>\n\n<pre class=\"prettyprint\"><code>function oddsums(n) \n{\n     var total = 0, result=[]; \n     for(var x = 1; x &lt;= n; x++) \n     { \n        var odd = 2*x-1; \n        total += odd;\n        result.push(total);\n     }\n     return result;\n}\n</code></pre>", "options": [{"option": "Returns [1,4,9,16,25] ", "correct": true}, {"option": "Returns [1,3,5,7,9,5] ", "correct": false}, {"option": "Returns [3,6,9,12,15] ", "correct": false}, {"option": "Returns [1,3,5,7,9] ", "correct": false}], "level": "Hard"}, {"question": "<p>What does the last statement return in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code> function testhack() \n    {\n        var test = [];\n        for(var z = 0; z &lt; 5; z++)\n            test[z] = function() { return z; };\n        return test;\n    }\n    var test = testhack();\n    test[4]()\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "0", "correct": false}, {"option": "5", "correct": true}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following terms is given to the node object that generates an event?</p>", "options": [{"option": "Listener", "correct": false}, {"option": "Emitter", "correct": true}, {"option": "Dispatcher process", "correct": false}, {"option": "Highevent", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true for this code:</p>\n\n<pre class=\"prettyprint\"><code>class demo&lt;a&gt; { \n        a ob;   \n             }\n</code></pre>", "options": [{"option": "This shows a generic class declaration.", "correct": false}, {"option": "This shows the declaration of a variable. ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to get information about the use and ability of types?</p>", "options": [{"option": "Runtime ID ", "correct": false}, {"option": "Reflection ", "correct": true}, {"option": "Runtime Polymorphism ", "correct": false}, {"option": "Polymorphism", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following operators is used by a test method to call the <strong>get()</strong> function in Java?</p>", "options": [{"option": ":show", "correct": true}, {"option": ";show", "correct": false}, {"option": "#show", "correct": false}, {"option": "&show", "correct": false}], "level": "Hard"}, {"question": "<p>Which one of the  following define the nature of the cookie?</p>", "options": [{"option": "Non Volatile", "correct": false}, {"option": "Volatile", "correct": false}, {"option": "Intransient", "correct": false}, {"option": "Transient", "correct": true}], "level": ""}, {"question": "<p>Which of the following defines the Cookie visibility?</p>", "options": [{"option": "Local Storage", "correct": false}, {"option": "Session Storage", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of the above", "correct": false}], "level": ""}, {"question": "<p>In data structures, assume\u00a0<strong>P</strong>\u00a0be a <strong>quicksort</strong>\u00a0program to sort numbers in the ascending\u00a0order. Let <strong>t1</strong>\u00a0and <strong>t2</strong>\u00a0be the\u00a0execution time of the program for the inputs\u00a0<strong>[1 2 3 4]</strong>\u00a0and <strong>[5 4 3 2 1]</strong>\u00a0respectively. Which of the following statements is true?</p>", "options": [{"option": "t1 = t2 ", "correct": false}, {"option": "t1 > t2 ", "correct": false}, {"option": "t1 < t2 ", "correct": true}, {"option": "t1 = t2 + 5 log 5 ", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What will happen when the following class is compiled (javac JavaTest.java) and then run (java JavaTest)</strong></p>\n<pre><code>  public class JavaTest {\n\n    };\n</code></pre>", "options": [{"option": "A. The class doesn\u2019t compile", "correct": true}, {"option": "B. Nothing", "correct": false}, {"option": "C. Exception is thrown", "correct": false}, {"option": "D. Deadlock occurs", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n    private static int[] a = { 1, 2, 3, 4, 5 };\n\n    public static void main(String args[]) {\n        for(int i = 1; i &lt;= 5; ++i) {\n            System.out.print(a[i]);\n        }\n    }\n};\n</code></pre>", "options": [{"option": "A. 12345", "correct": true}, {"option": "B. 1234 and then exception is thrown", "correct": false}, {"option": "C. nothing, exception is thrown", "correct": false}, {"option": "D. 2345 and then exception is thrown", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n    public static void main(String args[]) {\n        A a = new A();\n        a.foo();\n\n        B b = new B();\n        b.foo();\n        b.bar();\n\n        A ab = new B();\n        ab.foo();\n    }\n};\n\nclass A {\n    public void foo() {\n        System.out.print(\"Foo\");\n    }\n}\n\nclass B extends A {\n    public void foo() {\n        System.out.print(\"Bar\");\n    }\n\n    public void bar() {\n        System.out.print(\"Surprise\");\n    }\n}\n</code></pre>", "options": [{"option": "A. FooBarSurpriseBar", "correct": true}, {"option": "B. FooFooBarSurpriseBar ", "correct": false}, {"option": "C. FooFooBarSurpriseFoo", "correct": false}, {"option": "D. FooBarSurpriseFoo", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n    private double array[] = { 1.0, 1.1, 1.2, 1.3, 1.4 };\n\n    public static void main(String args[]) {\n            for(int i = 0; i &lt; array.length; ++i) {\n                for(int j = 1; j &lt; i; ++j) {\n                    System.out.print(array[i*j % array.length] + \u201c \u201c);\n                }\n            }\n    }\n};\n</code></pre>", "options": [{"option": "A. 1.2 1.3 1.1 1.4 1.3 1.2", "correct": true}, {"option": "B. 1.2 1.3 1.4 1.1", "correct": false}, {"option": "C. 1.1 1.2 1.3 1.4 1.5", "correct": false}, {"option": "D. exception is thrown", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>Given:</strong></p>\n<pre><code>public class JavaTest {\n    private Integer variable = 100;\n\n    public JavaTest go(JavaTest j) {\n        j = null;\n        return j;\n    }\n\n    public static void main(String args[]) {\n        JavaTest j1 = new JavaTest();\n        JavaTest j2 = new JavaTest();\n        JavaTest j3 = j1.go(j2);\n        j1 = null;\n        // here\n    }\n};\n</code></pre>\n<p><strong>How many objects are eligible for garbage collection (GC) when // here is reached</strong></p>", "options": [{"option": "A. 2", "correct": true}, {"option": "B. 1", "correct": false}, {"option": "C. 0", "correct": false}, {"option": "D. It is impossible to know", "correct": false}, {"option": " E. Exception is thrown", "correct": false}, {"option": " F. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>Which three are valid to substitute comment</strong></p>\n<pre><code>public interface SampleInterface {\n    /*insert code here*/ int CONST = 1;\n}\n</code></pre>", "options": [{"option": "A. final", "correct": true}, {"option": "B. native", "correct": false}, {"option": "C. static", "correct": false}, {"option": "D. private", "correct": false}, {"option": " E. protected", "correct": false}, {"option": " F. public", "correct": false}, {"option": " G. abstract", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int i = 3;\n        if(i) {\n            System.out.println(\"if\");\n        } else {\n            System.out.println(\"else\");\n        }\n    }\n};\n</code></pre>", "options": [{"option": "A. if", "correct": true}, {"option": "B. else", "correct": false}, {"option": "C. nothing", "correct": false}, {"option": "D. won\u2019t compile", "correct": false}, {"option": " E. exception is thrown at runtime", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        A a = new B();\n    }\n};\n\nclass A {\n    private String name;\n\n    public A() {\n        name = \"A\";\n        printName();\n    }\n\n    public void printName() {\n        System.out.println(name.toLowerCase());\n    }\n}\n\nclass B extends A {\n    private String newName;\n\n    public B() {\n        newName = \"B\";\n    }\n\n    public void printName() {\n        System.out.println(newName.toLowerCase());\n    }\n}\n</code></pre>", "options": [{"option": "A. a", "correct": true}, {"option": "B. b", "correct": false}, {"option": "C. A", "correct": false}, {"option": "D. B", "correct": false}, {"option": " E. null", "correct": false}, {"option": " F. Exception is thrown", "correct": false}, {"option": " G. Won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>Which Man class properly represents the relationship \u201cMan has a best friend who is a Dog\u201d</strong></p>", "options": [{"option": "A. class Man extends Dog {}", "correct": true}, {"option": "B. class Man implements Dog {}", "correct": false}, {"option": "C. class Man { private BestFriend dog; }", "correct": false}, {"option": "D. class Man { private Dog bestFriend; }", "correct": false}, {"option": " E. class Man { private List<BestFriend> dogs; }", "correct": false}, {"option": " F. class Man { private List<Dog> bestFriends; }", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    private static final String s1 = \"string\";\n    private static String s2 = \"string\";\n\n    public static void main(String args[]) {\n\n        System.out.print((s1 == s2) + \" \");\n        System.out.print(s1.equals(s2) + \" \");\n\n        String s3 = new String(s1);\n        System.out.print((s1 == s3) + \" \" );\n        System.out.print(s1.equals(s3) + \" \");\n    }\n};\n</code></pre>", "options": [{"option": "A. true, true, true, true", "correct": true}, {"option": "B. true, true, false, false", "correct": false}, {"option": "C. false, true, false, true", "correct": false}, {"option": "D. true, true, false, true", "correct": false}, {"option": " E. false, true, true, true", "correct": false}, {"option": " F. won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        A a = new B();\n    }\n};\n\nclass A {\n    private final String member = \"MemberA\";\n    {\n        System.out.print(member);\n    }\n\n    public A() {\n        System.out.print(\"A\");\n    }\n}\n\nclass B extends A {\n    private static final String STATIC = \"Static\";\n    static {\n        System.out.print(STATIC);\n    }\n\n    private String member = \"MemberB\";\n    {\n        System.out.print(member);\n    }\n\n    public B() {\n        System.out.print(\"B\");\n    }\n}\n</code></pre>", "options": [{"option": "A. MemberAAMemberBBStatic", "correct": true}, {"option": "B. StaticMemberAAMemberBB", "correct": false}, {"option": "C. StaticMemberBBMemberAA", "correct": false}, {"option": "D. StaticAMemberABMemberB", "correct": false}, {"option": " E. MemberBBMemberAAStatic", "correct": false}, {"option": " F. Won\u2019t compile", "correct": false}, {"option": " G. Exception is thrown", "correct": false}], "level": ""}, {"question": "<p><strong>Abstract classes:</strong> </p>", "options": [{"option": "A. Cannot have abstract derived classes.", "correct": true}, {"option": "B. Can have objects instantiated from them if the proper permissions are set.", "correct": false}, {"option": "C. Contain at most one abstract function.", "correct": false}, {"option": "D. Are defined, but the programmer never intends to instantiate any objects from them.", "correct": false}, {"option": " E. Must contain at least one abstract function", "correct": false}, {"option": " F. Must not contain any final functions ", "correct": false}, {"option": " G. Must not contain any static functions ", "correct": false}], "level": ""}, {"question": "<p><strong>Given the following DoSomething class definition:</strong></p>\n<pre><code>public class DoSomething implements Runnable {\n    public void run() {\n        System.out.print(\u201cDo something\u201d);\n    }\n}\n</code></pre>\n<p><strong>what is output of the following program?</strong></p>\n<pre><code>public class Main {\n    public static void main(String [] args)\n                throws InterruptedException {\n        DoSomething r = new DoSomething();\n        Thread t = new Thread(r);\n        t.start();\n        t.join();\n        System.out.print(\u201c else \u201d);\n    }\n}\n</code></pre>", "options": [{"option": "A. Do something else", "correct": true}, {"option": "B. else Do something", "correct": false}, {"option": "C. else", "correct": false}, {"option": "D. Do something", "correct": false}, {"option": " E. The output is indeterminate.  ", "correct": false}, {"option": " F. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int[] a = { 1, 2, 3, 4 };\n\n        byte b1 = 1;\n        byte b2 = 2;\n        byte b3 = b1 + b2;\n\n        System.out.println(a[b1]);\n        System.out.println(a[b2]);\n        System.out.println(a[b3]);\n    }\n};\n</code></pre>", "options": [{"option": "A. 1 2 3", "correct": true}, {"option": "B. 2 3 4", "correct": false}, {"option": "C. ArrayIndexOutOfBoundsException is thrown", "correct": false}, {"option": "D. NullPointerException is thrown", "correct": false}, {"option": " E. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n            ((A)new B()).test();\n    }\n};\n\nclass A {\n    public void test() {\n        System.out.println(\"TestA\");\n    }\n}\n\nclass B extends A {\n    public void test() {\n        System.out.println(\"TestB\");\n    }\n}\n</code></pre>", "options": [{"option": "A. ClassCastException is thrown", "correct": true}, {"option": "B. TestA", "correct": false}, {"option": "C. TestB", "correct": false}, {"option": "D. Exception is thrown at runtime but it is not ClassCastException", "correct": false}, {"option": " E. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>Which of these statements is true about the following PrintSomething program?</strong> </p>\n<pre><code>public class PrintSomething implements Runnable {\n   private String value;\n      public PrintSomething(String value) {\n      this.value = value;\n   }\n\n   public void run() {\n      try {\n        Thread.sleep((int) (Math.random() * 4000));\n      }catch(InterruptedException e) {}\n        System.out.print(value);\n   }\n\n   public static void main(String [] args) {\n       Runnable x = new PrintSomething(\u201cx\u201d);\n       Runnable y = new PrintSomething(\u201cy\u201d);\n       Thread one = new Thread(x);\n       Thread two = new Thread(y);\n       two.start();\n       one.start();\n   }\n}\n</code></pre>", "options": [{"option": "A. The output is always xy.  ", "correct": true}, {"option": "B. The output is always yx.  ", "correct": false}, {"option": "C. The output can be either xy or yx.  ", "correct": false}, {"option": "D. Exception is thrown at runtime", "correct": false}, {"option": " E. Compiler error", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample</strong>?</p>\n<pre><code>public class JavaTest {\n\n    private static final int TWO = 2;\n\n    public static void main(String args[]) {\n            int x = 2;\n            switch(x) {\n                case TWO: System.out.print(2);\n                default: System.out.print(\"default\");\n                case 1: System.out.print(1);\n                    break;\n                case 3: System.out.print(3);\n            }\n    }\n};\n</code></pre>", "options": [{"option": "A. 2", "correct": true}, {"option": "B. 2default1", "correct": false}, {"option": "C. 2default13", "correct": false}, {"option": "D. Compilation fails but class can be made to compile by replacing case TWO: with case 2:", "correct": false}, {"option": " E. Compilation fails but class can be made to compile by removing break; statement", "correct": false}, {"option": " F. Compilation fails as default: must be the last possibility in switch statement", "correct": false}], "level": ""}, {"question": "<p><strong>Suppose a class named  com.mycompany.Main  is a Java application, and  Main.class  is in the following directory: \\projects\\build\\com\\mycompany<br />\nWhich of the following commands successfully executes Main?</strong>  </p>", "options": [{"option": "A. java -classpath=\\projects\\build com.mycompany.Main", "correct": true}, {"option": "B. java -classpath \\projects\\build\\com\\mycompany Main", "correct": false}, {"option": "C. java -classpath \\projects\\build com.mycompany.Main   ", "correct": false}, {"option": "D. java -classpath \\projects\\build\\com mycompany.Main", "correct": false}, {"option": " E. java -cp \\projects\\build com.mycompany.Main", "correct": false}], "level": ""}, {"question": "<p><strong>What is the result of the following statements?</strong> </p>\n<pre><code>List &lt;String&gt; list = new ArrayList &lt;String&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}\n</code></pre>", "options": [{"option": "A. onetwo", "correct": true}, {"option": "B. onetwo7", "correct": false}, {"option": "C. onetwo followed by an exception", "correct": false}, {"option": "D. compiler error on line list.add(7);  ", "correct": false}, {"option": " E. compiler error on line for(String s : list) {", "correct": false}], "level": ""}, {"question": "<p><strong>Suppose you have a collection of products for sale in a database and you need to display those products on a web page. The Java code on the server needs to be able to sort the products by price and category. Which of the following collections classes in the  java.util package best suit your needs for this scenario?</strong>  </p>", "options": [{"option": "A. HashSet", "correct": true}, {"option": "B. HashMap  ", "correct": false}, {"option": "C. PriorityQueue ", "correct": false}, {"option": "D. Arrays ", "correct": false}, {"option": " E. ArrayList ", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    private static class Stash {\n        private int x;\n\n        public int getValue() {\n            return x;\n        }\n\n        public void setValue(int newValue) {\n            x = newValue;\n        }\n    };\n\n    public static void foobar(Stash s) {\n        s.setValue(2);\n        s = new Stash();\n        s.setValue(3);\n    }\n\n    public static void main(String args[]) {\n            Stash s = new Stash();\n\n            s.setValue(1);\n            foobar(s);\n\n            System.out.println(s.getValue());\n    }\n};\n</code></pre>", "options": [{"option": "A. 1", "correct": true}, {"option": "B. 2", "correct": false}, {"option": "C. 3", "correct": false}, {"option": "D. 0", "correct": false}, {"option": " E. compilation fails", "correct": false}, {"option": " F. exception is thrown at runtime         ", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\nprivate static void main(String... args) {\n        System.out.println(\"Hello\" + \"\\nworld\");\n    }   \n};\n</code></pre>", "options": [{"option": "A. The class doesn\u2019t compile", "correct": true}, {"option": "B. Nothing", "correct": false}, {"option": "C. Hello world", "correct": false}, {"option": "D. The output is platform dependent", "correct": false}, {"option": " E. Other", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>import java.util.*;\n\npublic class JavaTest {\n    private static Integer[] a = { 1, 2, 3, 4, 5 };\n\n    public static void main(String args[]) {\n        List list = Arrays.asList(a);\n\n        for(int i = 1; i &lt;= 5; ++i) {\n            System.out.print(list.get(i));\n        }\n    }\n};\n</code></pre>", "options": [{"option": "A. 12345", "correct": true}, {"option": "B. 1234 and then exception is thrown", "correct": false}, {"option": "C. nothing, exception is thrown", "correct": false}, {"option": "D. 2345 and then exception is thrown", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n    public static void main(String args[]) {\n        A a = new A();\n        a.foo();\n\n        B b = new B();\n        b.foo();\n        b.bar();\n        b.stat();\n\n        A ab = new B();\n        ab.foo();\n        ab.stat();\n    }\n};\n\nclass A {\n    public void foo() {\n        System.out.print(\"Foo\");\n    }\n\n    public static void stat() {\n        System.out.print(\"StaticA\");\n    }\n}\n\nclass B extends A {\n    public void foo() {\n        System.out.print(\"Bar\");\n    }\n\n    public void bar() {\n        System.out.print(\"Surprise\");\n    }\n\n    public static void stat() {\n        System.out.print(\"StaticB\");\n    }\n}\n</code></pre>", "options": [{"option": "A. FooFooSurpriseStaticBBarStaticB", "correct": true}, {"option": "B. FooFooSurpriseStaticBFooStaticA ", "correct": false}, {"option": "C. FooBarSurpriseStaticBBarStaticA", "correct": false}, {"option": "D. FooBarSurpriseStaticBBarStaticB", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n    private double array[] = { 1.0, 1.1, 1.2, 1.3, 1.4 };\n\n    public static void main(String args[]) {\n            for(int i = 0; i &lt; array.length; ++i) {\n                for(int j = 1; j &lt; i; ++j) {\n                    System.out.print(array[(i + 2)*j % array.length] + \u201c \u201c);\n                }\n            }\n    }\n};\n</code></pre>", "options": [{"option": "A. 1.2 1.3 1.1 1.4 1.3 1.2", "correct": true}, {"option": "B. 1.4 1.0 1.0 1.1 1.2 1.3", "correct": false}, {"option": "C. 1.1 1.2 1.3 1.4 1.5", "correct": false}, {"option": "D. exception is thrown", "correct": false}, {"option": " E. class won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>Suppose we have the following class:</strong></p>\n<pre><code>1.  import java.util.Date;\n2.\n3.  public class JavaTest {\n4.    public static void main(String [] args) {\n5.        Date one = new Date();\n6.        Date two = new Date();\n7.        Date three = one;\n8.        one = null;\n9.        Date four = one;\n10.       three = null;\n11.       two = null;\n12.       two = new Date();\n13.    }\n14. }\n</code></pre>\n<p><strong>Which of the following statements are true?</strong> </p>", "options": [{"option": "A. The Date object from line 5 is eligible for garbage collection immediately following line 8", "correct": true}, {"option": "B. The Date object from line 5 is eligible for garbage collection immediately following line 10", "correct": false}, {"option": "C. The Date object from line 5 is eligible for garbage collection immediately following line 13.  ", "correct": false}, {"option": "D.The Date object from line 6 is eligible for garbage collection immediately following line 11.  ", "correct": false}, {"option": " E. The Date object from line 6 is eligible for garbage collection immediately following line 13.  ", "correct": false}], "level": ""}, {"question": "<p><strong>Which three are valid to substitute comment</strong></p>\n<pre><code>public class JavaTest {\n    class A {\n        void f() {}\n    }\n\n    class B extends A {\n        /*insert code here */ void f() {}\n    }\n};\n</code></pre>", "options": [{"option": "A. final", "correct": true}, {"option": "B. native", "correct": false}, {"option": "C. static", "correct": false}, {"option": "D. private", "correct": false}, {"option": " E. protected", "correct": false}, {"option": " F. public", "correct": false}, {"option": " G. abstract", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int i = 3;\n        if( (boolean)i ) {\n            System.out.println(\"if\");\n        } else {\n            System.out.println(\"else\");\n        }\n    }\n};\n</code></pre>", "options": [{"option": "A. if", "correct": true}, {"option": "B. else", "correct": false}, {"option": "C. nothing", "correct": false}, {"option": "D. won\u2019t compile", "correct": false}, {"option": " E. exception is thrown at runtime", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of following code:</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        A a = new B();\n    }\n};\n\nclass A {\n    private String name;\n\n    public A() {\n        name = \"A\";\n        printName();\n    }\n\n    public void printName() {\n        System.out.println(name);\n    }\n}\n\nclass B extends A {\n    private String newName;\n\n    public B() {\n        newName = \"B\";\n    }\n\n    public void printName() {\n        System.out.println(newName);\n    }\n}\n</code></pre>", "options": [{"option": "A. a", "correct": true}, {"option": "B. b", "correct": false}, {"option": "C. A", "correct": false}, {"option": "D. B", "correct": false}, {"option": " E. null", "correct": false}, {"option": " F. Exception is thrown", "correct": false}, {"option": " G. Won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>Which of the following uses of inheritances is probably not a good design?</strong>  </p>", "options": [{"option": "A. Car extends Vehicle   ", "correct": true}, {"option": "B. Elephant extends Mammal", "correct": false}, {"option": "C. Laptop extends Computer", "correct": false}, {"option": "D. Square extends Triangle", "correct": false}, {"option": " E. Apple extends Fruit ", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    private static String s1 = \"string\";\n    private static String s2 = \"string\";\n\n    public static void main(String args[]) {\n        String s3 = new String(s1);\n        System.out.print((s1 == s3) + \" \" );\n        System.out.print(s1.equals(s3) + \" \");\n\n        System.out.print((s1 == s2) + \" \");\n        System.out.print(s1.equals(s2) + \" \");\n    }\n};\n</code></pre>", "options": [{"option": "A. true, true, true, true", "correct": true}, {"option": "B. true, true, false, false", "correct": false}, {"option": "C. false, true, false, true", "correct": false}, {"option": "D. true, true, false, true", "correct": false}, {"option": " E. false, true, true, true", "correct": false}, {"option": " F. won\u2019t compile", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        A a = new B();\n    }\n};\n\nclass A {\n    private final String member = \"MemberA\";\n    {\n        System.out.print(member);\n    }\n\n    public A() {\n        System.out.print(\"A\");\n    }\n}\n\nclass B extends A {\n    private static final String STATIC = \"Static\";\n    static {\n        System.out.print(STATIC);\n    }\n\n    private String member = \"MemberB\";\n    {\n        System.out.print(member);\n    }\n\n    public B() {\n        System.out.print(\"B\");\n    }\n}\n</code></pre>", "options": [{"option": "A. StaticMemberAAMemberBB", "correct": true}, {"option": "B. MemberAAMemberBBStatic", "correct": false}, {"option": "C. StaticMemberBBMemberAA", "correct": false}, {"option": "D. StaticAMemberABMemberB", "correct": false}, {"option": " E. MemberBBMemberAAStatic", "correct": false}, {"option": " F. Won\u2019t compile", "correct": false}, {"option": " G. Exception is thrown", "correct": false}], "level": ""}, {"question": "<p><strong>Fill in the blank: If all of the non-final fields of a class are private and the class contains public  methods to view or modify the fields, this is an example of <strong><em>_</em></strong>___.</strong></p>", "options": [{"option": "A. Tight encapsulation", "correct": true}, {"option": "B. Loose coupling", "correct": false}, {"option": "C. High cohesion.", "correct": false}, {"option": "D. The is-a relationship", "correct": false}, {"option": " E. The has-a relationship", "correct": false}], "level": ""}, {"question": "<p><strong>Given the following  PrintA class definition:</strong> </p>\n<pre><code>public class PrintA extends Thread {\n    public void run() {\n        System.out.print(\u201cA\u201d);\n    }\n}\n\nwhich of the statements is true about the following  PrintB  program?\n\npublic class PrintB {\n    public static void main(String [] args) {\n        Thread a = new PrintA();\n        a.run();\n        System.out.print(\u201cB\u201d);\n    }\n}\n</code></pre>", "options": [{"option": "A. The program generates an exception at runtime.  ", "correct": true}, {"option": "B. The program does not compile.  ", "correct": false}, {"option": "C. The output varies and is either AB or BA.  ", "correct": false}, {"option": "D. The output is always AB.    ", "correct": false}, {"option": " E. The output is always BA.", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int[] a = { 1, 2, 3, 4 };\n\n        short s1 = 1;\n        short s2 = 2;\n        short s3 = s1 + s2;\n\n        System.out.println(a[s1]);\n        System.out.println(a[s2]);\n        System.out.println(a[s3]);\n    }\n};\n</code></pre>", "options": [{"option": "A. 1 2 3", "correct": true}, {"option": "B. 2 3 4", "correct": false}, {"option": "C. ArrayIndexOutOfBoundsException is thrown", "correct": false}, {"option": "D. NullPointerException is thrown", "correct": false}, {"option": " E. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String args[]) {\n            ((B)new A()).test();\n    }\n};\n\nclass A {\n    public void test() {\n        System.out.println(\"TestA\");\n    }\n}\n\nclass B extends A {\n    public void test() {\n        System.out.println(\"TestB\");\n    }\n}\n</code></pre>", "options": [{"option": "A. ClassCastException is thrown", "correct": true}, {"option": "B. TestA", "correct": false}, {"option": "C. TestB", "correct": false}, {"option": "D. Exception is thrown at runtime but it is not ClassCastException", "correct": false}, {"option": " E. Compilation fails", "correct": false}], "level": ""}, {"question": "<p><strong>Given:</strong></p>\n<pre><code>class MyThread extends Thread {     \n    public static void main(String [] args) {\n       MyThread t = new MyThread();\n       Thread x = new Thread(t);\n       x.start();\n    }     \n    public void run() {\n       for(int i=0;i&lt;3;++i) {\n          System.out.print(i + \"..\");\n       }\n    }\n }\n</code></pre>\n<p><strong>What is the result of this code?</strong></p>", "options": [{"option": "A. Compilation fails", "correct": true}, {"option": "B. 1..2..3..", "correct": false}, {"option": "C. 0..1..2..3..", "correct": false}, {"option": "D. 0..1..2..", "correct": false}, {"option": " E. An exception occurs at runtime", "correct": false}, {"option": " F. The output is indeterminate", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    private static final int TWO = 2;\n\n    public static void main(String args[]) {\n            int x = 5;\n            switch(x) {\n                case TWO: System.out.print(2);\n                default: System.out.print(\"default\");\n                case 1: System.out.print(1);\n                    break;\n                case 3: System.out.print(3);\n            }\n    }\n};\n</code></pre>", "options": [{"option": "A. default", "correct": true}, {"option": "B. 2default1", "correct": false}, {"option": "C. 2default13", "correct": false}, {"option": "D. default1", "correct": false}, {"option": " E. Compilation fails but class can be made to compile by replacing case TWO: with case 2:", "correct": false}, {"option": " F. Compilation fails but class can be made to compile by removing break; statement", "correct": false}, {"option": " G. Compilation fails as default: must be the last possibility in switch statement", "correct": false}], "level": ""}, {"question": "<p><strong>A class named  Test  is in the  a.b.c package defined in a file named Test.java and saved in the following directory:</strong> \nc:\\abcproject\\src\\Test.java\nAssuming the code in Test.java uses only classes from java.lang and contains no compiler errors, what is the result of the following command line?\nc:\\abcproject\\src &gt; javac -d c:\\abcproject\\deploy Test.java</p>", "options": [{"option": "A. NoClassDefFoundError occurs", "correct": true}, {"option": "B. ClassNotFoundException occurs.  ", "correct": false}, {"option": "C. Test.class is generated in the c:\\abcproject\\deploy directory.     ", "correct": false}, {"option": "D. Test.class is generated in the c:\\abcproject\\deploy\\abc directory", "correct": false}, {"option": " E. Test.class is generated in the c:\\abcproject\\deploy\\a\\b\\c directory", "correct": false}], "level": ""}, {"question": "<p><strong>What is the result of the following statements?</strong> </p>\n<pre><code>List&lt;Object&gt; list = new ArrayList &lt;Object&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}\n</code></pre>", "options": [{"option": "A. onetwo", "correct": true}, {"option": "B. onetwo7", "correct": false}, {"option": "C. onetwo followed by an exception", "correct": false}, {"option": "D. compiler error on line list.add(7);  ", "correct": false}, {"option": " E. compiler error on line for(String s : list) {", "correct": false}], "level": ""}, {"question": "<p><strong>Suppose you need to work with a collection of elements that need to be sorted in their natural ordering, iterated in descending order, and each element has a unique string associated with its value. Which of the following collections classes in the java.util package best suit your needs for this scenario?</strong>  </p>", "options": [{"option": "A. HashMap", "correct": true}, {"option": "B. TreeMap", "correct": false}, {"option": "C. HashSet", "correct": false}, {"option": "D. Vector", "correct": false}, {"option": " E. ArrayList", "correct": false}], "level": ""}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    private static class Stash {\n        private int x;\n\n        public int getValue() {\n            return x;\n        }\n\n        public void setValue(int newValue) {\n            x = newValue;\n        }\n    };\n\n    public static void foobar(Stash s) {\n        s.setValue(1);\n        s = null;\n    }\n\n    public static void main(String args[]) {\n            Stash s = new Stash();\n\n            s.setValue(2);\n            foobar(s);\n\n            System.out.println(s.getValue());\n    }\n};\n</code></pre>", "options": [{"option": "A. 1", "correct": true}, {"option": "B. 2", "correct": false}, {"option": "C. 3", "correct": false}, {"option": "D. 0", "correct": false}, {"option": " E. compilation fails", "correct": false}, {"option": " F. NullPointerException is thrown at runtime         ", "correct": false}], "level": ""}, {"question": "<p>Which of the following is true about an <strong>anonymous inner</strong> class?</p>", "options": [{"option": " It can extend exactly one class and implement exactly one interface. ", "correct": false}, {"option": " It can extend exactly one class and implement multiple interfaces. ", "correct": false}, {"option": " It can extend exactly one class or implement exactly one interface. ", "correct": true}, {"option": " It can implement multiple interfaces regardless of whether it also extends a class. ", "correct": false}], "level": "Medium"}, {"question": "<p>What does the following Java code do:</p>\n<pre class=\"prettyprint\"><code>    int num[2][3]={ {1,2}, {3,4}, {5, 6} };\n</code></pre>", "options": [{"option": "It assigns a value 2 to num[1][2].", "correct": false}, {"option": "It assigns a value 4 to num[1][2].", "correct": false}, {"option": "Error", "correct": true}, {"option": "It assigns a value 3 to num[1][2].", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements generates a compilation error?</p>", "options": [{"option": "Integer values[ ] = {new Integer(3), new Integer(5), new Integer(8)};  ", "correct": false}, {"option": "boolean values[ ] = new boolean [] {true, false, true};  ", "correct": false}, {"option": "String cars[ ] = {\"Benz\", \"Ferrari\", \"Maruti\"};  ", "correct": false}, {"option": "int [ ][ ] sum = {3,4,8}, {4,1,96};  ", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of these is the best <strong>ReturnType</strong> for <strong>methodA</strong> in line 3?</p>\n<pre class=\"prettyprint\"><code>    class ReturnIt \n    { \n        ReturnType methodA(byte x, double y) /* Line 3 */\n        { \n            return (long)x / y * 2; \n        } \n    }\n</code></pre>", "options": [{"option": "int    ", "correct": false}, {"option": "byte    ", "correct": false}, {"option": "long    ", "correct": false}, {"option": "double    ", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following terms is defined as\u00a0collection that guarantees no duplicates are stored and that all elements can be accessed in the natural order in Java?</p>", "options": [{"option": "Array ", "correct": false}, {"option": "Set ", "correct": true}, {"option": "List ", "correct": false}, {"option": "Queue ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth {\n\n    public static void main(String[] args) {\n        int val1=80;\n        int val2=10;\n        int val3;\n        val3 = ++val1 * val1 /100 + ++val2;\n        System.out.println(\"val3 = \" + val3);\n    }\n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "val3 = 81", "correct": false}, {"option": "val3 = 175", "correct": false}, {"option": "val3 = 176", "correct": false}, {"option": "val3 =76", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    private int val1 = method();\n    static final int val2 = 20;\n\n    private int method(){\n        return val2;\n    }\n\n    public static void main(String[] args) {\n        System.out.println((new test34()).val2);\n    }\n}\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "0", "correct": false}, {"option": "200", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords are used to execute the consecutive thread?</p>", "options": [{"option": "Synchronize ", "correct": false}, {"option": "Synchronizable ", "correct": false}, {"option": "Synchronized ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods cannot be overriden?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Static", "correct": false}, {"option": "Final", "correct": false}, {"option": "Both Static and Final", "correct": true}], "level": "Easy"}, {"question": "<p>By default, all programs in Java belong to the _____________________________.</p>", "options": [{"option": "java.String class", "correct": false}, {"option": "java.io class", "correct": false}, {"option": "java.lang string", "correct": false}, {"option": "java.lang package", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    static String hack = \"Hacker\";\n    static int hack1 = 30;\n\n    static {\n        hack1 = 70;\n        System.out.println(hack);\n        System.out.println(hack1); \n    }\n\n    public static void main(String args[]){\n    }\n\n}\n</code></pre>", "options": [{"option": "Hacker\r\n70", "correct": true}, {"option": "30\r\n70", "correct": false}, {"option": "Hacker\r\nHacker", "correct": false}, {"option": "Hacker\r\n30", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth{\n\n    void addValue(int x) {\n        x += 3;\n    }\n\n    public static void main(String[] args){\n        int x = 0;\n        addValue(x++);\n        System.out.println(x);\n    }\n\n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static void main(String [] args) {\n        String [] val;\n        int b;\n        b = args.length;\n        for (int a = 1; a &lt;= b; a++) {\n            System.out.print(\" \" + args[a]);\n        }\n    }\n}\n\nand the command-line invocation,\njava HackerEarth 1 2 3\n\nWhat is the output of the above program?\n</code></pre>", "options": [{"option": "1 2 3", "correct": false}, {"option": "0 0 0", "correct": false}, {"option": "Null Null Null", "correct": false}, {"option": "An Exception is thrown at Run-time", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> public class TestHack{\n        public static void main(String [] args) {\n            String s1 = args[0];\n            String s2 = args[1];\n            String s3 = args[2];\n            System.out.print(\" args[2] = \" + s2);\n        }\n    }\n\nand the command-line invocation,\njava TestHack 1 2 3 \n</code></pre>", "options": [{"option": "args[2]=1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n\n    public static void main(String [] args) {\n        String val1 = args[1];\n        String val2 = args[2];\n        System.out.print(\"args[2] = \" + val2);\n    }\n}\n\nand the command-line invocation,\njava HackerEarth 1 2 3\n</code></pre>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "args[2] = 3", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the numerical range of the data type <strong>short</strong>?</p>", "options": [{"option": "0 to  32,767", "correct": false}, {"option": "\u2013 32,768 to 32,767", "correct": true}, {"option": "\u2013 128 to 127", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the\u00a0<strong>int</strong> data type?</p>", "options": [{"option": "16", "correct": false}, {"option": "8", "correct": false}, {"option": "32", "correct": true}, {"option": "64", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration of a string in Java?</p>", "options": [{"option": "String s5 = 'null';\r\n", "correct": false}, {"option": "String s1 = null;\r\n", "correct": true}, {"option": "String s5 = \u201cstrings rule\u201d\r\n", "correct": false}, {"option": "String s5 = \"null\";", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following commands correctly represents <strong>character literals</strong>?</p>", "options": [{"option": "char a = 'a';", "correct": true}, {"option": "char letterN = \\u004E;", "correct": false}, {"option": "char String s=\\u004E;", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a valid declaration of a <strong>multi-dimensional</strong> array?</p>", "options": [{"option": "int[][] num = new int[5][2];", "correct": false}, {"option": "int num[][] = new int[5][2];", "correct": false}, {"option": "int[] num[] = new int[5][2];", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following\u00a0is the\u00a0default value for\u00a0<strong>Object reference</strong>?</p>", "options": [{"option": "0", "correct": false}, {"option": "false", "correct": false}, {"option": "null", "correct": true}, {"option": "\u2018\\u0000\u2019", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>non-access</strong> modifier?</p>", "options": [{"option": "strictfp", "correct": false}, {"option": "final", "correct": false}, {"option": "abstract", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public final void fun() {\n            System.out.println(\"One\");\n        }\n    }\n    class Sub extends HackerEarth{\n        public void fun(){\n            System.out.println(\"Another thing.\");\n        }\n    }\n</code></pre>", "options": [{"option": "One", "correct": false}, {"option": "Another thing", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> \nabstract class hack\n    {\n        abstract void func();\n    }\n    class fun extends hack \n    {\n        void func(int I) {}\n    }\n</code></pre>", "options": [{"option": "It will compile successfully.", "correct": false}, {"option": "It will compile and run successfully without giving any output.", "correct": false}, {"option": "Compile time error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface int1 {\n   int i = 0;\n}\n\ninterface int2 {\n    int i = 0;\n}\n\nclass HackerEarth implements int1, int2 {\n\n    public static void main(String[] a) {\n        System.out.println(i);\n    }\n}\n</code></pre>", "options": [{"option": "Run-time error\r\n", "correct": false}, {"option": "Prints: 0\r\n", "correct": false}, {"option": "No output\r\n", "correct": false}, {"option": "Compilation error\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public void hackMap(){\n        TreeMap he = new TreeMap();\n        he.put(\"x\",\"Hacker\");\n        he.put(\"y\",\"Earth\");\n        he.put(\"z\",\"Hackathons\");\n        Iterator it = he.keySet().iterator();\n        while(it.hasNext()){\n            System.out.print(it.next());\n        }\n    }\n\n    public static void main(String args[] ) throws Exception {\n        HackerEarth hacks = new HackerEarth();\n        hacks.hackMap();\n    }\n}\n</code></pre>", "options": [{"option": "xyz\r\n", "correct": true}, {"option": "HackerEarthHackathons", "correct": false}, {"option": "xyz   HackerEarthHackathons", "correct": false}, {"option": "Runtime error\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following modifiers cannot be applied to the declaration of a field in Java?</p>", "options": [{"option": "Protected", "correct": false}, {"option": "Private", "correct": false}, {"option": "Final", "correct": false}, {"option": "Abstract", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration of a 3D <strong>character</strong> array in Java?</p>", "options": [{"option": " char[][][] charArray = {{'a', 'b'}, {'c', 'd'}, {'e', 'f'}};\r\n", "correct": false}, {"option": "char[][][] charArray = new char[2][2][];\r\n", "correct": false}, {"option": "char[][][] charArray = {{{'a', 'b'}, {'c', 'd'}, {'e', 'f'}}};\r\n", "correct": false}, {"option": "Both b and c", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Test{\n        public static void main(String args[]) {\n            String s1 = \"Its Great\";\n            String s2 = \"Its Tricky\";\n            System.out.print(s1.concat(s2).length() + \" \");\n            System.out.print(s1.concat(s2.substring(1, s1.length())).length());\n        }\n    }\n</code></pre>", "options": [{"option": "18 17", "correct": false}, {"option": "20 18\r\n", "correct": false}, {"option": "19 17\r\n", "correct": true}, {"option": "19 20", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true about <strong>multi-level</strong> inheritance?</p>", "options": [{"option": "Inheriting from two super classes", "correct": false}, {"option": "Inheriting from a class which is already in an inheritance\r\nhierarchy", "correct": true}, {"option": "Inheriting from more than one super class", "correct": false}, {"option": "Inheriting from a single class", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following method calls refers to the letter <em>b</em> in this Java string:</p>\n<pre class=\"prettyprint\"><code>String deepak = \"Did Deepak see bees Deepak did.\";\n</code></pre>", "options": [{"option": "charAt(16)\r\n", "correct": false}, {"option": "charAt(15)\r\n", "correct": true}, {"option": "charAt(12)\r\n", "correct": false}, {"option": "charAt(13)\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth {\n        public static void main(String [] args) {\n            int j = 2, y = 3, z = 10;\n            for (;j &lt; 5;j++) {\n                y = (++y + z++);\n                System.out.println(y+z);\n            }\n        }\n    }</code></pre>", "options": [{"option": "25\r\n38\r\n52\r\n67\r\n", "correct": false}, {"option": "25\r\n38\r\n52", "correct": true}, {"option": "25\r\n38\r\n52\r\n67", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class Test {\n\n    public static void main(String[] args) {\n        int[][] a1 = {{1,2,3},{4,5,6},{7,8,9,10}};\n        System.out.print(a1[0][2] + \",\" + a1[1][0] + \",\" + a1[2][1]);\n    }\n}\n</code></pre>", "options": [{"option": "Run-time error\r\n", "correct": false}, {"option": "7, 2, 6\r\n", "correct": false}, {"option": "3, 4, 8\r\n", "correct": true}, {"option": "Compile time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[]) {\n        int val = 8;\n        val += --val;\n        System.out.println(\"Value of val : \" + val);\n    }\n}\n</code></pre>", "options": [{"option": "Value of z : 14", "correct": false}, {"option": "Value of z : 15\r\n", "correct": true}, {"option": "Value of z : 16", "correct": false}, {"option": "Value of z : 13", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n        public static void main(String args[] ) throws Exception {\n\n    int var = 8;\n        var /= var--;\n        System.out.println(\"Value of var : \" + var);\n        }\n    }\n</code></pre>", "options": [{"option": "Value of var : 0", "correct": false}, {"option": "Value of var : 1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n        int x = 27;\n        switch(x) {\n            case 27: System.out.println(\"27\");\n            case 27: System.out.println(\"27\");\n            case 37: System.out.println(\"37\");\n            default: System.out.println(\"30\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "27  27  37\r\n", "correct": false}, {"option": "30\r\n", "correct": false}, {"option": "27 27", "correct": false}, {"option": "Compilation error\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n        String s1 = \"java \";\n        s1 += s1;\n        s1 += \"programming \";\n        String x = s1.concat(\"language \");\n        System.out.println(x.toUpperCase());\n    }\n}\n</code></pre>", "options": [{"option": "java java programming \r\n", "correct": false}, {"option": "JAVA JAVA PROGRAMMING LANGUAGE", "correct": true}, {"option": "java java programming language\r\n", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n        String val = \"java \";\n        val += val;\n        val += \"world of \";\n        val.concat(\"programming \");\n        System.out.println(val);\n    }\n}\n</code></pre>", "options": [{"option": "java java world of programming\r\n", "correct": false}, {"option": "Compilation error\r\n", "correct": false}, {"option": "java java world of\r\n", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n        public static void main(String args[] ) throws Exception {\n            String a = \"abc\";\n            System.out.println(a=\"\\\"\"+a+\"\\\"\");\n        }}\n</code></pre>", "options": [{"option": "\\\"abc\\\"\r\n", "correct": false}, {"option": "\"abc\"", "correct": true}, {"option": "\"\"abc\"\"\r\n", "correct": false}, {"option": "abc\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n\n    public static void main(String args[] ) throws Exception {\n        double A = 1.0F / 3.0F; // line 3\n\n        if( ( A * 3.0) == 1.0F )    // line 4\n            System.out.println( \"Equal\" );\n        else \n            System.out.println( \"Not Equal\" );     \n    }\n}\n</code></pre>", "options": [{"option": "Equal", "correct": false}, {"option": "Not Equal", "correct": true}, {"option": "Compilation fails at line 3", "correct": false}, {"option": "Compilation fails at line 4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these lines throw an error in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Three {\npublic static void main(String args[]) {\n    int i = 1; // Line 1\n    short s = 1; // Line 2\n    long l = 1; // Line 3\n    i = l + i; // Line 4\n    l = s + i; // Line 5\n}\n}\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "4", "correct": true}, {"option": "3", "correct": false}, {"option": "No error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public void fun(Object object) {\n        System.out.println(\"Object\");\n    }\n\n    public void fun(String string) {\n        System.out.println(\"String\");\n    }\n\n    public static void main(String args[] ) throws Exception {\n        new HackerEarth().fun(0);\n    }\n}\n</code></pre>", "options": [{"option": "Object", "correct": true}, {"option": "String ", "correct": false}, {"option": "0 ", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public static void main(String args[]) throws Exception {\n        byte a = 6;\n        byte b = 10;\n        System.out.print((b%a) + \", \");\n        System.out.println(b == ( (b/a)*a + (b%a) ));\n    }\n}\n</code></pre>", "options": [{"option": "1, true", "correct": false}, {"option": "4, 0", "correct": false}, {"option": "1, false", "correct": false}, {"option": "4, true", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, a <strong>package</strong> is a collection of _________________.</p>", "options": [{"option": "Classes", "correct": false}, {"option": "Interfaces", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n   {\n     public static void main(String args[])\n\t { \n     int val[10];\n     System.out.println(val[1]);\n\t }\n   }\n</code></pre>", "options": [{"option": "Accessing the second element of the array", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Accessing the first element of the array", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent an object from being <strong>serialized</strong>?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Public", "correct": false}, {"option": "Transient", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is a valid method signature for an interface in Java?</p>", "options": [{"option": "public void main(String [ ] args);\r\n", "correct": false}, {"option": "public float getArea(float x);\r\n", "correct": false}, {"option": "boolean  setFlag(Boolean [ ] test [ ]);\r\n", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is not a valid method signature for an interface in Java?</p>", "options": [{"option": "public void main(String [] args);\r\n", "correct": false}, {"option": "public float getVol(float x);\r\n", "correct": false}, {"option": " public static void main(String [] args);\r\n", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n        int val= 0;\n        while (0) {\n            System.out.print(\"val plus one is \" + (val + 1));\n        }\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation fails ", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following provides the <strong>runtime environment</strong> to execute a bytecode in Java?</p>", "options": [{"option": "JDK", "correct": false}, {"option": "JVM", "correct": true}, {"option": "JRE", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following toolkits contains a set of libraries and tools for Java?</p>", "options": [{"option": "JVM", "correct": false}, {"option": "JDK", "correct": false}, {"option": "JRE", "correct": true}, {"option": "None of above", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following terms is the\u00a0<strong>superclass</strong> for all the Java classes?</p>", "options": [{"option": "An object", "correct": true}, {"option": "A string", "correct": false}, {"option": "A variable", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following stored the object references?</p>", "options": [{"option": "Heap area", "correct": true}, {"option": "Method area", "correct": false}, {"option": "Java stack", "correct": false}, {"option": "Class loader", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n\n    public static void main(String args[] ) throws Exception {\n\n        try {\n            System.out.print(\"Hello world \");\n        }catch(Exception e){\n\n        }\n    }\n}\n</code></pre>", "options": [{"option": "Hello world ", "correct": true}, {"option": "Compilation Error", "correct": false}, {"option": "Runtime Error", "correct": false}, {"option": "Compile and run sucessfully without any output", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n    public static void main(String args[] ) throws Exception {\n    try {\n    System.out.print(\"Hello world \");\n           }\n    finally {\n    System.out.println(\"Finally executing \");\n       }}}\n</code></pre>", "options": [{"option": "Hello world", "correct": false}, {"option": "Hello world  Finally executing", "correct": true}, {"option": "Finally executing", "correct": false}, {"option": "Compilation fails:No catch block is provided.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is not true about <strong>constructors</strong> in Java?</p>", "options": [{"option": "JVM doesn't provide default constructor and you need to create constructors by coding.\r\n", "correct": false}, {"option": "Constructors cannot be overloaded.\r\n", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "Constructors are not inherited.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n    double value = -16.0;\n    System.out.println( Math.sqrt(value));\n    }\n    }\n</code></pre>", "options": [{"option": "4.0\r\n", "correct": false}, {"option": "\u20134.0\r\n", "correct": false}, {"option": "NaN\r\n", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n        public static void main(String args[] ) throws Exception {\n            String a = \"hackerearth\";\n            a = a.substring(5,7);\n            char b = a.charAt(1);\n            a = a + b;\n            System.out.println(a);\n        }}\n</code></pre>", "options": [{"option": "ere", "correct": false}, {"option": "ree", "correct": true}, {"option": "rer", "correct": false}, {"option": "rtha", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n\n    public static void main(String args[] ) throws Exception {\n        String a = \"xyz\";\n        a.toUpperCase();\n\n        String y = a.substring(1,2);\n        y = y + \"abc\";\n        System.out.println(y);\n    }\n}\n</code></pre>", "options": [{"option": "Yabc", "correct": false}, {"option": "yabc", "correct": true}, {"option": "Xabc", "correct": false}, {"option": "xabc", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> public class test{\n        public static void main(String args[] ) throws Exception {\n            String h = \"hackerearth\";\n            h.substring(1,7);\n            h= \"w\" + h;\n            h.append(\"woo\");\n            System.out.println(h);\n        }}\n</code></pre>", "options": [{"option": "whackerwoo", "correct": false}, {"option": "wackerewoo", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "whackerewoo", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods wakes up a thread that is <strong>waiting</strong> for an object\u2019s <strong>lock</strong>?</p>", "options": [{"option": "void finalize() ", "correct": false}, {"option": "void notifyAll() ", "correct": false}, {"option": "final void notify() ", "correct": true}, {"option": "final void wait() ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods returns a text representation of an object in Java?</p>", "options": [{"option": "String() \r\n", "correct": false}, {"option": "String toString() \r\n", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following modifiers is applied to <strong>inner</strong> classes in Java?</p>", "options": [{"option": "final\r\n", "correct": false}, {"option": "private\r\n", "correct": false}, {"option": "protected\r\n", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is not true for a <strong>method local inner</strong> class?</p>", "options": [{"option": "It must be marked final.", "correct": true}, {"option": "It can be marked public.", "correct": false}, {"option": "It can be marked static.", "correct": false}, {"option": "It can be marked abstract.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is used to destroy an object <em>x</em> in Java?</p>", "options": [{"option": "garbage collector", "correct": false}, {"option": "x.finalize()", "correct": false}, {"option": "Runtime.getRuntime().gc()", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following data types does not extend the <strong>java.lang.Number</strong> package in Java?</p>", "options": [{"option": "Float ", "correct": false}, {"option": "Boolean ", "correct": true}, {"option": "Long ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is correct?</p>", "options": [{"option": "You can not override private or static method in Java.\r\n\r\n", "correct": false}, {"option": "Java does not support multiple inheritance.", "correct": false}, {"option": "Both a and b.", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public static void main(String []args){\n        int val = 5;\n        while(val &lt; 10){\n            System.out.print(val+\" \");\n             val++;\n        }\n    }\n}\n</code></pre>", "options": [{"option": "5 6 7 8 9", "correct": true}, {"option": "5 6 7 8 9 10", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class hacker\n    {\n        public static void main(String []args)\n        {\n            int x=0xF;\n            for(;x&lt;15;)\n            {\n                System.out.print(x);\n                x++;\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "15", "correct": false}, {"option": "Runtime error ", "correct": false}, {"option": "Compiles successfully without any output", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is true in Java?</p>", "options": [{"option": "All java code is defined in a class.", "correct": false}, {"option": "A class can inherit instance variables and methods from a more abstract super class.", "correct": false}, {"option": "An object is like a blueprint.", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following behaves like a <strong>template</strong>?</p>", "options": [{"option": "class", "correct": true}, {"option": "method ", "correct": false}, {"option": "object", "correct": false}, {"option": "variables", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following below  <strong>live on the heap</strong> in Java?</p>", "options": [{"option": "Class", "correct": false}, {"option": "Instance variable", "correct": false}, {"option": "Method", "correct": false}, {"option": "Object", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is <strong>compiled</strong> from a <strong>.java file</strong> ?</p>", "options": [{"option": "Object", "correct": false}, {"option": "Method ", "correct": false}, {"option": "Class", "correct": true}, {"option": "Instance variable", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of the <strong>reference variable</strong> in Java when it is not referencing any object?</p>", "options": [{"option": "0", "correct": false}, {"option": "Null", "correct": true}, {"option": "Both a and b ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is true for Java?</p>", "options": [{"option": "Instance variable is declared inside a class but not within a method.", "correct": false}, {"option": "Local variable are declared within a method.", "correct": false}, {"option": "Local variable must be initialized  before use.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n        int x = 3;\n        byte y = 3;\n        if(x == y){\n            System.out.println(\"True\");\n        }\n        else{\n            System.out.println(\"False\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n        public static void main(String args[] ) throws Exception {\n           HackerEarth obj1=new  HackerEarth();\n           HackerEarth obj2=new  HackerEarth();\n            HackerEarth obj3=obj1;\n            if(obj3==obj2)\n            {\n                System.out.println(\"Not equal\");\n            }\n            else if(obj3==obj1)\n            {\n                 System.out.println(\"Equal\");\n            }\n           else\n           {\n                System.out.println(\"Hack\");\n           }\n        }\n    }\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Not equal", "correct": false}, {"option": "Equal", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class TestClass {\n        public static void main(String args[] ) throws Exception {\n\n           int b=Integer.parseInt('3');\n           System.out.println(b);\n        }\n    }\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "\"3\"", "correct": false}, {"option": "'3'", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is true for Java?</p>", "options": [{"option": "Classes are grouped into packages.", "correct": false}, {"option": "ArrayList is a class in Java API.", "correct": false}, {"option": "An ArrayList resizes dynamically to whatever size is needed.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent a class from being instantiated?</p>", "options": [{"option": "Interface", "correct": false}, {"option": "Abstract", "correct": true}, {"option": "Final", "correct": false}, {"option": "Concrete", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n{\n    public int i;\n    protected int j;\n}  \n\n\nclass Hacker extends HackerEarth \n{\n    int j;\n\n    void display() {\n        super.j = 30;\n        super.i = 15;\n        System.out.println(i + \" \" + j);\n    }\n}\n\npublic class TestClass \n{\n\n    public static void main(String args[]){\n\n        Hacker obj = new Hacker();\n        obj.i = 3;\n        obj.j = 4;   \n        obj.display();     \n    }\n}\n</code></pre>", "options": [{"option": "15 4", "correct": false}, {"option": "15 4", "correct": true}, {"option": "10 5", "correct": false}, {"option": "5 10", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>abstract class hack {\n\n    protected int i;\n    abstract void output();\n\n}   \n\nclass func extends hack {\n\n    int j = 30;\n\n    void output() {\n        int j = 10;\n        System.out.println(j);\n    }\n\n}    \n\nclass HackerEarth {\n\n    public static void main(String args[]) {\n\n        func val = new func();\n        val.j = 20;\n        val.output();    \n    }\n\n}\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "10", "correct": true}, {"option": "20", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class test {\n            public static void main(String args[])\n            {\n                StringBuffer s1 = new StringBuffer(\"Hello World\");\n                s1.insert(8 , \"Good \");\n                System.out.println(s1);\n            }\n       }\n</code></pre>", "options": [{"option": "Hello Good World", "correct": false}, {"option": "Hello WGood orld", "correct": false}, {"option": "Hello WoGood rld", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a constructor for a <strong>vector</strong> class in Java?</p>", "options": [{"option": "Vector( )", "correct": false}, {"option": "Vector(int size, int increament)", "correct": false}, {"option": "Vector(Collection c)", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "You can mark a constructor with the keyword 'static'.", "correct": false}, {"option": "Constructors are called before static variables are initialized.", "correct": false}, {"option": "If a class is marked final, all of its methods must be marked final.", "correct": false}, {"option": "A static initializer block runs before a class constructor.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about <strong>wrappers</strong> is incorrect?</p>", "options": [{"option": "There is no wrapper class for Boolean primitives.", "correct": false}, {"option": "A wrapper is used when a primitive is treated like an object.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>checked</strong> exception in Java?</p>", "options": [{"option": "Class ArrayIndexOutOfBoundsException", "correct": false}, {"option": "Class ClassCastException", "correct": false}, {"option": "Class IllegalArgumentException", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following is an <strong>unchecked</strong> exception?</p>", "options": [{"option": "Class ParseException", "correct": false}, {"option": "Class ClassNotFoundException", "correct": false}, {"option": "Class CloneNotSupportedException", "correct": false}, {"option": "Class StackOverflowError", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass TestA{\n\n    TestA(){\n\n    }\n}\n\nclass TestB extends TestA {\n\n    TestB(){\n\n    }\n\n    TestB(int b){\n\n    }\n}\n\nclass HackerEarth extends TestB{\n\n    public static void main(String[] args){\n\n        HackerEarth obj = new HackerEarth();\n    }\n\n}\n</code></pre>", "options": [{"option": "The above code will run successfully without giving any output.", "correct": true}, {"option": "The above code will throw a run time error.", "correct": false}, {"option": "The above code has a compile time error.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass A{\n\n}\n\nclass B extends A{\n\n}\n\nclass C {\n    public static void main(String[] args){\n        B b = new B();\n    }\n}\n</code></pre>", "options": [{"option": "The above code will return a run time error.", "correct": false}, {"option": " The above code has compile time error.", "correct": false}, {"option": "The above code will run successfully.", "correct": true}, {"option": " The above code will compile but will not run.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestA{\n\n}\n\nclass TestB extends TestA{\n\n}\n\nclass HackerEarth extends TestB{\n\n    public static void main(String[] args){\n        TestA TestB = new TestB();\n    }\n\n}\n</code></pre>", "options": [{"option": "The code will return a run-time error.", "correct": false}, {"option": "The code will run successfully.", "correct": true}, {"option": "The code has compilation error.", "correct": false}, {"option": "The code will compile but will not run.", "correct": false}], "level": "Easy"}, {"question": "<p>______________________ is an interface of <strong>legacy</strong> classes in Java.</p>", "options": [{"option": "Properties", "correct": false}, {"option": "Stack", "correct": false}, {"option": "Vector", "correct": false}, {"option": "Enumeration", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the<strong>stack legacy</strong> class is defined under __________________________.</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.util", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public static void main(String args[]) {\n\n        Vector v = new Vector(0, 0);\n        v.addElement(new Integer(3));\n        v.addElement(new Integer(2));\n        v.addElement(new Integer(5));\n\n        System.out.println(v.lastElement());\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "5", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n        class vector {\n            public static void main(String args[]) {\n                Vector obj = new Vector();\n                obj.addElement(new Integer(3));\n                obj.addElement(new Integer(2));\n                obj.addElement(new Integer(5));\n                obj.addElement(new Integer(5));\n                obj.addElement(new Integer(2));\n                System.out.println(obj.capacity());\n            }\n        }\n</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "5", "correct": false}, {"option": "20", "correct": false}, {"option": "10", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "Vector is a list, so duplicates are allowed.", "correct": false}, {"option": "Insertion order is preserved in Vectors.", "correct": false}, {"option": "The 'null' insertion  in a vector is possible.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, a vector has a default capacity of 10 elements and if someone is trying to add 1 more element, then what is the size of the newly created vector?</p>", "options": [{"option": "11", "correct": false}, {"option": "12", "correct": false}, {"option": "20", "correct": true}, {"option": "40", "correct": false}], "level": "Medium"}, {"question": "<p>In <strong>Collection</strong> except, which of the following below, <strong>heterogeneous objects</strong> are allowed?</p>", "options": [{"option": "TreeMap", "correct": false}, {"option": "TreeSet", "correct": false}, {"option": "ArrayList", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, ArrayList has a default capacity of 10 elements and if someone is trying to add 1 more element, then what is the size of newly created ArrayList?</p>", "options": [{"option": "16", "correct": true}, {"option": "20", "correct": false}, {"option": "40", "correct": false}, {"option": "11", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n        class Output {\n            public static void main(String args[]) {\n                ArrayList al = new ArrayList();\n                al.add(\"A\");\n                al.add(0, \"B\");\n                al.add(null);\n                System.out.println(al.size());\n            }\n        }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is called when an object reference is printed in a collection?</p>", "options": [{"option": "toCollection()", "correct": false}, {"option": "toChar()", "correct": false}, {"option": "toInt ()", "correct": false}, {"option": "toString()", "correct": true}], "level": "Medium"}, {"question": "<p>We can use collections to hold and transfer objects from one place to another in Java. Which of the following interface implementations provides this feature?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Cloneable", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.io.Serializable;\n\n\nclass HackerEarth {\n\n    public static void main(String args[]) {\n\n        ArrayList obj1 = new ArrayList();\n        LinkedList obj2 = new LinkedList();\n        System.out.println(obj1 instanceof Serializable);\n        System.out.println(obj2 instanceof RandomAccess);\n    }\n}\n</code></pre>", "options": [{"option": "true\r\ntrue", "correct": false}, {"option": "false\r\nfalse", "correct": false}, {"option": "true\r\nfalse", "correct": true}, {"option": "false\r\ntrue", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n      class Output {\n            public static void main(String args[]) {\n                ArrayList al = new ArrayList();\n                LinkedList ll=new LinkedList();\n                System.out.println(al instanceof Serializable);\n                System.out.println(ll instanceof RandomAccess);\n            }\n        }\n</code></pre>", "options": [{"option": "true \r\nfalse", "correct": false}, {"option": "false\r\ntrue", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following collection class methods is used to get a synchronized version of <strong>ArrayList</strong> in Java?</p>", "options": [{"option": "public static List syncrohonized();", "correct": false}, {"option": "public static List syncrohonizeList(l1);", "correct": false}, {"option": "public static List syncrohonizedList(l1);", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>In the collection class in Java, a <strong>stack</strong> class is a child of ______________________.</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "Vector", "correct": true}, {"option": "TreeSet", "correct": false}], "level": "Medium"}, {"question": "<p>If a specified object is not present in a stack in Java, ______________________ is returned.</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "-1", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class TestClass {\n        public static void main(String args[] ) throws Exception {\n            Stack s =new Stack();\n            s.push(\"A\");\n            s.push(\"B\");\n            System.out.println(s);\n            System.out.println( s.search(\"Z\"));\n        }\n    }\n</code></pre>", "options": [{"option": "[B, A]\r\n-1", "correct": false}, {"option": "[A, B]\r\n-1", "correct": true}, {"option": "[A, B]\r\n1", "correct": false}, {"option": "[B,A]\r\n0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class HackerEarth {\n        public static void main(String args[] ) throws Exception {\n            Stack h = new Stack();\n            h.push(\"Hack\");\n            h.push(\"Earth\");\n            System.out.println(h);\n            System.out.println( h.search(\"Z\"));\n            System.out.println(h.isEmpty());\n        }\n    }\n\n\n \n</code></pre>", "options": [{"option": "[Hack, Earth]\r\n-1\r\nfalse", "correct": true}, {"option": "[Earth, Hack]\r\n0\r\nfalse", "correct": false}, {"option": "[Hack, Earth]\r\n1\r\nfalse", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following <strong>cursors</strong> is used to retrieve objects?</p>", "options": [{"option": "Enumeration", "correct": false}, {"option": "Iterator", "correct": false}, {"option": "ListIterator", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used for <strong>iterators</strong>?</p>", "options": [{"option": "public boolean  hasMoreElements()", "correct": false}, {"option": "public Object next()", "correct": false}, {"option": "public boolean hasNext()", "correct": false}, {"option": "Both b and c", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about <strong>java.util.Map</strong> is correct?</p>", "options": [{"option": "A Map is an object that maps keys to values.", "correct": false}, {"option": "A map cannot contain duplicate keys.", "correct": false}, {"option": "Each key-value pair is also known as an Entry.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to get all the keys from <strong>HashMap</strong> in Java?</p>", "options": [{"option": "keySetAll()", "correct": false}, {"option": "keySet()", "correct": true}, {"option": "keyAll()", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the return type of the <strong><code>values()</code></strong> method?</p>", "options": [{"option": "Map", "correct": false}, {"option": "Set", "correct": false}, {"option": "Collection", "correct": true}, {"option": "Hash", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following classes is extended by the <strong>HashMap</strong> class in Java?</p>", "options": [{"option": "Map", "correct": false}, {"option": "AbstractMap", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following classes implements the <strong>AbstractMap</strong> class in Java?</p>", "options": [{"option": "TreeMap", "correct": false}, {"option": "HashMap", "correct": false}, {"option": "Map", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is inherited from the <strong>AbstractMap</strong> class?</p>", "options": [{"option": "equals()", "correct": false}, {"option": "hashcode()", "correct": false}, {"option": "toString()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods is inherited from an object class in Java?</p>", "options": [{"option": "wait()", "correct": false}, {"option": "getClass()", "correct": false}, {"option": "finalize()", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the initial default capacity of <strong>HashMap</strong> is ________________.</p>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": false}, {"option": "15", "correct": false}, {"option": "16", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the initial default load factor of <strong>HashMap</strong>?</p>", "options": [{"option": "1", "correct": false}, {"option": "0.50", "correct": false}, {"option": "0.75", "correct": true}, {"option": "2", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public static void main(String args[] ) throws Exception {\n\n        HashMap&lt;Integer,String&gt; hash = new HashMap&lt;Integer,String&gt;();\n        System.out.println(hash);\n        hash.put(1,\"hack\");\n        hash.put(2,\"earth\");\n        System.out.println(hash);\n        hash.clear();\n    }\n}\n</code></pre>", "options": [{"option": "[] \r\n[1=hack, 2=earth]", "correct": false}, {"option": "Nothing will be printed", "correct": false}, {"option": "{} \r\n{1=hack, 2=earth}", "correct": true}, {"option": "{1=hack, 2=earth}", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class TestClass {\n    public static void main(String args[] ) throws Exception {\n    HashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\n    hash.put(\"hack\",1);\n    hash.put(\"earth\",1);\n    System.out.println(hash);\n     hash.clear();\n        }\n    }\n</code></pre>", "options": [{"option": "[hack=1, earth=1]", "correct": false}, {"option": "{hack=1, earth=1}", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "hack=1, earth=1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class TestClass {\n        public static void main(String args[] ) throws Exception {\n            HashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\n            hash.put(\"hack\",1);\n            hash.put(\"earth\",1);\n            System.out.println(hash);\n            hash.clear();\n            TreeMap &lt;String,Integer&gt; tm=new TreeMap &lt;String,Integer&gt; (hash);\n            System.out.println(tm);\n        }\n    }\n</code></pre>", "options": [{"option": "{hack=1, earth=1}\r\n", "correct": false}, {"option": "{hack=1, earth=1}  {}", "correct": true}, {"option": "{hack=1, earth=1}  {hack=1, earth=1}", "correct": false}, {"option": "{}", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class TestClass {\n        public static void main(String args[] ) throws Exception {\n            HashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\n            hash.put(\"hack\",1);\n            hash.put(\"earth\",1);\n            System.out.println(hash);\n            TreeMap &lt;String,Integer&gt; tm=new TreeMap &lt;String,Integer&gt; (hash);\n            System.out.println(tm);\n        }\n    }\n</code></pre>", "options": [{"option": "{earth=1,hack=1}\r\n{earth=1, hack=1}", "correct": false}, {"option": "{hack=1, earth=1}\r\n{earth=1, hack=1}", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "{hack=1, earth=1}\r\n{}", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is a <strong>bidirectional</strong> cursor in a collection?</p>", "options": [{"option": "Enumeration", "correct": false}, {"option": "Iterator", "correct": false}, {"option": "ListIterator", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to create a <strong>listIterator</strong> object in Java?</p>", "options": [{"option": "public listiterator()", "correct": false}, {"option": "public ListIterator listIterator()", "correct": true}, {"option": "public  int ListIterator listiterator", "correct": false}, {"option": "public void  ListIterator listiterator", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n        public static void main(String args[] ) throws Exception {\n            int a=5;\n            int b=1;\n            try\n            {\n                System.out.println(b/a);\n            }\n            finally\n            {\n                System.out.println(\"There is no error\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "1\r\nThere is no error", "correct": false}, {"option": "0\r\nThere is no error", "correct": true}, {"option": "There is no error", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n      public static void main(String args[] ) throws Exception {\n\n            try\n            {\n                int a=10;\n                int b=0;\n                int c=a/b;\n                System.out.println(c);\n            }\n            catch(Exception e)\n            {\n                System.out.print(\"There is an error in the code\");\n            }\n            finally\n            {\n                System.out.println(\"There is no error in the code\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "There is no error in the code", "correct": false}, {"option": "There is an error in the code", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about <strong>HashSet</strong> is false?</p>", "options": [{"option": "Heterogeneous objects are allowed", "correct": false}, {"option": "Duplicates are allowed", "correct": true}, {"option": "Null insertion is possible", "correct": false}, {"option": "Implements Serializable and Cloneable interface", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class Test {\n        public static void main(String args[] ) throws Exception {\n            LinkedHashSet hs=new LinkedHashSet();\n            hs.add(\"a\");\n            hs.add(\"b\");\n            hs.add(null);\n           System.out.println( hs.add(\"b\"));\n           System.out.println(hs);\n        }}\n</code></pre>", "options": [{"option": "false\r\n[a, b, null,b]", "correct": false}, {"option": "false\r\n[a, b, null]", "correct": true}, {"option": "false\r\n[a, b]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the best choice to develop <strong>cache based applications</strong> in Java?</p>", "options": [{"option": "Map", "correct": false}, {"option": "LinkedHashSet", "correct": true}, {"option": "TreeSet", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the return type of the <strong><code>comparator()</code></strong> method in Java?</p>", "options": [{"option": "0", "correct": false}, {"option": "null", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the underlying data structure for a <strong>TreeSet</strong> in Java?</p>", "options": [{"option": "LinkedList", "correct": false}, {"option": "Balanced Tree", "correct": true}, {"option": "Stack", "correct": false}, {"option": "Queue", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following exceptions is caught when a heterogeneous object is added to a <strong>TreeSet</strong>?</p>", "options": [{"option": "NullPointerException", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "IllegalArgumentException", "correct": false}, {"option": "SecurityException", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following commands is used to create an empty <strong>TreeSet</strong> object?</p>", "options": [{"option": "TreeSet t=new TreeSet (SortedSet s)", "correct": false}, {"option": "TreeSet t=new TreeSet ()", "correct": true}, {"option": "TreeSet t=new TreeSet (Comparator c)", "correct": false}, {"option": "TreeSet t=new TreeSet (Collection c)", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class Test {\n        public static void main(String args[] ) throws Exception {\n            TreeSet t=new  TreeSet ();\n            t.add(\"a\");\n            t.add(\"b\");\n            t.add(\"A\");\n           System.out.println(t);\n        }}\n</code></pre>", "options": [{"option": "[a, b,A]\r\n", "correct": false}, {"option": "[A, a, b]", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class HackerEarth {\n        public static void main(String args[] ) throws Exception {\n            TreeSet obj=new  TreeSet ();\n            obj.add(null);\n            obj.add(\"A\");\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "[null,A]", "correct": false}, {"option": "NullPointerException", "correct": true}, {"option": "{A,null}", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\n    class Test {\n        public static void main(String args[] ) throws Exception {\n            TreeSet t=new  TreeSet ();\n            t.add(1);\n            t.add(10);\n            t.add(0);\n            System.out.println(t);\n        }\n    }\n</code></pre>", "options": [{"option": "{0, 1, 10}", "correct": false}, {"option": "[1, 10, 0]", "correct": false}, {"option": "[0, 1, 10]", "correct": true}, {"option": "{1, 10, 0}", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Test {\n        public static void main(String args[] ) throws Exception {\n            TreeSet t=new  TreeSet ();\n            t.add(1);\n            t.add(10);\n            t.add(0);\n            t.add(null);\n            t.add(\"R\");\n            System.out.println(t);\n        }\n    }\n</code></pre>", "options": [{"option": "[1,10,0,null,R]", "correct": false}, {"option": "{1,10,0,null,R}", "correct": false}, {"option": "NullPointerException", "correct": true}, {"option": "[R,0,null,10,1]", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class HackerEarth {\n        public static void main(String args[] ) throws Exception {\n            TreeSet&lt;StringBuffer&gt; t=new  TreeSet&lt;StringBuffer&gt; ();\n            t.add(new StringBuffer(\"H\"));\n            t.add(new StringBuffer(\"A\"));\n            t.add(new StringBuffer(\"C\"));\n            t.add(new StringBuffer(\"K\"));\n            System.out.println(t);\n        }\n    }\n</code></pre>", "options": [{"option": "[H,A,C,K]", "correct": false}, {"option": "[K,C,A,H]", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java,  <strong>comparable interface</strong> is present in ______________________.</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.util", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is present in the comparable interface in Java?</p>", "options": [{"option": "compare()", "correct": false}, {"option": "compareTo()", "correct": true}, {"option": "compareEqual()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the return type of the <strong>compareTo()</strong> method?</p>", "options": [{"option": "boolean", "correct": false}, {"option": "int", "correct": true}, {"option": "float", "correct": false}, {"option": "String", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is returned if<em> obj1</em> comes before<em> obj2</em>?</p>\n\n<pre class=\"prettyprint\"><code>obj1.compareTo(obj2)\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "-1", "correct": true}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth{\n\n    public static void main(String args[]) throws Exception {\n        System.out.println(\"Z\".compareTo(\"B\"));\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "24", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n        class Hackerearth {\n            public static void main(String args[] ) throws Exception {\n                System.out.println(\"G\".compareTo(\"Z\"));\n            }\n        }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "-19", "correct": true}, {"option": "-1", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> import java.util.*;\n        class HackerEarth {\n            public static void main(String args[] ) throws Exception {\n                int val=9;\n                int a=++val + ++val + --val + val--;\n                System.out.println(a);\n            }\n        }\n</code></pre>", "options": [{"option": "40", "correct": false}, {"option": "41", "correct": true}, {"option": "42", "correct": false}, {"option": "39", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is meant by a scripting language?</p>", "options": [{"option": "A low-level programming language", "correct": false}, {"option": "An assembly-level programming language", "correct": false}, {"option": "A machine-level programming language", "correct": false}, {"option": "A high-level programming language", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following attributes is used to include an external JavaScript code in an HTML document?</p>", "options": [{"option": "ext", "correct": false}, {"option": "src", "correct": true}, {"option": "script", "correct": false}, {"option": "link", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about JavaScript is true?</p>", "options": [{"option": "It is directly written into HTML pages.", "correct": false}, {"option": "It is directly written into a JavaScript file and included in a HTML document.", "correct": true}, {"option": "It is directly written on the server page.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is used to call a JavaScript code?</p>", "options": [{"option": "Triggering event", "correct": false}, {"option": "RMI", "correct": false}, {"option": "Preprocessor", "correct": false}, {"option": "Function", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, when a page has finished parsing, which of the following attributes is used to specify that the script has been executed?</p>", "options": [{"option": "parse", "correct": false}, {"option": "async", "correct": false}, {"option": "type", "correct": false}, {"option": "defer", "correct": true}], "level": "Hard"}, {"question": "<p>JavaScript is used ______________________________.</p>", "options": [{"option": "To make computations in HTML simpler", "correct": false}, {"option": "To increase the download time for the client", "correct": false}, {"option": "To minimize storage requirements on the web server", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>The <code>&lt;script&gt;</code> tag is used in the _____________________.</p>", "options": [{"option": "Header", "correct": false}, {"option": "Header and body", "correct": true}, {"option": "Title and header", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is <strong>Netscape Livewire</strong> used for?</p>", "options": [{"option": "To create a linkage between the client-side and the server-side", "correct": false}, {"option": "To support only non-relational databases", "correct": false}, {"option": "To allow the server-side and the JavaScript code to connect to the RDBMS", "correct": true}, {"option": "To interpret the JavaScript code", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the these\u00a0statements about the following JavaScript command is true:</p>\n\n<pre class=\"prettyprint\"><code>a===b\n</code></pre>", "options": [{"option": "Both 'a' and 'b' are equal in value", "correct": false}, {"option": "Both 'a' and 'b' are equal in value and type", "correct": true}, {"option": "Both 'a' and 'b' are equal in value, type, and reference address", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to check if the \u201ca\u201d character is not equal to \u201cnull\u201d?</p>", "options": [{"option": "if(a!null)", "correct": false}, {"option": "if(a!=null)", "correct": false}, {"option": "if (!a)", "correct": false}, {"option": "if(a!==null)", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>\u2018\\f\u2019</strong> escape sequence stands for ________________.</p>", "options": [{"option": "Floating numbers", "correct": false}, {"option": "Form feed", "correct": true}, {"option": "The representation of functions that returns a value", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not an error in JavaScript?</p>", "options": [{"option": "Syntax error", "correct": false}, {"option": "Missing of semicolons", "correct": false}, {"option": "Division by zero", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an indefinite or an infinite value during an arithmetic value computation is displayed as ____________.</p>", "options": [{"option": "An Error", "correct": false}, {"option": "\u201cInfinity\u201d", "correct": true}, {"option": "As such", "correct": false}, {"option": "An overflow error", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the syntax of a real number representation?</p>", "options": [{"option": "[digits][+digits][(E|e)[(+|-)]digits]", "correct": false}, {"option": "[digits][.digits][(E|e)[(+|-)]digits]", "correct": true}, {"option": "[digits][(E|e)[(+|-)]digits]", "correct": false}, {"option": "[.digits][digits][(E|e)[(+|-)]digits]", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the hexadecimal literals begins with _______________.</p>", "options": [{"option": "0X", "correct": false}, {"option": "0x", "correct": false}, {"option": "Either of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following variables is volatile?</p>", "options": [{"option": "Volatile ", "correct": false}, {"option": "Immutable", "correct": false}, {"option": "Mutable ", "correct": true}, {"option": "Dynamic ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var valA = \u201d123\u201d;\nvar valB = 123;\nalert( valA + valB );\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "246", "correct": false}, {"option": "123123", "correct": true}, {"option": "[string]123", "correct": false}, {"option": "123", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    string1=\"abc\";\n    string2=4;\n    alert(string1.concat(string2));\n</code></pre><p></p>", "options": [{"option": "abc", "correct": false}, {"option": "4", "correct": false}, {"option": "abcd", "correct": false}, {"option": "abc4", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, function definitions are also known as function ____________.</p>", "options": [{"option": "Prototypes", "correct": false}, {"option": "Literals", "correct": true}, {"option": "Expressions", "correct": false}, {"option": "Declarations", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about the primary expressions is correct?</p>", "options": [{"option": "The primary expressions are basic expressions containing all necessary functions.", "correct": false}, {"option": "The primary expressions are those that stand alone.", "correct": true}, {"option": "The primary expressions contain variable references.", "correct": false}, {"option": "The primary expressions are complex expressions.", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript expression, which of these statements is used to check if <code>pattern</code> matches the <code>text</code> string:</p>\n\n<pre class=\"prettyprint\"><code>    var valA = \"testing: 1, 2, 3\"; \n    var valB = /\\d+/g;\n</code></pre>", "options": [{"option": "valB.test(valA)", "correct": true}, {"option": "text.valA(valB)", "correct": false}, {"option": "valA==valB", "correct": false}, {"option": "valA.equals(valB)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following expression types is used to call functions?</p>", "options": [{"option": "Primary", "correct": false}, {"option": "Invocation ", "correct": true}, {"option": "Functional ", "correct": false}, {"option": "Property access ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the significance of the <strong>new Point(2,3)</strong> expression?</p>", "options": [{"option": "Object creation ", "correct": true}, {"option": "Invocation ", "correct": false}, {"option": "Constructor calling ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following operators is used to check the existence of specific properties?</p>", "options": [{"option": "exists", "correct": false}, {"option": "exist", "correct": false}, {"option": "in", "correct": true}, {"option": "within", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a ternary operator in JavaScript?</p>", "options": [{"option": "+", "correct": false}, {"option": ":", "correct": false}, {"option": "\u2013", "correct": false}, {"option": "?:", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these statements is equivalent to the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>x = ~-y;\nw = x = y = z;\nq = a?b:c?d:e?f:g;\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "x = a?b:(c?d:(e?f:g));\r\nq = ~(-y); w = (x = (y = z));", "correct": false}, {"option": "x = (x = (y = z));w = ~(-y);\r\nq = a?b:(c?d:(e?f:g));", "correct": false}, {"option": "x = ~(-y); w = (x = (y = z));\r\nq = a?b:(c?d:(e?f:g));", "correct": true}, {"option": "x = ~(-y); w = (x = (y = z)); \r\nq = (c?d:(e?f:g));", "correct": false}], "level": "Medium"}, {"question": "<p>JavaScript is  _______________________________________-.</p>", "options": [{"option": "an object-oriented language", "correct": false}, {"option": "an object-based language", "correct": true}, {"option": "a high-level language", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var a=5 , b=1;\nvar obj = { a : 10 };\nwith(obj) \n{\n      alert(b);\n}\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "10", "correct": false}, {"option": "1", "correct": true}, {"option": "undefined", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var a=5 , b=1\n    var obj = { a : 10 }\n    with(obj) \n    {\n          alert(a)\n    }\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "1", "correct": false}, {"option": "10", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>A conditional expression is also known as a ______________________________________.</p>", "options": [{"option": "if-else statement", "correct": false}, {"option": "if-then-else statement", "correct": false}, {"option": "if statement", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is a <strong>statement block</strong>?</p>", "options": [{"option": "A conditional block", "correct": false}, {"option": "A block that combines multiple statements into a single compound statement", "correct": true}, {"option": "A block that contains a single statement", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>When an empty statement is encountered, a JavaScript interpreter __________________.</p>", "options": [{"option": "Displays a prompt to complete the statement", "correct": false}, {"option": "Ignores the statement", "correct": true}, {"option": "Throws an error", "correct": false}, {"option": "Throws an exception", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>var</strong> and <strong>function</strong> are ___________________________.</p>", "options": [{"option": "Declaration statements", "correct": true}, {"option": "Keywords", "correct": false}, {"option": "Datatypes", "correct": false}, {"option": "Prototypes", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    var count = 0;\n    while (count &lt; 10) \n    {\n         console.log(count);\n         count++;\n    }  \n</code></pre>", "options": [{"option": "Value of count from 0 to 9 is displayed in the console.", "correct": true}, {"option": "The code results in an error.", "correct": false}, {"option": "Value of count from 1 to 9 is displayed in the console.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how can an <strong>enumeration order</strong> become implementation dependent and non-interoperable?</p>", "options": [{"option": "If the object does not have the properties present in the integer array indices.", "correct": false}, {"option": "If the object inherits the enumerable properties.", "correct": true}, {"option": "If the 'delete' keyword is never used.", "correct": false}, {"option": "If the Object.defineProperty() method is not used.", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following operations are done on a loop variable in a\u00a0<strong>for</strong>\u00a0loop?</p>", "options": [{"option": "Testing, Incrementation, Initialization", "correct": false}, {"option": "Testing, Updation, Initialization", "correct": false}, {"option": "Initialization, Testing, Incrementation", "correct": false}, {"option": "Initialization, Testing, Updation", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following <strong>JavaScript</strong> code:</p>\n\n<pre class=\"prettyprint\"><code>function testhack(x) \n    { \n        for (; x.next; x = x.next) ;\n        return x;\n    }\n</code></pre>", "options": [{"option": "Null", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "No error", "correct": true}, {"option": "Undefined", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if the body of <strong>for/in</strong> loop deletes a yet to be enumerated property, ______________________________________________.</p>", "options": [{"option": "then the property will be stored in a cache and can be accessed later.", "correct": false}, {"option": "then the property will not be enumerated.", "correct": true}, {"option": "then the loop will not be executed further.", "correct": false}, {"option": "then the loop will set undefined value for that property.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when an exception is thrown the interpreter in the <strong>jump</strong> statement ____________.</p>", "options": [{"option": "Stops its work", "correct": false}, {"option": "Jumps to the nearest enclosing exception handler", "correct": true}, {"option": "Throws another exception", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>continue</strong> keyword in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>while (val != 0)\n {\n  if (val == 1) \n     continue;\n    else \n     val++;\n }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "It is used to restart the loop.", "correct": false}, {"option": "It is used to skip the rest of the statements in the iteration.", "correct": true}, {"option": "It skips the next iteration.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>debugger</strong> statement in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function testhack(val) \n    {\n         if (val === undefined) debugger;\n    }\n\n</code></pre>", "options": [{"option": "It debugs the error in the statement.", "correct": false}, {"option": "It performs a simple break-point.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following keywords is not a statement in JavaScript?</p>", "options": [{"option": "debugger", "correct": false}, {"option": "use strict", "correct": true}, {"option": "with", "correct": false}, {"option": "if", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes are included in objects?</p>", "options": [{"option": "The class, the parameters, and the object\u2019s extensible flag", "correct": false}, {"option": "The native object, the classes and Interfaces, and the object\u2019s extensible flag", "correct": false}, {"option": "The prototype, the class, and the object's parameters", "correct": false}, {"option": "The prototype, the class, and the object\u2019s extensible flag", "correct": true}], "level": "Hard"}, {"question": "<p>What do the <strong>firstname</strong> and the <strong>surname</strong> values indicate in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var book = {\n    \"main title\": \"JavaScript\", \n    'sub-title': \"The Definitive Guide\", \n    \"for\": \"all audiences\", \n    author: { \n    firstname: \"Dave\", \n    surname: \"Martins\" \n    }\n    };\n\n</code></pre><p></p>", "options": [{"option": "Properties", "correct": false}, {"option": "Property values", "correct": false}, {"option": "Property names", "correct": true}, {"option": "Objects", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the linkage of a series of prototype objects is known as a _______________.</p>", "options": [{"option": "Prototype stack", "correct": false}, {"option": "Prototype chain\r\n", "correct": true}, {"option": "Prototype class", "correct": false}, {"option": "Prototypes", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript statement, the datatype enclosed within the square brackets for a <code>book</code> object should be ________________________________________.\n</p><pre class=\"prettyprint\"><code>    book[datatype]=assignment_value;\n\n</code></pre><p></p>", "options": [{"option": "An integer", "correct": false}, {"option": "An object", "correct": false}, {"option": "A string", "correct": true}, {"option": "Any of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to display <strong>\u201cHello World\u201d</strong> on the web page?</p>", "options": [{"option": "print(\u201cHello World\u201d)", "correct": false}, {"option": "System.out.println(\u201cHello World\u201d)", "correct": false}, {"option": "document.write(\u201cHello World\u201d)", "correct": true}, {"option": "response.write(\u201cHello World\u201d)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to check if an object is the prototype of another object?</p>", "options": [{"option": "equals() ", "correct": false}, {"option": "isPrototypeOf() ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>The following JavaScript statement is a _____________.\n</p><pre class=\"prettyprint\"><code>    function f() {};\n</code></pre><p></p>", "options": [{"option": "Function ", "correct": false}, {"option": "Prototype of a function", "correct": false}, {"option": "Custom constructor", "correct": true}, {"option": "Return statement", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is an objective\u00a0of the <strong>extensible</strong> attribute?</p>", "options": [{"option": "It modifies the properties of an object to make it non-configurable.", "correct": false}, {"option": "It \"locks down\u201d objects into a known state to prevent tampering from outside.", "correct": true}, {"option": "It configures and returns a writable property.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these processes is incorporated in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    o = {x:1, y:{z:[false,null,\"\"]}}; \n    s = JSON.stringify(o); \n    p = JSON.parse(s);\n</code></pre><p></p>", "options": [{"option": "Object Encapsulation", "correct": false}, {"option": "Object Serialization", "correct": true}, {"option": "Object Encoding", "correct": false}, {"option": "Object Abstraction", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>toLocaleString()</strong> method is used to return a ________________.</p>", "options": [{"option": "Localized object representation", "correct": false}, {"option": "Parsed string", "correct": false}, {"option": "Local time in the string format", "correct": false}, {"option": "Localized string representation of the object", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the significance of the <code>var count = [4,,6];</code> statement?</p>", "options": [{"option": "It is an error.", "correct": false}, {"option": "The omitted value is undefined.", "correct": true}, {"option": "The omitted value is an integer.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following <strong>JavaScript</strong> code:\n</p><pre class=\"prettyprint\"><code>    var a1 = [,,,]; \n    var a2 = new Array(3); \n    0 in a1 \n    0 in a2\n</code></pre><p></p>", "options": [{"option": "true true", "correct": false}, {"option": "false false", "correct": false}, {"option": "false true", "correct": false}, {"option": "true false", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used by the <strong>or</strong> operator to identify the arrays?</p>", "options": [{"option": "isarrayType()", "correct": false}, {"option": "typeof", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following operations is executed by the <strong>reduce</strong> and <strong>reduceRight</strong> methods?</p>", "options": [{"option": "Filter and fold", "correct": false}, {"option": "Inject and fold", "correct": true}, {"option": "Finger and fold", "correct": false}, {"option": "Fold", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var x = []; \nx.unshift(1); \nx.unshift(22);\nx.shift();\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "12", "correct": false}, {"option": "1", "correct": false}, {"option": "22", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = []; \n    a.unshift(1); \n    a.unshift(22);\n    a.shift(); \n    a.unshift(3,[4,5]); \n    a.shift();\n</code></pre><p></p>", "options": [{"option": "22", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var x = [7,8,9,10,11];\nx.slice(0,3);\n</code></pre>", "options": [{"option": "[10,11]", "correct": false}, {"option": "[7,8,9]", "correct": true}, {"option": "[7,8,9,10]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the simultaneous execution of the <strong>reverse()</strong> and the <strong>join()</strong> methods __________________.</p>", "options": [{"option": "Reverses the array elements", "correct": false}, {"option": "Reverses and concatenates the elements of the array", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the significance of the <code>if (!a[i]) continue;</code> statement?</p>", "options": [{"option": "The undefined elements are skipped", "correct": false}, {"option": "The non existent elements are skipped", "correct": false}, {"option": "The null elements are skipped", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>pop()</strong> method in JavaScript?</p>", "options": [{"option": "It increments the total length by 1.", "correct": false}, {"option": "It decrements the total length by 1.", "correct": true}, {"option": "It prints the first element of an array.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, function definitions begin with _______________.</p>", "options": [{"option": "The return type, the function keyword, the identifier and the parentheses", "correct": false}, {"option": "The return type and the identifier", "correct": false}, {"option": "The identifier and the parentheses", "correct": true}, {"option": "The identifier and the return type", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function printprops(o) \n    {\n        for(var p in o)\n          console.log(p + \": \" + o[p] + \"\\n\");\n    }\n</code></pre><p></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the function name is optional when the function is ___________________.</p>", "options": [{"option": "Defined as a looping statement", "correct": false}, {"option": "Predefined", "correct": false}, {"option": "Defined as expressions", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>return</strong> statement in JavaScript?</p>", "options": [{"option": "It returns the value and continues executing the rest of the statements.", "correct": false}, {"option": "It returns the value and stops the program.", "correct": false}, {"option": "It returns the value and stops executing the function.", "correct": false}, {"option": "It stops executing the function and returns the value.", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a function without a return value?</p>", "options": [{"option": "Method", "correct": false}, {"option": "Procedures", "correct": true}, {"option": "Constructor", "correct": false}, {"option": "Destructor", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hypotenuse(a, b) \n    {\n           function square(x) \n           { \n                return x*x; \n           }\n           return Math.sqrt(square(a) + square(b));\n    }\n</code></pre><p></p>", "options": [{"option": "The sum of the squares of 'a' and 'b'", "correct": true}, {"option": "The square of the sum of 'a' and 'b'", "correct": false}, {"option": "The sum of 'a' and 'b' squared", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to invoke the <strong>m</strong> function of the <strong>o</strong> class which expects the <strong>x</strong> and the <strong>y</strong> arguments?</p>", "options": [{"option": "o(x,y);", "correct": false}, {"option": "o.m(x) && o.m(y);", "correct": false}, {"option": "o.m(x,y);", "correct": true}, {"option": "m(x,y);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is equivalent to the <code>o.m(x,y);</code> statement?</p>", "options": [{"option": "o[\"m\"](x,y);", "correct": true}, {"option": "o.m(x) && o.m(y);", "correct": false}, {"option": "o(m)[\"x\",\"y\"];", "correct": false}, {"option": "o.m(x && y);", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var sum=eval(\"10*10+5\");\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10*10+5", "correct": false}, {"option": "105 as a string", "correct": false}, {"option": "105 as an integer value", "correct": true}, {"option": "100", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, some functions returns values by default.</p>", "options": [{"option": "Yes", "correct": true}, {"option": "No", "correct": false}], "level": "Easy"}, {"question": "<p>The following JavaScript code does not throw any errors:\n</p><pre class=\"prettyprint\"><code>    var t = (function(x) {return x*x;}(10));\n</code></pre><p></p>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <code>string2Num</code> in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var string2Num=parseInt(\"123xyz\");\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "NaN", "correct": false}, {"option": "123", "correct": true}, {"option": "123xyz", "correct": false}, {"option": "Exception", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to define the <strong>m</strong> method with respect to the <strong>f</strong> function and the <strong>o</strong> object?</p>", "options": [{"option": "o.m=f.o", "correct": false}, {"option": "o.m=f", "correct": true}, {"option": "f=o.m ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is equivalent to the following code:</p>\n<pre class=\"prettyprint\"><code>var o = new Object();\n</code></pre>", "options": [{"option": "var o;", "correct": false}, {"option": "var o=Object();", "correct": false}, {"option": "object o=new Object();", "correct": false}, {"option": "var o=new Object;", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements for\u00a0these two JavaScript statements\u00a0is true:</p>\n\n<pre class=\"prettyprint\"><code>    !!(a &amp;&amp; b);\n    (a &amp;&amp; b);\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Both the statements return boolean values.", "correct": false}, {"option": "Both the statements return non-boolean values.", "correct": false}, {"option": "Both the statements check for the existence of the specified objects. ", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function testhack() \n  {\n      var hck = [];\n      for(var x = 0; x &lt; 10; x++)\n      hck[x] = function() { return x; };\n      return hck;\n   }\n    var hck = testhack();\n    hck[5]();\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "9", "correct": false}, {"option": "0", "correct": false}, {"option": "10", "correct": true}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following types of scoping is used in JavaScript?</p>", "options": [{"option": "Literal", "correct": false}, {"option": "Lexical", "correct": true}, {"option": "Segmental", "correct": false}, {"option": "Sequential", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following enables the implementation of <strong>Lexical Scoping</strong>?</p>", "options": [{"option": "Object acquisition", "correct": false}, {"option": "Dereferencing the current scope chain", "correct": false}, {"option": "Referencing the current scope chain", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is a <strong>closure</strong> in JavaScript?</p>", "options": [{"option": "Function objects", "correct": false}, {"option": "The scope where the function variables are resolved", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a closure in JavaScript?</p>", "options": [{"option": "Objects", "correct": false}, {"option": "Variables", "correct": false}, {"option": "Functions", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var scope = \"global scope\";\n    function checkscope() {\n    var scope = \"local scope\"; \n    function f() \n    { \n         return scope; \n    }\n    return f;\n</code></pre><p></p>", "options": [{"option": "Null", "correct": false}, {"option": "Exception", "correct": false}, {"option": "The value in scope", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the fundamental rule of lexical scoping in JavaScript?</p>", "options": [{"option": "The functions are executed using the scope chain.", "correct": true}, {"option": "The functions are declared in the scope.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following scoping procedures is functionally opposite to the lexical scoping procedure?</p>", "options": [{"option": "Literal ", "correct": false}, {"option": "Static ", "correct": false}, {"option": "Dynamic ", "correct": true}, {"option": "Generic ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>dynamic scoping</strong> procedure in JavaScript?</p>", "options": [{"option": "The variables can be declared outside the scope.", "correct": true}, {"option": "The variables must be declared outside the scope.", "correct": false}, {"option": "The variables cannot be declared outside the scope.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following algorithmic languages is used to standardize the <strong>lexical scoping</strong> technique?</p>", "options": [{"option": "Ada", "correct": false}, {"option": "Pascal", "correct": false}, {"option": "Modula2", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following entities is used to define the behavior of the class instances present within a method?</p>", "options": [{"option": "Method", "correct": false}, {"option": "Classes", "correct": true}, {"option": "Interfaces", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following keywords is used to refer to an object which invoked the specified keyword?</p>", "options": [{"option": "from", "correct": false}, {"option": "to", "correct": false}, {"option": "this", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var o = new F();\n    o.constructor === F\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the augmenting class objects inherit the prototype properties in the _____________.</p>", "options": [{"option": "Static state ", "correct": false}, {"option": "Dynamic state", "correct": true}, {"option": "Static and the dynamic states", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>JSON()</strong> method in JavaScript?</p>", "options": [{"option": "It can be invoked manually as 'object.JSON()'.", "correct": false}, {"option": "It will be automatically invoked by the compiler.", "correct": false}, {"option": "It is invoked automatically by the 'JSON.stringify()' method.", "correct": true}, {"option": "It cannot be invoked in any form.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when can class <strong>B\u00a0</strong>be extended by class\u00a0<strong>A</strong>?</p>", "options": [{"option": "B is the superclass and A is the subclass", "correct": false}, {"option": "A is the superclass and B is the subclass", "correct": true}, {"option": "Both the classes are superclasses", "correct": false}, {"option": "Both the classes are subclasses", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following predefined functions represents the D\u00a0subclass inheriting the C\u00a0superclass?</p>", "options": [{"option": "D=inherit(C);", "correct": false}, {"option": "D=C.inherit();", "correct": false}, {"option": "D.prototype=inherit(C);", "correct": true}, {"option": "D.prototype=inherit(C.prototype);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to create new properties and modify the attributes of existing properties?</p>", "options": [{"option": "Object.defineProperty()", "correct": false}, {"option": "Object.defineProperties()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what are\u00a0<strong><code>provide()</code></strong> and <strong><code>require()</code></strong> functions used for respectively?</p>", "options": [{"option": "Loading and declaring modules", "correct": false}, {"option": "Declaring and loading modules", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how many global symbols can be defined by modules?</p>", "options": [{"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "One", "correct": true}, {"option": "Four", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the scope of a function is also known as the ______________.</p>", "options": [{"option": "Function\u2019s scope", "correct": false}, {"option": "Module function", "correct": true}, {"option": "Modulated function", "correct": false}, {"option": "Private function", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the modules that have multiple items in their API can __________________.</p>", "options": [{"option": "Assign itself to a global variable", "correct": false}, {"option": "Invoke another module of the same kind", "correct": false}, {"option": "Return a namespace object", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>provides()</strong> function and the <strong>exports</strong> object are used to ________________.</p>", "options": [{"option": "Store the module\u2019s API and register their APIs", "correct": false}, {"option": "Register the module\u2019s API and store their APIs", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var sets = com.davidflanagan.collections.sets;\n</code></pre><p></p>", "options": [{"option": "A single module is imported", "correct": true}, {"option": "A module is partially imported", "correct": false}, {"option": "A namespace is imported", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>properties()</strong> method is ________________.</p>", "options": [{"option": "A non-enumerable method", "correct": true}, {"option": "An enumerable method", "correct": false}, {"option": "An operational method", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the creation of <strong>global</strong> variables is avoided by _________________________________________.</p>", "options": [{"option": "Using a method that defines all the variables", "correct": false}, {"option": "Using an object that has reference to all the variables", "correct": false}, {"option": "Using global functions", "correct": false}, {"option": "Using an object as its namespace", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is meant by\u00a0<strong>\u2018$\u2019</strong> in the <em>RegExp </em>object?</p>", "options": [{"option": "Character", "correct": false}, {"option": "Matcher", "correct": false}, {"option": "Metacharacter", "correct": true}, {"option": "Metadata", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following expressions is used to match the characters that are not enclosed in brackets?</p>", "options": [{"option": "[...]", "correct": false}, {"option": "[^]", "correct": false}, {"option": "[^...]", "correct": true}, {"option": "[\\D]", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the significance of the regular expression, <code>/[^(]*</code>?</p>", "options": [{"option": "It matches one or more characters that are not open parentheses.", "correct": false}, {"option": "It matches zero or more characters that are open parentheses.", "correct": false}, {"option": "It matches zero or more characters that are not open parentheses.", "correct": true}, {"option": "It matches one or more characters that are open parentheses.", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these conditions is matched when a non-greedy repetition is used in the following pattern:</p>\n\n<pre class=\"prettyprint\"><code>/a+?b/\n</code></pre>", "options": [{"option": "It matches the letter 'b' preceded by the fewest number of 'a\u2019s", "correct": true}, {"option": "It matches the letter 'b' preceded by any number of 'a's", "correct": false}, {"option": "It matches the letter 'a' preceded by the letter b, in the stack order", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the following sub-expression used for:</p>\n\n<pre class=\"prettyprint\"><code>/java(script)?/\n</code></pre>", "options": [{"option": "Matches 'java' followed by any number of 'script'", "correct": false}, {"option": "Matches 'java' followed by optional 'script'", "correct": true}, {"option": "Matches 'java' followed by a minimum of one 'script'", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the significance of parentheses in <strong>regular expressions</strong>?</p>", "options": [{"option": "It defines the pattern matching technique.", "correct": false}, {"option": "It defines the portion of strings in regular expressions.", "correct": false}, {"option": "It defines sub patterns within complete patterns.", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to perform the <strong>search-and-replace</strong> operation on strings for pattern matching?</p>", "options": [{"option": "searchandreplace()", "correct": false}, {"option": "replace()", "correct": true}, {"option": "add()", "correct": false}, {"option": "edit()", "correct": false}], "level": "Medium"}, {"question": "<p>What would be the result of the following statement in JavaScript using regular expression methods ?</p>", "options": [{"option": " Returns [\"123\"\"456\"\"789\"]", "correct": false}, {"option": "Returns [1,2,3,4,5,6,7,8,9]", "correct": false}, {"option": " Returns [\"123\",\"456\",\"789\"]", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is not included in the <strong>Crockford\u2019s</strong> subset?</p>", "options": [{"option": "coeval()", "correct": false}, {"option": "eval()", "correct": true}, {"option": "equal()", "correct": false}, {"option": "equivalent()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, why are the <strong>==</strong> and the <strong>!=</strong> operators not allowed by subsets?</p>", "options": [{"option": "It uses bitwise checking.", "correct": false}, {"option": "It uses the 'equals()' and the 'notequals()' methods instead.", "correct": false}, {"option": "It uses the '===' and the '!==' operators instead.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is being imposed on each subset to ensure that it conforms to the subset?</p>", "options": [{"option": "A parser to parse the code", "correct": false}, {"option": "A parser that parses and adds to the subset", "correct": false}, {"option": "A static verifier that parses code", "correct": true}, {"option": "Both a and c", "correct": false}], "level": "Hard"}, {"question": "<p>Why was <strong>\u201cThe Good Parts\u201d</strong> designed as a language subset in JavaScript?</p>", "options": [{"option": "To improve the programmer flexibility", "correct": false}, {"option": "To improve the programmer productivity", "correct": true}, {"option": "To balance the work load of the programmer", "correct": false}, {"option": "To create an in-built compiler and interpreter", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following subsets is a secure container designed to safely run untrusted JavaScript?</p>", "options": [{"option": "The Good Parts", "correct": false}, {"option": "Sandbox", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why is the <strong>this</strong> keyword forbidden in JavaScript?</p>", "options": [{"option": "The functions should access the global objects.", "correct": false}, {"option": "The functions should not access the global objects.", "correct": true}, {"option": "It is very inefficient to use.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions are not allowed in secure subsets?</p>", "options": [{"option": "debugger(), test()", "correct": false}, {"option": "eval(), function() constructor", "correct": true}, {"option": "eval(), debugger()", "correct": false}, {"option": "evaluate(), restrict()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following objects is used to define methods that allow complete control over the page contents?</p>", "options": [{"option": "Server-side document", "correct": false}, {"option": "Client-side document ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is one of the first security subsets put forward which relies on static verification only?</p>", "options": [{"option": "FBJS", "correct": false}, {"option": "Caja", "correct": false}, {"option": "Dojox.secure", "correct": false}, {"option": "ADSafe", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following subsets is used to transform the web content into secure modules that can be hosted on web pages?</p>", "options": [{"option": "Microsoft Web Sandbox", "correct": false}, {"option": "ADsafe", "correct": false}, {"option": "Caja", "correct": false}, {"option": "dojox.secure", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>const pi=3.14;\nvar pi=4;\nconsole.log(pi);\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "3.14", "correct": false}, {"option": "Error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the significance of the <strong>let</strong> keyword?</p>", "options": [{"option": "let allows declaring variables that are limited in scope to the statement on which it is used", "correct": false}, {"option": "let allows declaring variables that are limited in scope to the block on which it is used", "correct": false}, {"option": "let allows declaring variables that are limited in scope to the expression on which it is used", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the difference between the variables that are declared with <strong>var</strong> and <strong>let</strong>?</p>", "options": [{"option": "'var' is confined to a particular function but 'let' is not.", "correct": false}, {"option": "'let' is confined to a particular function but 'var' is not.", "correct": true}, {"option": "'var' defines values based on conditions but 'let' does not.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function func(n) \n    {\n         let tot = 0, fin=[]; \n         for(let a = 1; a &lt;= n; a++) \n         { \n            let val = 2*a-1; \n            tot += val;\n            fin.push(tot);\n         }\n         return fin;\n    }\nfunc(5) </code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1,2,3,4,5", "correct": false}, {"option": "3,6,9,12,15", "correct": false}, {"option": "1,4,9,16,25", "correct": true}, {"option": "1,3,5,7,9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    console.log(p)\n\n</code></pre><p></p>", "options": [{"option": "TypeError", "correct": false}, {"option": "Null", "correct": false}, {"option": "ReferenceError", "correct": true}, {"option": "ValueNotFoundError", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    let x=x+1;\n    console.log(x);\n</code></pre><p></p>", "options": [{"option": "0", "correct": false}, {"option": "NaN", "correct": false}, {"option": "Null", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>[x,y]=[y,x];</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A new reference object is created", "correct": false}, {"option": "An error is flashed", "correct": true}, {"option": "A warning is shown", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>You need to add API for operating on XML data and allow XML tags to be seen in JavaScript programs. Which of the following looping statements will you use to achieve this task?\u00a0</p>", "options": [{"option": "for ", "correct": false}, {"option": "while ", "correct": false}, {"option": "for/each ", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following exceptions is thrown by the iterators from the <strong>next()</strong> method when there are no more values to iterate in the finite collections?</p>", "options": [{"option": "ExitIteration", "correct": true}, {"option": "AbortIteration", "correct": false}, {"option": "Abort", "correct": false}, {"option": "StopIteration", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript,\u00a0which of the following methods of the\u00a0<strong>iterable</strong>\u00a0object is best suitable if you need to return the iterator objects?</p>", "options": [{"option": "iterator()", "correct": false}, {"option": "_iteration_()", "correct": false}, {"option": "_iterator_()", "correct": true}, {"option": "_return_iterator_()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    let succ = function(x) x+1, yes = function() true, no = function() false;\n</code></pre><p></p>", "options": [{"option": "Modular behaviour", "correct": false}, {"option": "Functional behaviour", "correct": true}, {"option": "Shorthand expression", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>data.sort(function(a,b) {b-a});\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Alphabetical order sort", "correct": false}, {"option": "Chronological order sort", "correct": false}, {"option": "Reverse alphabetical order sort", "correct": false}, {"option": "Reverse numerical order sort", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to trim whitespaces?</p>", "options": [{"option": "let trimmed=(trim(l));", "correct": false}, {"option": "let trimmed=(l.trim() for (l in lines));", "correct": true}, {"option": "let trimmed=l.trim();", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the default value of the <strong>catch</strong> clause when it has no conditionals?</p>", "options": [{"option": "0", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>finally</strong> block is called when ________________.</p>", "options": [{"option": "There are no exceptions", "correct": false}, {"option": "The catches do not match", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the return type of the <strong>typeof</strong> operator in standard JavaScript objects?</p>", "options": [{"option": "XML", "correct": false}, {"option": "DOM", "correct": false}, {"option": "HTML", "correct": false}, {"option": "Object", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to work with <strong>XML fragments</strong> and not with the <strong>XML()</strong> function?</p>", "options": [{"option": "XMLInterface()", "correct": false}, {"option": "XMLClass()", "correct": false}, {"option": "XMLList()", "correct": true}, {"option": "XMLArray()", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>descendant</strong> operator in JavaScript?</p>", "options": [{"option": "..", "correct": false}, {"option": "\u2026", "correct": true}, {"option": "*", "correct": false}, {"option": "@", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to perform XML manipulations using the XML objects invocation?</p>", "options": [{"option": "insertChildAfter()", "correct": false}, {"option": "insertChildBefore()", "correct": true}, {"option": "appendChildAfter(\u2026)", "correct": false}, {"option": "appendChildBefore(\u2026)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to delete <strong>weight</strong> tags?</p>", "options": [{"option": "delete weight(pt).all;", "correct": false}, {"option": "delete pt.element[all];", "correct": false}, {"option": "delete pt;", "correct": false}, {"option": "delete pt..weight;", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the events generated by the node objects is called as _______________.</p>", "options": [{"option": "Emitters", "correct": true}, {"option": "Generators", "correct": false}, {"option": "Dispatchers", "correct": false}, {"option": "Highevents", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to deregister the <strong>f</strong> event handler?</p>", "options": [{"option": "removerListener(name,f)", "correct": true}, {"option": "removeAllListeners(name)", "correct": false}, {"option": "deleteAllListeners(name)", "correct": false}, {"option": "deleteListener(name,f)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following functions is used to remove handlers from the names of events?</p>", "options": [{"option": "deleteAllListeners(name", "correct": false}, {"option": "removeAllListeners(name)", "correct": true}, {"option": "deleteListener(name,f)", "correct": false}, {"option": "removerListener(name,f)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is similar to the <strong>on()</strong>\u00a0method?</p>", "options": [{"option": "listeners()", "correct": false}, {"option": "addListener()", "correct": true}, {"option": "once()", "correct": false}, {"option": "add()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is an <strong>event emitter</strong>?</p>", "options": [{"option": "once", "correct": false}, {"option": "process", "correct": true}, {"option": "listeners", "correct": false}, {"option": "on", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>uncaught</strong> exceptions generate events when ______________.</p>", "options": [{"option": "Handlers are deregistered", "correct": false}, {"option": "Handler functions are called", "correct": false}, {"option": "Handlers are registered", "correct": true}, {"option": "Handlers do not have a matching catch clause", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following <strong>POSIX</strong> signals is used to generate events in JavaScript?</p>", "options": [{"option": "SIGFLOAT", "correct": false}, {"option": "SIGINT", "correct": true}, {"option": "SIGSHORT", "correct": false}, {"option": "SIGDOWN", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to pause <strong>data</strong> events in JavaScript?</p>", "options": [{"option": "s.stop();", "correct": false}, {"option": "s.pause();", "correct": true}, {"option": "s.halt();", "correct": false}, {"option": "s.wait();", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following methods is used to execute the <strong>end</strong> event on the <strong>EOF</strong> when no more data will arrive?</p>", "options": [{"option": "s.on(\"data\",f);", "correct": false}, {"option": "s.on(\"error\",f);", "correct": false}, {"option": "s.on(\"default\",f);", "correct": false}, {"option": "s.on(\"end\",f);", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the return value of the <strong>write()</strong> method when the node data is not written immediately and is internally buffered?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following companies is the producer of\u00a0<strong>Rhino</strong>?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Mozilla", "correct": true}, {"option": "Apple", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following global functions is not included in core JavaScript?</p>", "options": [{"option": "trim();", "correct": false}, {"option": "spawn(f);", "correct": true}, {"option": "exult();", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to quit the Rhino environment?</p>", "options": [{"option": "terminate()", "correct": false}, {"option": "exit()", "correct": false}, {"option": "close()", "correct": false}, {"option": "quit()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how are small and simple Rhino programs executed?</p>", "options": [{"option": "By starting a one to one shell", "correct": false}, {"option": "By starting an interative shell", "correct": true}, {"option": "By creating a thread to do simple programs", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to import the packages and the classes as objects?</p>", "options": [{"option": "import(java.util.*);", "correct": false}, {"option": "importClass(java.util.*);", "correct": true}, {"option": "import.Class(java.util.*);", "correct": false}, {"option": "Class.import(java.util.*);", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var f = new java.io.File(\"/tmp/test\");\n    var out = new java.io.FileWriter(f);\n    out instanceof java.io.Reader\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "True", "correct": false}, {"option": "Exception", "correct": false}, {"option": "False", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, when the getter and the setter methods exist, the Rhino ______________.</p>", "options": [{"option": "Becomes JavaScript properties", "correct": true}, {"option": "Creates Java classes ", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following operators is used to instantiate classes?</p>", "options": [{"option": "new", "correct": true}, {"option": "create", "correct": false}, {"option": "instantiate", "correct": false}, {"option": "create.new", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following classes is used to create JavaScript programs from new Java arrays?</p>", "options": [{"option": "java.Array", "correct": false}, {"option": "java.lang.reflect.Array", "correct": true}, {"option": "java.lang.*", "correct": false}, {"option": "java.lang.Array", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to register <strong>handlers</strong>?</p>", "options": [{"option": "register()", "correct": false}, {"option": "add()", "correct": false}, {"option": "on()", "correct": true}, {"option": "include()", "correct": false}], "level": "Easy"}, {"question": "<p>Why does Node not block while waiting for operations to complete?</p>", "options": [{"option": "Static", "correct": false}, {"option": " Asynchronous", "correct": true}, {"option": "Synchronous", "correct": false}, {"option": "Both a and c", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following namespaces include the necessary globals of a node?</p>", "options": [{"option": "variables", "correct": false}, {"option": "system", "correct": false}, {"option": "process", "correct": true}, {"option": "using", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following client-side timer functions is supported by Node?</p>", "options": [{"option": "getInterval()", "correct": false}, {"option": "Interval()", "correct": false}, {"option": "clearTime()", "correct": false}, {"option": "clearTimeout()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following commands is used to print \"Hacker Earth\" one second later?</p>", "options": [{"option": "setTimeout(function() { 1000, console.log(\"Hacker Earth\"); });", "correct": false}, {"option": "setTimeout(function(1000) { console.log(\"Hacker Earth\"); });", "correct": false}, {"option": "setTimeout(function() { console.log(\"Hacker Earth\"); }, 1000);", "correct": true}, {"option": "setTimeout(function() { console.log(\"Hacker Earth\"); });", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what of the following functions is used to debug the output in Node?</p>", "options": [{"option": "print();", "correct": false}, {"option": "console.log(\u2026);", "correct": true}, {"option": "debug(\u2026);", "correct": false}, {"option": "execute(\u2026);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is functionally similar to the <strong>load()</strong> function in Node?</p>", "options": [{"option": "store()", "correct": false}, {"option": "module()", "correct": false}, {"option": "log()", "correct": false}, {"option": "require()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following commands to run Node programs in JavaScript?</p>", "options": [{"option": "node(program.js)", "correct": false}, {"option": "program.js", "correct": false}, {"option": "node program.js", "correct": true}, {"option": "node.program.js", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, Node relies on the event handlers because the APIs are _________________.</p>", "options": [{"option": "Synchronous", "correct": false}, {"option": "Reusable", "correct": false}, {"option": "Asynchronous", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a fast C++ based JavaScript interpreter?</p>", "options": [{"option": "Sockets", "correct": false}, {"option": "Node", "correct": true}, {"option": "Processors", "correct": false}, {"option": "Closures", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following forms is included in client-side storage?</p>", "options": [{"option": "FileSystem API", "correct": false}, {"option": "Web Databases", "correct": false}, {"option": "None of these", "correct": false}, {"option": "Both of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following storages allows the caching of web pages and their associated resources?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the Microsoft\u2019s own proprietary client-side storage?</p>", "options": [{"option": "Offline Web Applications", "correct": false}, {"option": "IE User Data", "correct": true}, {"option": "Cookies", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following databases is used to handle huge amounts of data?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Datawarehouse", "correct": false}, {"option": "Web databases", "correct": true}, {"option": "Access", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>localStorage</strong> and <strong>sessionStorage</strong>?</p>", "options": [{"option": "Element ", "correct": false}, {"option": "Window ", "correct": true}, {"option": "Hash ", "correct": false}, {"option": "DOM ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the difference between <strong>localStorage</strong> and <strong>sessionStorage</strong>?</p>", "options": [{"option": "Lifetime and security", "correct": false}, {"option": "Scope and caching mechanism", "correct": false}, {"option": "Lifetime and scope", "correct": true}, {"option": "Security and scope", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functions is used to retrieve values in JavaScript?</p>", "options": [{"option": "get()", "correct": false}, {"option": "retrieve()", "correct": false}, {"option": "getItem()", "correct": true}, {"option": "retrieveItem()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to store values in the local storage of the browser?</p>", "options": [{"option": "set()", "correct": false}, {"option": "setItem()", "correct": true}, {"option": "storeItem()", "correct": false}, {"option": "store()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the default value of the <strong>type</strong> attribute in JavaScript?</p>", "options": [{"option": "text/css", "correct": false}, {"option": "text/javascript", "correct": true}, {"option": "text", "correct": false}, {"option": "xml", "correct": false}], "level": "Medium"}, {"question": "<p>If a file in a JavaScript code is shared by more than one page, then it needs to be downloaded only once by the first page that uses it. Subsequent pages can ____________________.</p>", "options": [{"option": "Download the file many times", "correct": false}, {"option": "Retrieve the file from the browser cache", "correct": true}, {"option": "Execute the code again before using the file", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>src</strong> attribute in JavaScript?</p>", "options": [{"option": "It simplifies the HTML files.", "correct": true}, {"option": "It restricts the manipulation in the HTML files.", "correct": false}, {"option": "It makes the HTML file modular.", "correct": false}, {"option": "It becomes self-cached.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavScript, which of the following statements is used to display the time while the document loads?</p>", "options": [{"option": "window.=displayTime;", "correct": false}, {"option": " onload=displayTime;", "correct": false}, {"option": " window.onload=start;", "correct": false}, {"option": "window.onload=displayTime;", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to acquire the current time?</p>", "options": [{"option": "now=new Date();", "correct": false}, {"option": "var now=Date();", "correct": false}, {"option": "var now=new Date();", "correct": true}, {"option": "var now=new Date(current);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following characters are reserved for <strong>XML markup</strong>?</p>", "options": [{"option": "!", "correct": false}, {"option": "<", "correct": false}, {"option": "&", "correct": false}, {"option": "<  and &", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following tags is used to write a JavaScript code in an HTML file?</p>", "options": [{"option": "<script>", "correct": false}, {"option": "<a href>", "correct": true}, {"option": "<style>", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>document</strong> refers to ________________.</p>", "options": [{"option": "Dynamic Information", "correct": false}, {"option": "Static Information", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is the entry point to all the client-side features and APIs?</p>", "options": [{"option": "Standard", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following identifiers represents a browser window or frame?</p>", "options": [{"option": "Frames", "correct": false}, {"option": "Window", "correct": true}, {"option": "Location", "correct": false}, {"option": "Frame", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties of the <strong>Window</strong> object is used to refer to a location object?</p>", "options": [{"option": "Position", "correct": false}, {"option": "Area", "correct": false}, {"option": "Window", "correct": false}, {"option": "Location", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following <strong>Window-object</strong> methods is used to display the message in the dialog box?</p>", "options": [{"option": "alert()", "correct": true}, {"option": "message()", "correct": false}, {"option": "prompt()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>setTimeout()</strong> method is used to ______________________________________.</p>", "options": [{"option": "Kill the function when the time completes", "correct": false}, {"option": "Register a function that is to be invoked after a certain time", "correct": true}, {"option": "Invoke events after a certain time", "correct": false}, {"option": "Set the time for iteration", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>global object</strong> in JavaScript?</p>", "options": [{"option": "Register", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>window</strong> property is used _____________________________.</p>", "options": [{"option": "As an extension of other objects", "correct": false}, {"option": "To refer to window object itself", "correct": false}, {"option": "As an extension of other window objects", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to represent the content that is displayed in the window?</p>", "options": [{"option": "Document", "correct": true}, {"option": "Content", "correct": false}, {"option": "Window", "correct": false}, {"option": "Frame", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to choose a document-element based on the value of its <strong>id</strong> attribute?</p>", "options": [{"option": "getElementsbyId()", "correct": false}, {"option": "getElementbyId()", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to access the first child of a node?</p>", "options": [{"option": "timestamp.Child1", "correct": false}, {"option": "timestamp.Child(1)", "correct": false}, {"option": "timestamp.Child(0)", "correct": false}, {"option": "timestamp.firstChild", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>style</strong> property?</p>", "options": [{"option": "Window", "correct": false}, {"option": "Element", "correct": true}, {"option": "Location", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the event handlers in the JavaScript?</p>", "options": [{"option": "The event handlers add inner-HTML pages to the code.", "correct": false}, {"option": "The event handlers performs the handling of exceptions and occurrences.", "correct": false}, {"option": "The event handlers allow the JavaScript code to alter the behavior of windows.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following is associated with\u00a0the UI functionality of complex web pages?</p>", "options": [{"option": "DOMContentLoaded", "correct": true}, {"option": "manipulate", "correct": false}, {"option": "onload", "correct": false}, {"option": "ready", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is necessary for programs that extensively use event handlers?</p>", "options": [{"option": "Modular ", "correct": false}, {"option": "Split up ", "correct": false}, {"option": "Nested ", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to find all the container elements with the <strong>reveal</strong> class?</p>", "options": [{"option": "var elements=document.getElementByClassName(\"reveal\");", "correct": false}, {"option": "var elements=document.getElementsByClassName(\"reveal\");", "correct": true}, {"option": "var elements=document.getElementByName(\"reveal\");", "correct": false}, {"option": "var elements=document.getElementsByClass(\"reveal\");", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to update contents of the <strong>timestamp</strong> element when clicked?</p>", "options": [{"option": "timestamp.onLoad=function() { this.innerHTML = new Date().toString(); }", "correct": false}, {"option": "timestamp.click=function() { this.innerHTML = new Date().toString(); }", "correct": false}, {"option": "timestamp.onclick=function() { this.innerHTML = new Date().toString(); }", "correct": true}, {"option": "timestamp.onclick=function() { innerHTML = new Date().toString(); }", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not an object in JavaScript?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Location", "correct": false}, {"option": "Position", "correct": true}, {"option": "Window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to change the class and let the stylesheet specify the details?</p>", "options": [{"option": "timestamp.className = \"change\";", "correct": false}, {"option": "timestamp.className = \"specify\";", "correct": false}, {"option": "timestamp.className = \"move\";", "correct": false}, {"option": "timestamp.className = \"highlight\"", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that can only be invoked once?</p>", "options": [{"option": "setTotaltime()", "correct": false}, {"option": "setTimeout()", "correct": true}, {"option": "setInterval()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that is to be invoked repeatedly after a specified period?</p>", "options": [{"option": "setTimeout()", "correct": false}, {"option": "setTotaltime()", "correct": false}, {"option": "setInterval()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following handler methods is invoked at the occurrence of uncaught exceptions?</p>", "options": [{"option": "onhalt", "correct": false}, {"option": "onerror", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is a dialog box window that is displayed on the current page?</p>", "options": [{"option": "modal", "correct": true}, {"option": "version", "correct": false}, {"option": "browser", "correct": false}, {"option": "navigator", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods\u00a0returns a value that can be passed to <strong>clearInterval()</strong> to cancel future invocations?</p>", "options": [{"option": "setInvocation()", "correct": false}, {"option": "stopPropagation()", "correct": false}, {"option": "setInterval()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects include the <strong>setTimeout()</strong> function?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": true}, {"option": "Location", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods\u00a0returns a value that can be passed to <strong>clearTimeout()</strong> to cancel future invocations?</p>", "options": [{"option": "setInterval()", "correct": true}, {"option": "setTimeout()", "correct": false}, {"option": "setSchedule()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What will happen if we call <strong>setTimeout()</strong> with a time of 0 ms?</p>", "options": [{"option": "Placed in stack", "correct": false}, {"option": "Placed in queue", "correct": true}, {"option": "Will run continuously", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>location</strong> property?</p>", "options": [{"option": "Position", "correct": false}, {"option": "Window", "correct": true}, {"option": "Element", "correct": false}, {"option": "Location", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>window.location === document.location</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "false", "correct": false}, {"option": "true", "correct": true}, {"option": "Can't read the property, location, of document", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a <strong>framework</strong>?</p>", "options": [{"option": "jQuery", "correct": false}, {"option": ".NET", "correct": false}, {"option": "JavaScript", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following frameworks is used to focus on the <strong>DOM</strong> and <strong>Ajax</strong> utilities?</p>", "options": [{"option": "jQuery", "correct": false}, {"option": "Prototype", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>Dojo</strong> framework in JavaScript?</p>", "options": [{"option": "It focuses on the 'DOM' and the 'Ajax' utilities.", "correct": false}, {"option": "It advertises incredible depth.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what do the <strong>Dojo</strong> and the <strong>YUI</strong> frameworks have in common?</p>", "options": [{"option": "They facilitate the 'DOM' utilities and the 'UI' Widgets.", "correct": true}, {"option": "They do not facilitate the 'DOM' utilities and the 'UI' Widgets.", "correct": false}, {"option": "The support the client-side libraries.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What of the following versions of the <strong>YUI</strong> framework is incompatible in JavaScript?</p>", "options": [{"option": "YUI2 ", "correct": false}, {"option": "YUI1 ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web applications is included in the API framework?</p>", "options": [{"option": "Dojo", "correct": false}, {"option": "YUI", "correct": false}, {"option": "GWT", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following JavaScript compilers can both minify and optimize a JavaScript code?</p>", "options": [{"option": "Closure", "correct": true}, {"option": "Dojo", "correct": false}, {"option": "Procedure", "correct": false}, {"option": "jQuery", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects include the <strong>URL</strong> property?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Document", "correct": true}, {"option": "Location", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is represented by the <strong>location</strong> property?</p>", "options": [{"option": "DOM", "correct": true}, {"option": "URL", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is not included by the <strong>window.location</strong> object?</p>", "options": [{"option": "protocol", "correct": false}, {"option": "host", "correct": false}, {"option": "hostname", "correct": false}, {"option": "hostee", "correct": true}], "level": "Medium"}, {"question": "<p>What is the return type of the <strong>hash</strong> property in JavaScript?</p>", "options": [{"option": "Query string", "correct": false}, {"option": "Packets", "correct": false}, {"option": "String", "correct": false}, {"option": "Fragment identifier", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to extract arguments from the <strong>search</strong> property of the URL?</p>", "options": [{"option": "urlArgs()", "correct": true}, {"option": "url()", "correct": false}, {"option": "hash()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following frameworks is used to define the <strong>decodeURIComponent()</strong> method?</p>", "options": [{"option": "Server-side", "correct": false}, {"option": "Client-side", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to remove the current document from the browsing history before loading the new one?</p>", "options": [{"option": "modify()", "correct": false}, {"option": "assign()", "correct": false}, {"option": "replace()", "correct": true}, {"option": "remove()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, why is the <strong>location.replace()</strong> method preferred over the <strong>location.assign()</strong> method?</p>", "options": [{"option": "Users can use the back button to navigate to the replaced page.", "correct": false}, {"option": "The 'location.replace()' method is supported in all browsers.", "correct": false}, {"option": "DOMException of the SYNTAX_ERROR type is never thrown when using the 'location.replace()' method.", "correct": false}, {"option": "The 'location.replace()' method handles the unconditional loading of page.", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the significance of the <strong>location.assign()</strong> method?</p>", "options": [{"option": "It appends specified URL to the current URL.", "correct": false}, {"option": "It reloads the window.", "correct": false}, {"option": "It loads the window and displays the document at the URL specified.", "correct": true}, {"option": "It ignores the cross-origin policy and reloads the page.", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>history</strong> property?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": false}, {"option": "History", "correct": true}, {"option": "Location", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to go back to history twice?</p>", "options": [{"option": " history.prev(2);", "correct": false}, {"option": " history(-2);", "correct": false}, {"option": "history.go(-2);", "correct": true}, {"option": "history.back(2);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how is <strong>browser history</strong> affected if a window has a child window?</p>", "options": [{"option": "Numerically interleaved", "correct": false}, {"option": "Chronologically interleaved", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>length</strong> property belongs to ___________________________ object.</p>", "options": [{"option": "Window", "correct": false}, {"option": "Element", "correct": false}, {"option": "History", "correct": true}, {"option": "Document", "correct": false}], "level": "Hard"}, {"question": "<p>What is the datatype of the <strong>go()</strong> method\u2019s parameter in JavaScript?</p>", "options": [{"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Integer", "correct": true}, {"option": "Double", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the special feature of the modern web applications?</p>", "options": [{"option": "Must load the document to manipulate", "correct": false}, {"option": "Can alter contents without loading document", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following objects has the\u00a0<strong>navigator</strong> property in JavaScript?</p>", "options": [{"option": "Interface", "correct": false}, {"option": "Terminal", "correct": false}, {"option": "Location", "correct": false}, {"option": "Navigator", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following browsers support\u00a0<strong>clientInformation</strong> as a vendor-neutral synonym for <strong>navigator</strong>?</p>", "options": [{"option": "Chrome", "correct": false}, {"option": "Firefox", "correct": false}, {"option": "IE", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is preferred in JavaScripting?</p>", "options": [{"option": "Software testing", "correct": false}, {"option": "Blackbox testing", "correct": false}, {"option": "Feature testing", "correct": true}, {"option": "Whitebox testing", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following properties is used for <strong>browser sniffing</strong>?</p>", "options": [{"option": "Platform", "correct": false}, {"option": "AppVersion", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, where is the information of the <strong>userAgent</strong> property located?</p>", "options": [{"option": "App Id", "correct": false}, {"option": "App Version", "correct": true}, {"option": "Platform", "correct": false}, {"option": "App Name", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the other name for each independent tab in a web browser window?</p>", "options": [{"option": "Browser information", "correct": false}, {"option": "Browsing context", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In HTML, a document is nested by using ____________________.</p>", "options": [{"option": "frame", "correct": false}, {"option": "nest", "correct": false}, {"option": "iframe", "correct": true}, {"option": "into", "correct": false}], "level": "Medium"}, {"question": "<p>The client-side JavaScript considers windows, tabs, iframes, and frames to be _________________________.</p>", "options": [{"option": "Browsing information", "correct": false}, {"option": "Browsing contexts", "correct": true}, {"option": "Window contexts", "correct": false}, {"option": "Window objects", "correct": false}], "level": "Hard"}, {"question": "<p>The client-side JavaScript considers windows, tabs, iframes, and frames to be _________________________.</p>", "options": [{"option": "Window objects", "correct": true}, {"option": "Browsing information", "correct": false}, {"option": "Window contexts", "correct": false}, {"option": "Browsing contexts", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods of the window object is used to open a new web browser window?</p>", "options": [{"option": "Createtab()", "correct": false}, {"option": "Window.open()", "correct": true}, {"option": "Open()", "correct": false}, {"option": "Createtab() and Open()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which object serves as the <strong>global</strong> object at the top of the scope chain?</p>", "options": [{"option": "Hash", "correct": false}, {"option": "Property", "correct": false}, {"option": "Element ", "correct": false}, {"option": "Window", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties of the <strong>window</strong> object holds the <strong>name</strong> of a frame?</p>", "options": [{"option": "Name", "correct": true}, {"option": "Title", "correct": false}, {"option": "Description", "correct": false}, {"option": "Name and Title", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about the usage of the fourth argument in <strong>open()</strong> is true?</p>", "options": [{"option": "Second argument is a name of a retired window", "correct": false}, {"option": "First argument is a name of an existing window", "correct": false}, {"option": "Second argument is a name of an existing window", "correct": true}, {"option": "First argument is a name of a retired window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the <strong>inner</strong> frame within a top-level window?</p>", "options": [{"option": "parent(parent)", "correct": false}, {"option": "parent.parent", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the <strong>central</strong> object in a larger API?</p>", "options": [{"option": "Document object material", "correct": false}, {"option": "Document object model", "correct": true}, {"option": "Binary object model", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the node directly connected to another node when moving towards the root?</p>", "options": [{"option": "Sibling", "correct": false}, {"option": "Child", "correct": false}, {"option": "Parent", "correct": true}, {"option": "Ancestors", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the text and the comment belongs to _____________________________.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Character Data", "correct": true}, {"option": "Document", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following nodes represents <strong>HTML</strong> elements?</p>", "options": [{"option": "Subclass", "correct": false}, {"option": "Element", "correct": true}, {"option": "HTML", "correct": false}, {"option": "Window", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is a text node in JavaScript?</p>", "options": [{"option": "Text", "correct": false}, {"option": "Comment", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of the these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is used to query a document for an element?</p>", "options": [{"option": "A specified id attribute", "correct": false}, {"option": "By matching the specified CSS selector", "correct": false}, {"option": "A specified tag name", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to select an HTML element based on the value of its name attribute?</p>", "options": [{"option": "getElementByName()", "correct": false}, {"option": "getElementsByName()", "correct": true}, {"option": "getElementsName()", "correct": false}, {"option": "getElementName()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties refers to the <strong>root</strong> element of the document?</p>", "options": [{"option": "Document Element", "correct": true}, {"option": "Element document", "correct": false}, {"option": "Root document", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the return type of the method <strong>getElementsByClassName()</strong>?</p>", "options": [{"option": "DOM", "correct": false}, {"option": "Document", "correct": false}, {"option": "Node", "correct": false}, {"option": "NodeList", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the syntax used to describe elements in CSS?</p>", "options": [{"option": "Protectors", "correct": false}, {"option": "Selectors", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web applications is equivalent to the <strong>querySelectorAll()</strong> method?</p>", "options": [{"option": "#()", "correct": false}, {"option": "&()", "correct": false}, {"option": "$()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is an example of the <strong>shortcut property</strong>?</p>", "options": [{"option": "Border", "correct": false}, {"option": "Font", "correct": false}, {"option": "Text", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is the default position of the elements with CSS?</p>", "options": [{"option": "Relative", "correct": false}, {"option": "Static", "correct": true}, {"option": "Absolute", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties allows you to specify an element\u2019s position with respect to the browser window?</p>", "options": [{"option": "Relative", "correct": false}, {"option": "Fixed", "correct": true}, {"option": "Static", "correct": false}, {"option": "Absolute", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following specifies the type of the event that occurred?</p>", "options": [{"option": "Event type", "correct": true}, {"option": "Event target", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is associated with an event?</p>", "options": [{"option": "Event type", "correct": false}, {"option": "Event target", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a browser invokes the <strong>handler</strong> when _____________________________________.</p>", "options": [{"option": "The program begins", "correct": false}, {"option": "Any event occurs", "correct": false}, {"option": "Specified event occurs", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an <strong>event handler</strong> is a ________________________________.</p>", "options": [{"option": "Function", "correct": true}, {"option": "Interface", "correct": false}, {"option": "Event", "correct": false}, {"option": "Handler", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following specifies the property of an <strong>event</strong>?</p>", "options": [{"option": "Type", "correct": true}, {"option": "Target", "correct": false}, {"option": "Manner", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the process by which a browser decides the objects on which it triggers event handlers is called ___________________________.</p>", "options": [{"option": "Event triggering", "correct": false}, {"option": "Event propagation", "correct": true}, {"option": "Event listening", "correct": false}, {"option": "Event handling", "correct": false}], "level": "Medium"}, {"question": "<p>Which form of event propagation handles the registered container elements?</p>", "options": [{"option": "Event Registration", "correct": false}, {"option": "Event Capturing", "correct": true}, {"option": "Default Actions", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is directly connected to a specific input device?</p>", "options": [{"option": "Device-independent input", "correct": false}, {"option": "Device-dependent input", "correct": true}, {"option": "User interface", "correct": false}, {"option": "State change", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following events is a high-level event?</p>", "options": [{"option": "User interface ", "correct": true}, {"option": "Device-independent ", "correct": false}, {"option": "Device-dependent ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is not directly connected to a specific input device?</p>", "options": [{"option": "User interface", "correct": false}, {"option": "Device-independent", "correct": true}, {"option": "Device-dependent", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is fired on any <strong>scrollable</strong> document element?</p>", "options": [{"option": "Window", "correct": false}, {"option": "Scroll", "correct": true}, {"option": "Load", "correct": false}, {"option": "Unload", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>mouse</strong> event is generated when the user ________________________________________.</p>", "options": [{"option": "Clicks the mouse over a document", "correct": true}, {"option": "Moves the pointer over a document", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties specifies the position and the button state of the mouse?</p>", "options": [{"option": "ClientY and ClientX", "correct": false}, {"option": "AltKey and CtrlKey", "correct": false}, {"option": "ClientX and ClientY", "correct": true}, {"option": "MetaKey and ShiftKey", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties are set to true when the <strong>keyboard modifier</strong> keys are pressed?</p>", "options": [{"option": "CtrlKey", "correct": false}, {"option": "ShiftKey", "correct": false}, {"option": "AltKey", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how to detect and respond to mouse drags?</p>", "options": [{"option": "Registering a mouseover handler", "correct": false}, {"option": "Releasing a mousedown handler", "correct": false}, {"option": "Registering a mousedown handler", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>mouse out</strong> event is fired when the _______________________________________.</p>", "options": [{"option": "Mouse is no longer over an element", "correct": true}, {"option": "Mouse is over an element", "correct": false}, {"option": "Mouse is hovered", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the focus and the blur events belongs to __________________ event.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Handler", "correct": false}, {"option": "Window", "correct": true}, {"option": "Scroll", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following elements is used to register handlers for <strong>load</strong> and <strong>error</strong> events?</p>", "options": [{"option": "Html", "correct": false}, {"option": "Img", "correct": true}, {"option": "Body", "correct": false}, {"option": "Form", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is emulated by the jQuery library for the unsupportive browsers?</p>", "options": [{"option": "Focusin and Focusout", "correct": false}, {"option": "Focusall and Focusnone", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following events is triggered when the document and its elements are ready to be manipulated?</p>", "options": [{"option": "DOMContentLoaded", "correct": false}, {"option": "readystatechange", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>DOM Level 3 Events standardizes which of the following events?</p>", "options": [{"option": "focusarea and focusover", "correct": false}, {"option": " focusall and focusnone", "correct": false}, {"option": " focusdown and focusup", "correct": false}, {"option": "focusin and focusout", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is currently unnecessary?</p>", "options": [{"option": "DOM Activate", "correct": false}, {"option": "DOM FocusIn", "correct": false}, {"option": "DOM Node Inserted", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is passed as an argument to the handler for <strong>keydown</strong>, <strong>keyup</strong>, and <strong>keypress</strong> events?</p>", "options": [{"option": "Keyboard event", "correct": true}, {"option": "Key event", "correct": false}, {"option": "Mouse event", "correct": false}, {"option": "Alphabet event", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following reports <strong>rotation</strong> around three different mouse wheel axes?</p>", "options": [{"option": "ctrlKey", "correct": false}, {"option": "alterX", "correct": false}, {"option": "alterY", "correct": false}, {"option": "deltaX", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following properties specifies the string of text entered?</p>", "options": [{"option": "Message", "correct": false}, {"option": "Data", "correct": true}, {"option": "String", "correct": false}, {"option": "Text", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is defined by the <strong>specification</strong>?</p>", "options": [{"option": "Data Method", "correct": false}, {"option": "Input", "correct": false}, {"option": "Input Method", "correct": true}, {"option": "Input Data Method", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following has the <strong>generated text</strong> for key events?</p>", "options": [{"option": "Key and Char", "correct": true}, {"option": "Char and Text", "correct": false}, {"option": "Text and Key", "correct": false}, {"option": "Key and Value", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following belongs to <strong>drag</strong> and <strong>drop</strong> event?</p>", "options": [{"option": "Drop", "correct": false}, {"option": "Dragstart", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties holds a <strong>data transfer object</strong>  that contains information about the data being transferred and the formats in which it is available?</p>", "options": [{"option": "DataTransfer", "correct": true}, {"option": "TransferData", "correct": false}, {"option": "DataExchange", "correct": false}, {"option": "ExchangeData", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following APIs allows scripts in a document from one server to exchange messages with scripts in a document from another server?</p>", "options": [{"option": "Cross-Document Messaging API", "correct": true}, {"option": "Web application API", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the keyboard events are fired when the user _____________________________________.</p>", "options": [{"option": "Manually calls the button", "correct": false}, {"option": "Clicks a key", "correct": true}, {"option": "Calls the modifier", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, multiple keydown events is generated by ________________________________________.</p>", "options": [{"option": "Repeating the same process", "correct": false}, {"option": "Pressing multiple keys", "correct": false}, {"option": "Pressing the key longer than usual", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to specify the key type when pressed?</p>", "options": [{"option": "KeyName", "correct": false}, {"option": "KeyCode", "correct": true}, {"option": "KeyType", "correct": false}, {"option": "KeyProperty", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when the shift key is pressed for adding punctuation character, the value of the <strong>keyCode</strong> property is _______________________________________.</p>", "options": [{"option": "Special characters", "correct": false}, {"option": "Alphabets", "correct": false}, {"option": "Alphanumeric", "correct": false}, {"option": "Digits", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a key event property?</p>", "options": [{"option": "Alt Key", "correct": false}, {"option": "Code key", "correct": true}, {"option": "Ctrl Key", "correct": false}, {"option": "Shift Key", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following key properties holds the key name as a string?</p>", "options": [{"option": "KeyName", "correct": false}, {"option": "Key", "correct": true}, {"option": "KeyName(string)", "correct": false}, {"option": "Nameofkey(string)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following values will not be held by the key property if the key is a function key?</p>", "options": [{"option": "F8", "correct": true}, {"option": "F2", "correct": false}, {"option": "Home", "correct": false}, {"option": "Left", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to add <strong>binding</strong> in JavaScript?</p>", "options": [{"option": "Binding()", "correct": false}, {"option": "Add_bind()", "correct": false}, {"option": "Bind()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to remove <strong>binding</strong> in JavaScript?</p>", "options": [{"option": "Unbind()", "correct": false}, {"option": "Removebind()", "correct": false}, {"option": "Remove(Bind b)", "correct": false}, {"option": "Unbind()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following parameters is passed to the <strong>keymap</strong> after installation?</p>", "options": [{"option": "Key property", "correct": false}, {"option": "Key name", "correct": false}, {"option": "Keydown event\u2019s object", "correct": true}, {"option": "Key stroke", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, how many types of nodes is there in total?</p>", "options": [{"option": "Eleven", "correct": false}, {"option": "Ten", "correct": false}, {"option": "Twelve", "correct": true}, {"option": "Twenty", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is returned by the node object property\u00a0<strong>textContent</strong>?</p>", "options": [{"option": "Returns the root node", "correct": false}, {"option": "Returns the name of a node, depending on its type", "correct": false}, {"option": "Sets or returns the textual content of a node and its descendants", "correct": true}, {"option": "Sets or returns the namespace prefix of a node", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following node object properties returns the <strong>local</strong> part of the name of a node?</p>", "options": [{"option": "LastName", "correct": false}, {"option": "LocalName", "correct": true}, {"option": "FirstName", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>textContent</strong> property ____________________________________.</p>", "options": [{"option": "Sets the textual content of a node", "correct": false}, {"option": "Returns the textual content of a node", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>How many number of <strong>node object methods</strong> is available in JavaScript?</p>", "options": [{"option": "Nineteen", "correct": false}, {"option": "Eighteen", "correct": true}, {"option": "Twenty", "correct": false}, {"option": "Twenty one", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following node object properties returns the node immediately before a node?</p>", "options": [{"option": "textContent", "correct": false}, {"option": " index", "correct": false}, {"option": "localName", "correct": false}, {"option": "previousSibling", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>getUserData(key)</strong> method __________________________________.</p>", "options": [{"option": "Returns the associated object", "correct": true}, {"option": "Gets the user data", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to test if two nodes are equal?</p>", "options": [{"option": "equal()", "correct": false}, {"option": "isEqualNode()", "correct": true}, {"option": "==", "correct": false}, {"option": "===", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to associate an <strong>object</strong> to a <strong>key</strong> on a node?</p>", "options": [{"option": "getUserData()", "correct": false}, {"option": "cloneNode()", "correct": false}, {"option": "setUserData (key, data, handler)", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to compare the placement of two <strong>document</strong> nodes in the <strong>DOM</strong> hierarchy?</p>", "options": [{"option": "compareDocumentPosition()", "correct": true}, {"option": "cloneNode()", "correct": false}, {"option": "getUserData()", "correct": false}, {"option": "getFeature()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these is represented by a\u00a0<strong>node</strong>\u00a0object?</p>", "options": [{"option": "Single node", "correct": true}, {"option": "Set of nodes", "correct": false}, {"option": "Double node", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is returned by <strong>nodeName</strong> of the node type<strong> comment</strong>?</p>", "options": [{"option": "#text", "correct": false}, {"option": "#cdata-section", "correct": false}, {"option": "#html", "correct": false}, {"option": "#comment", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, the method <strong>item()</strong> returns a _______________________________________.</p>", "options": [{"option": "Node after the specified index", "correct": false}, {"option": "Node before the specified index", "correct": false}, {"option": "Node at the specified index", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to access the <strong>nodes</strong> in the <strong>node list</strong>?</p>", "options": [{"option": "Key", "correct": false}, {"option": "Index number", "correct": true}, {"option": "Looping", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the child of the node type <strong>EntityReference</strong>?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Text", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following node types represents the <strong>root node</strong> of the <strong>DOM</strong> tree?</p>", "options": [{"option": "Document", "correct": true}, {"option": "DocumentFragment", "correct": false}, {"option": "DocumentType", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>DocumentFragment</strong> node type is used to __________________________________________.</p>", "options": [{"option": "Hold a portion of a document", "correct": true}, {"option": "Split the document into fragments", "correct": false}, {"option": "Hold the entire document", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following node types have a node value equal to <strong>null</strong>?</p>", "options": [{"option": "Document", "correct": false}, {"option": "DocumentFragment", "correct": false}, {"option": "DocumentType", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how many <strong>node object properties</strong> are there?</p>", "options": [{"option": "Twelve", "correct": false}, {"option": "Fourteen", "correct": false}, {"option": "Fifteen", "correct": false}, {"option": "Sixteen", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used for <strong>cookie manipulation</strong>?</p>", "options": [{"option": "Cookies", "correct": false}, {"option": "Manipulate", "correct": false}, {"option": "Cookie", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following explains the nature of a <strong>cookie</strong>?</p>", "options": [{"option": "Non-Volatile", "correct": false}, {"option": "Volatile", "correct": false}, {"option": "Intransient", "correct": false}, {"option": "Transient", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes is used to tell the browser how long\u00a0to retain a cookie?</p>", "options": [{"option": "Extend-Life", "correct": false}, {"option": "Lifetime", "correct": false}, {"option": "Max-age", "correct": true}, {"option": "Increase-age", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following specifies the visibility of a cookie?</p>", "options": [{"option": "localStorage", "correct": false}, {"option": "Document Path", "correct": false}, {"option": "None of these", "correct": false}, {"option": "Both of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes is used to configure the scope of the cookie visibility?</p>", "options": [{"option": "Path", "correct": false}, {"option": "Domain", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how do you set a cookie visibility scope to <strong>localStorage</strong>?</p>", "options": [{"option": "Set the path of a cookie to /", "correct": true}, {"option": "Set the path of a cookie to %", "correct": false}, {"option": "Set the path of a cookie to *", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>boolean</strong> cookie attribute that defines\u00a0how cookies are transmitted over the network?</p>", "options": [{"option": "Domain", "correct": false}, {"option": "Secure", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript,\u00a0 since cookie values cannot contain whitespace, semicolons, or commas, which of the following global functions must be used to encode the value prior to storing it in the\u00a0cookie?</p>", "options": [{"option": "encodeURIComponent()", "correct": true}, {"option": "encodeURI()", "correct": false}, {"option": "encodeComponent()", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the constraint on the <strong>data</strong> per cookie?</p>", "options": [{"option": "2 KB", "correct": false}, {"option": "1 KB", "correct": false}, {"option": "4 KB", "correct": true}, {"option": "8 KB", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties should be set by the script to initiate an HTTP request?</p>", "options": [{"option": "Send", "correct": false}, {"option": "Location", "correct": true}, {"option": "None of these", "correct": false}, {"option": "Both of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is an alternative to the property, <strong>location</strong>, of a <strong>window</strong> object?</p>", "options": [{"option": "Locate()", "correct": false}, {"option": "Submit()", "correct": true}, {"option": "Load()", "correct": false}, {"option": "Refresh()", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following\u00a0uses XHTML for content, along with Document Object Model and JavaScript for dynamic content display?</p>", "options": [{"option": "XML", "correct": false}, {"option": "HTML", "correct": false}, {"option": "Ajax", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following has an advantage for each client to always have\u00a0a communication link open to the server?</p>", "options": [{"option": "HTTP", "correct": false}, {"option": "HTML", "correct": false}, {"option": "XML", "correct": false}, {"option": "Comet", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is also known as a\u00a0<strong>comet</strong>?</p>", "options": [{"option": "Server push", "correct": false}, {"option": "Ajax push", "correct": false}, {"option": "HTTP streaming", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following extension methods can be used to\u00a0register a typed client under\u00a0<strong>Startup.ConfigureServices </strong>to initiate HTTP requests?\u00a0</p>", "options": [{"option": "AddHttpClient ", "correct": true}, {"option": "CreateClient", "correct": false}, {"option": "HttpClient", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <code>XMLHttpRequest</code> is ________________________________________.</p>", "options": [{"option": "An object", "correct": false}, {"option": "A class", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a feature of an <strong>HTTP request</strong>?</p>", "options": [{"option": "Optional request body", "correct": false}, {"option": "URL being requested", "correct": false}, {"option": "Optional set of request headers", "correct": false}, {"option": "Sheer file size reduction", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a characteristic of an <strong>HTTP response</strong>?</p>", "options": [{"option": "A set of response headers", "correct": false}, {"option": "A numeric and textual status code that shows the success or failure of the request", "correct": false}, {"option": "The response body", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is an appropriate code to begin an <strong>HTTP GET request</strong>?</p>", "options": [{"option": "request.open(\"GET\",\"data\");", "correct": false}, {"option": "request.open(\"GET\");", "correct": false}, {"option": "request.open(GET,\"data.csv\");", "correct": false}, {"option": "request.open(\"GET\",\"data.csv\")", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to make an Ajax request in jQuery?</p>", "options": [{"option": "$()", "correct": false}, {"option": "$.ajax", "correct": true}, {"option": "$.ajax(obejct)", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a <strong>factory function</strong>?</p>", "options": [{"option": "jQuery()", "correct": true}, {"option": "$()", "correct": false}, {"option": "Queryanalysis()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following code returns the set of all the <strong>div</strong> elements in a document?</p>", "options": [{"option": "var divs = $(div);", "correct": false}, {"option": "var divs = jQuery(\"div\");", "correct": false}, {"option": "var divs = #(\"div\");", "correct": false}, {"option": "var divs = $(\"div\");", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is considered when the\u00a0mouse pointer is over the element, and the mouse button is pressed and released?</p>", "options": [{"option": "show()", "correct": false}, {"option": "click()", "correct": true}, {"option": "done()", "correct": false}, {"option": "css()", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript code, <strong>min</strong> stands for ____________________:</p>\n<pre class=\"prettyprint\"><code>    &lt;script src=\"jquery-1.4.2.min.js\"&gt;&lt;/script&gt; \n</code></pre>", "options": [{"option": "Miniature", "correct": false}, {"option": "Minimised version", "correct": true}, {"option": "Minimised parameters", "correct": false}, {"option": "Minimum value", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods allows jQuery to\u00a0execute a function when the document is fully loaded?</p>", "options": [{"option": "$document.script()", "correct": false}, {"option": "$(document).ready()", "correct": true}, {"option": "$(document).script()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is an equivalent replacement of <strong>$(document).ready(f)</strong>?</p>", "options": [{"option": "jQuery(f)", "correct": false}, {"option": "#(f)", "correct": false}, {"option": "$(f)", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a generic iterator\u00a0function\u00a0in jQuery\u00a0which can be used to seamlessly iterate over both objects and arrays?</p>", "options": [{"option": "jQuery.noConflict()", "correct": false}, {"option": "jQuery.each()", "correct": true}, {"option": "jQuery.parseJSON()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following exceptions is thrown if the\u00a0string to parse is not a valid JSON?</p>", "options": [{"option": "TypeError", "correct": false}, {"option": "RangeError", "correct": false}, {"option": "SyntaxError", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following indicates different forms of <strong>client-side</strong> storage?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following storages allows the caching of web pages and their associated resources?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is a Microsoft\u2019s own proprietary client-side storage?</p>", "options": [{"option": "Offline Web Applications", "correct": false}, {"option": "IE User Data", "correct": true}, {"option": "Cookies", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects supports <strong>file system</strong> API?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": false}, {"option": "File", "correct": true}, {"option": "DOM", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>localStorage</strong> and <strong>sessionStorage</strong> belong to the ________________________________ object.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": true}, {"option": "History", "correct": false}, {"option": "Document", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the parameter used to invoke the Audio() constructor?</p>", "options": [{"option": "File type", "correct": false}, {"option": "Music type", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a property of the video tag?</p>", "options": [{"option": "Width", "correct": false}, {"option": "Height", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "Breadth", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes is common to both audio and video?</p>", "options": [{"option": "Enter", "correct": false}, {"option": "Control", "correct": false}, {"option": "Controls", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following elements is used to include audio?</p>", "options": [{"option": "Audio", "correct": true}, {"option": "Video", "correct": false}, {"option": "Svg", "correct": false}, {"option": "Audio and svg", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is used to find all the <strong>img</strong> elements in a document?\u00a0</p>", "options": [{"option": "document(images)", "correct": false}, {"option": "document(img)", "correct": false}, {"option": "document.images[]", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an <strong>image replacement</strong> is used to ________________________________.</p>", "options": [{"option": "Replace an image", "correct": false}, {"option": "Implement image rollovers", "correct": true}, {"option": "Implement special effects", "correct": false}, {"option": "Remove image rollovers", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following uses more number of <strong>CPU cycles</strong>?</p>", "options": [{"option": "GUI", "correct": false}, {"option": "Statically generated graphics", "correct": false}, {"option": "Dynamically generated graphics", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>rendering engine</strong> is used for __________________________________________.</p>", "options": [{"option": "Parsing objects in the page", "correct": false}, {"option": "Drawing all objects in the page", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The <strong>JavaScript engine</strong> is used for ________________________________________.</p>", "options": [{"option": "Compiling the JavaScript", "correct": false}, {"option": "Interpreting the JavaScript", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following browsers uses the <strong>webkit</strong>?</p>", "options": [{"option": "Chrome", "correct": false}, {"option": "Safari", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Chrome and Safari", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following browsers first developed <strong>Gecko</strong>?</p>", "options": [{"option": "Safari", "correct": false}, {"option": "Opera", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Netscape", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following renders HTML?</p>", "options": [{"option": "Email Clients", "correct": false}, {"option": "Web Components", "correct": false}, {"option": "Browsers", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>SpiderMonkey</strong> was developed by _____________________________________.</p>", "options": [{"option": "Internet Explorer", "correct": false}, {"option": "Firefox", "correct": true}, {"option": "Safari", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following browsers uses the <strong>Carakan</strong>?</p>", "options": [{"option": "Firefox", "correct": false}, {"option": "Safari", "correct": false}, {"option": "Opera", "correct": true}, {"option": "Internet Explorer", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the alternate name for the <strong>JavaScriptCore</strong> that is used in Safari?</p>", "options": [{"option": "SpiderMoney", "correct": false}, {"option": "Nitro", "correct": true}, {"option": "Carakan", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the term <strong>performance</strong> is defined as the ________________________________.</p>", "options": [{"option": "Speed of the input take in", "correct": false}, {"option": "Speed of the output display", "correct": false}, {"option": "Speed at which an application functions", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>web</strong> performance of an application is defined as the _____________________________________.</p>", "options": [{"option": "Time it takes to respond", "correct": false}, {"option": "Time it takes to load", "correct": true}, {"option": "Time it takes to send a request", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>runtime</strong> performance of an application depends on the ___________________________________________.</p>", "options": [{"option": "Speed of the response to the user", "correct": true}, {"option": "Speed of the user request", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the waiting time for a page to become useful depends on ___________________________.</p>", "options": [{"option": "Runtime performance", "correct": false}, {"option": "Web performance", "correct": true}, {"option": "Speed", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the benefit of the <strong>code-produced</strong> graphics being smaller than\u00a0<strong>image</strong>?</p>", "options": [{"option": "Increase in bandwidth", "correct": false}, {"option": "Saves bandwidth ", "correct": true}, {"option": "Dynamic advantages", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to skip or seek to the desired location in an audio or video?</p>", "options": [{"option": "audioSkip", "correct": false}, {"option": "currentTime", "correct": true}, {"option": "videoSkip", "correct": false}, {"option": "SkiptoTime", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following shows a better <strong>runtime</strong> performance in coalescing functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": false}, {"option": "Firefox UsingFunct", "correct": true}, {"option": "Firefox UsingObject", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following has a poor <strong>runtime</strong> performance in coalescing functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": true}, {"option": "Firefox UsingFunct", "correct": false}, {"option": "Firefox UsingObject", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>closure</strong> compiler runs in ___________________________ modes.</p>", "options": [{"option": "Three", "correct": false}, {"option": "Four", "correct": false}, {"option": "Five", "correct": false}, {"option": "Two", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>firebug</strong> is an extension of _________________________browser.</p>", "options": [{"option": "Mozilla Firefox", "correct": true}, {"option": "Internet Explorer", "correct": false}, {"option": "Chrome", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is used to inspect ______________________________________.</p>", "options": [{"option": "HTML", "correct": false}, {"option": "CSS", "correct": false}, {"option": "DOM", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is used by a developer to ______________________________.</p>", "options": [{"option": "Track cookies", "correct": false}, {"option": "Track sessions", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is mainly used to achieve __________________________________.</p>", "options": [{"option": "Performance", "correct": true}, {"option": "Reliability", "correct": false}, {"option": "Complexity", "correct": false}, {"option": "Adaptability", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these\u00a0is a goal of using the <strong>firebug</strong>:</p>", "options": [{"option": "Modularity", "correct": false}, {"option": "Shared code", "correct": false}, {"option": "Compatibility", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following options about the characteristics of the <strong>user interface </strong>is\u00a0not true?</p>", "options": [{"option": "Resizable side panel", "correct": false}, {"option": "Skinnable interface", "correct": false}, {"option": "Fixed side panel", "correct": true}, {"option": "Port of Firebug\u2019s Visual Object Representation", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the default value of the property <strong>overrideConsole</strong></p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties has <strong>false</strong> as default value?</p>", "options": [{"option": "disableWhenFirebugActive", "correct": false}, {"option": "disableXHRListener", "correct": true}, {"option": "showIconWhenHidden", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following operations is feasible if a firebug is used as a <strong>debugger</strong>\u00a0and\u00a0<strong>profiler</strong>?</p>", "options": [{"option": "Pause execution in any line", "correct": false}, {"option": "Find scripts easily", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript code, what is the result or type of error, if <strong>a</strong> is not defined:</p>\n<pre class=\"prettyprint\"><code>    console.log(a)\n</code></pre>", "options": [{"option": " Zero", "correct": false}, {"option": "ReferenceError", "correct": true}, {"option": "Null", "correct": false}, {"option": "ValueNotFoundError", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following software uses YSlow as a command line script?</p>", "options": [{"option": "CasperJS", "correct": false}, {"option": "PhantomJS", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the two output formats of <strong>YSlow</strong> are ________________________________________.</p>", "options": [{"option": "JIT, TRD", "correct": false}, {"option": "TAP, JUnit", "correct": true}, {"option": "JKP, RFD", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, initially <strong>YSlow</strong> was an extension of ________________________________ browser.</p>", "options": [{"option": "Chrome", "correct": true}, {"option": "Firefox", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to analyze the performance of a web page?</p>", "options": [{"option": "WebPageTest", "correct": false}, {"option": "YSlow", "correct": true}, {"option": "Firebug", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the second version of <strong>YSlow</strong> has ______________________________rules.</p>", "options": [{"option": "Twenty one ", "correct": false}, {"option": "Twenty three", "correct": true}, {"option": "Twenty seven", "correct": false}, {"option": "Thirty", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is mandatorily run before running <strong>YSlow</strong>?</p>", "options": [{"option": "WebPageTest", "correct": false}, {"option": "Firebug", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>YSlow</strong> for Mobile works as _________________________________.</p>", "options": [{"option": "Bookwise", "correct": false}, {"option": "Booklet", "correct": false}, {"option": "Bookmaklet", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements about the\u00a0<code><strong>CanvasRenderingContext2D</strong></code><strong><code>.bezierCurveTo()</code></strong>\u00a0method is true?</p>", "options": [{"option": "It requires three points: the first two are control points and the third one is the end point.\u00a0", "correct": false}, {"option": "The starting point is the latest point in the current path, which can be changed using moveto() method before creating the B\u00e9zier curve.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements about\u00a0<strong>XHR communications </strong>is true?</p>", "options": [{"option": "XMLHttpRequest\u00a0allows to send custom headers and read headers from the response.", "correct": false}, {"option": "XMLHttpRequest\u00a0is a built-in browser object that allows making\u00a0HTTP requests in JavaScript.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an advanced panel is used to ______________________________________.</p>", "options": [{"option": "Test, stop and run", "correct": true}, {"option": "Load the page", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following tabs is used to capture\u00a0screenshot\u00a0of a page?</p>", "options": [{"option": "Video tab", "correct": true}, {"option": "Audio tab", "correct": false}, {"option": "Image tab", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events\u00a0creates a data URI, encoding an image of the\u00a0visible area in\u00a0the currently active tab of\u00a0a\u00a0specified window?</p>", "options": [{"option": "tabs.captureVisibleTab()", "correct": true}, {"option": "tabs.captureTab()", "correct": false}, {"option": "tabs.visibleTab()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which is the following commands is used to <strong>spoof</strong> the client user agent?</p>", "options": [{"option": "spoofAgent", "correct": false}, {"option": "setUserAgent", "correct": true}, {"option": "spoofClientUserAgent", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following tab IDs is used to associate information with a tab across browser restarts?</p>", "options": [{"option": "sessions.setTabValue()", "correct": true}, {"option": "tabs.pageValue()", "correct": false}, {"option": "tabs.onActivated()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>auth tab</strong> in the testing platform is used to _________________________________________.</p>", "options": [{"option": "Authorize a page", "correct": false}, {"option": "Run the test", "correct": false}, {"option": "Specify credentials", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>WebPageTest</strong> is used to ____________________________________.</p>", "options": [{"option": "Run any common website", "correct": false}, {"option": "Run private websites", "correct": true}, {"option": "Run QA testing", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is\u00a0<strong>minifying</strong>\u00a0used for?</p>", "options": [{"option": "Save the visits", "correct": false}, {"option": "Streamline the visits", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>minification</strong> concept originated from ______________________________________.</p>", "options": [{"option": "JavaScript code efficiency", "correct": false}, {"option": "JavaScript interpreter", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>minify</strong> is used for _________________________________.</p>", "options": [{"option": "Storing the data", "correct": false}, {"option": "Streamlining the data", "correct": false}, {"option": "Proxy the JavaScript file", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what does <strong>minify</strong> set the encoding HTTP header with?</p>", "options": [{"option": "deflate", "correct": false}, {"option": "gzip", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is in-built in <strong>minify</strong>?</p>", "options": [{"option": "Dynamic compression", "correct": false}, {"option": "Static compression", "correct": true}, {"option": "Static content", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following folders contains the <strong>minify</strong> control panel?</p>", "options": [{"option": "/builder/", "correct": false}, {"option": "/min/builder/", "correct": true}, {"option": "/minify/build", "correct": false}, {"option": "/minify/builder", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the correct order of sequences in a <strong>minify</strong> process?</p>", "options": [{"option": "Remove extraneous characters, gzip the response, read", "correct": false}, {"option": "Remove extraneous characters, read, gzip the response", "correct": false}, {"option": "Read, remove extraneous characters, gzip the response", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>YUI</strong> compressor is analogous to _________________________________.</p>", "options": [{"option": "Minify", "correct": true}, {"option": "JavaScript", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>YUI</strong> compressor is a _______________________________ file.</p>", "options": [{"option": "Binary", "correct": false}, {"option": "JAR", "correct": true}, {"option": "Text", "correct": false}, {"option": "Assembly", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following indicates the function of a <strong>closure</strong> compiler?</p>", "options": [{"option": "Originates the JavaScript", "correct": false}, {"option": "Compiles the JavaScript", "correct": false}, {"option": "Rewrites the JavaScript", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following defines the <strong>scorched-earth optimizations</strong>?</p>", "options": [{"option": "They optimize based on certain constraints", "correct": false}, {"option": "They strip out everything including best practices", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>closure compiler</strong> was introduced by ____________________________________.</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Apple", "correct": false}, {"option": "Google", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>minify</strong> returns _________________________ to the <strong>script</strong> tag.</p>", "options": [{"option": "File I/O", "correct": false}, {"option": "Minify JavaScript", "correct": false}, {"option": "HTTP Request", "correct": false}, {"option": "Gzip encoded", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>JS File</strong> returns ______________________________.</p>", "options": [{"option": "File I/O", "correct": false}, {"option": "Minified JavaScript", "correct": true}, {"option": "HTTP Request", "correct": false}, {"option": "Gzip encoded", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the result of using <strong>R</strong> along with <strong>minification</strong> in JSON strings?</p>", "options": [{"option": "Increase in efficiency", "correct": false}, {"option": "Removes indentation", "correct": true}, {"option": "Increase in the file size", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is efficient in file size reduction?</p>", "options": [{"option": "YUI", "correct": false}, {"option": "Closure Compiler (advanced)", "correct": true}, {"option": "Minify", "correct": false}, {"option": "Closure Compiler(simple)", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is a JavaScript optimizer?</p>", "options": [{"option": "JSMin", "correct": false}, {"option": "Packer", "correct": false}, {"option": "Minify", "correct": false}, {"option": "JSMin and Packer", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following compression schemes is\u00a0used\u00a0for\u00a0HTML content-encoding in the web servers and modern web browsers?</p>", "options": [{"option": "gzip", "correct": true}, {"option": "deflate", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a <strong>stateless protocol</strong>?</p>", "options": [{"option": "HTML", "correct": false}, {"option": "XHTML", "correct": false}, {"option": "HTTP", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following connections is indicated by the value 3 of the\u00a0<strong>WebSocket</strong> attribute <strong>Socket.readyState</strong>?</p>", "options": [{"option": "Closed", "correct": true}, {"option": "Unestablished", "correct": false}, {"option": "Handshake", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how many <strong>WebSocket</strong> events are available?</p>", "options": [{"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "Four", "correct": true}, {"option": "Five", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to close the <strong>WebSocket</strong>?</p>", "options": [{"option": "Socket.terminate()", "correct": false}, {"option": "Socket.close()", "correct": true}, {"option": "Socket.dispose()", "correct": false}, {"option": "Socket.end()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a <strong>socket</strong> property?</p>", "options": [{"option": "ready", "correct": true}, {"option": "onopen", "correct": false}, {"option": "readyState", "correct": false}, {"option": "onmessage", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var httpserver = new http.Server();\n</code></pre>", "options": [{"option": "Create HTTP connection between the Client and the Server", "correct": false}, {"option": "Create an HTTP Server", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to check the <strong>sub-protocol</strong> of a client?</p>", "options": [{"option": "Sub-protocol property", "correct": false}, {"option": "Protocol property", "correct": true}, {"option": "Client-protocol property", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0JavaScript, which of the following functions is used to transmit data after establishing a connection\u00a0through a socket?</p>", "options": [{"option": "send(data)", "correct": false}, {"option": "Socket.send(\u201cdata\u201d)", "correct": false}, {"option": "Socket(data)", "correct": false}, {"option": "Socket.send(data)", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>WebSocket</strong> event?</p>", "options": [{"option": "send", "correct": false}, {"option": "close", "correct": true}, {"option": "deny", "correct": false}, {"option": "alert", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a <strong>socket</strong> property?</p>", "options": [{"option": "ready", "correct": true}, {"option": "ready-state", "correct": false}, {"option": "on-message", "correct": false}, {"option": "on-open", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the history object contains ____________________.</p>", "options": [{"option": "Numbers", "correct": false}, {"option": "Attribute values", "correct": false}, {"option": "URL", "correct": true}, {"option": "Boolean", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScipt, the <strong>history object</strong> is a part of the __________________ object.</p>", "options": [{"option": "Window", "correct": true}, {"option": "Property", "correct": false}, {"option": "Location", "correct": false}, {"option": "Screen", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the history object is a part of __________________________________.</p>", "options": [{"option": "Window", "correct": true}, {"option": "Property", "correct": false}, {"option": "Location", "correct": false}, {"option": "Screen", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the number of methods present in the <strong>history object</strong> are _______________.</p>", "options": [{"option": "Four", "correct": false}, {"option": "Three", "correct": true}, {"option": "Two", "correct": false}, {"option": "One", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods belongs to the <strong>History </strong>object?</p>", "options": [{"option": "back()", "correct": false}, {"option": "forward()", "correct": false}, {"option": "go()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Javascript, the <strong><code>forward()</code></strong> method ___________________________________.</p>", "options": [{"option": "Loads any random URL in the history list", "correct": false}, {"option": "Loads the previous URL in the history list", "correct": false}, {"option": "Loads a specific URL from the history list", "correct": false}, {"option": "Loads the next URL in the history list", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to update a URL?</p>", "options": [{"option": "location", "correct": false}, {"option": "location.URL", "correct": false}, {"option": "location.hash", "correct": true}, {"option": "URL", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to modify a particular state of the history of a browser?</p>", "options": [{"option": "State()", "correct": false}, {"option": "pushState()", "correct": false}, {"option": "replaceState()", "correct": true}, {"option": "replace()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>pushState()</strong> method is used to __________________.</p>", "options": [{"option": "Remove a state", "correct": false}, {"option": "Replace a state", "correct": false}, {"option": "Add a new state", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, _____________ parameters are used by the <strong>replacestate()</strong> method?</p>", "options": [{"option": "Two", "correct": false}, {"option": "Zero", "correct": false}, {"option": "Three", "correct": false}, {"option": "Four", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, when is the event <strong>window.onpopstate</strong> triggered?</p>", "options": [{"option": "When history.pushState() is called in a document", "correct": false}, {"option": "When history.replaceState() is called in a document", "correct": false}, {"option": "When the active history entry changes between two history entries for a document", "correct": true}, {"option": "When a page loads multiple times for the same document", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, R is used to ____________________________________.</p>", "options": [{"option": "Tighten and format the chart", "correct": false}, {"option": "Ingest and process the chart", "correct": true}, {"option": "Format and Ingest the chart", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the purpose of  <strong>glue language</strong>?</p>", "options": [{"option": "Produce data", "correct": false}, {"option": "Collect data", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Format data", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following types of languages is used to collect data?</p>", "options": [{"option": "Statistical ", "correct": false}, {"option": "Glue ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following includes compiled third-party packages?</p>", "options": [{"option": "Base", "correct": false}, {"option": "Contrib", "correct": true}, {"option": "Rtools", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these keywords opens the help window?</p>", "options": [{"option": "()", "correct": false}, {"option": "#", "correct": false}, {"option": "?", "correct": true}, {"option": "=", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following keywords is used for an extensive search?</p>", "options": [{"option": "??", "correct": true}, {"option": "?", "correct": false}, {"option": "?=", "correct": false}, {"option": "=?", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>??</strong> operator is used for __________________________________.</p>", "options": [{"option": "Opening the help window", "correct": false}, {"option": "Correcting errors", "correct": false}, {"option": "Detecting errors", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following types of comments is not supported?</p>", "options": [{"option": "Single-line comments", "correct": false}, {"option": "Multi-line comments", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>?</strong>  operator is used for _________________________.</p>", "options": [{"option": "Opening the help window", "correct": false}, {"option": "Correcting errors", "correct": true}, {"option": "Detecting errors", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, which of the following symbols is used to start a <strong>singe line comment</strong>?</p>", "options": [{"option": " //", "correct": true}, {"option": "#", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "$", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the <strong>assignment operator</strong>?</p>", "options": [{"option": " ->", "correct": false}, {"option": "=", "correct": true}, {"option": "==", "correct": false}, {"option": "===", "correct": false}], "level": "Easy"}, {"question": "<p>What is the dimensional size limit of matrices in R?</p>", "options": [{"option": "One ", "correct": false}, {"option": "Two ", "correct": false}, {"option": "Three ", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following contains multiple data types?</p>", "options": [{"option": "Vectors", "correct": false}, {"option": "Data frames", "correct": true}, {"option": "Matrices", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how many parameters are accepted by the <strong>plot()</strong> method?</p>", "options": [{"option": "One", "correct": false}, {"option": "Eight", "correct": false}, {"option": "Four", "correct": false}, {"option": "Nine", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is a\u00a0<strong>bubble chart</strong>\u00a0used for?</p>", "options": [{"option": "To represent 2D data", "correct": false}, {"option": "To represent 3D data", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following initial functions is used to create a bubble chart?</p>", "options": [{"option": "chart(bubble)", "correct": false}, {"option": "init()", "correct": false}, {"option": "symbols()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>symbols</strong> method is used _____________________________.</p>", "options": [{"option": "To draw symbols", "correct": false}, {"option": "To draw other shapes", "correct": true}, {"option": "To draw graphics", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is based on an interpreter for Adobe Systems' PostScript and Portable Document Format (PDF) page description languages?</p>", "options": [{"option": "Ghostscript", "correct": true}, {"option": "Script()", "correct": false}, {"option": "Postscript()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to save charts?</p>", "options": [{"option": "pdf()", "correct": false}, {"option": "jpeg()", "correct": false}, {"option": "bmp()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In R, which of the following methods is used to draw a <strong>bar plot</strong>?</p>", "options": [{"option": "bar_plot()", "correct": false}, {"option": "barplot()", "correct": true}, {"option": "plot(bar)", "correct": false}, {"option": "plotbar()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>par()</strong> method is used to make the text___________________________________.</p>", "options": [{"option": "Vertical", "correct": false}, {"option": "Horizontal", "correct": true}, {"option": "Diagonal", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the number of parameters accepted by the <strong>WebPageTestAPI</strong> is ________________.</p>", "options": [{"option": "Five", "correct": false}, {"option": "Zero", "correct": false}, {"option": "Six", "correct": false}, {"option": "Eight", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the <strong>block</strong> parameter\u00a0used for?</p>", "options": [{"option": "Blocking", "correct": false}, {"option": "A space-separated block list", "correct": false}, {"option": "A comma-separated block list", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what will happen if you set the <strong>private</strong> flag as 1?</p>", "options": [{"option": "Test will be run only by the administrator", "correct": false}, {"option": "Test is not displayed in public", "correct": true}, {"option": " Test is public", "correct": false}, {"option": "Test will not be run", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of setting the parameter <strong>fvonly</strong> to one in the WebPageTest API is to  __________________.</p>", "options": [{"option": "Repeat the view test", "correct": false}, {"option": "Skip the repeat view list", "correct": true}, {"option": "Debug the code", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In PHP, which of the following methods is used to convert the returned API into an XML object?</p>", "options": [{"option": "SimpleXMLElement()", "correct": true}, {"option": "SimpleElement()", "correct": false}, {"option": "XMLElement()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags can handle <strong>mouse events</strong> in <strong>Netscape</strong>?</p>", "options": [{"option": "a", "correct": false}, {"option": "img", "correct": true}, {"option": "br", "correct": false}, {"option": "hr", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the <strong>tainted property</strong> of a window object?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Default status", "correct": true}, {"option": "Protocol", "correct": false}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods\u00a0returns a Boolean value that specifies whether the browser has data tainting enabled?</p>", "options": [{"option": "taintEnabled()", "correct": true}, {"option": "taint_enable", "correct": false}, {"option": "enabletaint()", "correct": false}, {"option": "enabled_taint", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of creating a separate file after having an API key is to hold the ______________________.</p>", "options": [{"option": "Key details", "correct": false}, {"option": "Configuration information", "correct": true}, {"option": "URL details", "correct": false}, {"option": "Speed of the process", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of the parameter <strong>location</strong> is to specify the _________________.</p>", "options": [{"option": "Agent location", "correct": false}, {"option": "Speed", "correct": false}, {"option": "Browser", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events will take place if the parameter\u00a0<strong>fvonly </strong>is set to 1?</p>", "options": [{"option": "Results for the first view is retrieved", "correct": false}, {"option": "Repeat view test is disabled", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of the <strong>window.location</strong> object is to get the _________________________.</p>", "options": [{"option": "Location of the cursor", "correct": false}, {"option": "URL and redirect", "correct": true}, {"option": "Path to the next page", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following window properties returns the domain name of the web host?</p>", "options": [{"option": "window.location.href", "correct": false}, {"option": "window.location.assign", "correct": false}, {"option": "window.location.pathname", "correct": false}, {"option": "window.location.hostname", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to create a delay in milliseconds\u00a0while executing a specific method?</p>", "options": [{"option": "setTimeout()", "correct": false}, {"option": "setmilli()", "correct": false}, {"option": "setseconds()", "correct": false}, {"option": "setInterval()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to stop the execution of an ongoing method?</p>", "options": [{"option": "clearInterval()", "correct": false}, {"option": "clearTimeout()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following options about <strong>hoisting\u00a0</strong>is true?</p>", "options": [{"option": "It moves declarations to the top.", "correct": true}, {"option": "It moves declarations to the bottom.", "correct": false}, {"option": "It hosts the variables by itself.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the function of the <strong>XML parser</strong> is to _______________________.</p>", "options": [{"option": "Convert an XML DOM object to an XML document", "correct": false}, {"option": "Convert an XML document to an XML DOM object", "correct": true}, {"option": " Convert an XML DOM object to a comment", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>ActiveXObject</strong> method is used to ____________________.</p>", "options": [{"option": "Call an automation object", "correct": false}, {"option": "Reference an automation object", "correct": false}, {"option": "Instantiate an automation object", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, JSON is used to ____________________________________.</p>", "options": [{"option": "Point to a JSON object", "correct": false}, {"option": "Reference JSON formatted data", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the parameter of the method <strong>Date.parse()</strong> is a _________________.</p>", "options": [{"option": "Date string", "correct": true}, {"option": "Date", "correct": false}, {"option": "Number", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions prints the <strong>current page</strong>?</p>", "options": [{"option": "printcurrent()", "correct": false}, {"option": "print(now)", "correct": false}, {"option": "print()", "correct": true}, {"option": "print(this)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>print()</strong> method belongs to the _____________ object.</p>", "options": [{"option": "Window", "correct": true}, {"option": "Document", "correct": false}, {"option": "Hash", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if the <strong>radix</strong> parameter of the <strong>parseInt()</strong> method is omitted, which of the following assumption cannot be made?</p>\n\n<p>\u00a0</p>", "options": [{"option": "If the string begins with \u201c0x\u201d, the radix is 16", "correct": false}, {"option": "If the string begins with \u201c0\u201d, the radix is 8", "correct": false}, {"option": "If the string begins with any other value, the radix is 2", "correct": true}, {"option": "If the string begins with any other value, the radix is 10", "correct": false}], "level": "Medium"}, {"question": "<p>In a JavaScript program, when the <strong>parseInt()</strong> method is used on a string beginning with <strong>0x</strong>, which of the following is the <strong>radix</strong> value of the string?</p>", "options": [{"option": "13", "correct": false}, {"option": "14", "correct": false}, {"option": "10", "correct": false}, {"option": "16", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>parseInt()</strong> method is used to ______________________________________________.</p>", "options": [{"option": "Parse a data type and store it as an integer", "correct": false}, {"option": "Parse a string and return an integer", "correct": true}, {"option": "Parse an integer and return a string", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, If the <strong>radix</strong> value of a string  is <strong>16</strong>, the string begins with ___________________.</p>", "options": [{"option": "0x", "correct": true}, {"option": "0", "correct": false}, {"option": "0P", "correct": false}, {"option": "FF", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>radix</strong> parameter in the <strong>parseInt()</strong> method is used to specify the ________________________________________.</p>", "options": [{"option": "Numeral system that should not be used", "correct": false}, {"option": "Numeral system to be used", "correct": true}, {"option": "Conversion mode", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>When the <strong>parseInt()</strong> method is used on a string beginning with <strong>0</strong> in a JavaScript program, which of the following is the <strong>radix</strong> value of the string?</p>", "options": [{"option": "6", "correct": false}, {"option": "7", "correct": false}, {"option": "8", "correct": true}, {"option": "9", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>JSON.parse()</strong> method is used to _____________________________________________.</p>", "options": [{"option": "Parse a string to an integer", "correct": false}, {"option": "Parse a string to JSON", "correct": true}, {"option": "Parse a string from JSON to JSON2", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following types of variables is returned by the <strong>parseInt()</strong> method?</p>", "options": [{"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Integer", "correct": true}, {"option": "Date", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following parameters is included in the <strong>JSON.parse()</strong> method?</p>", "options": [{"option": "text", "correct": false}, {"option": "reviver", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following exceptions is thrown if a string to be parsed is an invalid JSON?</p>", "options": [{"option": "SyntaxError", "correct": true}, {"option": "ArrayOutOfBoundException", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following <strong>optimizers</strong> is used?</p>", "options": [{"option": "Esprima", "correct": false}, {"option": "UglifyJS", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following <strong>parsers</strong> is the fastest?</p>", "options": [{"option": "Acron", "correct": true}, {"option": "JSLint", "correct": false}, {"option": "Esprima", "correct": false}, {"option": "Traceur", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how many default methods are available in a <strong>Number</strong> object?</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following methods is valid?</p>", "options": [{"option": "constructor()", "correct": false}, {"option": "toExponential()", "correct": false}, {"option": "toLocaleString()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following expressions is used to calculate the runtime of a JavaScript code?</p>", "options": [{"option": "Start time \u2013 End time", "correct": false}, {"option": "Start time/ End time", "correct": false}, {"option": "Start time * End time", "correct": false}, {"option": "End time \u2013 Start time", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is used to send data to an external process?</p>", "options": [{"option": "XML", "correct": false}, {"option": "XBT", "correct": false}, {"option": "XHR", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to start <strong>time logging</strong>?</p>", "options": [{"option": "startTimeLogging()", "correct": true}, {"option": "start()", "correct": false}, {"option": "Loggingstart()", "correct": false}, {"option": "startLogging()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes of the <code>&lt;form&gt;</code>tag is not set by the <strong>Document Object Model</strong>?</p>", "options": [{"option": "Target", "correct": false}, {"option": "Enctype", "correct": false}, {"option": "Action", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var name1 = \"Hacker\";\n    function DisplayName () \n    {\n    var name2 = \"Earth\"; \n    print(name2); \n    }\n    DisplayName();\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Prints dialog box", "correct": true}, {"option": "\"HackerEarth\"", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code> var name1 = \"Hacker\";\n    function DisplayName () \n    {\n    var name2 = \"Earth\"; \n    print(name2+name1); \n    }\n    DisplayName();\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "\"Earth\"", "correct": false}, {"option": "\"Hacker\"", "correct": false}, {"option": "Prints dialog box", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var name1 = \"Hacker\";\n    function DisplayName() {\n        var name2 = \"Earth\"; \n        print(name2 + name1); \n    }\n</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "HackerEarth", "correct": false}, {"option": "Earth", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following types of <strong>scoping</strong> is used in JavaScript?</p>", "options": [{"option": "Literal", "correct": false}, {"option": "Lexical", "correct": true}, {"option": "Static", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to stop <strong>time logging</strong>?</p>", "options": [{"option": "stopTimeLogging()", "correct": true}, {"option": "stop()", "correct": false}, {"option": "finish()", "correct": false}, {"option": "abort()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used for\u00a0the\u00a0<strong>lexical</strong> scoping?</p>", "options": [{"option": "Segments", "correct": false}, {"option": "Blocks", "correct": false}, {"option": "Functions", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following data types is returned by the <strong>accept</strong> property?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "String", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>width</strong> property is used to return the ________________________.</p>", "options": [{"option": "Number of rows of data", "correct": false}, {"option": "Number of pixels", "correct": false}, {"option": "Number of pixels per row of data", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong><code>adoptNode()</code></strong> method is used for __________________________________.</p>", "options": [{"option": "Removing the original node", "correct": false}, {"option": "Making the original node ready for insertion", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>importNode()</code></strong> method is used for __________________________________________________.</p>", "options": [{"option": "Copying nodes from other documents without removing the original node", "correct": true}, {"option": "Copying nodes from other documents and removing the original node", "correct": false}, {"option": "Removing nodes from other documents", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to create a <strong>comment</strong> node?</p>", "options": [{"option": "comment()", "correct": false}, {"option": "createComment()", "correct": true}, {"option": "comm()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following methods is used to dispatch a <strong>SyntheticEvent</strong> object?</p>", "options": [{"option": "dispatch()", "correct": false}, {"option": "dispatchEvent()", "correct": true}, {"option": "dispatch(Event)", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to specifically execute a command?</p>", "options": [{"option": "execcommand()", "correct": false}, {"option": "execCommand()", "correct": true}, {"option": "exec(command)", "correct": false}, {"option": "exec(command id)", "correct": false}], "level": "Hard"}, {"question": "<p>In Javascript, if there are <strong>noscript</strong> tags in HTML __________________________.</p>", "options": [{"option": "The DOM elements should be positioned", "correct": false}, {"option": "The DOM elements should be painted", "correct": false}, {"option": "The script is executed", "correct": false}, {"option": "DOM nodes are built in the render tree", "correct": true}], "level": "Hard"}, {"question": "<p>The contents of a JavaScript file are retrieved in chunks. What is done next?</p>", "options": [{"option": "DOM elements are painted.", "correct": false}, {"option": "The content is parsed.", "correct": true}, {"option": "DOM nodes are built in a render tree.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following actions is not included to the <strong>Render Engine</strong> workflow?</p>", "options": [{"option": "Parse Content", "correct": false}, {"option": "Build DOM nodes in render tree", "correct": false}, {"option": "Paint DOM elements", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following types of variables is converted to <strong>DOM</strong> elements by the rendering engine?</p>", "options": [{"option": "Strings", "correct": false}, {"option": "Tokens", "correct": true}, {"option": "Addresses", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>The _____________________ program is used to execute codes in JavaScript.</p>", "options": [{"option": "Just In Time compiler", "correct": false}, {"option": "JavaScript interpreter", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What does the rendering engine do when it encounters JavaScript?</p>", "options": [{"option": "Skips the code", "correct": false}, {"option": "Continues painting", "correct": false}, {"option": "Switches to JavaScript Interpreter", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In a web browser in JavaScript, which of the following is used to paint the content on to the screen?</p>", "options": [{"option": "UI Layer", "correct": true}, {"option": "JavaScript Interpreter", "correct": false}, {"option": "Network Layer", "correct": false}, {"option": "Rendering engine", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when does the browser stop rendering HTML?</p>", "options": [{"option": "At the inline JavaScript block", "correct": false}, {"option": "At the external JavaScript file", "correct": false}, {"option": "At the inline JavaScript block and at the external JavaScript file", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, script loading is used to ________________________________________.</p>", "options": [{"option": "Load scripts programmatically", "correct": false}, {"option": "Load JavaScript files manually", "correct": false}, {"option": "Load JavaScript files programmatically", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what happens when the browser encounters a script tag without a  <strong>src</strong> attribute?</p>", "options": [{"option": "An error is thrown", "correct": false}, {"option": "An exception is thrown", "correct": false}, {"option": "Sent to the compiler", "correct": false}, {"option": "Sent to the interpreter", "correct": true}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following is the solution to the absence of a script tag with an <strong>src</strong> attribute?</p>", "options": [{"option": "Resend the scripts", "correct": false}, {"option": "Create an inline JavaScript", "correct": true}, {"option": "Resend the scripts and create an inline JavaScript", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to return a list of all the elements in a document with the specified tag name?</p>", "options": [{"option": "getElementbyID()", "correct": false}, {"option": "getElementsbyName()", "correct": false}, {"option": "getTagName()", "correct": false}, {"option": "getElementsbyTagName()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the object type of the <strong>script_url</strong>?</p>", "options": [{"option": "Object", "correct": false}, {"option": "String", "correct": false}, {"option": "Array", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the\u00a0<strong>async</strong> attribute used for?</p>", "options": [{"option": "Loads the script asynchronously", "correct": true}, {"option": "Loads the script synchronously", "correct": false}, {"option": "Loads the page asynchronously", "correct": false}, {"option": "Loads the page synchronously", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, why do you use an <strong>onload</strong> event in the script tag after using the <strong>async</strong> attribute?</p>", "options": [{"option": "To invoke code while loading the page ", "correct": false}, {"option": "To invoke code while loading the script ", "correct": false}, {"option": "To invoke code while downloading", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>startTimeLogging()</code></strong> method is used to ________________________________.</p>", "options": [{"option": "Start the timer", "correct": false}, {"option": "Capture time logging", "correct": false}, {"option": "Capture timing data for referencing", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following data types is conditionally accepted by the <strong>async</strong> module?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "Decimal", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following datatypes is optionally accepted by the <strong>async</strong> attribute?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "Decimal", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to create an element in the HTML DOM?</p>", "options": [{"option": "createDOMelement()", "correct": false}, {"option": "createElement()", "correct": true}, {"option": "DOMElement()", "correct": false}, {"option": "createDOMElement()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>localeCompare()</code></strong> method is used to _________________________________________________.</p>", "options": [{"option": "Check if the reference string is validated", "correct": false}, {"option": "Check if the reference string comes before, after or is equal as the compareString in sort order", "correct": true}, {"option": "Check if the string is a local copy", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>client-side</strong> JavaScript object?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Easy"}, {"question": "<p>What does a <strong>JavaScript</strong> method do?</p>", "options": [{"option": "It returns the value of a selected option.", "correct": false}, {"option": "It returns document.URL of the window in focus.", "correct": false}, {"option": "It returns the value of a checked radio input.", "correct": false}, {"option": "It returns the value of a cursor-selected text.", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is a\u00a0<strong>data frame</strong> used for?</p>", "options": [{"option": "It holds the page render time.", "correct": false}, {"option": "It holds the load time.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to create a <strong>data frame</strong>?</p>", "options": [{"option": "frame(data)", "correct": false}, {"option": "frameData()", "correct": false}, {"option": "data.frame()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the default value of the <strong>asyc</strong> attribute?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>lazy</strong> loading is done when __________________________________________.</p>", "options": [{"option": "Immediate loading is also necessary", "correct": false}, {"option": "Immediate loading is not necessary", "correct": true}, {"option": "Loading under command is necessary", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In cases of <strong>lazy</strong> loading in JavaScript, the external script is placed _________________________________________.</p>", "options": [{"option": "After window.onload event", "correct": true}, {"option": "Before window.onload event", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, what are the parameters of the <strong>attachEvent</strong> function?</p>", "options": [{"option": "Function", "correct": false}, {"option": "Function and Event", "correct": false}, {"option": "Event", "correct": false}, {"option": "Event and Function", "correct": true}], "level": "Medium"}, {"question": "<p>When the <strong><code>showPerformanceMetrics()</code></strong> method is called before loading the <strong>remote</strong> script in a JavaScript program, the compiler _____________________________________.</p>", "options": [{"option": "Throws an exception", "correct": false}, {"option": "Throws an error", "correct": true}, {"option": "Loads by itself", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In HTML, which of the following is an attribute of the <strong>script</strong> object?</p>", "options": [{"option": "onclick", "correct": false}, {"option": "onload", "correct": true}, {"option": "onshow", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to add an <strong>event listener</strong>?</p>", "options": [{"option": "addListener()", "correct": false}, {"option": "addEvent(Listener)", "correct": false}, {"option": "addListener(Event)", "correct": false}, {"option": "addEventListener()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>domLoading</strong> attribute is used to indicate that the ____________________________.</p>", "options": [{"option": "Document exists", "correct": false}, {"option": "Document is ready to load", "correct": false}, {"option": "Document has loaded", "correct": false}, {"option": "Document is beginning to load", "correct": true}], "level": "Easy"}, {"question": "<p>You can refresh a webpage in JavaScript by using _________ object.</p>", "options": [{"option": "window.reload", "correct": false}, {"option": "location.reload", "correct": true}, {"option": "page.refresh", "correct": false}, {"option": "window.refresh", "correct": false}], "level": "Medium"}, {"question": "<p>The initial step to set up a CSS <strong>lazy</strong> loading through JavaScript is ________________________________.</p>", "options": [{"option": "Loading the script", "correct": false}, {"option": "Fetching data", "correct": true}, {"option": "Loading the page", "correct": false}, {"option": "Adding the event listener", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the <strong>type</strong> attribute used for?</p>", "options": [{"option": "Get more information about a variable", "correct": false}, {"option": "Identify the scripting language of a variable", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, What is the significance of the <strong>appendchild()</strong> method?</p>", "options": [{"option": "It appends a node in the middle ", "correct": false}, {"option": "It appends a node as the first child", "correct": false}, {"option": "It appends a node as the last child", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the ______________ parameter of the <strong>getElementsbyTagName()</strong> method is used to get an image.</p>", "options": [{"option": "image", "correct": false}, {"option": "src", "correct": false}, {"option": "\"img\"", "correct": true}, {"option": "imageurl", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, How is the perfLogger's loading and execution blocked?</p>", "options": [{"option": "By removing the perfLogger", "correct": false}, {"option": "By inlining the perfLogger", "correct": true}, {"option": "By removing and inlining the perfLogger", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an interpreter _________________________ when a variable in a scope is referenced.</p>", "options": [{"option": "Traverses the queue", "correct": false}, {"option": "Traverses the stack", "correct": true}, {"option": "Finds the bugs", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, to which of the following does the  <strong>location</strong> attribute belong?</p>", "options": [{"option": "document", "correct": true}, {"option": "html", "correct": false}, {"option": "image", "correct": false}, {"option": "pre", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript,  the <strong>document.location</strong> property is referenced from within an object to ___________________________.</p>", "options": [{"option": "Traverse the queue", "correct": false}, {"option": "Find bugs", "correct": false}, {"option": "Traverse the stack", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, why are the <strong>local scope</strong> variables created to hold value?</p>", "options": [{"option": "To optimize the testing process", "correct": false}, {"option": "To increase the speed ", "correct": false}, {"option": "To minimize memory usage", "correct": false}, {"option": "To cache the reference document.location", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following actions is done after calling the <strong>startTimeLogging()</strong> function?</p>", "options": [{"option": "Code interpretation", "correct": false}, {"option": "Code compilation", "correct": false}, {"option": "Code execution", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, while traversing through a stack, what comes after namespace?</p>", "options": [{"option": "Window", "correct": true}, {"option": "Function", "correct": false}, {"option": "Document", "correct": false}, {"option": "Location", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to stop capturing the <strong>ad hoc</strong> timing?</p>", "options": [{"option": "stopadhoc()", "correct": false}, {"option": "stopTimer()", "correct": false}, {"option": "stopTimeLogging()", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>closure compiler</strong>is run in _________________ modes.</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the simple mode of the <strong>closure compiler</strong> _____________________________________.</p>", "options": [{"option": "Removes white spaces", "correct": true}, {"option": "Removes unwanted words", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to access the <strong>closure</strong> compiler?</p>", "options": [{"option": "Runtime application", "correct": false}, {"option": "Web application", "correct": true}, {"option": "Standalone application", "correct": false}, {"option": "All these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how can the <strong>closure</strong> compiler be efficiently used?</p>", "options": [{"option": "By increasing the size of the JavaScript files", "correct": false}, {"option": "By reducing the size of the JavaScript files", "correct": false}, {"option": "By reducing the download time of the JavaScript files", "correct": false}, {"option": "By reducing the size and download time of the JavaScript files", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how can the <strong>closure</strong> compiler be used?</p>", "options": [{"option": "As an open source runtime application", "correct": false}, {"option": "As a runtime application", "correct": false}, {"option": "As a web application", "correct": false}, {"option": "As an open source web application ", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the purpose of the advanced mode of the <strong>closure</strong> compiler?</p>", "options": [{"option": "Renaming variables", "correct": false}, {"option": "Renaming function", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, why are closure templates used?</p>", "options": [{"option": "They statically update in JavaScript.", "correct": false}, {"option": "They dynamically generate HTML in Java and JavaScript.", "correct": true}, {"option": "They increase efficiency and convenience.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how does the <strong>closure</strong> compiler helps in checking the code?</p>", "options": [{"option": "Warnings", "correct": true}, {"option": "Suddenly aborting", "correct": false}, {"option": "Rejecting malicious inputs", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, why is closure compile used?</p>", "options": [{"option": "It downloads JavaScript faster.", "correct": false}, {"option": "It runs JavaScript faster.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following statements is true:</p>\n\n<ol>\n\t<li>A JavaScript runtime uses a message queue, which is a list of messages to be processed.</li>\n\t<li>\u00a0Two distinct runtimes can only communicate through sending messages via the <strong>postMessage&lt;font face=\"monospace\"&gt;\u00a0&lt;/font&gt;</strong>method.\u00a0</li>\n</ol>", "options": [{"option": "Only 1", "correct": false}, {"option": "Only 2", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, which of the following functions can be used to execute the\u00a0code asynchronously?</p>", "options": [{"option": "load()", "correct": false}, {"option": "require()", "correct": false}, {"option": "setTimeout", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why are long JavaScript functions not preferred?</p>", "options": [{"option": "User friendliness", "correct": false}, {"option": "Tie up event loops", "correct": false}, {"option": "Browser becomes unresponsive", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the object that looks to the thread that creates it is called the __________________.</p>", "options": [{"option": "Window", "correct": false}, {"option": "Worker", "correct": true}, {"option": "Element", "correct": false}, {"option": "Hash", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a global object for a new <strong>worker</strong>?</p>", "options": [{"option": "WorkerGlobalScope", "correct": true}, {"option": "Worker", "correct": false}, {"option": "WorkerScope", "correct": false}, {"option": "Window", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is invoked in order to create a new worker in JavaScript?</p>", "options": [{"option": "Function", "correct": false}, {"option": "Destructor", "correct": false}, {"option": "Constructor", "correct": true}, {"option": "Interface", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if you specify an absolute URL in the <strong>Worker</strong> constructor, which of the following statements is correct?</p>", "options": [{"option": "It resolves itself.", "correct": false}, {"option": "It must have the same origin.", "correct": true}, {"option": "It cannot have the same origin.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to send data using <strong>worker</strong> objects?</p>", "options": [{"option": "postMessage()", "correct": true}, {"option": "sendMessage()", "correct": false}, {"option": "Message()", "correct": false}, {"option": "post()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to manage multiple event handlers?</p>", "options": [{"option": "onmessage()", "correct": false}, {"option": "onerror()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions allows a <strong>worker</strong> to terminate itself?</p>", "options": [{"option": "close()", "correct": true}, {"option": "exit()", "correct": false}, {"option": "terminate()", "correct": false}, {"option": "halt()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is an abbreviation of <strong>BLOB</strong> in JavaScript?</p>", "options": [{"option": "Binary Little Object", "correct": false}, {"option": "Binary Large Object", "correct": true}, {"option": "Broken Large Object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how are the sizes of <strong>blobs</strong>  calculated?</p>", "options": [{"option": "Meters", "correct": false}, {"option": "Kilometers", "correct": false}, {"option": "Bytes", "correct": true}, {"option": "Pixels", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>blobs</strong> are stored in the ____________.</p>", "options": [{"option": "Memory", "correct": false}, {"option": "Disk", "correct": false}, {"option": "Memory and disk", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to break <strong>blobs</strong> into smaller pieces?</p>", "options": [{"option": "partition()", "correct": false}, {"option": "cut()", "correct": false}, {"option": "sliceall()", "correct": false}, {"option": "slice()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following algorithms supports <strong>blobs</strong>?</p>", "options": [{"option": "Structured clone algorithm", "correct": true}, {"option": "Double buffer algorithm", "correct": false}, {"option": "Chen\u2019s algorithm", "correct": false}, {"option": "Retrieval algorithm\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following databases is used to retrieve <strong>blobs</strong>?</p>", "options": [{"option": "Server-side databases", "correct": false}, {"option": "Client-side databases", "correct": true}, {"option": "Server-side databases and client-side databases", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following interfaces is used to create <strong>blobs</strong>?</p>", "options": [{"option": "Creator", "correct": false}, {"option": "BlobCreator", "correct": false}, {"option": "BlobBuilder", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following objects is a <strong>subtype</strong> of Blob in JavaScript?</p>", "options": [{"option": "Elemental", "correct": false}, {"option": "Create", "correct": false}, {"option": "Data", "correct": false}, {"option": "File ", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to upload a <strong>Blob</strong> to a server?</p>", "options": [{"option": "send()", "correct": true}, {"option": "pass()", "correct": false}, {"option": "upload()", "correct": false}, {"option": "store()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is true:</p>\n\n<ol>\n\t<li>A <strong>DOMString</strong>\u00a0containing an object URL that can be used to reference the contents of the specified source\u00a0<code>object</code>.</li>\n\t<li>\u00a0Each of these objects\u00a0must be released by calling <strong>URL.revokeObjectURL()</strong>\u00a0when you no longer need them.</li>\n</ol>", "options": [{"option": "Only 1", "correct": false}, {"option": "Only 2", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, memory leaks are found in ___________________________________.</p>", "options": [{"option": "Server-side objects", "correct": false}, {"option": "Client-side objects", "correct": true}, {"option": "Server-side objects and client-side objects", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the central concept of JavaScript memory management?</p>", "options": [{"option": "Reliability", "correct": false}, {"option": "Reachability", "correct": true}, {"option": "Efficiency", "correct": false}, {"option": "Transparency", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, when the data of the <strong>jQuery.cache</strong> is read from an element, ________________________________________.</p>", "options": [{"option": "A unique number is retrieved as elem[jQuery.expando]", "correct": false}, {"option": "Data is read from jQuery.cache[id]", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to import an <strong>external</strong> style sheet?</p>", "options": [{"option": "@insert", "correct": false}, {"option": "@import", "correct": true}, {"option": "#import", "correct": false}, {"option": "#insert", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is not a type of <strong>selector</strong> in CSS?</p>", "options": [{"option": "Type ", "correct": false}, {"option": "Universal ", "correct": false}, {"option": "Local ", "correct": true}, {"option": "Descendant", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>property</strong> values inherits the property from its <strong>parent</strong> element?</p>", "options": [{"option": "initial", "correct": false}, {"option": "inherit", "correct": true}, {"option": "number", "correct": false}, {"option": "auto", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, how many bits of memory is occupied by <strong>short</strong> data type?</p>", "options": [{"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "16", "correct": true}, {"option": "32", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the range of the\u00a0<strong>byte\u00a0</strong>data type in Java?</p>", "options": [{"option": "-128 to 127", "correct": true}, {"option": " -32768 to 32767", "correct": false}, {"option": " -2147483648 to 2147483647", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class area {\n            public static void main(String args[]) \n            {    \n                 double r, pi, a;\n                 r = 9.8;\n                 pi = 3.14;\n                 a = pi * r * r;\n                 System.out.println(a);\n            } \n        }\n</code></pre>", "options": [{"option": "254.3434", "correct": false}, {"option": "301.5656", "correct": true}, {"option": "254.3400", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n\n    public static void main(String args[]) {        \n\n        int val = 3;\n        System.out.print(++val * 8);\n    } \n}\n</code></pre>", "options": [{"option": "24", "correct": false}, {"option": "32", "correct": true}, {"option": "35", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n            public static void main(String args[]) \n            {        \n                 int x = 7;\n                 System.out.print(x++ * 9);\n            } \n        }\n</code></pre>", "options": [{"option": "72", "correct": false}, {"option": "63", "correct": true}, {"option": "35", "correct": false}, {"option": "54", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n            public static void main(String args[]) \n            {        \n                 int val = 5;\n                 System.out.print(--val * 6);\n            } \n        }\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "36", "correct": false}, {"option": "24", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class incr{\n            public static void main(String args[]) \n            {        \n                 int g = 3;\n                 System.out.print(g-- * 8);\n            } \n        }\n</code></pre>", "options": [{"option": "16", "correct": false}, {"option": "32", "correct": false}, {"option": "24", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n        public static void main(String args[]) \n        {    \n            double a = 290.05;\n            int  b = 100;\n            byte c = (byte) a;\n            byte d = (byte) b;\n            System.out.println(c + \" \"  + d);\n        } \n    }</code></pre>", "options": [{"option": "37 45", "correct": false}, {"option": "290 100", "correct": false}, {"option": "34 100", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class conversion {\n            public static void main(String args[]) \n            {    \n                 double a = 295.04;\n                 double b = 300;\n                 int c = (int) a;\n                 int d = (int) b;\n                 System.out.println(c + \" \"  + d);\n            } \n        }\n</code></pre>", "options": [{"option": "295.00, 300", "correct": false}, {"option": "295.0, 300", "correct": false}, {"option": "295   300", "correct": true}, {"option": "Garbage value, 300", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class average {\n            public static void main(String args[])\n            {\n                double num[] = {5.5, 10.1};\n                double result;\n                result = 0;\n                for (int i = 0; i &lt; 1; ++i) \n                    result = result + num[i];\n            System.out.print(result/4);\n\n            } \n        }\n</code></pre>", "options": [{"option": "1.000", "correct": false}, {"option": "1.375", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, all the <strong>transcendental</strong> mathematical functions return ______________________.</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "long", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following literals is contained in a <strong>float</strong> variable in Java?</p>", "options": [{"option": "1.7e-308", "correct": false}, {"option": "3.4e-038", "correct": true}, {"option": "1.7e+308", "correct": false}, {"option": "3.4e-050", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, an expression involving byte, int, and literal numbers is promoted to _______________________.</p>", "options": [{"option": "int", "correct": true}, {"option": "float", "correct": false}, {"option": "byte", "correct": false}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are\u00a0syntactically correct lines in the following Java code:</p>\n\n<ol>\n\t<li>int w = (int)888.8;</li>\n\t<li>byte x = (byte)100L;</li>\n\t<li>long y = (byte)100;</li>\n\t<li>byte z = (byte)100L;</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the numerical range of a <strong>char</strong> data type?</p>", "options": [{"option": " -128 to 127", "correct": false}, {"option": "0 to 256", "correct": false}, {"option": "0 to 32767", "correct": false}, {"option": "0 to 65535", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these coding types is used for data type characters in Java?</p>", "options": [{"option": "ISO-LATIN-1", "correct": false}, {"option": "UNICODE", "correct": true}, {"option": "ASCII", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these values can a boolean variable contain in Java?</p>", "options": [{"option": "True & False", "correct": true}, {"option": "0 & 1", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is a valid declaration?</p>", "options": [{"option": "boolean b1 = 1;", "correct": false}, {"option": "boolean b2 = false;", "correct": true}, {"option": "boolean b3 = 'false';", "correct": false}, {"option": "boolean b4 = \u2018true\u2019", "correct": false}], "level": "Easy"}, {"question": "<p>________________ occupies the first 127 characters in Java.</p>", "options": [{"option": "ASCII", "correct": false}, {"option": "ISO-LATIN-1", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n            public static void main(String args[]) \n            {    \n                char val[] = new char[10];\n            for (int i = 1; i &lt; 9; ++i) {\n                    val[i] = '1';\n                    System.out.print(val[i] + \"\" );\n                    i++;\n                }\n            } \n        }\n</code></pre>", "options": [{"option": "1111", "correct": true}, {"option": "11111", "correct": false}, {"option": "0 1 2 3 4", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class array{\n            public static void main(String args[]) \n            {    \n                char a[] = new char[10];\n            for (int i = 0; i &lt; 10; ++i) {\n                    a[i] = '\\0';\n                    System.out.print(a[i] + \"\" );\n                    i++;\n                }\n            } \n        }\n</code></pre>", "options": [{"option": "0000", "correct": false}, {"option": "\\0\\0\\0\\0\\0", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class mainclass {\n            public static void main(String args[]) \n            {\n                char a = 'a';\n                a++;\n            System.out.print((int)a);\n            } \n        }\n</code></pre>", "options": [{"option": "97", "correct": false}, {"option": "98", "correct": true}, {"option": "65", "correct": false}, {"option": "66", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[]) {\n\n        char val = 'E';\n        System.out.print((int)(val++));\n    } \n}\n</code></pre>", "options": [{"option": "69", "correct": true}, {"option": "70", "correct": false}, {"option": "71", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class mainclass {\n            public static void main(String args[]) \n            {\n            boolean var1 =true;\n            boolean var2 =false;\n            if (var2)\n                System.out.println(var1);\n            else\n                System.out.println(var2);\n           } \n        }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class mainclass {\n        public static void main(String args[])\n        {\n            boolean var1 =true;\n            boolean var2 ='0';\n            if (var2)\n                System.out.println(var1);\n            else\n                System.out.println(var2);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n        public static void main(String args[])\n        {\n            boolean x = true;\n            boolean y = false;\n            System.out.println((y &amp; y));\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class BoolOperators {\n\n    public static void main(String args[]){\n        boolean var1 = true;\n        boolean var2 = false;\n\n        System.out.println((var2||var2));\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class asciicodes {\n        public static void main(String args[])\n        {\n            char var1 = 'A';\n            char var2 = 'a';\n            System.out.println((int)var1 + \" \" + (int)var2);\n        }\n    }\n</code></pre>", "options": [{"option": "67, 95", "correct": false}, {"option": "66, 96", "correct": false}, {"option": "65, 97", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n        public static void main(String args[])\n        {\n            char a = 'X';\n            char b = 'x';\n            System.out.println((int)a +(int)b);\n        }\n    }\n</code></pre>", "options": [{"option": "208", "correct": true}, {"option": "88 120", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>long</strong> literal in Java?</p>", "options": [{"option": "0x99fffa", "correct": false}, {"option": "ABCDEFG", "correct": false}, {"option": "0x99fffL", "correct": true}, {"option": "99671246", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the return type of the &amp; operator?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>Literals in java must be appended by _______________.</p>", "options": [{"option": " L", "correct": false}, {"option": " l", "correct": false}, {"option": " D", "correct": false}, {"option": "L and I", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, literals can be made up of _____________________ variables.</p>", "options": [{"option": "integer", "correct": false}, {"option": "float", "correct": false}, {"option": "boolean", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these cannot be used for a variable name in Java?</p>", "options": [{"option": " identifier", "correct": false}, {"option": " keyword", "correct": true}, {"option": "identifier & keyword", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class dynamic{\n        public static void main(String args[])\n        {\n            double a, b;\n            a = 3.0;\n            b = 4.0;\n            double c = Math.sqrt(a * a + b * b);\n            System.out.println(c);\n        }\n    }\n</code></pre>", "options": [{"option": "25.0", "correct": false}, {"option": "5.0", "correct": true}, {"option": "5.00", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>  class HackerEarth{\n        public static void main(String args[])\n        {\n            double var1,var2;\n            var1 = 5.0;\n            var2= 12.0;\n            double var3 = Math.sqrt(var1 * var1 + var2 * var2);\n            System.out.println(var3);\n        }\n    }\n</code></pre>", "options": [{"option": "13", "correct": false}, {"option": "13.0", "correct": true}, {"option": "13.00", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following <strong>string</strong> literals is not valid in Java?</p>", "options": [{"option": "\"Hacker Earth\"", "correct": false}, {"option": "\"Hacker\\nEarth\"", "correct": false}, {"option": "\u201c\\\u201dHacker Earth\u201d\"", "correct": false}, {"option": "\"Hacker Earth\"", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[])\n        {\n            int a;\n            a = -1;\n            {\n                int b = 4;\n                System.out.print(a + \" \" + b);\n            }\n            System.out.println(a + \" \" + b);\n        }\n    }\n</code></pre>", "options": [{"option": "-1 4 -1 4", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "-1 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[])\n        {\n            int x[] = new int[10];\n            for (int i = 0; i &lt; 10; ++i) {\n                x[i] = i/2;\n                x[i]++;\n                System.out.print(x[i] + \" \");\n                i++;\n            }\n\n        }\n    }\n</code></pre>", "options": [{"option": " 0 2 4 6 8", "correct": false}, {"option": "1 2 3 4 5 ", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "1 2 3 4 5 6 7 8 9 10", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n        public static void main(String args[])\n        {\n            int x[] = {1,2,3,4,5};\n            int y[] = x;\n            int count = 0;\n            for (int j = 0; j &lt; 3; ++j)\n                count += (x[j] * y[j]) + (x[j + 1] * y[j]);\n            System.out.println(count);\n        }\n    }\n</code></pre>", "options": [{"option": "40", "correct": false}, {"option": "34", "correct": true}, {"option": "36", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these cannot be used for a variable name in Java?</p>", "options": [{"option": "identifier", "correct": false}, {"option": " keyword", "correct": true}, {"option": "identifier & keyword", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators is used to allocate memory to array variable?</p>", "options": [{"option": "malloc", "correct": false}, {"option": "alloc", "correct": false}, {"option": "new", "correct": true}, {"option": "Both malloc and new", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is an incorrect array declaration in Java?</p>", "options": [{"option": "int arr[] = new int[5]", "correct": false}, {"option": "int [] arr = new int[5]", "correct": false}, {"option": "int arr[] = int [5] new", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    int arr[] = new int [2];\n    System.out.print(arr);\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "00", "correct": false}, {"option": "Garbage value ", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is not true?</p>", "options": [{"option": "It is necessary to use new operator to initialize an array.", "correct": true}, {"option": "An array can be initialized when they are declared.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n        public static void main(String args[])\n        {\n            int arr[][] = {{ 1, 2, 3},{4,5,6}};\n            int total = 0;\n            for (int x = 0; x &lt; 2; ++x)\n                for (int y = 0; y &lt;  2; ++y)\n                    total = total + arr[x][y];\n                System.out.print(total / 5);\n            }\n        }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class example {\n        public static void main(String args[])\n        {\n            int arr[] = new int[] {0,1,2,4,4,5};\n            int n = 4;\n            n = arr[arr[n] / 2];\n            System.out.println(arr[n] / 2);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following properties is mandatory to define an array in Java?</p>", "options": [{"option": "Column", "correct": false}, {"option": " Row", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is an operand of arithmetic operators in Java?</p>", "options": [{"option": "Numeric", "correct": false}, {"option": "Characters", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the <strong>modulus</strong> operator can be applied to ____________________________.</p>", "options": [{"option": "Integers", "correct": false}, {"option": " Floating \u2013 point numbers", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>With x = 0, which of the following lines is used to change the value of x to 1 in Java: </p>\n<ol>\n<li>x++;</li>\n<li>x = x + 1;</li>\n<li>x += 1;</li>\n<li>x =+ 1;</li>\n</ol>", "options": [{"option": "1, 2, 3, 4", "correct": true}, {"option": "1 & 4", "correct": false}, {"option": "1 & 4", "correct": false}, {"option": "3 & 2", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the <strong>decrement</strong> operator decreases the value of a variable by _________________.</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n        public static void main(String args[])\n        {\n            double a = 1 + 5;\n            double b = a / 4;\n            int c = 1 + 5;\n            int d = c / 4;\n            System.out.print(b + \" \" + d);\n\n        }\n    }\n</code></pre>", "options": [{"option": "1 2", "correct": false}, {"option": "0 1", "correct": false}, {"option": "1.5  1.0", "correct": false}, {"option": "1.5  1", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n            double val1 = 25.0000;\n            int  val2 = 25;\n            val1 = val1 % 10;\n            val2 = val2 % 10;\n            System.out.println(val1 + \" \"  + val2);\n        }\n    }\n</code></pre>", "options": [{"option": "5.000 5", "correct": false}, {"option": "5 5", "correct": false}, {"option": "5.00 5", "correct": false}, {"option": "5.0 5", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int val1 , val2;\n            val1 = 10;\n            val1++;\n            --val1;\n            val2 = val1++;\n            System.out.println(val1 + \" \" + val2);\n        }\n    }\n</code></pre>", "options": [{"option": "11 11", "correct": false}, {"option": "10 10", "correct": false}, {"option": "11 10", "correct": true}, {"option": "10 11", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int val1 , val2;\n            val1 = 10;\n            --val1;\n            --val1;\n            val2 = val1--;\n            System.out.println(val1 + \" \" + val2);\n        }\n    }\n</code></pre>", "options": [{"option": "8 8", "correct": false}, {"option": "7 7", "correct": false}, {"option": "7 8", "correct": true}, {"option": "8 7", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[])\n        {\n            int a = 1;\n            int b = 2;\n            int c;\n            int d;\n            c = ++b;\n            d = a++;\n            c++;\n            b++;\n            System.out.println(a + \" \" + b + \" \" + c);\n        }\n    }\n</code></pre>", "options": [{"option": "3, 3, 4", "correct": false}, {"option": "2, 4, 4", "correct": true}, {"option": "2, 4, 3", "correct": false}, {"option": "1, 2, 2", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not a <strong>bitwise</strong> operator in Java?</p>", "options": [{"option": "&=", "correct": false}, {"option": "<=", "correct": true}, {"option": "&", "correct": false}, {"option": "|=", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following operators is used to invert all the digits in the binary representation of a number in Java?</p>", "options": [{"option": " ~", "correct": true}, {"option": "<<<", "correct": false}, {"option": " >>>", "correct": false}, {"option": "^", "correct": false}], "level": "Easy"}, {"question": "<p>On applying Left shift operator, &lt;&lt;, on an integer bits are lost one they are shifted past which position bit?</p>", "options": [{"option": " 1", "correct": false}, {"option": "32", "correct": false}, {"option": "31", "correct": true}, {"option": "33", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following <strong>right-shift</strong> operators preserves the sign of a value in Java?</p>", "options": [{"option": " <<", "correct": false}, {"option": " <<=", "correct": false}, {"option": ">>", "correct": true}, {"option": ">>=", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int bit1 = 2;\n            int bit2 = ~bit1;\n            System.out.print(bit1 + \" \" + bit2);\n        }\n    }\n</code></pre>", "options": [{"option": "2 -2", "correct": false}, {"option": "3 3", "correct": false}, {"option": "2 -3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[])\n        {\n            {\n                int var1 = 3;\n                int var2 = 6;\n                int var3 = var1 | var2;\n                int var4 = var1 &amp; var2;\n                System.out.println(var3 + \" \"  + var4);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "7 3", "correct": false}, {"option": "6 2", "correct": false}, {"option": "6 4", "correct": false}, {"option": "7 2", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            {\n                int w = 3;\n                int x = 6;\n                int y = w | x;\n                int z = w &amp; x | y;\n                System.out.println(y + \" \"  + z);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "7 7", "correct": true}, {"option": "6 7", "correct": false}, {"option": "7 6", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n            public static void main(String args[]) \n            {        \n                 byte var = 4;\n                 int a;\n                 byte b; \n                 a = var &lt;&lt; 2;\n                 b = (byte) (var &lt;&lt; 2);\n                 System.out.print(a + \" \" + b);\n            } \n        }\n</code></pre>", "options": [{"option": "16 0", "correct": false}, {"option": "16 16", "correct": true}, {"option": "0 16", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n            public static void main(String args[]) \n\n            {    \n                 int a; \n                 a = 15;\n                 a = a &gt;&gt; 1;\n                 System.out.println(a);\n            } \n        }\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "7", "correct": true}, {"option": "6", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int val1 = 1;\n            int val2 = 2;\n            int val3 = 3;\n            val1 |= 4;\n            val2 &gt;&gt;= 1;\n            val3 &lt;&lt;= 1;\n            val1 ^= val3;\n            System.out.println(val1 + \" \" + val2 + \" \" + val3);\n        }\n    }\n</code></pre>", "options": [{"option": "2 2 3", "correct": false}, {"option": "2 3 4", "correct": false}, {"option": "3 1 6", "correct": true}, {"option": "3 3 6", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            int a = 1;\n            int b = 2;\n            int c = 3;\n            a |= 4;\n            a ^= c;\n            System.out.println(a + \" \" +c);\n        }\n    }\n</code></pre>", "options": [{"option": "4 6", "correct": false}, {"option": "6 4", "correct": false}, {"option": "6 3", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is the return type of\u00a0<strong>relational\u00a0</strong>operators?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "Characters", "correct": false}, {"option": "Double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is returned by == operator?</p>", "options": [{"option": "Integers", "correct": false}, {"option": "Floating point numbers", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following operators can operate on a boolean variable in Java?</p>", "options": [{"option": "&&", "correct": false}, {"option": "==", "correct": false}, {"option": "?:", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators skips evaluating the right-hand operand?</p>", "options": [{"option": "!", "correct": false}, {"option": " |", "correct": false}, {"option": "&", "correct": false}, {"option": "&&", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "True and false are numeric values 1 and 0.", "correct": false}, {"option": "True and false are numeric values 0 and 1.", "correct": false}, {"option": "True and false are non numeric values.", "correct": true}, {"option": "True is any non zero value and false is 0.", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static void main(String args[])\n    {\n        boolean var1 = true;\n        boolean var2 = false;\n        boolean var3 = var1 ^ var2;\n        System.out.println(!var3);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int a , b = 1;\n            a = 15;\n            if (a != 15 &amp;&amp; a / 0 == 0)\n                System.out.println(b);\n            else\n                System.out.println(++b);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int a = 3;\n            int b = ~ a;\n            int c;\n            c = a &gt; b ? a : b;\n            System.out.print(c);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "-1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    public static void main(String args[])\n    {\n        boolean val1 = true;\n        boolean val2 = !true;\n        boolean val3 = val1 | val2;\n        boolean val4 = val1 &amp; val2;\n        boolean val5 = val4 ? val2 : val3;\n        System.out.println(val4 + \" \" + val5);\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "true false", "correct": false}, {"option": "false true\r\n", "correct": true}, {"option": "true true", "correct": false}, {"option": "false false", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n        public static void main(String args[])\n        {\n            int var1 = 5;\n            int var2 = 6;\n            System.out.print(var1 &gt; var2);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following operators has the highest precedence?</p>", "options": [{"option": "()", "correct": true}, {"option": "++", "correct": false}, {"option": "*", "correct": false}, {"option": ">>", "correct": false}], "level": "Easy"}, {"question": "<p>What should expression1 evaluate to in the following Java code:</p>\n<pre class=\"prettyprint\"><code>expression1 ? expression2 : expression3\n</code></pre>", "options": [{"option": "Integer", "correct": false}, {"option": "Floating \u2013 point numbers", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value stored in <strong>x</strong> in the following Java code:</p>\n<pre class=\"prettyprint\"><code>  int x, y, z;\n    x = 0;\n    y = 1;\n    x = y = z = 8;\n</code></pre>", "options": [{"option": " 0", "correct": false}, {"option": "1", "correct": false}, {"option": "9", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the order of precedence (highest to lowest) for the following operators in Java:</p>\n\n<ol>\n\t<li>?:</li>\n\t<li>&amp;</li>\n\t<li>^</li>\n</ol>", "options": [{"option": "2 -> 1 -> 3", "correct": false}, {"option": "3 -> 2 -> 1", "correct": false}, {"option": "1 -> 2 -> 3", "correct": false}, {"option": "2 -> 3 -> 1", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n\n    public static void main(String args[]){\n        int var1 = 5; \n        int var2 = 6;\n        System.out.print(var1&lt;=var2);\n    } \n}\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "true", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n\n    public static void main(String args[]) {\n        int a = 5;\n        int b = 6;\n        int c;\n        c = ++ b * a / b + b;\n        System.out.print(c);\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": false}, {"option": "12", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    public static void main(String args[])\n    {\n        int val = 8;\n        System.out.println(++val * 3 + \" \" + (val--));\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "24, 8", "correct": false}, {"option": "27, 8", "correct": false}, {"option": "24, 9", "correct": false}, {"option": "27, 9", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[])\n        {\n            int val1 = 8;\n            System.out.println(++val1 * 3 + \" \" + (--val1));\n        }\n    }\n</code></pre>", "options": [{"option": "24 8", "correct": false}, {"option": "24 9", "correct": false}, {"option": "27 8", "correct": true}, {"option": "27 9", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following improves performance:</p>\n\n<ol>\n\t<li>a | 4 + c &gt;&gt; b &amp; 7;</li>\n\t<li>(a | ((( 4 * c ) &gt;&gt; b ) &amp; 7 ))</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Depends on the computer system", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is used to test equality?</p>", "options": [{"option": "if", "correct": false}, {"option": "switch", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java, which of the following is a <strong>selection</strong> statement?</p>", "options": [{"option": "if()", "correct": true}, {"option": "for()", "correct": false}, {"option": "continue", "correct": false}, {"option": "break", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following loops executes its body even though its control condition is false?</p>", "options": [{"option": "do-while", "correct": true}, {"option": "while", "correct": false}, {"option": "for", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<p>\u00b4\u00b4\u00b4</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n       public static void main(String args[])\n    {\n        {\n            int a1 = 8;\n            int a2 = 9;\n            if ((a2 = 1) == a1)\n                System.out.print(a2);\n            else\n                System.out.print(++a2);\n        }\n    }\n    }\n</code></pre>\n\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "2", "correct": true}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            {\n                int x1 = 5;\n                int y1 = 5;\n                if ((y1 = 1) == x1)\n                    System.out.print(y1);\n                else\n                    System.out.print(++y1);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "True", "correct": false}, {"option": "2", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<p>\u00b4\u00b4\u00b4</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth{\n    public static void main(String args[])\n    {\n        {\n            int count = 0;\n            for (int x = 0, y = 0; x &lt; 5 &amp; y &lt; 5; ++x, y = x + 1)\n                count += x;\n            System.out.println(count);\n        }\n    }\n}\n</code></pre>\n\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            int val1 = 2;\n            int val2 = 0;\n            for ( ; val2 &lt; 10; ++val2) {\n                if (val2 % val1 == 0)\n                    continue;\n                else if (val2 == 8)\n                    break;\n                else\n                    System.out.print(val2 + \" \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "2 4 6 8", "correct": false}, {"option": "1 3 5 7", "correct": false}, {"option": "1 3 5 7 9 ", "correct": true}, {"option": "1 2 3 4 5 6 7 8 9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n      public static void main(String args[])\n      {\n          int hack = 15;\n          int hacker = 20;\n          first: {\n              second: {\n                  if (hack == hacker &gt;&gt; 1)\n                      break second;\n               }\n              System.out.println(hack);\n          }\n          System.out.println(hacker);\n          }\n  }\n</code></pre>", "options": [{"option": "15, 20", "correct": true}, {"option": "20,15", "correct": false}, {"option": "20", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to create a class?</p>", "options": [{"option": "struct", "correct": false}, {"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "class", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a valid declaration for an object of a <strong>Box</strong> class?</p>", "options": [{"option": "Box obj = new Box;", "correct": false}, {"option": "obj = new Box();", "correct": false}, {"option": "Box obj = new Box();", "correct": true}, {"option": "new Box obj;", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators is used to allocate the memory for an object?</p>", "options": [{"option": "malloc", "correct": false}, {"option": "alloc", "correct": false}, {"option": "new", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is incorrect?</p>", "options": [{"option": "Applets do not require a main() method.", "correct": false}, {"option": "Programs include only one main() method.", "correct": false}, {"option": "Classes must include a main() method.\r\n", "correct": true}, {"option": "The main() method must be made public.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Sample\n{\n\tpublic static void main(String args[])\n        {\n            int x = 10;\n            if (x == 10) {\n                int x = 8;\n                System.out.println(x);\n            }\n        }\n}\n\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "10", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>public method</strong> is correct?</p>", "options": [{"option": "It is accessible to all other classes in the hierarchy.", "correct": true}, {"option": "It is accessible only to subclasses of its parent class.", "correct": false}, {"option": "It can only be called by objects of its class.", "correct": false}, {"option": "It can be accessed by calling objects of the public class.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Cuboid {\n    int width;\n    int height;\n    int length;\n}\nclass HackerEarth {\n    public static void main(String args[])\n    {\n        Cuboid obj = new Cuboid();\n        System.out.println(obj);\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "The memory address is printed", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the datatype of a method that does not return any value?</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "void", "correct": true}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is process of defining methods in a class differentiated by their method signature?</p>", "options": [{"option": "Function overloading", "correct": true}, {"option": "Function overriding", "correct": false}, {"option": "Function doubling", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods has the same name as the containing class?</p>", "options": [{"option": "finalize", "correct": false}, {"option": "delete", "correct": false}, {"option": "class", "correct": false}, {"option": "constructor", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods can only be defined once in a Java program?</p>", "options": [{"option": "main", "correct": true}, {"option": "finalize", "correct": false}, {"option": "static", "correct": false}, {"option": "private", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following the return type of\u00a0<strong>constructors</strong>?</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "void", "correct": false}, {"option": "None of these ", "correct": true}], "level": "Easy"}, {"question": "<p>During the Java runtime, which of the following operators is used to free the memory of an object when it is no longer needed?</p>", "options": [{"option": "Delete", "correct": false}, {"option": "Free", "correct": false}, {"option": "New", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following functions is used when an object is destroyed?</p>", "options": [{"option": "delete()", "correct": false}, {"option": "finalize()", "correct": true}, {"option": "main()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, if methods within the same class have same name but different parameters declaration, what is the process called?</p>", "options": [{"option": "Method Overriding", "correct": false}, {"option": "Method Overloading", "correct": true}, {"option": "Method Hiding", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following can be <strong>overloaded</strong>?</p>", "options": [{"option": "Methods", "correct": false}, {"option": "Constructors", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following processes defines a method that calls itself in Java?</p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Recursion", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following access specifiers must be used for the <strong>main()</strong> method in Java?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Public", "correct": true}, {"option": "Protected", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to access the members of a class before an object of that class is created?</p>", "options": [{"option": "Static", "correct": true}, {"option": "Private", "correct": false}, {"option": "Public", "correct": false}, {"option": "Protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, if no <strong>access specifier</strong> is used for a member of a class, which of the following is used as a default?</p>", "options": [{"option": "private", "correct": true}, {"option": "public", "correct": false}, {"option": "public within its package", "correct": false}, {"option": "protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, arrays are implemented _______________________________.</p>", "options": [{"option": "As classes", "correct": false}, {"option": "As objects", "correct": true}, {"option": "As variables", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent the content of a variable from being modified?</p>", "options": [{"option": "static", "correct": false}, {"option": "last", "correct": false}, {"option": "constant", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following can not be declared as <strong>static</strong> in Java?</p>", "options": [{"option": "Class", "correct": false}, {"option": "Object", "correct": true}, {"option": "Variable", "correct": false}, {"option": "Method", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>static</strong> methods is correct?</p>", "options": [{"option": "Static methods can call other static methods only.", "correct": false}, {"option": "Static methods can access static data only.", "correct": false}, {"option": "Static methods can not refer to 'this' or 'super' in any way.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about variables is incorrect?</p>", "options": [{"option": "The variables declared as 'final' occupy memory.", "correct": true}, {"option": "The final variable must be initialized at the time of declaration.", "correct": false}, {"option": "The first variable must be initialized at the time of declaration.", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods should be static in Java?</p>", "options": [{"option": "main()", "correct": true}, {"option": "delete()", "correct": false}, {"option": "run()", "correct": false}, {"option": "finalize()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[]) {\n        int val[] = {1, 2, 3, 4, 5};\n\n        for (int i = 0; i &lt; val.length-3; ++i){\n            System.out.print(val[i]+\" \");\n        }\n    }\n}\n\n</code></pre>", "options": [{"option": "1 2 3 ", "correct": false}, {"option": "1 2 ", "correct": true}, {"option": "2 3 4 ", "correct": false}, {"option": "2 3 ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[])\n        {\n            int a1[] = new int[10];\n            int a2[] = {1, 2, 3, 4, 5};\n            System.out.println(a1.length + \" \" + a2.length);\n        }\n    }\n\n</code></pre>", "options": [{"option": "11 6", "correct": false}, {"option": "10 6", "correct": false}, {"option": "10 5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following best describes a string?</p>", "options": [{"option": "A class", "correct": true}, {"option": "A character array", "correct": false}, {"option": "A variable", "correct": false}, {"option": "An object", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used at a specific index to obtain a character?</p>", "options": [{"option": "char()", "correct": false}, {"option": "string At()", "correct": false}, {"option": "charat()", "correct": false}, {"option": "charAt()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to refer to the base class from a subclass?</p>", "options": [{"option": "upper", "correct": false}, {"option": "super", "correct": true}, {"option": "this", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>string</strong> class is used to test equality in strings?</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "isequals()", "correct": false}, {"option": "equals()", "correct": true}, {"option": "equal()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is not correct?</p>", "options": [{"option": "A string is a character array", "correct": true}, {"option": "Strings in java are immutable.", "correct": false}, {"option": "Every string is an object of class String.", "correct": false}, {"option": "Java defines a peer class of String, namely StringBuffer, which allows altering strings.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static void main(String args[])\n    {\n        String val = \"I LIKE programming\";\n        System.out.println(val.charAt(6));\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "p", "correct": false}, {"option": "r", "correct": false}, {"option": "E", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class string_class {\n    public static void main(String args[])\n    {\n        String obj = \"I LIKE coding\";\n        System.out.println(obj.charAt(12));\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "n", "correct": false}, {"option": "i", "correct": false}, {"option": "g", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class string_class {\n        public static void main(String args[])\n        {\n            String obj = \"I LIKE JAVA\";\n            System.out.println(obj.length());\n        }\n    }\n</code></pre>", "options": [{"option": "9", "correct": false}, {"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            {\n                String obj = \"hello\";\n                String obj1 = \"world\";\n                String obj2 = obj;\n                obj2 = \" world\";\n                System.out.println(obj + \" \" + obj2);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "hello hello", "correct": false}, {"option": "world world", "correct": false}, {"option": "hello world", "correct": true}, {"option": "world hello", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            {\n                String obj = \"hacker\";\n                String obj1 = \"earth\";\n                String obj2 = \"hello\";\n                System.out.println(obj.equals(obj1) + \" \" + obj.equals(obj2));\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "true true", "correct": false}, {"option": "false false", "correct": true}, {"option": "false  true", "correct": false}, {"option": "true false", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class StringClass {\n    public static void main(String args[])\n    {\n        String s1=\"Welcome\";\n        String s2=\"Welcome\";\n        String s3=s1;\n        System.out.println(s1.equals(s2));\n        System.out.println(s3.equals(s1));\n        System.out.println(s3.equals(s2));\n    }\n\n}\n</code></pre>", "options": [{"option": "true, true, true", "correct": true}, {"option": "false, false, true", "correct": false}, {"option": "false, true, true", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to inherit the properties of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "this", "correct": false}, {"option": "extends", "correct": false}, {"option": "implements", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, a class member declared as <strong>protected</strong> becomes a member of a subclass of ___________________________ member.</p>", "options": [{"option": "Public", "correct": false}, {"option": "Private", "correct": true}, {"option": "Protected", "correct": false}, {"option": "Static", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to inherit a class <strong>A</strong> from a class <strong>B</strong>?</p>", "options": [{"option": "class B extends A{}", "correct": true}, {"option": "class B inherits class A {}", "correct": false}, {"option": "class B + class A {}", "correct": false}, {"option": "class B extends class A {}", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used in a subclass to call the constructor of a superclass?</p>", "options": [{"option": "this", "correct": false}, {"option": "super", "correct": true}, {"option": "extend ", "correct": false}, {"option": "extends", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, _______________________________ is used to define a method in a subclass having the same <strong>name</strong> and <strong>type</strong> signature as a method in it's superclass.</p>", "options": [{"option": "Method overloading", "correct": false}, {"option": "Method overriding", "correct": true}, {"option": "Method hiding", "correct": false}, {"option": "Method abstraction", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent <strong>method overriding</strong>?</p>", "options": [{"option": "static", "correct": false}, {"option": "constant", "correct": false}, {"option": "protected", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is used by subclass <strong>B</strong> to invoke a constructor of superclass <strong>A</strong> having no parameters?</p>", "options": [{"option": "super(void);", "correct": false}, {"option": "super();", "correct": true}, {"option": "superclass.();", "correct": false}, {"option": "super.A();", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following run-time processes in Java describes\u00a0<strong>method overriding</strong>\u00a0as an example?</p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Polymorphism", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following classes is a superclass of every class in Java?</p>", "options": [{"option": "String", "correct": false}, {"option": "Object", "correct": true}, {"option": "Abstract", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of an <strong>Object</strong> class clones an object?</p>", "options": [{"option": "Objectclone()", "correct": false}, {"option": "copy()", "correct": false}, {"option": "Objectcopy()", "correct": false}, {"option": "clone()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods returns the object of type class that represents the run-time class of the object?</p>", "options": [{"option": "get()", "correct": false}, {"option": "void getclass()", "correct": false}, {"option": "Object.getClass()", "correct": true}, {"option": "class()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent <strong>inheritance</strong> of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "final", "correct": true}, {"option": "Class", "correct": false}, {"option": "constant", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is not used for a class which is declared as <strong>final</strong>?</p>", "options": [{"option": "abstract", "correct": true}, {"option": "extends ", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes depends on its subclasses for the implementation of it's methods?</p>", "options": [{"option": "Object class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class TestHack {\n    int a;\n    int b;\n\n    TestHack() {\n        a = 1;\n        b = 2;\n    }\n}\n\nclass HackerEarth {\n\n    public static void main(String args[]){\n        TestHack obj1 = new TestHack();\n        System.out.print(obj1.a);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is a superclass of the <strong>String</strong> and <strong>StringBuffer</strong> classes?</p>", "options": [{"option": "java.util", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.awt", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators is used to <strong>concatenate</strong> two or more String objects?</p>", "options": [{"option": "+=", "correct": false}, {"option": "+", "correct": true}, {"option": "&", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of a <strong>String</strong> class is used to obtain the length of it's objects?</p>", "options": [{"option": "get()", "correct": false}, {"option": "sizeof()", "correct": false}, {"option": "lengthof()", "correct": false}, {"option": "length()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of a <strong>String</strong>  class will you use to extract a single character from it's object?</p>", "options": [{"option": "char()", "correct": false}, {"option": "extract()", "correct": false}, {"option": "charAt()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following constructors is used to create an empty String object?</p>", "options": [{"option": "String(void)", "correct": false}, {"option": "String()", "correct": true}, {"option": "String(0)", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            char val[] = {'h', 'c', 'k'};\n            String var = new String(val);\n            System.out.println(var);\n        }\n    }\n</code></pre>", "options": [{"option": "c", "correct": false}, {"option": "h", "correct": false}, {"option": "k", "correct": false}, {"option": "hck", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n            char[] helloArray = { 'h', 'a', 'c', 'k', 'e', 'r', '.' };\n            String helloString = new String(helloArray);\n            System.out.println(helloString);\n        }\n    }\n</code></pre>", "options": [{"option": "hacker.", "correct": true}, {"option": "h", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "hacker", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n\n            int val[] = { 87, 88, 89, 90};\n            String a = new String(val, 0, 2);\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "WXYZ", "correct": false}, {"option": "WX", "correct": true}, {"option": "WXY", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String_demo {\n        public static void main(String args[])\n        {\n\n            int ascii[] = { 69, 66, 74, 68};\n            String s = new String(ascii,1,2);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "BK", "correct": false}, {"option": "BJ", "correct": true}, {"option": "BI", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            char val[] = {'x', 'y', 'z'};\n            String a = new String(val);\n            String b = \"wxyz\";\n            int var1 = b.length();\n            int var2 = a.length();\n            System.out.println(var1 + \" \" + var2);\n        }\n    }\n</code></pre>", "options": [{"option": "3 3", "correct": false}, {"option": "4 3", "correct": true}, {"option": "4 4", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            char chars[] = {'a', 'b', 'c'};\n            String s = new String(chars);\n            String s1 = \"abcd\";\n            int len1 = s1.length();\n            int len2 = s.length();\n            System.out.println(len1 + len2);\n        }\n    }\n</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "8", "correct": false}, {"option": "7", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used to extract more than one character at a time?</p>", "options": [{"option": "getchars()", "correct": false}, {"option": "getChars()", "correct": true}, {"option": "GetChars()", "correct": false}, {"option": "Getchars()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ______________ method is an alternative for <strong>getChars()</strong> which stores characters in an array of bytes?</p>", "options": [{"option": "GetByte()", "correct": false}, {"option": "getBytes()", "correct": true}, {"option": "giveByte()", "correct": false}, {"option": "GiveBytes()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used to obtain the length of a String object?</p>", "options": [{"option": "get()", "correct": false}, {"option": "Sizeof()", "correct": false}, {"option": "length()", "correct": true}, {"option": "lengthof()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to convert all characters in a string to a character array?</p>", "options": [{"option": "charAt()", "correct": false}, {"option": "getChars()", "correct": false}, {"option": "toCharArray()", "correct": false}, {"option": "getChars() and toCharArray()", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String c = \"I am a programmer\";\n            int start = 2;\n            int end = 9;\n            char s[]=new char[end-start];\n            c.getChars(start,end,s,0);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "am a p", "correct": false}, {"option": "m a pr", "correct": false}, {"option": "am a pr", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String a = \"programming in java\";\n            System.out.println(a.indexOf('m')+\" \"+a.indexOf('r'));\n        }\n    }\n</code></pre>", "options": [{"option": "5  1", "correct": false}, {"option": "6  1", "correct": true}, {"option": "7  2", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n            public static void main(String args[])\n            {\n                char var;\n                var = \"Hacker\".charAt(1);\n                System.out.println(var);\n            }\n       }\n</code></pre>", "options": [{"option": "H", "correct": false}, {"option": "a", "correct": true}, {"option": "c", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n            public static void main(String args[])\n            {\n                char var;\n                var = \"hackathons\".charAt(-1);\n                System.out.println(var);\n            }\n       }</code></pre>", "options": [{"option": "h", "correct": false}, {"option": "a", "correct": false}, {"option": "c", "correct": false}, {"option": "Run-time error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n\n    public static void main(String args[]){\n        char ch;\n\n        ch = \"hello\".charAt(0);\n        System.out.println(ch);\n    }\n}\n</code></pre>", "options": [{"option": "h", "correct": true}, {"option": "e", "correct": false}, {"option": "l", "correct": false}, {"option": "o", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used to compare two String objects?</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "Equals()", "correct": false}, {"option": "equals()", "correct": true}, {"option": "Isequal()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used to check if an object starts with a particular string literal?</p>", "options": [{"option": "endsWith()", "correct": false}, {"option": "Starts()", "correct": false}, {"option": "ends", "correct": false}, {"option": "startsWith()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following values is returned by the <strong>compareTo()</strong> function if the invoking string is less than the string it is compared to?</p>", "options": [{"option": "Zero", "correct": false}, {"option": "Value less than zero", "correct": true}, {"option": "Value greater than zero", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following data types is returned by the <strong>equals()</strong> method of the <strong>String</strong> class?</p>", "options": [{"option": "char", "correct": false}, {"option": "int", "correct": false}, {"option": "boolean", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String s1 = \"Programming in java\";\n            boolean x;\n            x = s1.startsWith(\"programming\");\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String c = \"Hello i love java\";\n            boolean var;\n            var = c.startsWith(\"Hello\");\n            System.out.println(var);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": true}, {"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n\n    public static void main(String args[]){\n        String c = \"Hello i love java\";\n        boolean var;\n\n        var = c.endsWith(\"Hello\");\n        System.out.println(var);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n    public static void main(String args[])\n    {\n     String var1 = \"Programming in Java\";\n     String var2 = new String(var1);\n     System.out.println((var1 == var2));\n    }\n}\n</code></pre>", "options": [{"option": "false", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>        class HackerEarth{\n        public static void main(String args[])\n        {\n            String var1 = \"Hackathons and Challenges\";\n            String var2 = new String(var1);\n            System.out.println((var1.equals(var2)));\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n            public static void main(String args[])\n            {\n              String val1 = \"Hacker\";\n                    String val2 = new String(val1);\n                    String val3 = \"HACKER\";\n                    System.out.println(val1.equals(val2) + \" \" + val2.equals(val3));\n                }\n            }\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "true false", "correct": true}, {"option": "true true", "correct": false}, {"option": "false false", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String val[] = {\"x\", \"y\", \"z\", \"x\", \"z\"};\n            for (int i = 0; i &lt; val.length; ++i)\n                for (int j = i + 1; j &lt; val.length; ++j)\n                    if(val[i].compareTo(val[j]) == 0)\n                System.out.print(val[j]);\n            }\n        }\n</code></pre>", "options": [{"option": "yz", "correct": false}, {"option": "xy", "correct": false}, {"option": "zx", "correct": false}, {"option": "xz", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the __________ method of the <strong>StringBuffer</strong> class is used to extract a substring from a String object.</p>", "options": [{"option": "Substr()", "correct": false}, {"option": "substring()", "correct": true}, {"option": "SubString()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What will the string <strong>val2</strong> contain after the following Java code is executed:</p>\n\n<pre class=\"prettyprint\"><code>    String val1 = \u201ccoding\u201d;\n    String val2 = s1.concat(\u201cchallenges\u201d);\n</code></pre>", "options": [{"option": "coding", "correct": false}, {"option": "codingchallenges", "correct": true}, {"option": "challenges", "correct": false}, {"option": "challengescoding", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the __________ method of the <strong>String</strong> class is used to remove leading and trailing whitespaces.</p>", "options": [{"option": "startsWith()", "correct": false}, {"option": "Trim()", "correct": false}, {"option": "trim()", "correct": true}, {"option": "doTrim()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n\n            String s1 = \"one\";\n            String s2 = s1 + \" two\";\n            System.out.println(s2);\n        }\n    }\n</code></pre>", "options": [{"option": "one", "correct": false}, {"option": "two ", "correct": false}, {"option": "one two", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String val1 = \"programming\";\n            String val2 = val1.replace('g','l');\n            System.out.println(val2);\n        }\n    }\n</code></pre>", "options": [{"option": "programming", "correct": false}, {"option": "prolramminl", "correct": true}, {"option": "progralling", "correct": false}, {"option": "prolramming", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String val1 = \"HackerEarth Hackathons\";\n            String val2= val1.substring(6 , 9);\n            System.out.println(val2);\n        }\n    }\n</code></pre>", "options": [{"option": "HackerEar", "correct": false}, {"option": "th Hackathons", "correct": false}, {"option": "ons", "correct": false}, {"option": "Ear", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            String var = \"Java Programming\";\n            int i = var.indexOf('o');\n            int j = var.lastIndexOf('a');\n            System.out.print(i + \" \" + j);\n\n        }\n    }\n</code></pre>", "options": [{"option": "6 9", "correct": false}, {"option": "7 10", "correct": true}, {"option": "8 11", "correct": false}, {"option": "4 7", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to create an object with a <strong>mutable character sequence</strong>?</p>", "options": [{"option": "String()", "correct": false}, {"option": "StringBuffer()", "correct": true}, {"option": "String() and StringBuffer()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the _____________ method of the class <strong>StringBuffer</strong> is used to find the length of the current character sequence.</p>", "options": [{"option": "Length()", "correct": false}, {"option": "length()", "correct": true}, {"option": "capacity()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of <strong>val</strong>\u00a0in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>StringBuffer val= new StringBuffer(\u201cProgramming\u201d);\nval.deleteCharAt(5);\n</code></pre>", "options": [{"option": "Programing", "correct": false}, {"option": "rogramming", "correct": false}, {"option": "progamming", "correct": false}, {"option": "Progrmming", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            StringBuffer c = new StringBuffer(\"Hello\");\n            c.delete(0,2);\n            System.out.println(c);\n        }\n    }\n</code></pre>", "options": [{"option": "ello", "correct": false}, {"option": "Hel", "correct": false}, {"option": "lo", "correct": false}, {"option": "llo", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            StringBuffer c = new StringBuffer(\"Hello\");\n            StringBuffer c1 = new StringBuffer(\" World\");\n            c.append(c1);\n            System.out.println(c);\n        }\n    }\n</code></pre>", "options": [{"option": "Hello", "correct": false}, {"option": " World", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": " Hello World", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of these methods of the class <strong>StringBuffer</strong> is used to reverse the sequence of characters?</p>", "options": [{"option": "reverseall()", "correct": false}, {"option": "reverse()", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            StringBuffer s1 = new StringBuffer(\"Hello\");\n            StringBuffer s2 = s1.reverse();\n            System.out.println(s2);\n        }\n    }\n</code></pre>", "options": [{"option": "olleh", "correct": false}, {"option": "olleH", "correct": true}, {"option": "oellH", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            StringBuffer c = new StringBuffer(\"Hello\");\n            System.out.println(c.length());\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "6", "correct": false}, {"option": "5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            StringBuffer val = new StringBuffer(\"Programming\");\n            val.setCharAt(5,'e');\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "Progremming", "correct": true}, {"option": "Prograeming", "correct": false}, {"option": "Progeamming", "correct": false}, {"option": "eeeeeamming", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            StringBuffer val = new StringBuffer(\"Java Programming\");\n            val.insert(7 , \"embedded\");\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "Java Pembeddedrogramming", "correct": false}, {"option": "Javembeddeda Programming", "correct": false}, {"option": "Java embedded Programming", "correct": false}, {"option": "Java Prembeddedogramming", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            StringBuffer val = new StringBuffer(\"Hello\");\n            val.deleteCharAt(1);\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "Hell", "correct": false}, {"option": "ello", "correct": false}, {"option": "Hllo", "correct": true}, {"option": "Helo", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following keywords is used to define packages in Java?</p>", "options": [{"option": "pkg", "correct": false}, {"option": "Pkg", "correct": false}, {"option": "Package", "correct": false}, {"option": "package", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following mechanisms is used to name and control the visibility of a class and its content?</p>", "options": [{"option": "Object", "correct": false}, {"option": "Packages", "correct": true}, {"option": "Interfaces", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these is used to import an entire package <strong>\u2018pkg\u2019</strong>?</p>", "options": [{"option": "Import pkg.", "correct": false}, {"option": "import pkg.", "correct": false}, {"option": "Import pkg.*", "correct": false}, {"option": "import pkg.*", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to define an interface in Java?</p>", "options": [{"option": "Interface", "correct": false}, {"option": "interface", "correct": true}, {"option": "intf", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used in a class to use an interface that is defined previously?</p>", "options": [{"option": "import", "correct": false}, {"option": "Import", "correct": false}, {"option": "implements", "correct": true}, {"option": "Implements", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the process of converting a simple data type into a class type called?</p>", "options": [{"option": "Type wrapping", "correct": true}, {"option": "Type conversion", "correct": false}, {"option": "Type casting", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a super class of the wrappers <strong>double</strong> and <strong>integer</strong>?</p>", "options": [{"option": "Long", "correct": false}, {"option": "Digits", "correct": false}, {"option": "Float", "correct": false}, {"option": "Number", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a wrapper for the simple data type <strong>float</strong>?</p>", "options": [{"option": "float", "correct": false}, {"option": "double", "correct": false}, {"option": "Float", "correct": true}, {"option": "Double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to check for an infinitely large and a small value?</p>", "options": [{"option": "isNaN()", "correct": false}, {"option": "isInfinite()", "correct": true}, {"option": "Isinfinite()", "correct": false}, {"option": "IsNaN()", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            Double d = new Double(1 / 0.);\n            boolean x = d.isNaN();\n            System.out.print(x);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "False", "correct": true}, {"option": "True", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            int num = 20;\n            System.out.print(Integer.toBinaryString(num));\n        }\n    }\n</code></pre>", "options": [{"option": "10101", "correct": false}, {"option": "10100", "correct": true}, {"option": "10110", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is a <strong>super</strong> class of the wrappers <strong>long</strong>, <strong>character</strong>, and <strong>integer</strong>?</p>", "options": [{"option": "Long", "correct": false}, {"option": "Number", "correct": true}, {"option": "Float", "correct": false}, {"option": "Digits", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these is a wrapper for the simple data type <strong>char</strong>?</p>", "options": [{"option": "Float", "correct": false}, {"option": "String", "correct": false}, {"option": "Character", "correct": true}, {"option": "Integer", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to obtain a value for invoking an object as <strong>long</strong>?</p>", "options": [{"option": "long value()", "correct": false}, {"option": "Long longvalue()", "correct": false}, {"option": "long longValue()", "correct": true}, {"option": "Long Longvalue()", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n    public static void main(String args[])\n    {\n        char a[] = {'a', '5', 'A', ' '};\n        System.out.print(Character.isDigit(a[0]) + \" \");\n        System.out.print(Character.isWhitespace(a[3]) + \" \");\n        System.out.print(Character.isUpperCase(a[2]));\n    }\n}\n</code></pre>", "options": [{"option": "false false true", "correct": false}, {"option": "true true true", "correct": false}, {"option": "false true true", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])\n        {\n            Integer a = new Integer(257);\n            byte val= a.byteValue();\n            System.out.print(val);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "256", "correct": false}, {"option": "257", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            Integer i = new Integer(257);\n            float x = i.floatValue();\n            System.out.print(x);\n        }\n    }\n</code></pre>", "options": [{"option": "257", "correct": false}, {"option": "257.0", "correct": true}, {"option": "257.00", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n        public static void main(String args[])\n        {\n            Long x = new Long(720);\n            System.out.print(x.hashCode());\n        }\n    }</code></pre>", "options": [{"option": "720.00", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "720", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the process class is used to terminate a process?</p>", "options": [{"option": "void kill()", "correct": false}, {"option": "void destroy()", "correct": true}, {"option": "void terminate()", "correct": false}, {"option": "void exit()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the standard output variable, <strong>out</strong>, is defined in ____________________________ class.</p>", "options": [{"option": "Void", "correct": false}, {"option": "Process", "correct": false}, {"option": "Runtime", "correct": false}, {"option": "System", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes contains a collection of static methods and variables?</p>", "options": [{"option": "Void", "correct": false}, {"option": "System", "correct": true}, {"option": "Runtime", "correct": false}, {"option": "Process", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[])\n            {\n                byte a[] = { 65, 66, 67, 68, 69, 70 };\n                byte b[] = { 71, 72, 73, 74, 75, 76 };\n                System.arraycopy(a , 0, b, 0, a.length);\n                System.out.print(new String(a) + \" \" + new String(b));\n            }\n        }\n</code></pre>", "options": [{"option": "ABCDEF GHIJKL", "correct": false}, {"option": "ABCDEF ABCDEF", "correct": true}, {"option": "GHIJKL ABCDEF", "correct": false}, {"option": "GHIJKL GHIJKL", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };\n            System.arraycopy(b , 0, a, 0, a.length);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n</code></pre>", "options": [{"option": "GHIJKL ABCDEF", "correct": false}, {"option": "ABCDEF ABCDEF", "correct": false}, {"option": "GHIJKL GHIJKL", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n        public static void main(String args[])\n        {\n            byte varA[] = { 71, 72, 73, 74, 75, 76 };\n            byte varB[] = { 65, 66, 67, 68, 69, 70 };\n            System.arraycopy(varA, 2, varB, 1, varA.length-3);\n            System.out.print(new String(varA) + \" \" + new String(varB));\n        }\n    }\n</code></pre>", "options": [{"option": "ABCDEF GCDEFL", "correct": false}, {"option": "ABCDEF GCDEKL", "correct": false}, {"option": "GHIJKL AIJKEF", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            byte a[] = { 65, 66, 67, 68, 69, 70 };\n            byte b[] = { 71, 72, 73, 74, 75, 76 };\n            System.arraycopy(a, 1, b, 3, 0);\n            System.out.print(new String(a) + \" \" + new String(b));\n        }\n    }\n</code></pre>", "options": [{"option": "GHIJKL ABCDEF", "correct": false}, {"option": "GCDEFL GHIJKL", "correct": false}, {"option": "ABCDEF GCDEFL", "correct": false}, {"option": "ABCDEF GHIJKL", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following is the superclass of all the other classes?</p>", "options": [{"option": "Math", "correct": false}, {"option": "Process", "correct": false}, {"option": "System", "correct": false}, {"option": "Object", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the approximate value of the double constant <strong><code>E</code></strong> defined in the <strong>Math</strong> class?</p>", "options": [{"option": "3", "correct": false}, {"option": "3.14", "correct": false}, {"option": "2.72", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is a <strong>rounding</strong> function of the <strong>Math</strong> class?</p>", "options": [{"option": "max()", "correct": false}, {"option": "abs()", "correct": true}, {"option": "min()", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes contains only <strong>floating point</strong> functions?</p>", "options": [{"option": "Math", "correct": true}, {"option": "Process", "correct": false}, {"option": "System", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to encapsulate the runtime state of an object or an interface?</p>", "options": [{"option": "Runtime", "correct": false}, {"option": "System", "correct": false}, {"option": "Object", "correct": false}, {"option": "Class", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            double x = 5.87;\n            int y = (int) Math.abs(x);\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "5.87", "correct": false}, {"option": "5", "correct": true}, {"option": "5.0", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            int x = 3.14;\n            int y = (int) Math.abs(x);\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n            public static void main(String args[]) \n            {\n               double x = 3.1;  \n                double y = 4.5;\n                double z = Math.max( x, y );\n                System.out.print(z);\n            }\n        }\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "3.1", "correct": false}, {"option": "4.5", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n            public static void main(String args[]) \n            {\n               double val1 = 7.2;  \n                double val2 = 9.3;\n                double val3 = Math.min( val1, val2 );\n                System.out.print(val3);\n            }\n        }\n</code></pre>", "options": [{"option": "7.2", "correct": true}, {"option": "9.3", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n            double val1 = 3.0;\n            double val2 = 4.0;\n            double val3 = Math.pow( val1, val2 );\n            System.out.println(val3);\n        }\n    }\n</code></pre>", "options": [{"option": "64.0", "correct": false}, {"option": "81.0", "correct": true}, {"option": "27.0", "correct": false}, {"option": "16.0", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages is used for input and output operations of a program?</p>", "options": [{"option": "java.io", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "java.util", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following entities is represented by a\u00a0<strong>File</strong> object?</p>", "options": [{"option": "A file in a disk", "correct": false}, {"option": "A directory path", "correct": false}, {"option": "A directory in a disk", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to test whether the specified element is a file or a directory?</p>", "options": [{"option": "IsFile()", "correct": false}, {"option": "Isfile()", "correct": false}, {"option": "isfile()", "correct": false}, {"option": "isFile()", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getName());\n        }\n    }\n</code></pre>", "options": [{"option": " java", "correct": false}, {"option": "java/system", "correct": false}, {"option": "system", "correct": true}, {"option": "/java/system", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getAbsolutePath());\n        }\n    }\n</code></pre>", "options": [{"option": "java", "correct": false}, {"option": "system", "correct": false}, {"option": "java/system", "correct": false}, {"option": "/java/system\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.canWrite());\n            System.out.print(\" \" + obj.canRead());\n        }\n    }\n</code></pre>", "options": [{"option": "true false", "correct": false}, {"option": "false true", "correct": false}, {"option": "false false", "correct": true}, {"option": "true true", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getParent());\n            System.out.print(\" \" + obj.isFile());\n        }\n    }\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "\\java true", "correct": false}, {"option": "false false", "correct": false}, {"option": "\\java false", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following Java streams contains the classes that operate on the <strong>character</strong> stream?</p>", "options": [{"option": "Character Stream", "correct": true}, {"option": "OutputStream", "correct": false}, {"option": "InputStream", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to write character-oriented data to a file?</p>", "options": [{"option": "FileReader", "correct": false}, {"option": "FileWriter", "correct": true}, {"option": "FileInputStream", "correct": false}, {"option": "InputStreamReader", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>FileReader</strong> class is used to read characters from a file?</p>", "options": [{"option": "scanf()", "correct": false}, {"option": "read()", "correct": true}, {"option": "get()", "correct": false}, {"option": "getInteger()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to implement the <strong>input</strong> stream that uses a <strong>character</strong> array as the source?</p>", "options": [{"option": "BufferedReader", "correct": false}, {"option": "FileReader", "correct": false}, {"option": "FileArrayReader", "correct": false}, {"option": "CharArrayReader", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to clear all the data present in the <strong>output</strong> buffers?</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": false}, {"option": "close()", "correct": false}, {"option": "fflush()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following processes is used to write the state of an object to a <strong>byte</strong> stream?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Externalization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following processes are carried out by the Java runtime system automatically?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Garbage collection", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is used to control the <strong>serialization</strong> and <strong>de-serialization</strong> processes?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Externalization", "correct": true}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following processes is used to extract the state of an object from a stream?</p>", "options": [{"option": "Serialization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "Deserialization", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectInput</strong> interface is used to deserialize an object from a stream?</p>", "options": [{"option": "int read()", "correct": false}, {"option": "void close()", "correct": false}, {"option": "Object readObject()", "correct": true}, {"option": "Object WriteObject()", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following packages contains classes and interfaces for networking?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.network", "correct": false}, {"option": "java.util", "correct": false}, {"option": "java.net", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, how many ports of <strong>TCP/IP</strong> is reserved for specific protocols?</p>", "options": [{"option": "104", "correct": false}, {"option": "1024", "correct": true}, {"option": "512", "correct": false}, {"option": "2048", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the size of the single <strong>IP</strong> address?</p>", "options": [{"option": "8 bits", "correct": false}, {"option": "16 bits", "correct": false}, {"option": "32 bits", "correct": true}, {"option": "64 bits", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a full form of <strong>DNS</strong>?</p>", "options": [{"option": "Data Network Service", "correct": false}, {"option": "Domain Name Service", "correct": true}, {"option": "Data Name Service", "correct": false}, {"option": "Domain Network Service", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to encapsulate an <strong>IP address</strong> and a <strong>DNS</strong>?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following clauses is executed even if no exceptions are found?</p>", "options": [{"option": "throws", "correct": false}, {"option": "finally", "correct": true}, {"option": "throw", "correct": false}, {"option": "catch", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following clauses is used with a single <strong>try</strong> block?</p>", "options": [{"option": "finally", "correct": false}, {"option": "catch ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following exceptions handle the <strong>divide by zero</strong> error?</p>", "options": [{"option": "MathException", "correct": false}, {"option": "ArithmeticException", "correct": true}, {"option": "IllegalAccessException", "correct": false}, {"option": "IllegalException", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following exceptions occurs if the index of a array larger than its size is accessed?</p>", "options": [{"option": "ArithmeticException", "correct": false}, {"option": "ArrayIndexOutOfBoundsException", "correct": true}, {"option": "ArrayException", "correct": false}, {"option": "ArrayIndexException", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n            public static void main(String args[])\n                {\n                try {\n                    int x = args.length;\n                    int y = 10 / x;\n                    System.out.print(x);\n                }\n                catch (ArithmeticException e) {\n                    System.out.println(\"1\");\n                }\n            }\n        }\n\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the <strong>URL</strong> stands for _____________________________________.</p>", "options": [{"option": "Uniform Resource Latch", "correct": false}, {"option": "Uniform Resource Locator", "correct": true}, {"option": "Universal Resource Locator", "correct": false}, {"option": "Universal Resource Latch", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these class is used to encapsulate an IP address and a DNS?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following standard <strong>collection</strong> classes implements a <strong>dynamic</strong> array?</p>", "options": [{"option": "ArrayList", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "AbstractList", "correct": false}, {"option": "AbstractSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to generate an array which increases and decreases the size automatically?</p>", "options": [{"option": "LinkedList()", "correct": false}, {"option": "DynamicList()", "correct": false}, {"option": "ArrayList()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>ArrayList</strong> class is used to return the present size of an object?</p>", "options": [{"option": "capacity()", "correct": false}, {"option": "index()", "correct": false}, {"option": "length()", "correct": false}, {"option": "size()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to obtain a static array from an <strong>ArrayList</strong> object?</p>", "options": [{"option": "toArray()", "correct": true}, {"option": "coverArray()", "correct": false}, {"option": "Array()", "correct": false}, {"option": "covertoArray()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>     import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            ArrayList obj = new ArrayList();\n            obj.add(\"Hacker\");\n            obj.add(1, \"D\");\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "[Hacker] ", "correct": false}, {"option": "[Hacker, D] ", "correct": true}, {"option": "[HDcker] ", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        class HackerEarth {\n            public static void main(String args[]) {\n                ArrayList he = new ArrayList();\n                he.add(\"H\");\n                he.add(0,\"A\");\n                he.add(\"C\");\n                System.out.println(he.size());\n            }\n        }\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "0 ", "correct": false}, {"option": "2 ", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            ArrayList obj = new ArrayList();\n            obj.add(\"A\");\n            obj.add(\"D\");\n            obj.ensureCapacity(3);\n            obj.trimToSize();\n            System.out.println(obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following standard collection classes implements a linked list data structure?</p>", "options": [{"option": "AbstractList", "correct": false}, {"option": "LinkedList", "correct": true}, {"option": "HashSet", "correct": false}, {"option": "AbstractSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of <strong>HashSet</strong> class is used to add elements to its object?</p>", "options": [{"option": "Add()", "correct": false}, {"option": "add()", "correct": true}, {"option": "addFirst()", "correct": false}, {"option": "insert()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>  import java.util.*;\n   class HackerEarth {\n        public static void main(String args[]) {\n            LinkedList he = new LinkedList();\n            he.add(\"W\");\n            he.add(\"Z\");\n            he.add(\"Y\");\n            he.addFirst(\"X\");\n            System.out.println(he);\n        }\n    }\n</code></pre>", "options": [{"option": "[W, Z, Y]", "correct": false}, {"option": "[X, W, Z, Y]", "correct": true}, {"option": "[W, X, Y, Z]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\n  class HackerEarth {\n        public static void main(String args[]) {\n            LinkedList val = new LinkedList();\n            val.add(\"H\");\n            val.add(\"A\");\n            val.add(\"C\");\n\t\t\tval.add(\"K\");\n            val.removeFirst();\n            val.removeLast();\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "A", "correct": false}, {"option": "[A,C]", "correct": true}, {"option": "[K]", "correct": false}, {"option": "AC", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Output {\n        public static void main(String args[]) {\n            HashSet obj = new HashSet();\n            obj.add(\"A\");\n            obj.add(\"B\");\n            System.out.println(obj + \" \" + obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "AB  2", "correct": false}, {"option": "[A, B] 2", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass HackerEarth \n{\n      public static void main(String args[]) {\n      TreeSet obj = new TreeSet();\n      obj.add(\"13\");\n      obj.add(\"19\");\n      obj.add(\"11\");\n      obj.add(\"14\");\n      obj.add(\"18\");\n      System.out.println(obj);\n            }\n        }\n</code></pre>", "options": [{"option": "[11, 13, 14, 18, 19]", "correct": true}, {"option": "[13, 14, 11, 18, 19]", "correct": false}, {"option": "[19, 18, 14, 13, 11]", "correct": false}, {"option": "[11, 13, 15, 18, 19]", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following objects is used to store keys and their respective values?</p>", "options": [{"option": "Hash table", "correct": false}, {"option": "Array", "correct": false}, {"option": "Map", "correct": true}, {"option": "String", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes provides an implementation of the map interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashMap", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>Map</strong> class is used to obtain the value mapped to the specified key in the map?</p>", "options": [{"option": "search()", "correct": false}, {"option": "get()", "correct": true}, {"option": "set()", "correct": false}, {"option": "get () and set()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth{\n        public static void main(String args[]) {\n            HashMap hm = new HashMap();\n            hm.put(\"X\", new Integer(5));\n            hm.put(\"Y\", new Integer(6));\n            hm.put(\"Z\", new Integer(7));\n            System.out.println(hm);\n        }\n    }\n</code></pre>", "options": [{"option": "{X-1, Y-1, Z-1}", "correct": false}, {"option": "{X, Y, Z}", "correct": false}, {"option": "{X=5, Y=6, Z=7}", "correct": true}, {"option": "{X 1, Y 1, Z 1}", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            HashMap obj = new HashMap();\n            obj.put(\"X\", new Integer(3));\n            obj.put(\"Z\", new Integer(2));\n            obj.put(\"Y\", new Integer(1));\n            System.out.println(obj.keySet());\n        }\n    }\n</code></pre>", "options": [{"option": "{Y, Z, X}", "correct": false}, {"option": "{3, 2, 1}", "correct": false}, {"option": "[X, Y, Z]", "correct": true}, {"option": "[1, 2, 3]", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            HashMap hm = new HashMap();\n            hm.put(\"A\", new Integer(1));\n            hm.put(\"B\", new Integer(2));\n            hm.put(\"C\", new Integer(3));\n            System.out.println(hm.get(\"C\"));\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "Null", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            TreeMap tm = new TreeMap();\n            tm.put(\"X\", new Integer(1));\n            tm.put(\"Z\", new Integer(2));\n            tm.put(\"Y\", new Integer(3));\n            System.out.println(tm.entrySet());\n        }\n    }\n</code></pre>", "options": [{"option": "[X=1, Y=3, Z=2]", "correct": true}, {"option": "[1, 2, 3]", "correct": false}, {"option": "{A=1, B=2, C=3}", "correct": false}, {"option": "[X, Z, Y]", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a return type?</p>", "options": [{"option": "Boolean", "correct": false}, {"option": "Void", "correct": false}, {"option": "Button", "correct": false}, {"option": "Public", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>      String str = new String(\"Hacker\");\n      char fourthChar = str.charAt(6);\n</code></pre>", "options": [{"option": "\u2018r\u2019", "correct": false}, {"option": "\u2018e\u2019", "correct": false}, {"option": "throws StringIndexOutofBoundsException", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, if <strong><code>result = 10\u00a0+ 3 * 5</code></strong>, what is the value and type of the <strong>\u2018result\u2019</strong> variable respectively?</p>", "options": [{"option": "17 and byte", "correct": false}, {"option": "25 and byte", "correct": false}, {"option": "17 and int", "correct": false}, {"option": "25 and int", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the two parts of a value of type <strong>double</strong>?</p>", "options": [{"option": "Significant Digits and Exponent", "correct": true}, {"option": "Length and Denominator", "correct": false}, {"option": "Mode and Numerator", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following features holds true for the <strong>wrapper</strong> classes ?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Immutable", "correct": false}, {"option": "Final", "correct": false}, {"option": "Immutable and Final", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the data type for the number <strong>7.6856</strong>?</p>", "options": [{"option": "double", "correct": true}, {"option": "float", "correct": false}, {"option": "long", "correct": false}, {"option": "int", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of v<code>al1</code>\u00a0when the following Java code is executed:</p>\n\n<pre class=\"prettyprint\"><code>int val1 = 0;\nint val2 = 13;\n while (val1 &lt; val2)\n  {\n    val1 = val1 + 1;\n  }\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "12", "correct": false}, {"option": "13", "correct": true}, {"option": "21", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following Java statements is used to assign the value 5873.76 to the variable interest, if the value and the variable are both declared to be of type <strong>float</strong>?</p>", "options": [{"option": "interest = 5873.76f", "correct": true}, {"option": "interest = (Float)5873.76", "correct": false}, {"option": "interest = 5873.76 (float)", "correct": false}, {"option": "interest = 5873.76", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "The 'HashTable' is a sub class of the 'Dictionary'", "correct": true}, {"option": "The 'ArrayList' is a sub class of the 'Vector'", "correct": false}, {"option": "The 'LinkedList' is a sub class of the 'ArrayList'", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is synchronized?</p>", "options": [{"option": "Set", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "Vector", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the public abstract classes is correct?</p>", "options": [{"option": "AbstractSet extends AbstractCollection", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": false}, {"option": "HashSet extends AbstractSet", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, if a class implements the <strong>Runnable</strong> interface, which of the following methods is called?</p>", "options": [{"option": "start()", "correct": false}, {"option": "run()", "correct": true}, {"option": "wait()", "correct": false}, {"option": "notify() and notifyAll()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a method of the <strong>Thread</strong> class?</p>", "options": [{"option": "public void run()", "correct": false}, {"option": "public void start()", "correct": false}, {"option": "public void exit()", "correct": true}, {"option": "public final int getPriority()", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is used to execute the <strong>threads</strong> one after the other?</p>", "options": [{"option": "The keyword synchronizable", "correct": false}, {"option": "The keyword synchronized", "correct": true}, {"option": "The keyword synchronize", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the use of the object of the <strong>DataInputStream</strong>\u00a0class?</p>", "options": [{"option": "Convert the binary stream into a character stream", "correct": true}, {"option": "Convert the character stream into a binary stream", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following companies developed the Java?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Oracle", "correct": false}, {"option": "Sun", "correct": true}, {"option": "Google", "correct": false}], "level": "Easy"}, {"question": "<p>What is the extension of a Java program?</p>", "options": [{"option": ".doc", "correct": false}, {"option": ".java", "correct": true}, {"option": ".class", "correct": false}, {"option": ".txt", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JRE</strong>?</p>", "options": [{"option": "Java Runtime Environment", "correct": true}, {"option": "Java Runtime Exception", "correct": false}, {"option": "Java Runtime Execution", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JDK</strong>?</p>", "options": [{"option": "Java Deployment Kit", "correct": false}, {"option": "Java Demo Kit", "correct": false}, {"option": "Java Development Kit", "correct": true}, {"option": "Java Distributed Kit", "correct": false}], "level": "Easy"}, {"question": "<p>A Java program is firstly ___________ and then it is ___________.</p>\n<p>1.Compiled</p>\n<p>2.Interpreted</p>\n<p>3.Assembled</p>\n<p>4.Debuged</p>", "options": [{"option": "2 and 1", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following <strong>application</strong> programs is mandatory to run a Java program?</p>", "options": [{"option": "sdk", "correct": false}, {"option": "dbk", "correct": false}, {"option": "jdk", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following operations is required to convert the Java source code into the executable form?</p>", "options": [{"option": "Compilation", "correct": false}, {"option": "Interpretation", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The Java program was originally called ____________________.</p>", "options": [{"option": "Java", "correct": false}, {"option": "Apple", "correct": false}, {"option": "Oak", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following statement in Java:</p>\n<pre class=\"prettyprint\"><code>111 % 13\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "4", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the return type\u00a0of a <strong>main( )</strong> method?</p>", "options": [{"option": "string", "correct": false}, {"option": "integer", "correct": false}, {"option": "byte", "correct": false}, {"option": "void", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the argument type of a <strong>main( )</strong> method in a program is  a _________________.</p>", "options": [{"option": "Byte array", "correct": false}, {"option": "Integer array", "correct": false}, {"option": "Float array", "correct": false}, {"option": "String array", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>dot</strong> operator is correct?</p>", "options": [{"option": "It is used to call an object's methods.", "correct": false}, {"option": "It is used to store values in the instance variables of an object.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>finalization</strong> process is true?</p>", "options": [{"option": "A class has only one finalize method.", "correct": true}, {"option": "A class has multiple finalize methods.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the <strong>keywords</strong> in Java?</p>", "options": [{"option": "extends", "correct": false}, {"option": "synchronized", "correct": false}, {"option": "friend", "correct": false}, {"option": "extends and synchronized", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, an interface contains ______________ methods.</p>", "options": [{"option": "Non-abstract", "correct": false}, {"option": "Implemented", "correct": false}, {"option": "Unimplemented", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following interfaces is defined by the <strong><code>java.lang</code></strong> package?</p>", "options": [{"option": "Cloneable", "correct": false}, {"option": "Comparable", "correct": false}, {"option": "Runnable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following is the highest class in the <strong>event-delegation</strong> model?</p>", "options": [{"option": "java.awt.AWTEvent", "correct": false}, {"option": "java.util.EventListener", "correct": false}, {"option": "java.awt.event.AWTEvent", "correct": false}, {"option": "java.util.EventObject", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following objects is passed as an argument to the <strong>paint()</strong> method?</p>", "options": [{"option": "A Graphics object", "correct": true}, {"option": "A Canvas object", "correct": false}, {"option": "A paint object", "correct": false}, {"option": "An Image object", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is correct?</p>", "options": [{"option": "The 'Void' class extends the 'Class' class.", "correct": false}, {"option": "The 'Float' class extends the 'Double' class.", "correct": false}, {"option": "The 'System' class extends the 'Runtime' class.", "correct": false}, {"option": "The 'Integer' class extends the 'Number' class.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following tags is mandatory to create an <strong>HTML</strong> program that displays an <strong>applet</strong>?</p>", "options": [{"option": "code and name", "correct": false}, {"option": "name, height, and width", "correct": false}, {"option": "code, height, and width", "correct": true}, {"option": "height, width, and codebase", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the ________ method is used to clear the buffer.</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": true}, {"option": "clean()", "correct": false}, {"option": "gc()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages contain the <strong>thread</strong> class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.awt", "correct": false}, {"option": "java.util", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following activates the default thread available in a program?</p>", "options": [{"option": "System class", "correct": false}, {"option": "Main method", "correct": true}, {"option": "Static keyword", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to revive a <strong>suspended</strong> thread?</p>", "options": [{"option": "start()", "correct": false}, {"option": "suspend()", "correct": false}, {"option": "resume()", "correct": true}, {"option": "yield()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following best describes\u00a0<strong>Runnable</strong>?</p>", "options": [{"option": "A class", "correct": false}, {"option": "A method", "correct": false}, {"option": "A variable", "correct": false}, {"option": "An interface", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following conditions causes the <strong>runtime</strong> error?</p>", "options": [{"option": "Error", "correct": false}, {"option": "Exception", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages contains the <strong>drawString()</strong> method?</p>", "options": [{"option": "java.applet", "correct": false}, {"option": "java.io", "correct": false}, {"option": "javax.swing", "correct": false}, {"option": "java.awt", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, if an applet is dead, which of the following methods does it automatically invoke\u00a0when the browser is closed?</p>", "options": [{"option": "paint()", "correct": false}, {"option": "stop()", "correct": false}, {"option": "destroy()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, an executable applet is the _________ file of the applet.</p>", "options": [{"option": ".java", "correct": false}, {"option": ".class", "correct": true}, {"option": ".html", "correct": false}, {"option": ".applet", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following applet tags is used to accept the user defined parameter?</p>", "options": [{"option": "center", "correct": false}, {"option": "applet", "correct": false}, {"option": "param", "correct": true}, {"option": "body", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is firstly called by the browser in an applet?</p>", "options": [{"option": "start()", "correct": false}, {"option": "init()", "correct": true}, {"option": "stop()", "correct": false}, {"option": "destroy()", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java, which of the following is not a\u00a0<strong>SOAP</strong> client and server?</p>", "options": [{"option": "Apache CXF", "correct": false}, {"option": "Apache Axis", "correct": false}, {"option": "Apache Axis2", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is the possible pivot-handler in the Java web service?</p>", "options": [{"option": "java:WSDL, java:UDDI", "correct": false}, {"option": "java:eb-xml, java:SOAP", "correct": false}, {"option": "java:RPC, java:EJB", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following standard collection classes implements all the standard functions of a linked list data structure?</p>", "options": [{"option": "Array", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "HashSet", "correct": false}, {"option": "AbstractSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes implements the <strong>Set</strong> interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashSet", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "DynamicList", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of an <strong>Array</strong> class is used to sort an array?</p>", "options": [{"option": "binarysort()", "correct": false}, {"option": "sort()", "correct": true}, {"option": "insert()", "correct": false}, {"option": "bubblesort()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Arraylist {\n        public static void main(String args[]) {\n            ArrayList obj1 = new ArrayList();\n            ArrayList obj2 = new ArrayList();\n            obj1.add(\"A\");\n            obj1.add(\"B\");\n            obj2.add(\"A\");\n            obj2.add(1, \"B\");\n            System.out.println(obj1.equals(obj2));\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "true", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>     import java.util.*;\n        class HackerEarth {\n            public static void main(String args[]) {\n                ArrayList var1 = new ArrayList();\n                ArrayList var2 = new ArrayList();\n                var1.add(\"A\");\n                var2.add(0,\"A\");\n                System.out.println(var1.equals(var2));\n            }\n        }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass HackerEarth{\n    public static void main(String args[])\n        {\n          Integer a=0;\n          Integer b=0;\n          for(Short c=0;c&lt;6;c++)\n          if((++a&gt;4)|| (++b&gt;4))\n          a++;\n          System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "7", "correct": false}, {"option": "8", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth {\n\n    public static void main(String args[]) {\n        int arr[] = new int [10];\n        for (int i = 7; i &gt; 0; i--)\n            arr[7-i] = i;\n\n        Arrays.sort(arr);\n\n        for (int i = 0; i &lt; 5; ++i)\n            System.out.print(arr[i]+\" \");\n    }\n}\n\n</code></pre>", "options": [{"option": "0 0 0 1 2", "correct": true}, {"option": "0 1 2 3 4", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Array {\n        public static void main(String args[]) {\n            int array[] = new int [6];\n            for (int i = 6; i &gt; 0; i--)\n                array[6-i] = i;\n            Arrays.fill(array, 1, 4, 5);\n            for (int i = 0; i &lt; 6 ; i++)\n                System.out.print(array[i]);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655521", "correct": true}, {"option": "555521", "correct": false}, {"option": "655551", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n            class Array {\n                public static void main(String args[]) {\n                    int array[] = new int [5];\n                    for (int i = 6; i &gt; 0; i--)\n                        array[6-i] = i;\n                    Arrays.fill(array, 1, 4, 5);\n                    for (int i = 0; i &lt; 6 ; i++)\n                        System.out.print(array[i]);\n                }\n            }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655551", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "655521", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            int arr[] = new int [5];\n            for (int i = 5; i &gt; 0; i--)\n                arr[5 - i] = i;\n            Arrays.sort(arr);\n            System.out.print(Arrays.binarySearch(arr, 2));\n        }\n    }\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "4", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following class objects is used to form a <strong>dynamic</strong> array?</p>", "options": [{"option": "ArrayList", "correct": true}, {"option": "Map", "correct": false}, {"option": "Vector", "correct": false}, {"option": "ArrayList and Map", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>legacy</strong> class?</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Vector", "correct": false}, {"option": "Hashtable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following data members of the <strong>Vector</strong> class is used to store the number of elements in a vector?</p>", "options": [{"option": "length", "correct": false}, {"option": "elements", "correct": false}, {"option": "elementCount", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   import java.util.*;\n    class HackerEarth {\n        public static void main(String args[]) {\n            Vector he = new Vector(4,2);\n            he.addElement(new Integer(7));\n            he.addElement(new Integer(8));\n            he.addElement(new Integer(9));\n            System.out.println(he.elementAt(3));\n        }\n    }\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "2", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass X863 {\n\n    public static void main(String args[]) {\n\n        Vector obj = new Vector(4,2);\n        obj.addElement(new Integer(3));\n        obj.addElement(new Integer(2));\n        obj.addElement(new Integer(5));\n        System.out.println(obj.elementAt(0));\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to allocate memory to an object?</p>", "options": [{"option": "new", "correct": false}, {"option": "new()", "correct": true}, {"option": "allocate()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack\n    {\n        void output()\n        {\n            System.out.println(\"Done\");\n        }\n    }\n     class HackerEarth {\n        public static void main(String[] args) {\n            TestHack t=new TestHack();\n            t.output();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done ", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class TestHack{\n\n    void output(){\n        System.out.println(\"Done\");\n    }\n}\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        TestHack obj \n        obj.output();\n    }\n}\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n\n    public static void main(String args[]){\n        final int val=100;\n        int val=30;\n        System.out.println(val);\n    }\n}\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "30", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class Hack1 {\n        int i = 20;\n    }\n  class Hack2 {\n        public static void main(String args[]) {\n            final Hack1 t1 = new Hack1();\n            t1.i = 30;\n            System.out.println(t1.i);\n        }\n    }\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "30", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            int var1 = -4;\n            System.out.println(var1&gt;&gt;2);\n            int var2 = 4;\n            System.out.println(var2&gt;&gt;1);\n        }\n    }\n</code></pre>", "options": [{"option": "-1 \r\n1", "correct": false}, {"option": "-1\r\n2", "correct": true}, {"option": "-2\r\n2", "correct": false}, {"option": "1\r\n1 ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n    public static void main(String args[])  {\n        int val = -1;\n        System.out.println(val&gt;&gt;&gt;29);    \n    }\n}\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}, {"option": "16", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            int val = -1;\n            System.out.println(val&gt;&gt;&gt;30);\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "7", "correct": false}, {"option": "3", "correct": true}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[])  {\n            int val = -5;\n            System.out.println(val&gt;&gt;&gt;31);\n        }\n    }\n</code></pre>", "options": [{"option": "7", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            Integer x = 1000, y = 1000;\n            if (x == y)\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not Same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same ", "correct": false}, {"option": "Not Same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    \n    public static void main(String args[]) {\n        Integer val1 = 50, val2 = 50;\n        if (val1 == val2)\n            System.out.println(\"Same\");\n        else\n            System.out.println(\"Not Same\");\n    }\n}</code></pre>", "options": [{"option": "Same", "correct": true}, {"option": "Not Same", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main (String[] args)\n        {\n            int set1[] = {30, 40, 50};\n            int set2[] = {30, 40, 50};\n            if (set1.equals(set2))\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same ", "correct": false}, {"option": "Not same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays;\n\nclass HackerEarth{\n\n    public static void main (String[] args){\n        int array1[] = {5, 6, 7};\n        int array2[] = {5, 6, 7};\n\n        if (Arrays.equals(array1, array2))\n            System.out.println(\"Same\");\n        else\n            System.out.println(\"Not Same\");\n    }\n}\n</code></pre>", "options": [{"option": "Same", "correct": true}, {"option": "Not Same", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.Arrays;\n    class HackerEarth\n    {\n        public static void main (String[] args)\n        {\n            int array1[] = {50,75,100};\n            int array2[] = {50,75,100};\n            Object[] arr1 = {array1};\n            Object[] arr2 = {array2};\n            if (Arrays.deepEquals(arr1, arr2))\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same", "correct": true}, {"option": "Not same", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Arrays;\n\nclass HackerEarth{\n\n    public static void main (String[] args){\n        int val1[] = {30,45,73};\n        int val2[] = {30,45,73};\n        Object[] arr1 = {val1};\n        Object[] arr2 = {val2};\n\n        if (Arrays.equals(arr1, arr2))\n            System.out.println(\"Same\");\n        else\n            System.out.println(\"Not Same\");\n    }\n}\n</code></pre>", "options": [{"option": "Same", "correct": false}, {"option": "Not Same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n\n    public static void main(String args[]){\n        final int set1[] = {1, 2, 3, 4, 5};\n        int set2[] = {10, 20, 30, 40, 50};\n        set2 = set1;\n        for (int i = 0; i &lt; set2.length; i++)\n            System.out.print(set2[i] + \"  \");\n    }\n}\n</code></pre>", "options": [{"option": "10 20 30 40 50 ", "correct": false}, {"option": "1 2 3 4 5 ", "correct": true}, {"option": "10 1 20 2 30 3 40 4 50 5 ", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        static int count = 0;\n\n        HackerEarth() {\n            count++;\n        }\n        public static void main(String arr[]) {\n            HackerEarth h1 = new HackerEarth();\n            HackerEarth h2 = new HackerEarth();\n            HackerEarth h3 = new HackerEarth();\n            System.out.println(\"Total \" + count + \" objects created\");\n        }\n    }\n</code></pre>", "options": [{"option": "Total 1 objects created", "correct": false}, {"option": "Total 2 objects created", "correct": false}, {"option": " Total 3 objects created", "correct": true}, {"option": "Total 0 objects created", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]) {\n            System.out.println(func());\n        }\n        int func() {\n            return 20;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "20", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]) {\n            System.out.println(foo());\n        }\n        static int foo() {\n            return 20;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "20", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class func1\n    {\n        static int a = 10;\n    }\n    class func2 extends func1\n    {\n        public static void fun()\n        {\n            System.out.println(super.a);\n        }\n    }\n\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            System.out.println(output());\n        }\n        static int output()  {\n            int var= 10;\n            return var--;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "10", "correct": true}, {"option": "9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            System.out.println(addVal());\n        }\n        static int addVal()  {\n            static int var= 10;\n            return var--;\n        }\n    }\n</code></pre>", "options": [{"option": "Run-time error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "10", "correct": false}, {"option": "9", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        static int i;\n        int j;\n        static {\n            i = 20;\n        }\n    }\n    class Main {\n        public static void main(String args[]) {\n            System.out.println(HackerEarth.i);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "20", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   class TestHack {\n        static {\n            int i = 10;\n            System.out.println(\"Java\");\n        }\n        TestHack(){\n            System.out.println(\"Programming\");\n        }}\n        class HackerEarth {\n            public static void main(String args[]) {\n                TestHack t1 = new TestHack();\n            }\n        }\n</code></pre>", "options": [{"option": "Java\r\nProgramming", "correct": true}, {"option": "Java", "correct": false}, {"option": "Programming", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   class HackerEarth {\n        public static void func() {\n            System.out.println(\"Call A \");\n        }\n        public static void func(int a) {\n            System.out.println(\"Call B\");\n        }\n        public static void main(String args[])\n        {\n            HackerEarth.func();\n        }\n    }\n</code></pre>", "options": [{"option": "Call A ", "correct": true}, {"option": "Call A  Call B", "correct": false}, {"option": "Call B", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   class TestHack {\n        public static void show() {\n            System.out.println(\"Call A \");\n        }\n        public static void show(int var) {\n            System.out.println(\"Call B\");\n        }\n        public static void main(String args[])\n        {\n            TestHack.show();\n            TestHack.show(1);\n        }\n    }\n</code></pre>", "options": [{"option": "Call A  ", "correct": false}, {"option": "Call B", "correct": false}, {"option": "Call A \r\nCall B", "correct": true}, {"option": "Call B\r\nCall A", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    final class Base { }\n    class Derived extends Base {\n        System.out.println(\"C\");\n    }\n    public class Main {\n        public static void main(String args[]) {\n            Base b=new Base();\n\n        }\n    }\n</code></pre>", "options": [{"option": "C", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "A final variable can only be assigned once.", "correct": false}, {"option": " A final class cannot be inherited.", "correct": false}, {"option": "A final method cannot be overridden by sub-classes.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        private static int var;\n        public static void main(String args[]) {\n            System.out.println(output());\n        }\n        static int output() {\n            return ++var;\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            System.out.println(output());\n        }\n        static int output() {\n            static int y= 0;\n            return ++y;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}, {"option": "1", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun() {\n            return 30;\n        }\n    }\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "30", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack {\n        public static void main(String[] args) {\n            for(int i = 0; true; i++) {\n                System.out.println(\"Hackerearth\");\n                break;\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hackerearth", "correct": true}, {"option": "Garbage value ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String[] args) {\n            for(int x = 0; 1; x++) {\n                System.out.println(\"Hack\");\n                break;\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}, {"option": "Hack", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack {\n        public int x, y;\n    }\n    class HackerEarth {\n        public static void main(String args[]) {\n            TestHack obj = new TestHack();\n            System.out.println(obj.x + \" \" + obj.y);\n        }\n    }\n</code></pre>", "options": [{"option": "Garbage values", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "0   0", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        int val  = 10;\n        public static void main(String[] args) {\n            HackerEarth obj = new HackerEarth();\n            System.out.println(obj.val);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "10", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack {\n        int b = 0;\n        int a  = b+2;\n        public static void main(String[] args) {\n            TestHack obj= new TestHack();\n            System.out.println(\"a = \" + obj.a + \", b = \" + obj.b);\n        }\n    }\n</code></pre>", "options": [{"option": "a = 0, b = 0", "correct": false}, {"option": "a = 2, b = 0", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        int a =2;\n        HackerEarth(int i) { a = i; }\n        public static void main(String[] args) {\n            HackerEarth obj = new HackerEarth(3);\n            System.out.println(\"a = \" + obj.a);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack1 {\n        TestHack1(int x) {\n            System.out.println(x);\n        }\n    }\n    class TestHack2 {\n        TestHack1 obj1 = new TestHack1(1);\n        TestHack2(int i) { obj1 = new TestHack1(i); }\n        public static void main(String[] args) {\n            TestHack2 obj2 = new TestHack2(-3);\n        }\n    }\n</code></pre>", "options": [{"option": "1   ", "correct": false}, {"option": "-3", "correct": false}, {"option": "1 \r\n-3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class method1 {\n    void output() {}}\n    class method2 extends method1 {\n        void output() {\n            System.out.println(\"Done\");\n        }}\n      class HackerEarth {\n            public static void main(String args[]) {\n                method2 d = new method2();\n                d.output();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Done", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class func1 {\n    protected void output() {}}\n    class func2 extends func1 {\n        void output() {\n            System.out.println(\"Done\");\n        }}\n        class Main {\n            public static void main(String args[]) {\n                func2 d = new func2();\n                d.output();\n            }\n        }\n</code></pre>", "options": [{"option": "Run-time error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    void foo() {}}\n    class Derived extends Base {\n        public void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        protected void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done ", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            int x;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            System.out.println(12  +  18+ \"H\");\n        }\n    }\n</code></pre>", "options": [{"option": "1020H", "correct": false}, {"option": "30 H", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            System.out.println(\"E\"+50 +60);\n        }\n    }\n</code></pre>", "options": [{"option": "E110", "correct": false}, {"option": "E5060", "correct": true}, {"option": "E50", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            System.out.println(\"H\"+10*20);\n        }\n    }\n</code></pre>", "options": [{"option": "H10", "correct": false}, {"option": "H200", "correct": true}, {"option": "H20", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])  {\n            System.out.println(10*20+\"H\");\n        }\n    }\n</code></pre>", "options": [{"option": "1020H", "correct": false}, {"option": "20H", "correct": false}, {"option": "200H", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not an <strong>operator</strong>?</p>", "options": [{"option": "instanceof", "correct": false}, {"option": "new", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class Hack{}\n    class HackerEarth extends Hack{\n        public static void main(String args[]){\n            Hack a = new HackerEarth();\n            System.out.println(a instanceof HackerEarth);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, a value of type <strong>double</strong> consists of which of the following:</p>\n<pre class=\"prettyprint\"><code> 1. significant digits\n 2. length \n 3. exponent\n</code></pre>", "options": [{"option": "1  and  2", "correct": false}, {"option": "2  and 3", "correct": false}, {"option": "1  and 3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        public static void main(String args[]){\n            String s;\n            int a;\n            s = \"Foolish boy.\";\n            a = s.indexOf(\"fool\");\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "-1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String args[]){\n            String s;\n            int val;\n            s = \"Foolish boy.\";\n            val = s.indexOf(\"Fool\");\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": true}, {"option": "-1", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is an <strong>infinite</strong> loop?</p>", "options": [{"option": "A loop that will never function ", "correct": false}, {"option": "A loop that functions for a fixed period of time", "correct": false}, {"option": "A loop that runs forever ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>String s = \"hacker\";\nint i = s.length();\nSystem.out.println(i);\n\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "7", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String args[]){\n            int val = -1;\n            int n = 0;\n            while (val &lt; n)\n            {\n                val = val + 1;\n            }\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "-1", "correct": false}, {"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is <strong>arr</strong> in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    double arr[];\n</code></pre>", "options": [{"option": "arr is a variable that refers to a real number", "correct": false}, {"option": "arr is a variable that refers to two numbers", "correct": false}, {"option": "It is not a legal statement in Java", "correct": false}, {"option": "arr is a variable that refers to an array", "correct": true}], "level": "Easy"}, {"question": "<p>What is the data type of <strong>h</strong> for the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>h.setDouble(8.0*32.2+1.0);\n</code></pre>", "options": [{"option": "TextField ", "correct": false}, {"option": "DoubleField ", "correct": true}, {"option": "Intfield", "correct": false}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following data types can be used to store <code>3.141519</code>?</p>", "options": [{"option": "int", "correct": false}, {"option": "double", "correct": true}, {"option": "real ", "correct": false}, {"option": "String", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, a function is _________________________________.</p>", "options": [{"option": "Used to store values", "correct": false}, {"option": "An entity that receives the inputs and outputs ", "correct": true}, {"option": "A sequence of characters enclosed within quotes ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, int is a type of ___________________ data type.</p>", "options": [{"option": "Signed", "correct": true}, {"option": "Unsigned", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how many\u00a0<strong>primitive</strong>\u00a0data types are there?</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": false}, {"option": "7", "correct": false}, {"option": "8", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]){\n            byte y;\n            int a = 25;\n            y = (byte) a;\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "1101", "correct": false}, {"option": "25", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]){\n            int x = 25;\n            double y = 225.50;\n            x = (int) y;\n            System.out.print(x);\n        }\n    }\n</code></pre>", "options": [{"option": "225.00", "correct": false}, {"option": "225", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String[] args){\n            int x = 0b11011;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "26", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "27", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is a <strong>reference</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "double ", "correct": false}, {"option": "short", "correct": false}, {"option": "array", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the default value of\u00a0<strong>boolean</strong>\u00a0data type?</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ________________ data type value is returned by all <strong>transcendental</strong> math functions.</p>", "options": [{"option": "int ", "correct": false}, {"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, an expression involving byte, int, and literal numbers is promoted to the_________________ data type.</p>", "options": [{"option": "float", "correct": false}, {"option": "int ", "correct": true}, {"option": "double", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the default value of the\u00a0<strong>double\u00a0</strong>data type?</p>", "options": [{"option": "0.0", "correct": false}, {"option": "0", "correct": false}, {"option": "null", "correct": false}, {"option": "0.0d", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the smallest form of the <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": true}, {"option": "long", "correct": false}, {"option": "short", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a <strong>primitive</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "enum", "correct": true}, {"option": "short", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the __________________ data type is an extension of the <strong>float</strong> data type.</p>", "options": [{"option": "byte", "correct": false}, {"option": "double", "correct": false}, {"option": "long", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the <strong>byte</strong> data type uses __________________ bytes.</p>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ________________ data type can store a 64-bit value.</p>", "options": [{"option": "double ", "correct": true}, {"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>mutable</strong> wrapper class?</p>", "options": [{"option": "Integer", "correct": true}, {"option": "Boolean", "correct": false}, {"option": "Character", "correct": false}, {"option": "BigInteger", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, <strong>valueof(String)</strong> returns a ___________________ value.</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>marker</strong> interface?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Cloneable", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is invoked when a thread enters the\u00a0waiting state?</p>", "options": [{"option": "Sleep() ", "correct": false}, {"option": "Suspend() ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is associated with <strong>function overloading</strong>?</p>", "options": [{"option": "Methods with different names and different parameters", "correct": false}, {"option": "Methods with the same name but different parameters", "correct": true}, {"option": "Methods with the same name but different return types", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[] ){\n            System.out.println(010|2);\n        }\n    }\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "10", "correct": true}, {"option": "12", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, __________________ is not a keyword.</p>", "options": [{"option": "double", "correct": false}, {"option": "switch", "correct": false}, {"option": "then", "correct": true}, {"option": "instanceof", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements will compile successfully?</p>", "options": [{"option": "char c = 7c;", "correct": false}, {"option": "short myshort = 100S;", "correct": false}, {"option": "String s='hi'", "correct": false}, {"option": "int  x = 015; ", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following causes a <strong>thread</strong> to stop executing?</p>", "options": [{"option": "The program exits via a call to System.exit(0).", "correct": false}, {"option": "Another thread is given a higher priority.", "correct": false}, {"option": "A call to the thread's stop method is made.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, what is the result of the following expression:</p>\n<pre class=\"prettyprint\"><code>6 - 2 + 10 % 4 + 7\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "8", "correct": false}, {"option": "6", "correct": false}, {"option": "13", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators has the highest precedence?</p>", "options": [{"option": "( )", "correct": false}, {"option": "{ }", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these is in the\u00a0descending order of precedence for the following operators?</p>", "options": [{"option": "&&, /, |,{}", "correct": false}, {"option": "%, <=, &&, =", "correct": true}, {"option": "<, !, ==, ++", "correct": false}, {"option": "+, -, [], !=", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[] ){\n            int a = 0, b = 0 , c = 0 ;\n            a = (++a + b-- ) * c++;\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "0", "correct": true}, {"option": "8", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[] )\n        {\n            int ++val = 100 ;\n            System.out.println( ++val ) ;\n        }\n    }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "101", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]){\n            int var1=20, var2=12;\n            if((var1 &lt; var2) &amp;&amp; (var2++ &lt; 25)){\n                System.out.println(\"Programming\");\n            }\n            System.out.println(var2);\n        }\n    }\n</code></pre>", "options": [{"option": "Programming  11", "correct": false}, {"option": "Programming  10", "correct": false}, {"option": "12", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class N{\n        public static void main(String args[]){\n            if(1 + 1 + 1 + 1 + 1 + 1+ 1 == 7){\n                System.out.print(\"TRUE\");\n            }\n            else{\n                System.out.print(\"FLASE\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "FALSE", "correct": false}, {"option": "TRUE", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   class HackerEarth{\n\n        public static void main(String args[])\n        {\n\n            System.out.print(\"\"==\"\");\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"V\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"v\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth{\n        public static void main(String args[]){\n            int val1 = 20;\n            double val2 = 20.25;\n            System.out.print((val1%10)+\" \"+(val2%10));\n        }\n    }\n</code></pre>", "options": [{"option": "0   0.0", "correct": false}, {"option": "0   0.25", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        public static void main(String args[]){\n\n            System.out.print(\"a=Hacker\");\n        }\n    }\n</code></pre>", "options": [{"option": "Hacker", "correct": false}, {"option": "a=Hacker", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String... args){\n            int a=1 , b=2, c=3;\n            System.out.println(b + c);\n            System.out.println(a + b + c);\n        }\n    }\n</code></pre>", "options": [{"option": "5\r\n5 ", "correct": false}, {"option": "5\r\n6", "correct": true}, {"option": "2\r\n3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        static int var = 6;\n        public static void main(String... args){\n            System.out.println(++var+var++);\n        }\n    }\n</code></pre>", "options": [{"option": "13", "correct": false}, {"option": "12", "correct": false}, {"option": "14", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth \n    {\n        public static void main(String [] args) \n        {\n            int val1 = 50;\n            double val2 = 50.00;\n            boolean b = (val1 = val2);\n            System.out.println(b);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String [] args)\n        {\n            int val=10;\n            String sup = (val &lt; 15) ? \"Hack\" : (val &lt;22)? \"Earth\" : \"Hi\";\n            System.out.println(sup);\n        }\n    }\n</code></pre>", "options": [{"option": "Earth", "correct": false}, {"option": "Hi", "correct": false}, {"option": "Hack", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String [] args) \n        {\n            int x=25;\n            String sup = (x &lt; 15) ? \"Hack\" : (x &lt;22)? \"Earth\" : \"Hi\";\n            System.out.println(sup);\n        }\n    }\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Earth", "correct": false}, {"option": "Hi", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String [] args)\n        {\n            int x= 0;\n            int y= 0;\n            for (int z = 0; z &lt; 5; z++)\n            {\n                if ((x++ &gt; 2 ) &amp;&amp; (++y &gt; 2))\n                {\n                    x++;\n                }\n            }\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "4  2", "correct": false}, {"option": "5  3", "correct": false}, {"option": "5  2", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String [] args)\n        {\n            int val1 = 10 &amp; 9;\n            int val2 = val1 ^ 3;\n            System.out.println( val2 | 12 );\n        }\n    }\n</code></pre>", "options": [{"option": "12", "correct": false}, {"option": "20", "correct": false}, {"option": "15", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class S\n    {\n        public static void main(String [] args) \n        {\n            boolean b1 = true;\n            boolean b2 = false;\n            boolean b3 = true;\n            if ( b1 &amp; b2 | b2 &amp; b3 | b2 | b1 ) \n                System.out.println(\"ok\");;\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "ok", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    public static void l(int a, int b)\n        {\n            a &lt;&lt;= b;\n        }\n        public static void main(String args[])\n        {\n            int a = 8, b = 7;\n            l(a, b);\n            System.out.println(a);\n        }\n    }</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "0", "correct": false}, {"option": "7", "correct": false}, {"option": "8", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n        public static void main(String args[]) {\n            int val1 = 0, val2 = 1, val3;\n            if(val1)\n            val3 = 0;\n            else\n                val3 = 1;\n            System.out.println(val3);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            int a,b,c,d=2;\n            c = d++;\n            b = ++c;\n            a = b++;\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    public static void main(String args[]) {\n        int a = 4;\n        boolean b = true;\n        boolean c = false, d;\n        d = (b &amp;((++a) == 0));\n        d = (c &amp;((a+=4) &gt; 0));\n        System.out.println(a);\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "6", "correct": false}, {"option": "9", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n\t{\n        public static void main(String args[]) {\n            int j = 4;\n            boolean a = true;\n            boolean b = false, y;\n            y = (a | ((j++) == 0));\n            y = (b | ((j+=2) &gt; 0));\n            System.out.println(j);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "7", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators is used to perform <strong>bitwise inversion</strong>?</p>", "options": [{"option": "!", "correct": false}, {"option": "~", "correct": true}, {"option": "&", "correct": false}, {"option": "^", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>   class HackerEarth {\n        public static void main(String args[]) {\n            byte val = 3;\n            val = (byte)~val;\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "12", "correct": false}, {"option": "11", "correct": false}, {"option": "-4", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>     class HackerEarth {\n        public static void main(String args[]) {\n            System.out.println(true|false);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false|false);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false||false);\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": true}, {"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n        public static void main(String args[]) {\n            int var1,var2;\n            var1 = 3 &amp; 6;\n            var2 = 3 | 6;\n            System.out.println(var1 + \" \" + var2);\n        }\n    }\n</code></pre>", "options": [{"option": "2  6", "correct": false}, {"option": "2  7", "correct": true}, {"option": "4  7", "correct": false}, {"option": "4  8", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[]) {\n            int val1,val2;\n            val1 = 1 &amp; 7;\n            val2 = 3 ^ 6;\n            System.out.println(val1 + \" \" + val2);\n        }\n    }\n</code></pre>", "options": [{"option": "1, 6", "correct": false}, {"option": "2, 5", "correct": false}, {"option": "1, 5", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>bitwise exclusive OR</strong> operator in Java?</p>", "options": [{"option": "&", "correct": false}, {"option": "^", "correct": true}, {"option": "!", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n    public static void main(String args[]) {\n        boolean var = true;\n        int a;\n        if(var)\n        a = var ? 1: 2;\n        else\n            a = var ? 3: 4;\n        System.out.println(a);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n    public static void main(String args[]) {\n        boolean val = false;\n        int x;\n        if(val)\n        x = val ? 1: 2;\n        else\n            x = val ? 3: 4;\n        System.out.println(x);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n    public static void main(String args[]) {\n        System.out.println(20 &amp; 10);\n    }\n}\n\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": false}, {"option": "19", "correct": false}, {"option": "0", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth {\n    public static void main(String args[]) {\n        System.out.println(~true);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "false", "correct": false}, {"option": "Compilation error: 'Bad operand type boolean for unary operator'", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class HackerEarth {\n    public static void main(String args[]) {\n        System.out.println(~4);\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "-5", "correct": true}, {"option": "-3", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n  public static void main(String[] args) \n  {\n    int val = 25;\n    if(val &lt; 50 &amp;&amp; val &lt;0) \n\t{\n        System.out.println(\"OK\");\n    }\n    if(val &lt; 50 &amp; val &gt; 0)\n\t{\n        System.out.println(\"Yup\");\n    }\n  }\n}\n</code></pre>\n\n<p>}</p>", "options": [{"option": "Okay, yup", "correct": false}, {"option": "Okay", "correct": false}, {"option": "Yup", "correct": true}, {"option": "Yup, okay", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    public static void main(String[] args) {\n        int val1=10,val2=15;\n        if(++val1&gt;10 &amp;&amp; ++val2&gt;15)\n        {\n            System.out.println(val1);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>  class HackerEarth{\n        public static void main(String[] args) {\n            int a=10,b=15;\n            if(++a&gt;10 ||++b&gt;15)\n            {\n                System.out.println(a++);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following\u00a0terms together comprises a class?</p>", "options": [{"option": "Methods", "correct": false}, {"option": "Variables", "correct": false}, {"option": "Static blocks", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following types of variables are available?</p>", "options": [{"option": "Local ", "correct": false}, {"option": "Instance", "correct": false}, {"option": "Static", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>primitive</strong> data type?</p>", "options": [{"option": "char ", "correct": false}, {"option": "String ", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>IIn Java, which of the following is a variable that is declared inside a constructor?</p>", "options": [{"option": "Global", "correct": false}, {"option": "Local", "correct": true}, {"option": "Class", "correct": false}, {"option": "Constructor", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following variables that are declared inside a class and not a method?</p>", "options": [{"option": "Static", "correct": false}, {"option": "Instance", "correct": true}, {"option": "Local", "correct": false}, {"option": "Global", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth {\n    int val =100;\n    public static void main(String args[] ) throws Exception {\n        int val=200;\n        HackerEarth obj= new HackerEarth();\n        System.out.println(obj.val);\n    }\n}\n</code></pre>", "options": [{"option": "200", "correct": false}, {"option": "100", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    int val =100;\n    public static void main(String args[] )    \n    throws Exception {\n        int val=200;\n        HackerEarth t= new HackerEarth();\n        System.out.println(val);\n    }\n}\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "200", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n      public static void main(String args[]) {\n            int a,b;\n            a = 3 &gt;&gt; 1;\n            b = a &gt;&gt;&gt; 1;\n            System.out.println(b);\n    }\n}\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "2", "correct": false}, {"option": "0", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack {\n        int val = 100;\n        public static void main(String args[]) throws Exception {\n            int val = 200;\n            TestHack obj = new TestHack();\n            System.out.println(obj.val);\n            obj.func();\n\n        }\n        void func()\n        {\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "100 \r\n100", "correct": true}, {"option": "100 \r\n200", "correct": false}, {"option": "200 \r\n200", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class TestHack {\n\n    int val =100;\n\n    public static void main(String args[] ) throws Exception {\n\n        int val = 200;\n        TestHack t= new TestHack();\n        System.out.println(val);\n        t.fun();\n\n    }\n\n    void fun(){\n        System.out.println(val);\n    }\n}\n</code></pre>", "options": [{"option": "100 \r\n100", "correct": false}, {"option": "200 \r\n100", "correct": true}, {"option": "100\r\n200", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack {\n        int var = 100;\n        public static void main(String args[] ) throws Exception {\n            int var = 200;\n            TestHack obj = new TestHack();\n            obj.func();\n            System.out.println(var);\n        }\n        void func()\n        {\n            System.out.println(var);\n        }\n    }\n</code></pre>", "options": [{"option": "200 \r\n100", "correct": false}, {"option": "100 \r\n100", "correct": false}, {"option": "100 \r\n200", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        public static void main(String args[])\n        {\n            int val=32;\n            System.out.println(val&gt;&gt;2);\n        }\n    }\n</code></pre>", "options": [{"option": "16", "correct": false}, {"option": "4", "correct": false}, {"option": "8", "correct": true}, {"option": "2", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=4;\n            System.out.println(a&lt;&lt;4);\n        }\n    }\n</code></pre>", "options": [{"option": "32", "correct": false}, {"option": "64", "correct": true}, {"option": "8", "correct": false}, {"option": "128", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=-1;\n            System.out.println(a&gt;&gt;1);\n        }\n    }\n</code></pre>", "options": [{"option": "-2", "correct": false}, {"option": "-1", "correct": true}, {"option": "1", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>       class Test\n        {\n            static int a=100;\n            public static void main(String args[])\n            {\n                int a=10;\n                System.out.println(a);\n            }\n        }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following describes the term arrays in Java?</p>", "options": [{"option": "Objects", "correct": true}, {"option": "Primitive data types", "correct": false}, {"option": "Classes", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String args[]){\n            double[] myList = {1, 4, 4, 4,1};\n            double max = myList[0];\n            int indexOfMax = 0;\n            for(int i = 1; i &lt; myList.length; i++){\n                if(myList[i] &gt; max){\n                    max = myList[i];\n                    indexOfMax = i;\n                }\n            }\n            System.out.println(indexOfMax);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}, {"option": "1", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "It will compile successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        int a;\n        float b;\n        public static void main(String args[])\n        {\n            HackerEarth he=new HackerEarth();\n            System.out.println(he.a);\n            System.out.println(he.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0\r\n0.00", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "0\r\n0.0", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        int a;\n        boolean b;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0  0", "correct": false}, {"option": "null  null", "correct": false}, {"option": "null 0", "correct": false}, {"option": "0  false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack\n    {\n        static int var1;\n        static boolean var2;\n        public static void main(String args[])\n        {\n            TestHack obj=new TestHack();\n            System.out.println(obj.var1);\n            System.out.println(obj.var2);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0  \r\nnull ", "correct": false}, {"option": "0 \r\nfalse", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth\n    {\n        static int a=20;\n        int b=10;\n        public static void main(String args[])\n        {\n            HackerEarth he=new HackerEarth();\n            he.a=30;\n            he.b=40;\n            System.out.println(he.a);\n            System.out.println(he.b);\n        }\n    }\n</code></pre>", "options": [{"option": "20 \r\n40", "correct": false}, {"option": "20 \r\n10", "correct": false}, {"option": "30 \r\n40", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following memory files stores the <strong>local </strong>variables?</p>", "options": [{"option": "Stack", "correct": true}, {"option": "Heap", "correct": false}, {"option": "Non heap", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, <strong>instance</strong> variables are stored in the __________________ memory.</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Heap", "correct": true}, {"option": "Non Heap", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following memory files stores the\u00a0<strong>static</strong> variables?</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Heap", "correct": false}, {"option": "Non heap", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        int var1=20;\n        int var2=10;\n        static void obj()\n        {\n            TestHack t=new TestHack();\n            System.out.println(t.var1);\n            System.out.println(t.var2);\n        }\n        public static void main(String args[])\n        {\n            TestHack.obj();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "20 \r\n10", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    int val1=20;\n    int val2=10;\n    public static void func()\n    {\n\n        System.out.println( val1+ \" \" + val2 );\n    }\n    public static void main(String args[])\n    {\n        HackerEarth obj= new HackerEarth();\n        obj.func();\n    }\n}\n</code></pre>", "options": [{"option": "20, 10", "correct": false}, {"option": "20", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "30", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n      int a=10;\n      static int b=20;\n      void h1()\n        {\n            HackerEarth h= new HackerEarth();\n            System.out.println(h.b);\n        }\n           public static void main(String args[])\n           {\n            HackerEarth h2= new HackerEarth();\n            h2.h1();\n           }\n    }</code></pre>", "options": [{"option": "20", "correct": true}, {"option": "10", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "The code will compile successfully without any output.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        int valA=20;\n        static int valB=10;\n        static void func()\n        {\n            TestHack obj = new TestHack();\n            System.out.println(obj.valA);\n        }\n        public static void main(String args[])\n        {\n\n            TestHack .func();\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "20", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\n {\n  System.out.println(\"Non-Static\");\n }\n\n public HackerEarth() {\n  System.out.println(\"A\");\n }\n\n public static void main(String[] args) {\n  HackerEarth a = new HackerEarth();\n }\n}\n</code></pre>", "options": [{"option": "Non-Static\r\nA", "correct": true}, {"option": "A\r\nNon-Static", "correct": false}, {"option": "Non-Static", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following always links with\u00a0<strong>instance</strong> methods?</p>", "options": [{"option": "Objects", "correct": true}, {"option": "Classes", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how can the <strong>static</strong> method be accessed?</p>", "options": [{"option": "Through the Object of the class", "correct": false}, {"option": "Through the Class only", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        void func()\n        {\n            System.out.println(\"Hacker\");\n        }\n        void func(int var)\n        {\n            System.out.println(var);\n        }\n        public static void main(String args[])\n        {\n\n            TestHack obj=new TestHack();\n            obj.func();\n            obj.func(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Hacker ", "correct": false}, {"option": "Hacker\r\n 20", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        func()\n        {\n            System.out.println(\"Hacker\");\n        }\n        public static void main(String args[])\n        {\n\n            HackerEarth obj=new HackerEarth();\n            obj.func();\n        }\n    }\n</code></pre>", "options": [{"option": "Hacker", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class Test{\n        void m1()\n        {\n            System.out.println(\"Hacker\");\n            void m2()\n            {\n                System.out.println(\"Earth\");\n            }\n        }\n\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}, {"option": "Hacker Earth", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> class func1 {\n int a;\n boolean val;\n static int p;\n\n  void output() {\n  System.out.print(a);\n  System.out.print(val);\n  System.out.print(p);\n }\n}\n\nclass HackerEarth {\n public static void main(String argv[]) {\n  func1 x = new func1();\n  x.output();\n }\n}\n</code></pre>", "options": [{"option": "1 false 0", "correct": false}, {"option": "0 false 0", "correct": true}, {"option": "0 true 0", "correct": false}, {"option": "1 true 1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        void fun1()\n        {\n            fun2();\n            System.out.println(\"Hacker\");\n        }\n        void fun2()\n        {\n            System.out.println(\"Earth\");\n        }\n\n\n        public static void main(String args[])\n        {\n\n            TestHack obj=new TestHack();\n            obj.fun1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Hacker\r\nEarth", "correct": false}, {"option": "Earth\r\nHacker", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        int x=100,y=300;\n        void func(int x,int y)\n        {\n            System.out.println(this.x+this.y);\n        }\n        public static void main(String args[])\n        {\n\n            TestHack obj=new TestHack();\n            obj.func(100,200);\n        }\n    }\n</code></pre>", "options": [{"option": "300", "correct": false}, {"option": "400", "correct": true}, {"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n        {\n\n            System.out.println(\"Hacker\"+\"Earth\");\n        }\n    }\n</code></pre>", "options": [{"option": "\"Hacker Earth\"", "correct": false}, {"option": "\"Hacker\" \" Earth\"", "correct": false}, {"option": "HackerEarth", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n                {\n\n                System.out.println(10+00);\n            }\n            }\n</code></pre>", "options": [{"option": "10", "correct": true}, {"option": "00", "correct": false}, {"option": "1000", "correct": false}, {"option": "0001", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n\n        public static void main(String args[])\n        {\n\n            System.out.println(10+30+\"Hacker\"+40+50);\n        }\n    }\n</code></pre>", "options": [{"option": "40Hacker90", "correct": false}, {"option": "40Hacker4050", "correct": true}, {"option": "1030Hacker4050", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how many <strong>primitive integer</strong> data types exist?</p>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, _________________________ is used to create <strong>objects</strong>.</p>", "options": [{"option": "The 'new' keyword, instance factory method", "correct": false}, {"option": "The 'new' keyword, static factory method", "correct": false}, {"option": "The instance factory method, static factory method", "correct": false}, {"option": "The 'new' keyword, instance factory method, static factory method", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class TestHack{\n        TestHack()\n        {\n            System.out.println(\"Constructor called\");\n        }\n        TestHack(int var)\n        {\n            System.out.println(\"Constructor\");\n        }\n        public static void main(String args[])\n        {\n            TestHack obj=new TestHack(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Constructor called, Constructor ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Constructor", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        HackerEarth(int a)\n        {\n            System.out.println(\"Constuctor\");\n        }\n        public static void main(String args[])\n        {\n            HackerEarth obj1=new HackerEarth();\n            HackerEarth obj2=new HackerEarth(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Run-time error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "20", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n    int hack;\n    HackerEarth(int hack)\n        {\n         System.out.println(hack);\n        }\n    void display()\n        {\n         System.out.println(hack);\n        }\n    public static void main(String args[])\n        {\n         HackerEarth h = new HackerEarth(50);\n         h.display();\n        }\n    }\n</code></pre>", "options": [{"option": "0  50", "correct": false}, {"option": "50", "correct": false}, {"option": "50  0", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>       class HackerEarth{\n            int a=200;\n            HackerEarth(int a)\n            {\n                System.out.println(a);\n            }\n            void display()\n            {\n                System.out.println(a);\n            }\n            public static void main(String args[])\n            {\n                HackerEarth obj=new HackerEarth(100);\n                obj.display();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "100\r\n200", "correct": true}, {"option": "100\r\n100", "correct": false}, {"option": "200\r\n100", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Test\n{\n    public Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": true}, {"option": "The code compiles successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        protected Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "40", "correct": true}, {"option": "It compiles successfully but does not produce an output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        protected static Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error: Modifier static not allowed here", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": false}, {"option": "The code compiles successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following the return value of\u00a0<strong>Math.floor(3.7) </strong>in Java?</p>", "options": [{"option": "4.0", "correct": false}, {"option": "3", "correct": false}, {"option": "3.0", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following modifiers cannot be used for constructors?</p>", "options": [{"option": "public ", "correct": false}, {"option": "static ", "correct": true}, {"option": "private ", "correct": false}, {"option": "protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following variables are declared for the use of all methods in a class?</p>", "options": [{"option": "Local ", "correct": false}, {"option": "Object", "correct": false}, {"option": "Instance ", "correct": true}, {"option": "Class ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth{\n        HackerEarth(float val){\n            System.out.println( val ) ;\n        }\n        public static void main(String[] args){\n            HackerEarth obj = new HackerEarth( 2 ) ;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "2", "correct": false}, {"option": "2.0", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Area {\n        int width;\n        int length;\n        public Area(int width, int length) {\n            this.width = width;\n            this.length = length;\n        }\n\n    }\n    class Output {\n        public static void main(String args[])\n        {\n            Area obj = new Area(1 , -1);\n            System.out.println(obj.length + \" \" + obj.width);\n        }\n    }\n</code></pre>", "options": [{"option": "1 , -1", "correct": false}, {"option": "-1,  1", "correct": true}, {"option": "1,  1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following functions is not supported?</p>", "options": [{"option": "Multilevel Inheritence", "correct": false}, {"option": "Garbage Collection", "correct": false}, {"option": "Single Inheritance", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is an <strong>unchecked</strong> exception?</p>", "options": [{"option": "ClassNotFoundException", "correct": false}, {"option": "FileNotFoundException", "correct": false}, {"option": "NoClassDefFoundException", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ___________________ command is used to compile a program.</p>", "options": [{"option": "javacompile", "correct": false}, {"option": "javac", "correct": true}, {"option": "java.c", "correct": false}, {"option": "java", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to start the execution of a <strong>thread</strong>?</p>", "options": [{"option": "begin()", "correct": false}, {"option": "start()", "correct": true}, {"option": "run()", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following always returns the object in a <strong>sorted</strong> manner?</p>", "options": [{"option": "HashMap", "correct": false}, {"option": "TreeSet", "correct": true}, {"option": "TreeMap", "correct": false}, {"option": "HashSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the return type of\u00a0<strong>hashCode()</strong> method of the object class?</p>", "options": [{"option": "hash", "correct": false}, {"option": "String", "correct": false}, {"option": "Object", "correct": false}, {"option": "int", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the\u00a0<strong>thread</strong> class is used to suspend a thread?</p>", "options": [{"option": "terminate()", "correct": false}, {"option": "suspend()", "correct": false}, {"option": "stop()", "correct": false}, {"option": "sleep()", "correct": true}], "level": "Easy"}, {"question": "<p><strong>toRadian()</strong>  and  <strong>toDegree()</strong> methods were added by which version of Java?</p>", "options": [{"option": "Java 1.0", "correct": false}, {"option": "Java 1.5", "correct": false}, {"option": "Java 2.0", "correct": true}, {"option": "Java 3.0", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these classes is not part of Java's collection framework?</p>", "options": [{"option": "Maps", "correct": false}, {"option": "Stack", "correct": false}, {"option": "Queue", "correct": true}, {"option": "Array", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class vector {\n        public static void main(String args[]) {\n            Vector obj = new Vector(4,2);\n            obj.addElement(new Integer(0));\n            obj.addElement(new Integer(20));\n            obj.addElement(new Integer(0));\n            obj.removeAll(obj);\n            System.out.println(obj.isEmpty());\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following interfaces is used to declare <strong>core</strong> methods in Java?</p>", "options": [{"option": "set", "correct": false}, {"option": "EventListner", "correct": false}, {"option": "Collection", "correct": true}, {"option": "Comparator", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n            int val1 , val2 = 3;\n            val1 = 101;\n            if (val1 != 101 &amp;&amp; val1 / 0 == 2)\n                System.out.println(val2);\n            else\n                System.out.println(++val2);\n        }\n    }\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the correct format of declaration of abstract class ?</p>", "options": [{"option": "abstract class clsName; { // body of class }", "correct": false}, {"option": "abstract class clsName { // body of class }", "correct": true}, {"option": "class abstract clsName { // body of class }", "correct": false}, {"option": "private clsName{//body of class}", "correct": false}], "level": "Very-Easy"}, {"question": "<p>By which method a class can be abstracted ?  </p>", "options": [{"option": "Private", "correct": false}, {"option": "Public", "correct": false}, {"option": "Protected", "correct": true}, {"option": "Default", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static void main(String args[])\n    {\n        int val1 , val2 = 3;\n        val1 = 101;\n        if (val1 != 101 &amp;&amp; val1 / 0 == 2)\n            System.out.println(val2);\n        else\n            System.out.println(++val2);\n    }\n}\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, operations related to threads\u00a0are handled by specific methods. Which of the following interfaces comprises these methods?</p>", "options": [{"option": "Runnable ", "correct": false}, {"option": "Thread handling", "correct": true}, {"option": "Math", "correct": false}, {"option": "Runnable and Thread handling", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following keywords is used to monitor the exceptions?</p>", "options": [{"option": "try", "correct": true}, {"option": "catch", "correct": false}, {"option": "finally", "correct": false}, {"option": "try and finally", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to handle the exception thrown by a <strong>try</strong> block?</p>", "options": [{"option": "try", "correct": false}, {"option": "catch", "correct": true}, {"option": "finally", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class operator {\n        public static void main(String args[])\n        {\n            boolean a = true;\n            boolean b = !true;\n            boolean d = a &amp; b;\n            System.out.println(d);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    class HackerEarth {\n        public static void main(String args[])\n        {\n            boolean varA = true;\n            boolean varB = !true;\n            boolean varC = varA | varB;\n            boolean varD = varA &amp; varB;\n            boolean varE = varD ? varB : varC;\n            System.out.println(varE);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Easy"}, {"question": "<p><strong>What is the output of the following code sample?</strong></p>\n<pre><code>public class JavaTest {\n\n    public static void main(String[] args) {\n        Object s1 = \"Hello\";\n        Object s2 = \"Hello\";\n\n        if (s1 == s2) {\n            System.out.println(\"s1 and s2 are ==\");\n        } else if (s1.equals(s2)) {\n            System.out.println(\"s1 and s2 are equals()\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "A. s1 and s2 are ==", "correct": true}, {"option": "B. s1 and s2 are equals()", "correct": false}, {"option": "C. compilation fails", "correct": false}, {"option": "D. NullPointerException is thrown at runtime", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> final class Base\n    {\n        public void display()\n        {\n            System.out.println(\"hack\");\n        }\n    }\n\n    class Derived extends Base\n    {\n        public void display()\n        {\n            System.out.println(\"Derived\");\n        }\n    }\n\n    class M\n    {\n        public static void main(String args[])\n        {\n            Derived d=new Derived();\n            d.display();\n        }\n    }\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": false}, {"option": "hack  Derived", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> final class Base\n    {\n        public void display()\n        {\n            System.out.println(\"hack\");\n        }\n    }\n\n    class Derived extends Base\n    {\n        public void display()\n        {\n            System.out.println(\"Derived\");\n        }\n    }\n\n    class M\n    {\n        public static void main(String args[])\n        {\n            Derived d=new Derived();\n            d.display();\n        }\n    }\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": false}, {"option": "hack  Derived", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>var foo = 1 + 3 + '20';</p>\n<p>What is the value of foo?</p>", "options": [{"option": "\"420\"", "correct": true}, {"option": "\"1230\"", "correct": false}, {"option": "402", "correct": false}, {"option": "420", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements describe Polymorphism?</p>", "options": [{"option": "1. The data fields should be declared private", "correct": false}, {"option": "2. A class can extend another class", "correct": false}, {"option": "3. A class can have different methods with the same name but different arguments", "correct": false}, {"option": "4. A variable of a supertype can refer to a subtype object", "correct": false}, {"option": "Both 3 & 4", "correct": true}, {"option": "Both 2 & 3", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>The following Java code creates one array and one string object.</p>\n<pre><code>...\nString[] students = new String[10];\nString studentName = \"Super Duper\";\nstudents[0] = studentName;\nstudentName = null;\n...\n</code></pre>\n<p>How many references to those objects exist after the code executes?</p>", "options": [{"option": "There is one reference to the students array and that array has one reference to the string Super Duper", "correct": true}, {"option": "There are two references to the students array and two references to the string Super Duper", "correct": false}, {"option": "There is one reference to the students array and there is no reference to the string Super Duper", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Study the following class definition carefully:</p>\n<pre><code>public class Test {\n    public int t = 4;\n    public static void main(String[] args) {\n        new Test().NumberPlay();\n    }\n\n    public void NumberPlay() {\n        int t = 2;\n        t += 5;\n        this.t -= 2;\n        t -= this.t;\n        System.out.print(t + \u201c \u201c);\n        System.out.println(this.t);\n    }\n}\n</code></pre>", "options": [{"option": "2 5", "correct": false}, {"option": "-9 0", "correct": false}, {"option": "0 -9", "correct": false}, {"option": "5 2", "correct": true}, {"option": "7 2", "correct": false}], "level": "Medium"}, {"question": "<p>What are the primitive data types supported by Java programming language?</p>", "options": [{"option": "int, long, float, double, boolean, char", "correct": false}, {"option": "short, int, long, float, double, bool, char, string", "correct": false}, {"option": "byte, short, int, long, float, double, boolean, char", "correct": true}, {"option": "byte, short, int, long, float, double, boolean, char, string", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What will happen when you attempt to compile and run the following Java code?</p>\n<pre><code>public class DoubleTest {\npublic static void main(String as[]) {\n    double a = 4.5;\n    String b = \"a\";\n    String c = a+b;\n}\n}\n</code></pre>", "options": [{"option": "Compilation error due to syntax", "correct": false}, {"option": "Compiles successfully, throws runtime error", "correct": false}, {"option": "Compiles and Runs successfully", "correct": true}, {"option": "Compilation error: can\u2019t convert double to String", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are true?</p>", "options": [{"option": "If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result", "correct": true}, {"option": "If two objects are not equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce distinct integer results", "correct": false}, {"option": "If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects can produce different integer results", "correct": false}, {"option": "There is no connection between the equals and hashCode methods, and the Java API makes them independent.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are true about inheritance in Java</p>", "options": [{"option": "A class can extend only one base class, and implement only one interface", "correct": false}, {"option": "A class can extend multiple base classes, but implement only one interface", "correct": false}, {"option": "A class can extend only one base class, but implement multiple interfaces", "correct": true}, {"option": "A class can extend multiple base classes, and implement multiple interfaces", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are true about exception handling in Java</p>", "options": [{"option": "When a checked exception is thrown, the caller must handle the exception in a catch clause, else the calling code will not compile", "correct": false}, {"option": "When a checked exception is thrown, the caller must handle the exception in a catch clause or propagate the exception outward, else the calling code will not compile", "correct": true}, {"option": "When a runtime exception is thrown, the caller must handle the exception in a catch clause, else the calling code will not compile", "correct": false}, {"option": "When a runtime exception is thrown, the caller must catch the exception, and call System.exit", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>If you need a Set implementation that provides value-ordered iteration, which class should you use?</p>", "options": [{"option": "HashSet", "correct": false}, {"option": "TreeSet", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "HashMap", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Indicate the incorrect usage of an exception in the below scenarios</p>", "options": [{"option": "IllegalArgumentException must be thrown when a non-null value is inappropriate", "correct": false}, {"option": "NullPointerException will be thrown when a null parameter value is prohibited", "correct": false}, {"option": "IndexOutOfBoundsException must be thrown when the key is not found in a hash table", "correct": true}, {"option": "ConcurrentModificationException must be thrown when a concurrent modification of an object has been detected where it is prohibited.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following statements are invalid with regards to constructor?</p>", "options": [{"option": "Constructors should have the same name as class name", "correct": false}, {"option": "Constructors have to be public so that class can be instantiated", "correct": false}, {"option": "Constructors cannot be overloaded", "correct": false}, {"option": "Constructors can be overloaded", "correct": false}, {"option": "B & C are true", "correct": true}, {"option": "B & D are true", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Given the following code</p>\n<pre><code>public class CommandArgs {\n    public static void main(String [] args) {\n        String s1 = args[1];\n        String s2 = args[2];\n        String s3 = args[3];\n        String s4 = args[4];\n        System.out.print(\" args[2] = \" + s2);\n    }\n}\n</code></pre>\n<p>and the command-line invocation:</p>\n<pre><code>java CommandArgs 1 2 3 4\n</code></pre>\n<p>what is the output?</p>", "options": [{"option": "args[2] = 2", "correct": false}, {"option": "args[2] = 3", "correct": false}, {"option": "args[2] = null", "correct": false}, {"option": "args[2] = 1", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": true}], "level": "Medium"}, {"question": "<p>Messages in Java are localized using which of the following mechanisms?</p>", "options": [{"option": "Resource Bundle", "correct": true}, {"option": "Properties file", "correct": false}, {"option": "Calendar", "correct": false}, {"option": "StringFormat", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the following program?</p>\n<pre><code>class A {\n    public void baz() {\n        System.out.println(\"A\");\n    }\n}\n\npublic class B extends A {\n    public static void main(String [] args) {\n        A a = new B();\n        a.baz();\n    }\n\n    public void baz() {\n        System.out.println(\"B\");\n    }\n}\n</code></pre>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>The mechanism which allows Java to call (in-process) native methods , which are special methods written in C or C++ is:</p>", "options": [{"option": "JAXB", "correct": false}, {"option": "EJB", "correct": false}, {"option": "JNI", "correct": true}, {"option": "JNDI", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following statements are true about the compareTo method ?</p>", "options": [{"option": "A. It is a method in the Object class", "correct": false}, {"option": "B. It is the sole method in the Comparable interface", "correct": false}, {"option": "C. A class whose instances need to be sorted in an Array using the Arrays.Sort utility function needs to implement the compareTo function", "correct": false}, {"option": "D. Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object.", "correct": false}, {"option": "C & D", "correct": false}, {"option": "B, C & D", "correct": true}], "level": "Medium"}, {"question": "<p>What is recursion in Java?</p>", "options": [{"option": "A method invoking another method in the same class", "correct": false}, {"option": "A method invoking another method in the super class", "correct": false}, {"option": "A method invoking constructor of the class", "correct": false}, {"option": "None of the above", "correct": true}], "level": "Medium"}, {"question": "<p>How can you force Garbage Collection?</p>", "options": [{"option": "By calling System.gc()", "correct": false}, {"option": "Can\u2019t force GC, but could request it by calling System.gc()", "correct": true}, {"option": "Can\u2019t do it through code", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Does it matter in what order catch statements for FileNotFoundException or IOException are written?</p>", "options": [{"option": "Yes", "correct": true}, {"option": "No", "correct": false}], "level": "Medium"}, {"question": "<p>Consider the following implementation of the stack data structure:</p>\n<pre><code>public class Stack {\nprivate Object[] elements;\nprivate int size = 0;\nprivate static final int DEFAULT_INITIAL_CAPACITY = 16;\n\npublic Stack() {\n    elements = new Object[DEFAULT_INITIAL_CAPACITY];\n}\n\npublic void push(Object e) {\n    ensureCapacity();\n    elements[size++] = e;\n}\n\npublic Object pop() {\n    if (size == 0)\n        throw new EmptyStackException();\n    return elements[--size];\n}\n\nprivate void ensureCapacity() {\n    if (elements.length == size)\n        elements = Arrays.copyOf(elements, 2 * size + 1);\n}\n</code></pre>\n<p>Which of the following statements are true?</p>", "options": [{"option": "The push function has memory corruption", "correct": false}, {"option": "The ensureCapacity function has a memory leak", "correct": true}, {"option": "The pop function has a memory leak", "correct": false}, {"option": "The constructor has a memory leak", "correct": false}], "level": "Hard"}, {"question": "<p>Is it possible to override the default main() method?</p>", "options": [{"option": "Yes, because it is a static method", "correct": false}, {"option": "No, because it is a static method", "correct": true}, {"option": "Yes, if the class is defined as static", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Consider the following code snippet:</p>\n<p>int i = 10;\nint n = i++%5;</p>\n<p>What are the values of i and n after the code is executed?</p>", "options": [{"option": "i is 11 and n is 0", "correct": true}, {"option": "i is 11 and n is 1", "correct": false}, {"option": "i is 10 and n is 1", "correct": false}, {"option": "i is 10 and n is 0", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are true about Javascript?</p>", "options": [{"option": "Javascript is an Object Oriented Programming language", "correct": false}, {"option": "You do not need a JVM to run programs written in Javascript", "correct": false}, {"option": "In Javascript you can pass functions as parameters to another function", "correct": false}, {"option": "Javascript checks for type compatibility during compilation", "correct": false}, {"option": "A & B are true", "correct": false}, {"option": "B & C are true", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Javascript code?</p>\n<pre><code>(function() {\n  console.log(1);\n  setTimeout(function(){console.log(2)}, 1000);\n  setTimeout(function(){console.log(3)}, 0);\n  console.log(4);\n})();\n</code></pre>", "options": [{"option": "1 3 4 2", "correct": false}, {"option": "1 4 2 3", "correct": false}, {"option": "1 4 3 2", "correct": true}, {"option": "1 2 3 4", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output for the following program?</p>\n<pre><code>import java.awt.Button;\nclass CompareReference {\n    public static void main(String[] args) {\n        Button a = new Button(\u201cExit\u201d);\n        Button b = new Button(\u201cExit\u201d);\n        Button c = a;\n        System.out.println((a == b) + \u201c \u201c + (a == c));\n}\n}\n</code></pre>", "options": [{"option": "true false", "correct": false}, {"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "false false", "correct": false}, {"option": "Nothing, this will not compile", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Can constructor be inherited?</p>", "options": [{"option": "Yes", "correct": false}, {"option": "No", "correct": true}, {"option": "", "correct": false}, {"option": "", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of following code:</p>\n<p>public class JavaTest {\n    private static int[] a = { 1, 2, 3, 4, 5 };</p>\n<pre><code>public static void main(String args[]) {\n    for(int i = 1; i &lt;= 5; ++i) {\n        System.out.print(a[i]);\n    }\n}\n</code></pre>\n<p>};</p>", "options": [{"option": "12345", "correct": false}, {"option": "1234 and then exception is thrown", "correct": false}, {"option": "nothing, exception is thrown", "correct": false}, {"option": "2345 and then exception is thrown", "correct": true}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of following code:</p>\n<p>public class JavaTest {\n    public static void main(String args[]) {\n        A a = new A();\n        a.foo();</p>\n<pre><code>    B b = new B();\n    b.foo();\n    b.bar();\n\n    A ab = new B();\n    ab.foo();\n}\n</code></pre>\n<p>};</p>\n<p>class A {\n    public void foo() {\n        System.out.print(\"Foo\");\n    }\n}</p>\n<p>class B extends A {\n    public void foo() {\n        System.out.print(\"Bar\");\n    }\n    public void bar() {\n        System.out.print(\"Surprise\");\n    }\n}</p>", "options": [{"option": "FooBarSurpriseBar", "correct": true}, {"option": "FooFooBarSurpriseBar ", "correct": false}, {"option": "FooFooBarSurpriseFoo", "correct": false}, {"option": "FooBarSurpriseFoo", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<p>public class JavaTest {\n    private double array[] = { 1.0, 1.1, 1.2, 1.3, 1.4 }; </p>\n<pre><code>public static void main(String args[]) {\n        for(int i = 0; i &lt; array.length; ++i) {\n            for(int j = 1; j &lt; i; ++j) {\n                System.out.print(array[i*j % array.length] + \u201c \u201c);\n            }\n        }\n}\n</code></pre>\n<p>};</p>", "options": [{"option": "1.2 1.3 1.1 1.4 1.3 1.2", "correct": false}, {"option": "1.2 1.3 1.4 1.1", "correct": false}, {"option": "1.1 1.2 1.3 1.4 1.5", "correct": false}, {"option": "exception is thrown", "correct": false}, {"option": "class won\u2019t compile", "correct": true}], "level": "Easy"}, {"question": "<p>Given:</p>\n<p>public class JavaTest {\n    private Integer variable = 100;</p>\n<pre><code>public JavaTest go(JavaTest j) {\n    j = null;\n    return j;\n}\n\npublic static void main(String args[]) {\n    JavaTest j1 = new JavaTest();\n    JavaTest j2 = new JavaTest();\n    JavaTest j3 = j1.go(j2);\n    j1 = null;\n    // here\n}\n</code></pre>\n<p>};</p>\n<p>How many objects are eligible for garbage collection (GC) when // here is reached</p>", "options": [{"option": "2", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "It is impossible to know", "correct": false}, {"option": "Exception is thrown", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>What is the size of int variable?</p>", "options": [{"option": "8 bit", "correct": false}, {"option": "16 bit", "correct": false}, {"option": "32 bit", "correct": true}, {"option": "64 bit", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of following code:</p>\n<p>public class JavaTest {</p>\n<pre><code>public static void main(String args[]) {\n    int i = 3;\n    if(i) {\n        System.out.println(\"if\");\n    } else {\n        System.out.println(\"else\");\n    }\n}\n</code></pre>\n<p>};</p>", "options": [{"option": "if", "correct": false}, {"option": "else", "correct": false}, {"option": "nothing", "correct": false}, {"option": "won\u2019t compile", "correct": true}, {"option": "exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>Has a class always a default constructor?</p>", "options": [{"option": "yes", "correct": false}, {"option": "no", "correct": true}, {"option": "", "correct": false}, {"option": "", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which Man class properly represents the relationship \u201cMan has a best friend who is a Dog\u201d</p>", "options": [{"option": "class Man extends Dog {}", "correct": false}, {"option": "class Man implements Dog {}", "correct": false}, {"option": "class Man { private BestFriend dog; }", "correct": false}, {"option": "class Man { private Dog bestFriend; }", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code sample?</p>\n<p>public class JavaTest {</p>\n<pre><code>public static void main(String args[]) {\n    A a = new B();\n}\n</code></pre>\n<p>};</p>\n<p>class A {\n    private final String member = \"MemberA\";\n    {\n        System.out.print(member);\n    }</p>\n<pre><code>public A() {\n    System.out.print(\"A\");\n}\n</code></pre>\n<p>}</p>\n<p>class B extends A {\n    private static final String STATIC = \"Static\";\n    static {\n        System.out.print(STATIC);\n    }</p>\n<pre><code>private String member = \"MemberB\";\n{\n    System.out.print(member);\n}\n\npublic B() {\n    System.out.print(\"B\");\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "MemberAAMemberBBStatic", "correct": false}, {"option": "StaticMemberAAMemberBB", "correct": true}, {"option": "StaticMemberBBMemberAA", "correct": false}, {"option": "StaticAMemberABMemberB", "correct": false}, {"option": "MemberBBMemberAAStatic", "correct": false}, {"option": "Won\u2019t compile", "correct": false}, {"option": "Exception is thrown", "correct": false}], "level": "Easy"}, {"question": "<p>Abstract classes:</p>", "options": [{"option": "Cannot have abstract derived classes.", "correct": false}, {"option": "Can have objects instantiated from them if the proper permissions are set.", "correct": false}, {"option": "Contain at most one abstract function.", "correct": false}, {"option": "Are defined, but the programmer never intends to instantiate any objects from them.", "correct": true}, {"option": "Must contain at least one abstract function", "correct": false}, {"option": "Must not contain any final functions ", "correct": false}, {"option": "Must not contain any static functions ", "correct": false}], "level": "Easy"}, {"question": "<p>What is JRE?</p>", "options": [{"option": "JRE is a java based GUI application.", "correct": false}, {"option": "JRE is an application development framework", "correct": false}, {"option": "JRE is an implementation of the Java Virtual Machine which executes Java programs.", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code sample?</p>\n<p>public class JavaTest {</p>\n<pre><code>public static void main(String args[]) {\n        ((A)new B()).test();\n}\n</code></pre>\n<p>};</p>\n<p>class A {\n    public void test() {\n        System.out.println(\"TestA\");\n    }\n}</p>\n<p>class B extends A {\n    public void test() {\n        System.out.println(\"TestB\");\n    }\n}</p>", "options": [{"option": "ClassCastException is thrown", "correct": false}, {"option": "TestA", "correct": false}, {"option": "TestB", "correct": true}, {"option": "Exception is thrown at runtime but it is not ClassCastException", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements is true about the following PrintSomething program? </p>\n<p>public class PrintSomething implements Runnable {\n   private String value;\n      public PrintSomething(String value) {\n      this.value = value;\n   }</p>\n<p>public void run() {\n      try {\n        Thread.sleep((int) (Math.random() * 4000));\n      }catch(InterruptedException e) {}\n        System.out.print(value);\n   }</p>\n<p>public static void main(String [] args) {\n       Runnable x = new PrintSomething(x);\n       Runnable y = new PrintSomething(y);\n       Thread one = new Thread(x);\n       Thread two = new Thread(y);\n       two.start();\n       one.start();\n   }\n}</p>", "options": [{"option": "The output is always xy.  ", "correct": false}, {"option": "The output is always yx.  ", "correct": false}, {"option": "The output can be either xy or yx", "correct": true}, {"option": "Exception is thrown at runtime", "correct": false}, {"option": "Compiler error", "correct": false}], "level": "Easy"}, {"question": "<p>Can constructor be made final?</p>", "options": [{"option": "yes", "correct": false}, {"option": "no", "correct": true}, {"option": "", "correct": false}, {"option": "", "correct": false}], "level": "Easy"}, {"question": "<p>What is static block?</p>", "options": [{"option": "It is used to create synchronized code.", "correct": false}, {"option": "There is no such block", "correct": false}, {"option": "It is used to initialize the static data member., It is excuted before main method at the time of class loading", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following statements? </p>\n<p>List  list = new ArrayList ();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}</p>", "options": [{"option": "onetwo", "correct": false}, {"option": "onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "compiler error on line list.add(7);  ", "correct": true}], "level": "Easy"}, {"question": "<p>Suppose you have a collection of products for sale in a database and you need to display those products on a web page. The Java code on the server needs to be able to sort the products by price and category. Which of the following collections classes in the  java.util package best suit your needs for this scenario?  </p>", "options": [{"option": "HashSet   ", "correct": false}, {"option": "HashMap   ", "correct": false}, {"option": "PriorityQueue   ", "correct": false}, {"option": "Arrays     ", "correct": false}, {"option": "ArrayList     ", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code sample?</p>\n<p>public class JavaTest {</p>\n<pre><code>private static class Stash {\n    private int x;\n\n    public int getValue() {\n        return x;\n    }\n\n    public void setValue(int newValue) {\n        x = newValue;\n    }\n};\n\npublic static void foobar(Stash s) {\n    s.setValue(2);\n    s = new Stash();\n    s.setValue(3);\n}\n\npublic static void main(String args[]) {\n    Stash s = new Stash();\n\n    s.setValue(1);\n    foobar(s);\n\n    System.out.println(s.getValue());\n}\n</code></pre>\n<p>}; </p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "0", "correct": false}, {"option": "compilation fails", "correct": false}, {"option": "exception is thrown at runtime         ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of : </p>\n<pre class=\"prettyprint\"><code>public class B{\n\n  B b= new B();\n\n public int show(){\n      return (true ? null : 0);\n }\n\n public static void main(String[] args)  {\n\n        B b= new B();\n        System.out.println(b.show());\n    }\n\n}\n</code></pre>", "options": [{"option": "Compiles & runs fine to give output \"null\"", "correct": false}, {"option": "Compiles & runs fine to give output \"0\"", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>In Java 1.8, Lambda expressions have been introduced. Which of the following is false about Lambda expressions?</p>", "options": [{"option": "Lambda expressions are used primarily to define inline implementation interfaces with more than one method.", "correct": true}, {"option": "Lambda expression eliminates the need of anonymous class", "correct": false}, {"option": "There is no need to declare the type of a parameter", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the size of int in 64-bit JVM?</p>", "options": [{"option": "32-bit", "correct": true}, {"option": "64-bit", "correct": false}, {"option": "Depends upon the JVM provider", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of : </p>\n<pre class=\"prettyprint\"><code>public class A{\n\n\n static int a = 1111;\n static\n {\n        a = a-- - --a;\n }\n\n{\n        a = a++ + ++a;\n }\n\n public static void main(String[] args)  {\n\n       System.out.println(a);\n\n    }\n\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "2219", "correct": false}, {"option": "2220", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of : </p>\n<pre class=\"prettyprint\"><code>public class B{\n\n  B b= new B();\n\n public int show(){\n      return (true ? null : 0);\n }\n\n public static void main(String[] args)  {\n\n        B b= new B();\n        System.out.println(b.show());\n    }\n\n}\n</code></pre>", "options": [{"option": "Compiles & runs fine to give output \"null\"", "correct": false}, {"option": "Compiles & runs fine to give output \"0\"", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>In Java 1.8, Lambda expressions have been introduced. Which of the following is false about Lambda expressions?</p>", "options": [{"option": "Lambda expressions are used primarily to define inline implementation interfaces with more than one method.", "correct": true}, {"option": "Lambda expression eliminates the need of anonymous class", "correct": false}, {"option": "There is no need to declare the type of a parameter", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the size of int in 64-bit JVM?</p>", "options": [{"option": "32-bit", "correct": true}, {"option": "64-bit", "correct": false}, {"option": "Depends upon the JVM provider", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of : </p>\n<pre class=\"prettyprint\"><code>public class A{\n\n\n static int a = 1111;\n static\n {\n        a = a-- - --a;\n }\n\n{\n        a = a++ + ++a;\n }\n\n public static void main(String[] args)  {\n\n       System.out.println(a);\n\n    }\n\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "2219", "correct": false}, {"option": "2220", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Manual question: what is a+a?</p>", "options": [{"option": "a", "correct": true}, {"option": "2a", "correct": false}, {"option": "aa", "correct": false}, {"option": "a2", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Manual question</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How the asynchronous events be managed in Java Enterprise Edition ?    </p>", "options": [{"option": "IPC through one to one connections", "correct": false}, {"option": "JMS specification", "correct": true}, {"option": "JNDI", "correct": false}, {"option": "Using Servlets", "correct": false}], "level": "Easy"}, {"question": "<p>When you send a JMS message from an EJB, and transaction is rolled back for any reason, will the message through JMS be sent ?</p>", "options": [{"option": "No, Message will not be sent, The message will be buffer till transaction succeeds and it will be sent only once transaction is committed.", "correct": false}, {"option": "Yes, message will be sent", "correct": true}, {"option": "Message will be sent if its a State-full EJB", "correct": false}, {"option": "Message will be sent only if the EJB is stateless MBean.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the difference between Session Bean and an Entity Bean ?</p>", "options": [{"option": "Entity Beans are used only for GUI access.", "correct": false}, {"option": "Both, the Session and Entity beans, are same.", "correct": false}, {"option": "Entity Bean is used for persistence and Session bean for transaction methods.", "correct": true}, {"option": "Entity Bean is used for writing the EJB transaction methods and Session bean is for DB lookup.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Where can container level security be applied in J2EE application ?    </p>", "options": [{"option": "EJB Methods", "correct": false}, {"option": "Web URIs and EJB Methods", "correct": true}, {"option": "Web URIs only.", "correct": false}, {"option": "Servlets", "correct": false}], "level": "Medium"}, {"question": "<p>What is the primary use of Java EE Application Server ?    </p>", "options": [{"option": "Transaction management for all transactions inside Java Application.", "correct": false}, {"option": "Security and Transaction management for Java application.", "correct": true}, {"option": "Framework running Java application.", "correct": false}, {"option": "Hosting the Servlets for GUI application.", "correct": false}], "level": "Medium"}, {"question": "<p>How the asynchronous events be managed in Java Enterprise Edition ?    </p>", "options": [{"option": "IPC through one to one connections", "correct": false}, {"option": "JMS specification", "correct": true}, {"option": "JNDI", "correct": false}, {"option": "Using Servlets", "correct": false}], "level": "Easy"}, {"question": "<p>When you send a JMS message from an EJB, and transaction is rolled back for any reason, will the message through JMS be sent ?</p>", "options": [{"option": "No, Message will not be sent, The message will be buffer till transaction succeeds and it will be sent only once transaction is committed.", "correct": false}, {"option": "Yes, message will be sent", "correct": true}, {"option": "Message will be sent if its a State-full EJB", "correct": false}, {"option": "Message will be sent only if the EJB is stateless MBean.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the difference between Session Bean and an Entity Bean ?</p>", "options": [{"option": "Entity Beans are used only for GUI access.", "correct": false}, {"option": "Both, the Session and Entity beans, are same.", "correct": false}, {"option": "Entity Bean is used for persistence and Session bean for transaction methods.", "correct": true}, {"option": "Entity Bean is used for writing the EJB transaction methods and Session bean is for DB lookup.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Where can container level security be applied in J2EE application ?    </p>", "options": [{"option": "EJB Methods", "correct": false}, {"option": "Web URIs and EJB Methods", "correct": true}, {"option": "Web URIs only.", "correct": false}, {"option": "Servlets", "correct": false}], "level": "Medium"}, {"question": "<p>What is the primary use of Java EE Application Server ?    </p>", "options": [{"option": "Transaction management for all transactions inside Java Application.", "correct": false}, {"option": "Security and Transaction management for Java application.", "correct": true}, {"option": "Framework running Java application.", "correct": false}, {"option": "Hosting the Servlets for GUI application.", "correct": false}], "level": "Medium"}, {"question": "<p>How the asynchronous events be managed in Java Enterprise Edition ?    </p>", "options": [{"option": "IPC through one to one connections", "correct": false}, {"option": "JMS specification", "correct": true}, {"option": "JNDI", "correct": false}, {"option": "Using Servlets", "correct": false}], "level": "Easy"}, {"question": "<p>When you send a JMS message from an EJB, and transaction is rolled back for any reason, will the message through JMS be sent ?</p>", "options": [{"option": "No, Message will not be sent, The message will be buffer till transaction succeeds and it will be sent only once transaction is committed.", "correct": false}, {"option": "Yes, message will be sent", "correct": true}, {"option": "Message will be sent if its a State-full EJB", "correct": false}, {"option": "Message will be sent only if the EJB is stateless MBean.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the difference between Session Bean and an Entity Bean ?</p>", "options": [{"option": "Entity Beans are used only for GUI access.", "correct": false}, {"option": "Both, the Session and Entity beans, are same.", "correct": false}, {"option": "Entity Bean is used for persistence and Session bean for transaction methods.", "correct": true}, {"option": "Entity Bean is used for writing the EJB transaction methods and Session bean is for DB lookup.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Where can container level security be applied in J2EE application ?    </p>", "options": [{"option": "EJB Methods", "correct": false}, {"option": "Web URIs and EJB Methods", "correct": true}, {"option": "Web URIs only.", "correct": false}, {"option": "Servlets", "correct": false}], "level": "Medium"}, {"question": "<p>What is the primary use of Java EE Application Server ?    </p>", "options": [{"option": "Transaction management for all transactions inside Java Application.", "correct": false}, {"option": "Security and Transaction management for Java application.", "correct": true}, {"option": "Framework running Java application.", "correct": false}, {"option": "Hosting the Servlets for GUI application.", "correct": false}], "level": "Medium"}, {"question": "<p>How the asynchronous events be managed in Java Enterprise Edition ?    </p>", "options": [{"option": "IPC through one to one connections", "correct": false}, {"option": "JMS specification", "correct": true}, {"option": "JNDI", "correct": false}, {"option": "Using Servlets", "correct": false}], "level": "Easy"}, {"question": "<p>When you send a JMS message from an EJB, and transaction is rolled back for any reason, will the message through JMS be sent ?</p>", "options": [{"option": "No, Message will not be sent, The message will be buffer till transaction succeeds and it will be sent only once transaction is committed.", "correct": false}, {"option": "Yes, message will be sent", "correct": true}, {"option": "Message will be sent if its a State-full EJB", "correct": false}, {"option": "Message will be sent only if the EJB is stateless MBean.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the difference between Session Bean and an Entity Bean ?</p>", "options": [{"option": "Entity Beans are used only for GUI access.", "correct": false}, {"option": "Both, the Session and Entity beans, are same.", "correct": false}, {"option": "Entity Bean is used for persistence and Session bean for transaction methods.", "correct": true}, {"option": "Entity Bean is used for writing the EJB transaction methods and Session bean is for DB lookup.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Where can container level security be applied in J2EE application ?    </p>", "options": [{"option": "EJB Methods", "correct": false}, {"option": "Web URIs and EJB Methods", "correct": true}, {"option": "Web URIs only.", "correct": false}, {"option": "Servlets", "correct": false}], "level": "Medium"}, {"question": "<p>What is the primary use of Java EE Application Server ?    </p>", "options": [{"option": "Transaction management for all transactions inside Java Application.", "correct": false}, {"option": "Security and Transaction management for Java application.", "correct": true}, {"option": "Framework running Java application.", "correct": false}, {"option": "Hosting the Servlets for GUI application.", "correct": false}], "level": "Medium"}, {"question": "<p>What will the following JavaScript output to the console (delineated by spaces rather than new lines).</p>\n<pre class=\"prettyprint\"><code>for(var i = 0; i &lt; 3; i++) {\n  setTimeout(function() {\n    console.log(i);\n  }, 0);\n}\n</code></pre>", "options": [{"option": "0 1 2", "correct": false}, {"option": "1 2 3", "correct": false}, {"option": "2 2 2", "correct": false}, {"option": "3 3 3", "correct": true}, {"option": "undefined undefined undefined", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Given the following JavaScript code, what would you expect to be printed out to the console? (disregard that the answers don't put each output on their own line)</p>\n<pre class=\"prettyprint\"><code>function Animal(name) {\n  this.name = name;\n}\nAnimal.prototype.getName = function() {\n  return this.name;\n}\nfunction Cat(name) {\n  this.name = name;\n}\nCat.prototype = new Animal('cat');\nvar felix = new Cat('felix');\nconsole.log(felix.name);\nconsole.log(felix.getName());\ndelete felix.name;\nconsole.log(felix.name);\nconsole.log(felix.getName());\n</code></pre>", "options": [{"option": "felix cat cat cat", "correct": false}, {"option": "felix felix cat cat", "correct": true}, {"option": "felix cat undefined cat", "correct": false}, {"option": "felix cat", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following JavaScript code, what would you expect to be printed out to the console?</p>\n<pre class=\"prettyprint\"><code>var colors = [\"red\", \"green\", \"blue\"];\ncolors['yellow'] = true;\ndelete colors.red;\ndelete colors[1];\nconsole.log(colors.length);\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following are <strong>NOT</strong> falsy?</p>", "options": [{"option": "undefined", "correct": false}, {"option": "null", "correct": false}, {"option": "0", "correct": false}, {"option": "\"\"", "correct": false}, {"option": "false", "correct": false}, {"option": "{}", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following does not resolve to true.</p>", "options": [{"option": "1", "correct": false}, {"option": "1 == \"1\"", "correct": false}, {"option": "!!0 === false ", "correct": false}, {"option": "undefined === null", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following is <strong>NOT</strong> true?</p>", "options": [{"option": "A variable prefixed with \"var \" is scoped to the function it is declared in.", "correct": false}, {"option": "A variable prefixed with \"let \" is scoped to the block (ie {}) it is declared in.", "correct": false}, {"option": "A named function can be invoked before the line where it is declared.", "correct": false}, {"option": "The \"this\" keyword can be used to create and access properties on the instance of an object when executing functions on that instance or its prototype.", "correct": false}, {"option": "You can not change the type of a variable after it has been assigned.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>JavaScript is case sensitive. </p>", "options": [{"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> final class Base\n    {\n        public void display()\n        {\n            System.out.println(\"hack\");\n        }\n    }\n\n    class Derived extends Base\n    {\n        public void display()\n        {\n            System.out.println(\"Derived\");\n        }\n    }\n\n    class M\n    {\n        public static void main(String args[])\n        {\n            Derived d=new Derived();\n            d.display();\n        }\n    }\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": false}, {"option": "hack  Derived", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> final class Base\n    {\n        public void display()\n        {\n            System.out.println(\"hack\");\n        }\n    }\n\n    class Derived extends Base\n    {\n        public void display()\n        {\n            System.out.println(\"Derived\");\n        }\n    }\n\n    class M\n    {\n        public static void main(String args[])\n        {\n            Derived d=new Derived();\n            d.display();\n        }\n    }\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": false}, {"option": "hack  Derived", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>What would be the output of the below code snippet?</p>\n<p>public class Print{\n    public static void main(String[] args) {\n      System.out.print(\"H\" + \"a\");\n      System.out.print('H' + 'a');\n    }\n   }            </p>", "options": [{"option": "HaHa ", "correct": false}, {"option": "Ha7297 ", "correct": false}, {"option": "7297Ha ", "correct": false}, {"option": "Ha169", "correct": true}], "level": "Easy"}, {"question": "<p>What would be the output of the below code snippet ?</p>\n<p>import java.util.*;</p>\n<p>class Arraylist {</p>\n<p>public static void main(String args[]) {</p>\n<pre class=\"prettyprint\"><code> ArrayList obj = new ArrayList();\n</code></pre>\n<p>obj.add(\"A\");</p>\n<p>obj.add(\"B\");</p>\n<p>obj.add(\"C\");</p>\n<p>obj.add(1, \"D\");</p>\n<p>System.out.println(obj);</p>\n<pre class=\"prettyprint\"><code>         }\n\n    }\n</code></pre>", "options": [{"option": "ABCD", "correct": false}, {"option": "ADBC", "correct": true}, {"option": "DABC", "correct": false}, {"option": "DBCA", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below code snippet?</p>\n<pre class=\"prettyprint\"><code>public class Print{\n\u00a0 \u00a0 public static void main(String[] args) {\n\u00a0 \u00a0 \u00a0 System.out.print(\"H\" + \"a\");\n\u00a0 \u00a0 \u00a0 System.out.print('H' + 'a');\n\u00a0 \u00a0 }\n\u00a0 \u00a0} \u00a0 \u00a0\n</code></pre>", "options": [{"option": "HaHa", "correct": false}, {"option": "Ha7297 ", "correct": false}, {"option": "7297Ha ", "correct": false}, {"option": "Ha169", "correct": true}], "level": "Easy"}, {"question": "<p>Output of the below Code snippet in Java:</p>\n<pre class=\"prettyprint\"><code>public class X { \n    public static void main(String [] args) {\n       try {\n          badMethod();  \n          System.out.print(\"A\");  \n       } \n       catch (RuntimeException ex) { \n           System.out.print(\"B\"); \n       } \n       catch (Exception ex1) { \n           System.out.print(\"C\"); \n       } \n       finally  {\n            System.out.print(\"D\"); \n       } \n      System.out.print(\"E\"); \n    } \n\n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}\n</code></pre>", "options": [{"option": "BD", "correct": false}, {"option": "BCD", "correct": false}, {"option": "BDE", "correct": true}, {"option": " BCDE", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the below code snippet?</p>\n<pre class=\"prettyprint\"><code>public class Print{\n\u00a0 \u00a0 public static void main(String[] args) {\n\u00a0 \u00a0 \u00a0 System.out.print(\"H\" + \"a\");\n\u00a0 \u00a0 \u00a0 System.out.print('H' + 'a');\n\u00a0 \u00a0 }\n\u00a0 \u00a0} \u00a0 \u00a0\n</code></pre>", "options": [{"option": "HaHa", "correct": false}, {"option": "Ha7297 ", "correct": false}, {"option": "7297Ha ", "correct": false}, {"option": "Ha169", "correct": true}], "level": "Easy"}, {"question": "<p>Output of the below Code snippet in Java:</p>\n<pre class=\"prettyprint\"><code>public class X { \n    public static void main(String [] args) {\n       try {\n          badMethod();  \n          System.out.print(\"A\");  \n       } \n       catch (RuntimeException ex) { \n           System.out.print(\"B\"); \n       } \n       catch (Exception ex1) { \n           System.out.print(\"C\"); \n       } \n       finally  {\n            System.out.print(\"D\"); \n       } \n      System.out.print(\"E\"); \n    } \n\n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}\n</code></pre>", "options": [{"option": "BD", "correct": false}, {"option": "BCD", "correct": false}, {"option": "BDE", "correct": true}, {"option": " BCDE", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of these is an incorrect array declaration?</p>", "options": [{"option": "a) int arr[] = new int[5]", "correct": false}, {"option": "b) int [] arr = new int[5]", "correct": false}, {"option": "c) int arr[] arr = new int[5]", "correct": false}, {"option": "d) int arr[] = int [5] new", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these jump statements can skip processing remainder of code in its body for a particular iteration?</p>", "options": [{"option": "break", "correct": false}, {"option": "return", "correct": false}, {"option": "exit", "correct": false}, {"option": "continue", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>If subclass (child class) has the same method as declared in the parent class, it is known as?</p>", "options": [{"option": "Method overriding", "correct": true}, {"option": "Method overloading", "correct": false}, {"option": "Constructor overloading", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these methods can be used to convert all characters in a String into a character array?</p>", "options": [{"option": "charAt()", "correct": false}, {"option": "getChars()", "correct": false}, {"option": "toCharArray()", "correct": false}, {"option": "All of the mentioned", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of these is an incorrect array declaration?</p>", "options": [{"option": "a) int arr[] = new int[5]", "correct": false}, {"option": "b) int [] arr = new int[5]", "correct": false}, {"option": "c) int arr[] arr = new int[5]", "correct": false}, {"option": "d) int arr[] = int [5] new", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these jump statements can skip processing remainder of code in its body for a particular iteration?</p>", "options": [{"option": "break", "correct": false}, {"option": "return", "correct": false}, {"option": "exit", "correct": false}, {"option": "continue", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>If subclass (child class) has the same method as declared in the parent class, it is known as?</p>", "options": [{"option": "Method overriding", "correct": true}, {"option": "Method overloading", "correct": false}, {"option": "Constructor overloading", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these methods can be used to convert all characters in a String into a character array?</p>", "options": [{"option": "charAt()", "correct": false}, {"option": "getChars()", "correct": false}, {"option": "toCharArray()", "correct": false}, {"option": "All of the mentioned", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What will be the output of following code?</p>\n<pre class=\"prettyprint\"><code>var num = 0;\nvar obj = new String(\"0\");\nvar str = \"0\";\nvar b = false;\nconsole.log(num == obj);\n</code></pre>", "options": [{"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Check\n{\n    public static void main (String[] args) \n    {\n        int arr1[] = {1, 2, 3};\n        int arr2[] = {1, 2, 3};\n        if (arr1 == arr2) \n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (Arrays.equals(arr1, arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (arr1.equals(arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.println(\"Not same\");\n    }\n}\n</code></pre>\n<p><strong>What is the output of the above program?</strong></p>", "options": [{"option": "Not same\r\nSame\r\nNot same", "correct": true}, {"option": "Not same\r\nSame\r\nSame", "correct": false}, {"option": "Same\r\nSame\r\nSame", "correct": false}, {"option": "Not same\r\nNot same\r\nSame", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Te\n{\n    public static void main (String[] args) \n    {\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        String s3= new String(\"abc\");\n       String s4= new String(\"abc\");\n\n        System.out.print(s1==s2+\" \"); \n        System.out.print(s1==s3+\" \"); \n        System.out.print(s3==s4+\" \"); \n\n        System.out.println((s1.equals(s3))); \n\n    }\n}\n</code></pre>\n<p><strong>Find the output of the given code.</strong></p>", "options": [{"option": "True\r\nFalse\r\nTrue\r\nFalse\t", "correct": false}, {"option": "True\r\nFalse\r\nFalse\r\nTrue", "correct": true}, {"option": "True\r\nTrue\r\nTrue\r\nTrue", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<p></p><pre class=\"prettyprint\"><code>import java.io.*;\n1 class fun {\n2    public static void main(String args[]) {  \n3        System.out.println(foo());\n4    }\n5    int foo() {\n6        return 20;\n7    }\n8}\n</code></pre>\n<strong>The program gives compilation error. Which line should be changed to remove the error?</strong><p></p>", "options": [{"option": "Line 2", "correct": false}, {"option": "Line 3", "correct": false}, {"option": "Line 5", "correct": true}, {"option": "Line 6", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass fun\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            int arr[]= {1, 2, 3};\n            for (int i = 1; i &lt;= 3; i++)\n            {\n                System.out.print ( arr[i] +\u201d \u201c);\n            }\n                System.out.println();\n        }\n        catch (Exception e)\n        {\n           System.out.println (\"Runtime error \");\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println (\"Array Index Out Of Bounds Exception\");\n        }\n    }\n}\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Array Index Out Of Bounds Exception", "correct": false}, {"option": "1 2 3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nabstract class A\n{\n    public int a;\n    A()\n    {\n        a = 10;\n    }\n    abstract public void set();\n    abstract final public void get();\n}\n\nclass B extends A\n{\n    public void set(int a)\n    {\n        this.a = a;\n    }\n    final public void get()\n    {\n        System.out.println(\"a = \" + a);\n    }\n    public static void main(String[] args)\n    {\n        B obj = new B();\n        obj.set(20);\n        obj.get();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "a=10", "correct": false}, {"option": "a=20", "correct": false}, {"option": "Compilation error ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Check\n{\n    public static void main (String[] args) \n    {\n        int arr1[] = {1, 2, 3};\n        int arr2[] = {1, 2, 3};\n        if (arr1 == arr2) \n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (Arrays.equals(arr1, arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (arr1.equals(arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.println(\"Not same\");\n    }\n}\n</code></pre>\n<p><strong>What is the output of the above program?</strong></p>", "options": [{"option": "Not same\r\nSame\r\nNot same", "correct": true}, {"option": "Not same\r\nSame\r\nSame", "correct": false}, {"option": "Same\r\nSame\r\nSame", "correct": false}, {"option": "Not same\r\nNot same\r\nSame", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Te\n{\n    public static void main (String[] args) \n    {\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        String s3= new String(\"abc\");\n       String s4= new String(\"abc\");\n\n        System.out.print(s1==s2+\" \"); \n        System.out.print(s1==s3+\" \"); \n        System.out.print(s3==s4+\" \"); \n\n        System.out.println((s1.equals(s3))); \n\n    }\n}\n</code></pre>\n<p><strong>Find the output of the given code.</strong></p>", "options": [{"option": "True\r\nFalse\r\nTrue\r\nFalse\t", "correct": false}, {"option": "True\r\nFalse\r\nFalse\r\nTrue", "correct": true}, {"option": "True\r\nTrue\r\nTrue\r\nTrue", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<p></p><pre class=\"prettyprint\"><code>import java.io.*;\n1 class fun {\n2    public static void main(String args[]) {  \n3        System.out.println(foo());\n4    }\n5    int foo() {\n6        return 20;\n7    }\n8}\n</code></pre>\n<strong>The program gives compilation error. Which line should be changed to remove the error?</strong><p></p>", "options": [{"option": "Line 2", "correct": false}, {"option": "Line 3", "correct": false}, {"option": "Line 5", "correct": true}, {"option": "Line 6", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass fun\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            int arr[]= {1, 2, 3};\n            for (int i = 1; i &lt;= 3; i++)\n            {\n                System.out.print ( arr[i] +\u201d \u201c);\n            }\n                System.out.println();\n        }\n        catch (Exception e)\n        {\n           System.out.println (\"Runtime error \");\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println (\"Array Index Out Of Bounds Exception\");\n        }\n    }\n}\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Array Index Out Of Bounds Exception", "correct": false}, {"option": "1 2 3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nabstract class A\n{\n    public int a;\n    A()\n    {\n        a = 10;\n    }\n    abstract public void set();\n    abstract final public void get();\n}\n\nclass B extends A\n{\n    public void set(int a)\n    {\n        this.a = a;\n    }\n    final public void get()\n    {\n        System.out.println(\"a = \" + a);\n    }\n    public static void main(String[] args)\n    {\n        B obj = new B();\n        obj.set(20);\n        obj.get();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "a=10", "correct": false}, {"option": "a=20", "correct": false}, {"option": "Compilation error ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Check\n{\n    public static void main (String[] args) \n    {\n        int arr1[] = {1, 2, 3};\n        int arr2[] = {1, 2, 3};\n        if (arr1 == arr2) \n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (Arrays.equals(arr1, arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (arr1.equals(arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.println(\"Not same\");\n    }\n}\n</code></pre>\n<p><strong>What is the output of the above program?</strong></p>", "options": [{"option": "Not same\r\nSame\r\nNot same", "correct": true}, {"option": "Not same\r\nSame\r\nSame", "correct": false}, {"option": "Same\r\nSame\r\nSame", "correct": false}, {"option": "Not same\r\nNot same\r\nSame", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Te\n{\n    public static void main (String[] args) \n    {\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        String s3= new String(\"abc\");\n       String s4= new String(\"abc\");\n\n        System.out.print(s1==s2+\" \"); \n        System.out.print(s1==s3+\" \"); \n        System.out.print(s3==s4+\" \"); \n\n        System.out.println((s1.equals(s3))); \n\n    }\n}\n</code></pre>\n<p><strong>Find the output of the given code.</strong></p>", "options": [{"option": "True\r\nFalse\r\nTrue\r\nFalse\t", "correct": false}, {"option": "True\r\nFalse\r\nFalse\r\nTrue", "correct": true}, {"option": "True\r\nTrue\r\nTrue\r\nTrue", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<p></p><pre class=\"prettyprint\"><code>import java.io.*;\n1 class fun {\n2    public static void main(String args[]) {  \n3        System.out.println(foo());\n4    }\n5    int foo() {\n6        return 20;\n7    }\n8}\n</code></pre>\n<strong>The program gives compilation error. Which line should be changed to remove the error?</strong><p></p>", "options": [{"option": "Line 2", "correct": false}, {"option": "Line 3", "correct": false}, {"option": "Line 5", "correct": true}, {"option": "Line 6", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass fun\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            int arr[]= {1, 2, 3};\n            for (int i = 1; i &lt;= 3; i++)\n            {\n                System.out.print ( arr[i] +\u201d \u201c);\n            }\n                System.out.println();\n        }\n        catch (Exception e)\n        {\n           System.out.println (\"Runtime error \");\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println (\"Array Index Out Of Bounds Exception\");\n        }\n    }\n}\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Array Index Out Of Bounds Exception", "correct": false}, {"option": "1 2 3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nabstract class A\n{\n    public int a;\n    A()\n    {\n        a = 10;\n    }\n    abstract public void set();\n    abstract final public void get();\n}\n\nclass B extends A\n{\n    public void set(int a)\n    {\n        this.a = a;\n    }\n    final public void get()\n    {\n        System.out.println(\"a = \" + a);\n    }\n    public static void main(String[] args)\n    {\n        B obj = new B();\n        obj.set(20);\n        obj.get();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "a=10", "correct": false}, {"option": "a=20", "correct": false}, {"option": "Compilation error ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Check\n{\n    public static void main (String[] args) \n    {\n        int arr1[] = {1, 2, 3};\n        int arr2[] = {1, 2, 3};\n        if (arr1 == arr2) \n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (Arrays.equals(arr1, arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.print(\"Not same \");\n        if (arr1.equals(arr2))\n            System.out.print(\"Same \");\n        else\n            System.out.println(\"Not same\");\n    }\n}\n</code></pre>\n<p><strong>What is the output of the above program?</strong></p>", "options": [{"option": "Not same\r\nSame\r\nNot same", "correct": true}, {"option": "Not same\r\nSame\r\nSame", "correct": false}, {"option": "Same\r\nSame\r\nSame", "correct": false}, {"option": "Not same\r\nNot same\r\nSame", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass Te\n{\n    public static void main (String[] args) \n    {\n        String s1 = \"abc\";\n        String s2 = \"abc\";\n        String s3= new String(\"abc\");\n       String s4= new String(\"abc\");\n\n        System.out.print(s1==s2+\" \"); \n        System.out.print(s1==s3+\" \"); \n        System.out.print(s3==s4+\" \"); \n\n        System.out.println((s1.equals(s3))); \n\n    }\n}\n</code></pre>\n<p><strong>Find the output of the given code.</strong></p>", "options": [{"option": "True\r\nFalse\r\nTrue\r\nFalse\t", "correct": false}, {"option": "True\r\nFalse\r\nFalse\r\nTrue", "correct": true}, {"option": "True\r\nTrue\r\nTrue\r\nTrue", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<p></p><pre class=\"prettyprint\"><code>import java.io.*;\n1 class fun {\n2    public static void main(String args[]) {  \n3        System.out.println(foo());\n4    }\n5    int foo() {\n6        return 20;\n7    }\n8}\n</code></pre>\n<strong>The program gives compilation error. Which line should be changed to remove the error?</strong><p></p>", "options": [{"option": "Line 2", "correct": false}, {"option": "Line 3", "correct": false}, {"option": "Line 5", "correct": true}, {"option": "Line 6", "correct": false}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nclass fun\n{\n    public static void main(String[] args)\n    {\n        try\n        {\n            int arr[]= {1, 2, 3};\n            for (int i = 1; i &lt;= 3; i++)\n            {\n                System.out.print ( arr[i] +\u201d \u201c);\n            }\n                System.out.println();\n        }\n        catch (Exception e)\n        {\n           System.out.println (\"Runtime error \");\n        }\n        catch (ArrayIndexOutOfBoundsException e)\n        {\n            System.out.println (\"Array Index Out Of Bounds Exception\");\n        }\n    }\n}\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Array Index Out Of Bounds Exception", "correct": false}, {"option": "1 2 3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<h2>JAVA Programming</h2>\n<pre class=\"prettyprint\"><code>import java.io.*;\nabstract class A\n{\n    public int a;\n    A()\n    {\n        a = 10;\n    }\n    abstract public void set();\n    abstract final public void get();\n}\n\nclass B extends A\n{\n    public void set(int a)\n    {\n        this.a = a;\n    }\n    final public void get()\n    {\n        System.out.println(\"a = \" + a);\n    }\n    public static void main(String[] args)\n    {\n        B obj = new B();\n        obj.set(20);\n        obj.get();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of the given program?</strong></p>", "options": [{"option": "a=10", "correct": false}, {"option": "a=20", "correct": false}, {"option": "Compilation error ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these is a Java concept?</p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Inheritance", "correct": false}, {"option": "Abstraction", "correct": false}, {"option": "All", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following methods is used to convert Array to the ArrayList?</p>", "options": [{"option": "Arrays.asList()", "correct": false}, {"option": "Collections.addAll()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Arrays.convert()", "correct": false}], "level": "Easy"}, {"question": "<p>Which access specifiers can be used with top level class ?</p>", "options": [{"option": "public or private", "correct": false}, {"option": "private or protected", "correct": false}, {"option": "public or protected", "correct": false}, {"option": "public or default", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which is of the following is NOT TRUE for JVM ?</p>", "options": [{"option": "JVM reads Source Code and generates Byte Code.", "correct": true}, {"option": "JVM reads Byte Code and generates Machine Code.", "correct": false}, {"option": "JVM is a virtual Machine that acts as a intermediary between Java Application and Host Operating System.", "correct": false}, {"option": "JVM acts as a translator that translates different Machine code ( on the basis of Host Machine ) for a common Byte Code.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following collection maintain its elements in Natural Sorted order ? </p>", "options": [{"option": "HashMap", "correct": false}, {"option": "LinkedHashMap", "correct": false}, {"option": "LinkedMap", "correct": false}, {"option": "TreeMap", "correct": true}], "level": "Very-Easy"}, {"question": "<p>If we try to add duplicate key to the HashMap, What will happen ?</p>", "options": [{"option": "It will throw an exception.", "correct": false}, {"option": "The new element will replace the existing element.", "correct": true}, {"option": "Compiler will identify the problem and will throw an error.", "correct": false}, {"option": "It won't add the new Element without any exception.", "correct": false}], "level": "Easy"}, {"question": "<p>Which interface does java.util.Hashtable implement ?</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "Map", "correct": true}, {"option": "Collection", "correct": false}], "level": "Easy"}, {"question": "<p>Which keyword is used to provide explicit access of a code block to single thread ?</p>", "options": [{"option": "Synchronized", "correct": true}, {"option": "Explicit", "correct": false}, {"option": "Final", "correct": false}, {"option": "Transient", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not possible ?</p>", "options": [{"option": "try block followed by catch", "correct": false}, {"option": "try block followed by finally", "correct": false}, {"option": "try block without catch or finally block", "correct": true}, {"option": "try block followed by catch block and then finally", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not valid var args declaration ?</p>", "options": [{"option": "int sum (int... numbers)", "correct": false}, {"option": "int sum (.int .. numbers)", "correct": true}, {"option": "int sum (int ... numbers)", "correct": false}, {"option": "int sum (int x, int ... numbers)", "correct": false}], "level": "Easy"}, {"question": "<p>Multiple inheritance means?</p>", "options": [{"option": "one class inheriting from more super classes", "correct": true}, {"option": "more classes inheriting from one super class", "correct": false}, {"option": "more classes inheriting from more super classes", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following is incorrect statement about packages?</p>", "options": [{"option": "Package defines a namespace in which classes are stored.", "correct": false}, {"option": "A package can contain other package within it.", "correct": false}, {"option": "Java uses file system directories to store packages.", "correct": false}, {"option": "A package can be renamed without renaming the directory in which the classes are stored.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of this access specifies can be used for a class so that its members can be accessed by a different class in the same package?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Protected", "correct": false}, {"option": "No Modifier", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is correct way of implementing an interface salary by class manager?</p>", "options": [{"option": "class manager extends salary {}", "correct": false}, {"option": "class manager implements salary {}", "correct": true}, {"option": "class manager imports salary {}", "correct": false}, {"option": "None of the mentioned.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which keyword is used by method to refer to the object that invoked it?</p>", "options": [{"option": "import", "correct": false}, {"option": "catch", "correct": false}, {"option": "this", "correct": true}, {"option": "none", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these keywords is used to prevent content of a variable from being modified?</p>", "options": [{"option": "last", "correct": false}, {"option": "static", "correct": false}, {"option": "constant", "correct": false}, {"option": "final", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of these methods can be used to move to next element in a collection?</p>", "options": [{"option": "next()", "correct": true}, {"option": "move()", "correct": false}, {"option": "hasNext()", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these exceptions is thrown by remover() method?</p>", "options": [{"option": " IOException", "correct": false}, {"option": "SystemException", "correct": false}, {"option": "ObjectNotFoundExeception", "correct": false}, {"option": "IllegalStateException", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these type parameters is used for a generic class to return and accept any type of object?</p>", "options": [{"option": "K", "correct": false}, {"option": "T", "correct": true}, {"option": "N", "correct": false}, {"option": "V", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which of these data types is used by operating system to manage the Recursion in Java?</p>", "options": [{"option": "Tree", "correct": false}, {"option": "Array", "correct": false}, {"option": "Queue", "correct": false}, {"option": "Stack", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these class allows us to get real time data about private and protected member of a class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "GetInformation", "correct": false}, {"option": "ReflectPermission", "correct": true}, {"option": "MembersPermission", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these process occur automatically by java run time system?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Garbage collection", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "All of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these class is used to access actual bits or content information of a URL?</p>", "options": [{"option": "URL", "correct": false}, {"option": "URLDecoder", "correct": false}, {"option": "URLConnection", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of these exception is thrown in cases when the file specified for writing it not found?</p>", "options": [{"option": "IOException", "correct": false}, {"option": "FileException", "correct": false}, {"option": "FileInputException", "correct": false}, {"option": "FileNotFoundException", "correct": true}], "level": "Easy"}, {"question": "<p>import java.util.*;</p>\n<p>public class HashTable {\n    public static void main(String args[]) {</p>\n<pre class=\"prettyprint\"><code>    Hashtable obj = new Hashtable();\n    obj.put(\"A\", new Integer(3));\n    obj.put(\"B\", new Integer(2));\n    obj.put(\"C\", new Integer(8));       \n    Hashtable object = obj;             \n    obj.clear();\n\n    System.out.print(object.size());\n\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "3", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": true}, {"option": "2", "correct": false}], "level": "Medium"}, {"question": "<p>Whats the output of the code?</p>\n<p>class A {\n    public int i;\n    private int j;\n}    </p>\n<p>class B extends A {\n    void display() {\n        super.j = super.i + 1;\n        System.out.println(super.i + \" \" + super.j);\n    }</p>\n<p>public class Inheitance {\n    public static void main(String args[])\n    {\n        B obj = new B();\n        obj.i=1;\n        obj.j=2;<br />\n        obj.display();   <br />\n    }\n}\n}    </p>", "options": [{"option": "2 2", "correct": false}, {"option": "3 3", "correct": false}, {"option": "RunTime Error", "correct": false}, {"option": "Compiletime Error", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of these keywords is used to by the calling function to guard against the exception that is thrown by called function?</p>", "options": [{"option": "try", "correct": false}, {"option": "catch", "correct": false}, {"option": "throws", "correct": true}, {"option": "throw", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following keywords are used for lower bounding a wild card?</p>", "options": [{"option": "extends", "correct": false}, {"option": "super", "correct": true}, {"option": "class", "correct": false}, {"option": "lower", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which access specifiers can be used with top level class ?</p>", "options": [{"option": "public or private", "correct": false}, {"option": "private or protected", "correct": false}, {"option": "public or protected", "correct": false}, {"option": "public or default", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which is of the following is NOT TRUE for JVM ?</p>", "options": [{"option": "JVM reads Source Code and generates Byte Code.", "correct": true}, {"option": "JVM reads Byte Code and generates Machine Code.", "correct": false}, {"option": "JVM is a virtual Machine that acts as a intermediary between Java Application and Host Operating System.", "correct": false}, {"option": "JVM acts as a translator that translates different Machine code ( on the basis of Host Machine ) for a common Byte Code.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following collection maintain its elements in Natural Sorted order ? </p>", "options": [{"option": "HashMap", "correct": false}, {"option": "LinkedHashMap", "correct": false}, {"option": "LinkedMap", "correct": false}, {"option": "TreeMap", "correct": true}], "level": "Very-Easy"}, {"question": "<p>If we try to add duplicate key to the HashMap, What will happen ?</p>", "options": [{"option": "It will throw an exception.", "correct": false}, {"option": "The new element will replace the existing element.", "correct": true}, {"option": "Compiler will identify the problem and will throw an error.", "correct": false}, {"option": "It won't add the new Element without any exception.", "correct": false}], "level": "Easy"}, {"question": "<p>Which interface does java.util.Hashtable implement ?</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "Map", "correct": true}, {"option": "Collection", "correct": false}], "level": "Easy"}, {"question": "<p>Which keyword is used to provide explicit access of a code block to single thread ?</p>", "options": [{"option": "Synchronized", "correct": true}, {"option": "Explicit", "correct": false}, {"option": "Final", "correct": false}, {"option": "Transient", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not possible ?</p>", "options": [{"option": "try block followed by catch", "correct": false}, {"option": "try block followed by finally", "correct": false}, {"option": "try block without catch or finally block", "correct": true}, {"option": "try block followed by catch block and then finally", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not valid var args declaration ?</p>", "options": [{"option": "int sum (int... numbers)", "correct": false}, {"option": "int sum (.int .. numbers)", "correct": true}, {"option": "int sum (int ... numbers)", "correct": false}, {"option": "int sum (int x, int ... numbers)", "correct": false}], "level": "Easy"}, {"question": "<p>Multiple inheritance means?</p>", "options": [{"option": "one class inheriting from more super classes", "correct": true}, {"option": "more classes inheriting from one super class", "correct": false}, {"option": "more classes inheriting from more super classes", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following is incorrect statement about packages?</p>", "options": [{"option": "Package defines a namespace in which classes are stored.", "correct": false}, {"option": "A package can contain other package within it.", "correct": false}, {"option": "Java uses file system directories to store packages.", "correct": false}, {"option": "A package can be renamed without renaming the directory in which the classes are stored.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of this access specifies can be used for a class so that its members can be accessed by a different class in the same package?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Protected", "correct": false}, {"option": "No Modifier", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is correct way of implementing an interface salary by class manager?</p>", "options": [{"option": "class manager extends salary {}", "correct": false}, {"option": "class manager implements salary {}", "correct": true}, {"option": "class manager imports salary {}", "correct": false}, {"option": "None of the mentioned.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which keyword is used by method to refer to the object that invoked it?</p>", "options": [{"option": "import", "correct": false}, {"option": "catch", "correct": false}, {"option": "this", "correct": true}, {"option": "none", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these keywords is used to prevent content of a variable from being modified?</p>", "options": [{"option": "last", "correct": false}, {"option": "static", "correct": false}, {"option": "constant", "correct": false}, {"option": "final", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of these methods can be used to move to next element in a collection?</p>", "options": [{"option": "next()", "correct": true}, {"option": "move()", "correct": false}, {"option": "hasNext()", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these exceptions is thrown by remover() method?</p>", "options": [{"option": " IOException", "correct": false}, {"option": "SystemException", "correct": false}, {"option": "ObjectNotFoundExeception", "correct": false}, {"option": "IllegalStateException", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these type parameters is used for a generic class to return and accept any type of object?</p>", "options": [{"option": "K", "correct": false}, {"option": "T", "correct": true}, {"option": "N", "correct": false}, {"option": "V", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which of these data types is used by operating system to manage the Recursion in Java?</p>", "options": [{"option": "Tree", "correct": false}, {"option": "Array", "correct": false}, {"option": "Queue", "correct": false}, {"option": "Stack", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these class allows us to get real time data about private and protected member of a class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "GetInformation", "correct": false}, {"option": "ReflectPermission", "correct": true}, {"option": "MembersPermission", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these process occur automatically by java run time system?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Garbage collection", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "All of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these class is used to access actual bits or content information of a URL?</p>", "options": [{"option": "URL", "correct": false}, {"option": "URLDecoder", "correct": false}, {"option": "URLConnection", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of these exception is thrown in cases when the file specified for writing it not found?</p>", "options": [{"option": "IOException", "correct": false}, {"option": "FileException", "correct": false}, {"option": "FileInputException", "correct": false}, {"option": "FileNotFoundException", "correct": true}], "level": "Easy"}, {"question": "<p>import java.util.*;</p>\n<p>public class HashTable {\n    public static void main(String args[]) {</p>\n<pre class=\"prettyprint\"><code>    Hashtable obj = new Hashtable();\n    obj.put(\"A\", new Integer(3));\n    obj.put(\"B\", new Integer(2));\n    obj.put(\"C\", new Integer(8));       \n    Hashtable object = obj;             \n    obj.clear();\n\n    System.out.print(object.size());\n\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "3", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": true}, {"option": "2", "correct": false}], "level": "Medium"}, {"question": "<p>Whats the output of the code?</p>\n<p>class A {\n    public int i;\n    private int j;\n}    </p>\n<p>class B extends A {\n    void display() {\n        super.j = super.i + 1;\n        System.out.println(super.i + \" \" + super.j);\n    }</p>\n<p>public class Inheitance {\n    public static void main(String args[])\n    {\n        B obj = new B();\n        obj.i=1;\n        obj.j=2;<br />\n        obj.display();   <br />\n    }\n}\n}    </p>", "options": [{"option": "2 2", "correct": false}, {"option": "3 3", "correct": false}, {"option": "RunTime Error", "correct": false}, {"option": "Compiletime Error", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of these keywords is used to by the calling function to guard against the exception that is thrown by called function?</p>", "options": [{"option": "try", "correct": false}, {"option": "catch", "correct": false}, {"option": "throws", "correct": true}, {"option": "throw", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following keywords are used for lower bounding a wild card?</p>", "options": [{"option": "extends", "correct": false}, {"option": "super", "correct": true}, {"option": "class", "correct": false}, {"option": "lower", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>In Java, which of the following statements is correct?</p>", "options": [{"option": "If a class is declared without allocating memory, then it is only a template.", "correct": false}, {"option": "Memory is allocated when the object of a class is declared.", "correct": false}, {"option": "A class is a blueprint from which objects are created.", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Easy"}, {"question": "<p>Given two objects <em>a</em> and <em>b</em>, which of the following sentences is true</p>", "options": [{"option": "if a.equals(b) is true, then a.hashCode() == b.hashCode()", "correct": true}, {"option": "If a.equals(b) is false, then a.hashCode() != b.hashCode()", "correct": false}, {"option": "if a.hashCode() == b.hashCode(), then a.equals(b) is true", "correct": false}, {"option": "if a.hashCode() != b.hashCode(), then a.equals(b) is true", "correct": false}], "level": "Medium"}, {"question": "<p>Given two objects <em>a</em> and <em>b</em>, which of the following sentences is true</p>", "options": [{"option": "if a.equals(b) is true, then a.hashCode() == b.hashCode()", "correct": true}, {"option": "If a.equals(b) is false, then a.hashCode() != b.hashCode()", "correct": false}, {"option": "if a.hashCode() == b.hashCode(), then a.equals(b) is true", "correct": false}, {"option": "if a.hashCode() != b.hashCode(), then a.equals(b) is true", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>console.log('' == 0);\n</code></pre>\n<p>is</p>", "options": [{"option": "NaN", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "undefined", "correct": false}], "level": "Easy-Medium"}, {"question": "<pre class=\"prettyprint\"><code>console.log('' == 0);\n</code></pre>\n<p>is</p>", "options": [{"option": "NaN", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "undefined", "correct": false}], "level": "Easy-Medium"}, {"question": "<pre class=\"prettyprint\"><code>console.log('' == 0);\n</code></pre>\n<p>is</p>", "options": [{"option": "NaN", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "undefined", "correct": false}], "level": "Easy-Medium"}, {"question": "<pre class=\"prettyprint\"><code>console.log('' == 0);\n</code></pre>\n<p>is</p>", "options": [{"option": "NaN", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "undefined", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n    public static int func()\n       {\n           try {               \n                return 0;\n           }\n           finally {                \n                return 1;\n           }\n      }\n    public static void main(String[] args) \n\t{\n         System.out.println(HackerEarth.func());\n      }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java :</p>\n<pre class=\"prettyprint\"><code>import java.util.Arrays;\nimport java.util.List;\npublic class Test \n{ \npublic static void main(String[] arg) \n{ \n     int i = 1; \n     int [] array = {1, 2, 3};\n     int z = 0; \n     array[i] = z = ++i; \n      List&lt;Integer&gt; li = Arrays.asList(array); \n          System.out.println(li + \"#\" + z); \n    }\n\n}\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "[1, 2, 3]#2", "correct": false}, {"option": "[1, 2, 3]#0", "correct": false}, {"option": "[1, 2, 3]#1", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How many objects are eligible for garbage collection after executing line 15?</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Test\n{\n    public static void main(String args[])\n    {\n        Integer i1=new Integer(2000);\n        Integer i2=new Integer(3000);\n        Integer i3=new Integer(4000);\n\n        Object a = i1;\n        i1=i2;\n        i2=i3;\n        i3=null;// Line 15\n\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "0", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\npublic class Tester{\n    public static void main(String[] args) {\n        List&lt;Human&gt; humans = new ArrayList&lt;Human&gt;();\n        humans.add(new Human(13));\n        humans.add(new Human(33));\n        humans.add(new Human(21));\n        humans.add(new Human(20)); // line 1\n        HumanComparator c = new HumanComparator(); // line 2\n        Collections.sort(humans, c); // line 3\n        System.out.print(humans.get(0).age);\n        Collections.sort(humans); // line 4\n        System.out.print(humans.get(1).age);\n    }\n}\nclass Human implements Comparable&lt;Human&gt; {\n    Integer age;\n    public Human(int age) {\n        this.age = age;\n    }\n    public int compareTo(Human h) {\n        return h.age.compareTo(this.age);\n    }\n}\nclass HumanComparator implements Comparator&lt;Human&gt; {\n    public int compare(Human h1, Human h2) {\n        return h1.age.compareTo(h2.age);\n    }\n}\n</code></pre>", "options": [{"option": "13 21", "correct": true}, {"option": "21 20", "correct": false}, {"option": "20 33", "correct": false}, {"option": "21 13", "correct": false}, {"option": "Compilation fails at line 4", "correct": false}, {"option": "Compilation fails at line 1", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How can a <strong>thread</strong> own the lock of an object?</p>\n<ol>\n<li>When the thread executes a synchronized instance method of that object</li>\n<li>When the thread executes a synchronized statement block in the object</li>\n<li>When the thread calls wait() on this object</li>\n</ol>", "options": [{"option": "Only 1 option", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "Only 2 option", "correct": false}, {"option": "Only 2 option", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>kakakakakakakaka</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "121212", "correct": true}, {"option": "212121", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the methods below is defined in the class Object?</p>\n<ol>\n<li>wait() </li>\n<li>notify()</li>\n<li>toString()</li>\n<li>finalize()</li>\n<li>sleep()</li>\n</ol>", "options": [{"option": "1 and 5", "correct": false}, {"option": "Only 5", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, 3 and 4", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Test extends Thread {\n    static int count = 0;\n    public static void main(String argv[]) throws InterruptedException {\n        Test t = new Test ();\n        t.increment(count);\n        t.start();\n        Thread.sleep(500);\n        System.out.println(count);\n    }\n    public void increment(int count) {\n        ++count;\n    }\n    public void run() {\n        count = count + 8;\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "An InterruptedException may be thrown", "correct": false}, {"option": "8", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class ProfileTest {\n     private ProfileTest(int w) { // line 3\n        System.out.println(w);\n    }\n    public static ProfileTest() { // line 6\n        System.out.println(5);\n    }\n    public static void main(String args[]) {\n        ProfileTest obj = new ProfileTest(10);\n}\n}\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "5", "correct": false}, {"option": "Won't compile because of Line 3(Constructor can't be private)", "correct": false}, {"option": "Won't compile because of Line 6(Constructor can't be static)", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Tester {\n    static void method(){\n        throw new Exception();\n    }\n    public static void main(String[] args) {\n        try {\n            method();\n        } catch (Throwable e) {\n            try {\n                throw new Exception() ;\n            } catch (Exception ex) {\n                System.out.print(\"exception\");\n            } finally {\n                System.out.print(\"finally\");\n            }\n        }\n    }\n}\n</code></pre>", "options": [{"option": "finally", "correct": false}, {"option": "exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "finally , exception", "correct": false}, {"option": "exception, finally", "correct": false}], "level": "Medium"}, {"question": "<p>Will the following code compile and if yes , what is the output?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\ninterface Colorable {}\nclass Vehicle {}\nclass Car extends Vehicle implements Colorable {}\npublic class Tester {\n    public static void main(String[] args) {\n        Vehicle a = new Car();\n        Colorable i = (Colorable) a;//Line1\n        Vehicle b = new Vehicle(); \n       Colorable j = (Colorable) b; //Line 2\n    }\n}\n</code></pre>", "options": [{"option": "The code compile fine without any output", "correct": false}, {"option": "Compilation fails at Line 2", "correct": false}, {"option": "Compilation fails at Line1", "correct": false}, {"option": "Runtime error (due to Line 1)", "correct": false}, {"option": "Runtime error (due to Line 2)", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of below Java :</p>\n<pre class=\"prettyprint\"><code>import java.util.Arrays;\nimport java.util.List;\npublic class Test \n{ \npublic static void main(String[] arg) \n{ \n     int i = 1; \n     int [] array = {1, 2, 3};\n     int z = 0; \n     array[i] = z = ++i; \n      List&lt;Integer&gt; li = Arrays.asList(array); \n          System.out.println(li + \"#\" + z); \n    }\n\n}\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "[1, 2, 3]#2", "correct": false}, {"option": "[1, 2, 3]#0", "correct": false}, {"option": "[1, 2, 3]#1", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How many objects are eligible for garbage collection after executing line 15?</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Test\n{\n    public static void main(String args[])\n    {\n        Integer i1=new Integer(2000);\n        Integer i2=new Integer(3000);\n        Integer i3=new Integer(4000);\n\n        Object a = i1;\n        i1=i2;\n        i2=i3;\n        i3=null;// Line 15\n\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "0", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\npublic class Tester{\n    public static void main(String[] args) {\n        List&lt;Human&gt; humans = new ArrayList&lt;Human&gt;();\n        humans.add(new Human(13));\n        humans.add(new Human(33));\n        humans.add(new Human(21));\n        humans.add(new Human(20)); // line 1\n        HumanComparator c = new HumanComparator(); // line 2\n        Collections.sort(humans, c); // line 3\n        System.out.print(humans.get(0).age);\n        Collections.sort(humans); // line 4\n        System.out.print(humans.get(1).age);\n    }\n}\nclass Human implements Comparable&lt;Human&gt; {\n    Integer age;\n    public Human(int age) {\n        this.age = age;\n    }\n    public int compareTo(Human h) {\n        return h.age.compareTo(this.age);\n    }\n}\nclass HumanComparator implements Comparator&lt;Human&gt; {\n    public int compare(Human h1, Human h2) {\n        return h1.age.compareTo(h2.age);\n    }\n}\n</code></pre>", "options": [{"option": "13 21", "correct": true}, {"option": "21 20", "correct": false}, {"option": "20 33", "correct": false}, {"option": "21 13", "correct": false}, {"option": "Compilation fails at line 4", "correct": false}, {"option": "Compilation fails at line 1", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How can a <strong>thread</strong> own the lock of an object?</p>\n<ol>\n<li>When the thread executes a synchronized instance method of that object</li>\n<li>When the thread executes a synchronized statement block in the object</li>\n<li>When the thread calls wait() on this object</li>\n</ol>", "options": [{"option": "Only 1 option", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "Only 2 option", "correct": false}, {"option": "Only 2 option", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>java question 1111</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "121212", "correct": true}, {"option": "212121", "correct": false}, {"option": "111222", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the methods below is defined in the class Object?</p>\n<ol>\n<li>wait() </li>\n<li>notify()</li>\n<li>toString()</li>\n<li>finalize()</li>\n<li>sleep()</li>\n</ol>", "options": [{"option": "1 and 5", "correct": false}, {"option": "Only 5", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, 3 and 4", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Test extends Thread {\n    static int count = 0;\n    public static void main(String argv[]) throws InterruptedException {\n        Test t = new Test ();\n        t.increment(count);\n        t.start();\n        Thread.sleep(500);\n        System.out.println(count);\n    }\n    public void increment(int count) {\n        ++count;\n    }\n    public void run() {\n        count = count + 8;\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "An InterruptedException may be thrown", "correct": false}, {"option": "8", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class ProfileTest {\n     private ProfileTest(int w) { // line 3\n        System.out.println(w);\n    }\n    public static ProfileTest() { // line 6\n        System.out.println(5);\n    }\n    public static void main(String args[]) {\n        ProfileTest obj = new ProfileTest(10);\n}\n}\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "5", "correct": false}, {"option": "Won't compile because of Line 3(Constructor can't be private)", "correct": false}, {"option": "Won't compile because of Line 6(Constructor can't be static)", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Tester {\n    static void method(){\n        throw new Exception();\n    }\n    public static void main(String[] args) {\n        try {\n            method();\n        } catch (Throwable e) {\n            try {\n                throw new Exception() ;\n            } catch (Exception ex) {\n                System.out.print(\"exception\");\n            } finally {\n                System.out.print(\"finally\");\n            }\n        }\n    }\n}\n</code></pre>", "options": [{"option": "finally", "correct": false}, {"option": "exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "finally , exception", "correct": false}, {"option": "exception, finally", "correct": false}], "level": "Medium"}, {"question": "<p>Will the following code compile and if yes , what is the output?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\ninterface Colorable {}\nclass Vehicle {}\nclass Car extends Vehicle implements Colorable {}\npublic class Tester {\n    public static void main(String[] args) {\n        Vehicle a = new Car();\n        Colorable i = (Colorable) a;//Line1\n        Vehicle b = new Vehicle(); \n       Colorable j = (Colorable) b; //Line 2\n    }\n}\n</code></pre>", "options": [{"option": "The code compile fine without any output", "correct": false}, {"option": "Compilation fails at Line 2", "correct": false}, {"option": "Compilation fails at Line1", "correct": false}, {"option": "Runtime error (due to Line 1)", "correct": false}, {"option": "Runtime error (due to Line 2)", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Base{\n    int value = 0;\n    Base(){\n        addValue();\n    }\n    void addValue(){\n        value += 10;\n    }\n    int getValue(){\n        return value;\n    }\n}\nclass Derived extends Base{\n    Derived(){\n        addValue();\n    }\n    void addValue(){\n        value +=  30;\n    }\n}\npublic class Test {\n    public static void main(String[] args){\n        Derived b= new Derived();\n        System.out.println(b.getValue());\n    }\n}\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "40", "correct": false}, {"option": "60", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Base\n{\n    public void display()\n    {\n        System.out.println(\"hack\");\n    }\n}\n\nclass Derived extends Base\n{\n    public void display()\n    {\n        System.out.println(\"Derived\");\n    }\n}\n\nclass M\n{\n    public static void main(String args[])\n    {\n        Derived d=new Derived();\n        d.display();\n    }\n}\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": true}, {"option": "hack Derived", "correct": false}, {"option": "Derived hack", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Base{\n    int value = 0;\n    Base(){\n        addValue();\n    }\n    void addValue(){\n        value += 10;\n    }\n    int getValue(){\n        return value;\n    }\n}\nclass Derived extends Base{\n    Derived(){\n        addValue();\n    }\n    void addValue(){\n        value +=  30;\n    }\n}\npublic class Test {\n    public static void main(String[] args){\n        Derived b= new Derived();\n        System.out.println(b.getValue());\n    }\n}\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "40", "correct": false}, {"option": "60", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Base\n{\n    public void display()\n    {\n        System.out.println(\"hack\");\n    }\n}\n\nclass Derived extends Base\n{\n    public void display()\n    {\n        System.out.println(\"Derived\");\n    }\n}\n\nclass M\n{\n    public static void main(String args[])\n    {\n        Derived d=new Derived();\n        d.display();\n    }\n}\n</code></pre>", "options": [{"option": "hack", "correct": false}, {"option": "Derived", "correct": true}, {"option": "hack Derived", "correct": false}, {"option": "Derived hack", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        public class Code10 \n    {\n        {\n         final Vector v;\n        v=new Vector();\n        }\n        public Code10 ()\n     {\n     }\n        public void codeMethod() \n        {\n        System.out.println(v.isEmpty());\n        }\n        public static void main(String args[]) \n       { \n    new Code10().codeMethod(); \n    } \n    }\n</code></pre>", "options": [{"option": "Prints: false\r\n", "correct": false}, {"option": "Runtime error: NullPointerException\r\n", "correct": false}, {"option": "Compilation error: cannot find the symbol\r\n", "correct": true}, {"option": "Prints: true\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements is true for the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Main {\n\n    private String instanceField = \"Joe\";\n\n    private void instanceMethod() {\n        System.out.println(\"Instance name=\" + instanceField);\n    }\n\n    public static void main(String[] args) {\n\n              instanceField = \"Indy\";  // Line 1\n              instanceMethod();    //Line 2\n               Main instance = new Main();\n\n\n        instance.instanceField = \"Sydney\";\n\n\n        instance.instanceMethod();  \n    }\n}\n</code></pre>\n<ol>\n<li>\n<p>Line 1- Cannot change an instance field without an instance, compilation failure.</p>\n</li>\n<li>\n<p>Line 2- Cannot call an instance method without an instance, compilation failure.</p>\n</li>\n<li>\n<p>Line 1- Cannot change an instance field without an instance, compiles file but will throw runtime error.</p>\n</li>\n<li>\n<p>Line 2- Cannot call an instance method without an instance,\ncompiles file but will throw a runtime error</p>\n</li>\n</ol>", "options": [{"option": "1 and 2", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    public class FindSum \n    {\n        public static void main(String[] args) \n        {\n            int[] a = {12, 15, 11, 13, 9, 25};\n            int[] a2 = {12, 15, 11, 13, 9, 25};\n            int sum = 0;\n            for (int i = 1; i &lt; a.length; i++) \n            {\n                if (a[i] % 3 == a2[a.length - i] % 5) \n                {\n                    sum +=(a2[a.length - i] )+(i*i);\n                }\n            }\n            System.out.println(\"sum = \" + sum);\n        }\n    }\n</code></pre>", "options": [{"option": "sum = 1", "correct": false}, {"option": "sum = 26", "correct": true}, {"option": "sum = 25", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is not an <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": true}, {"option": "short", "correct": false}, {"option": "long", "correct": false}, {"option": "float", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class TestHack\n      {\n         TestHack(String s)\n         {\n            System.out.println(\"String\");\n         }\n         TestHack(Object o)\n         {\n          System.out.println(\"Object\");\n        }\n     }\n     class HackerEarth\n     {\n        public static void main(String arg[])\n        {\n\n       TestHack s1=new TestHack(null);\n       TestHack s2=new TestHack(\"hacker\");\n        }\n     }\n</code></pre>", "options": [{"option": "Object  Object", "correct": false}, {"option": "String  String", "correct": true}, {"option": "String   Object", "correct": false}, {"option": "Object String", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    class HackerEarth\n    {\n        public static void main(String args[])\n        {\n          if(null==null)\n            System.out.println(\"Hacker\");\n            else\n            {\n                System.out.println(\"Hack\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Hacker", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    class HackerEarth\n    {\n        public static void fun(Exception e)\n        {\n            System.out.println(\"Exception\");\n        }\n        public static void fun(NullPointerException e)\n        {\n            System.out.println(\"NullPointer\");\n        }\n        public static void fun(Object e)\n        {\n            System.out.println(\"Object\");\n        }\n        public static void main(String args[])\n        {\n            fun(null);\n        }\n\n    }\n</code></pre>", "options": [{"option": "Object", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "NullPointer", "correct": true}, {"option": "Exception", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    public class HackerEarth extends Thread {\n        public void run() {\n            System.out.println(\"Hack\");\n        }\n        public void run(String s) {\n            System.out.println(\"Build\");\n        }\n        public static void main(String[] args) {\n            new HackerEarth().start();\n        }\n    }\n</code></pre>", "options": [{"option": "Build", "correct": false}, {"option": "Hack", "correct": true}, {"option": "Build, Hack", "correct": false}, {"option": "Hack, Build", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    public class Test {\n\n                  public static void main(String[] args){\n                   Integer a = new Integer(1);\n                   Integer b = new Integer(2);\n                   Integer c = new Integer(3);\n                   Integer d = new Integer(3);\n                   HashSet hs = new HashSet();\n                   hs.add(a);\n                   hs.add(b);\n                   hs.add(d);\n                   System.out.println(hs);\n                  }\n             }\n</code></pre>", "options": [{"option": "[1, 2, 3, 1 ,2, 3, 3]", "correct": false}, {"option": "[1, 2, 3]", "correct": true}, {"option": "[1, 2, 3, 3]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class A {\n\n    void eat(A a){\n        System.out.println(\"A printed\");\n    }\n}\n\nclass B extends A{\n\n    void eat( B b){\n        System.out.println(\"B printed\");\n    }\n}\n\n\nclass C extends B{\n\n    void eat(C c){\n        System.out.println(\"C printed\");\n    }\n}\n\nclass HackerEarth{\n\n    public static void main(String[] args){\n        A h = new C();\n        B c = new C();\n        c.eat(h);\n    }\n}\n</code></pre>", "options": [{"option": "B printed", "correct": false}, {"option": "C printed", "correct": false}, {"option": "A printed", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> import java.util.*;\n    class HackerEarth {\n\n        public static void main(String[] args){\n            Integer obj1 = new Integer(4);\n            Integer obj2 = new Integer(8);\n            Integer obj3 = new Integer(4);\n            TreeSet ts = new TreeSet();\n            ts.add(obj1);\n            ts.add(obj2);\n            ts.add(obj3);\n            System.out.println(ts);\n        }\n    }\n</code></pre>", "options": [{"option": "[8,4]", "correct": false}, {"option": "[4, 8]", "correct": true}, {"option": "[4, 8, 4]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    public class Test {\n\n        public static void main(String[] args){\n            Integer a = new Integer(8);\n            Integer b = new Integer(4);\n            Integer c = new Integer(8);\n            Vector vec = new Vector();\n            Iterator itr;\n            vec.add(a);\n            vec.add(b);\n            vec.add(c);\n            itr = vec.iterator();\n            while (itr.hasNext()) {\n                System.out.println(\"\" + itr.next());\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "8 4 8", "correct": true}, {"option": "8  4", "correct": false}, {"option": "4  8", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    interface inter{\n        public void method1();\n    }\n    class One implements inter{\n        public void method1(){\n            System.out.println(\"Code\");\n        }\n    }\n    class TestHack extends One{}\n   class HackerEarth extends TestHack{\n        public static void main(String[] args)\n        {\n            inter obj;\n            TestHack t = new TestHack();\n            obj = t;\n            obj.method1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Code", "correct": true}, {"option": "Code, Code", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to copy the data from one array to another:</p>\n<ol>\n<li>System.clone </li>\n<li>java.lang.toCopy</li>\n<li>System.arraycopy</li>\n<li>java.lang.clone</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>\n<pre class=\"prettyprint\"><code>  public void foo( boolean a, boolean b)\n{\n    if( a )\n    {\n        System.out.println(\"A\");\n    }\n    else if(a &amp;&amp; b)\n    {\n        System.out.println( \"A &amp;&amp; B\");\n    }\n    else\n    {\n        if ( !b )\n        {\n            System.out.println( \"notB\") ;\n        }\n        else\n        {\n            System.out.println( \"ELSE\" ) ;\n        }\n    }\n}\n</code></pre>", "options": [{"option": "If a is true and b is true then the output is A && B", "correct": false}, {"option": "If a is true and b is false then the output is notB", "correct": false}, {"option": "If a is false and b is true then the output is ELSE", "correct": true}, {"option": "If a is false and b is false then the output is ELSE", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n  class HackerEarth\n{\n    public static void main(String [] args)\n    {\n        try\n        {\n            MethodA();\n            System.out.print(\"A\");\n        }\n        catch (Exception ex)\n        {\n            System.out.print(\"B\");\n        }\n        finally\n        {\n            System.out.print(\"C\");\n        }\n        System.out.print(\"D\");\n    }\n    public static void MethodA()\n    {\n    }\n}\n</code></pre>", "options": [{"option": "AC", "correct": false}, {"option": "BC", "correct": false}, {"option": "ACD", "correct": true}, {"option": "ABCD", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code> import java.util.*;\n class HackerEarth \n{\n    public static void main(String [] args) \n    {\n        boolean var1 = true;\n        boolean var2 = false;\n        boolean var3 = true;\n        if ( var1 &amp; var2 | var2 &amp; var3 | var2 ) /* Line 9 */\n            System.out.print(\"ok \");\n        if ( var1 &amp; var2 | var2 &amp; var3 | var2 | var1 ) /*Line 11*/\n            System.out.println(\"yes\");\n    }\n}\n</code></pre>", "options": [{"option": "ok", "correct": false}, {"option": "yes", "correct": true}, {"option": "Compilation fails at line 9", "correct": false}, {"option": "Compilation fails at line 11", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true about a <strong>static nested class</strong>?</p>\n<ol>\n<li>You must have a reference to an instance of the enclosing class in order to instantiate it.</li>\n<li>It does not have access to nonstatic members of the enclosing class.</li>\n<li>The variables and methods must be static.</li>\n<li>It must extend the enclosing class.</li>\n</ol>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes in the library do not implement a <strong>design pattern</strong>:</p>\n<ol>\n<li>Singleton</li>\n<li>Proxy</li>\n<li>Iterator</li>\n<li>Observer</li>\n</ol>", "options": [{"option": "1, 2, and 3 ", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n   static String str;\n   public void HackerEarth() \n   {\n      System.out.println(\"In HackerEarth\");\n      str = \"Programming\";\n   }\n   public static void main(String [] args)\n   {\n      HackerEarth c = new HackerEarth();\n      System.out.println(str);\n   }\n}\n</code></pre>", "options": [{"option": "In HackerEarth", "correct": false}, {"option": "null", "correct": true}, {"option": "Programming", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass func1{\n    int value = 0;\n\n    func1(){\n        addValue();\n    }\n\n    void addValue(){\n        value += 10;\n    }\n\n    int getValue(){\n        return value;\n    }\n}\n\nclass func2 extends func1{\n\n    func2(){   \n        addValue();\n    }\n\n    void addValue(){\n        value +=  30;\n    }\n}\n\n class HackerEarth {\n\n    public static void main(String[] args){\n        func2 b = new func2();\n        System.out.println(b.getValue());\n    }\n}\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "40", "correct": false}, {"option": "60", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class HackerEarth{\n        public static void main(String[] args){\n            int[] a = {1,2};\n            HackerEarth t = new HackerEarth();\n            t.increase(a);\n            System.out.println(a[a.length - 1]);\n        }\n        void increase(int[] i){\n            i[i.length - 1]++;\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "1", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "An instance field declared as public generates a compilation error.", "correct": false}, {"option": "int is the name of a class available in the package java.lang.", "correct": false}, {"option": "Instance variable names may only contain letters and digits.", "correct": false}, {"option": "A class has a constructor.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods registers a <strong>thread</strong> in a thread scheduler:</p>\n<ol>\n<li>construct();</li>\n<li>run();</li>\n<li>start();</li>\n<li>register();</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to stop the execution of a <strong>thread</strong>?</p>", "options": [{"option": "notify()", "correct": false}, {"option": "wait()", "correct": true}, {"option": "notifyall()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Exc01 extends Exception { } \nclass Exc1 extends Exc01 { } /* Line 3 */\npublic class Test \n{  \n    public static void main(String args[]) \n    { \n        try \n        {  \n            throw new Exc1(); /* Line 10 */\n        } \n        catch (Exc01 e0) /* Line 12 */\n        {\n            System.out.println(\"Ex01 caught\"); \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"exception caught\");  \n        } \n    } \n}\n</code></pre>", "options": [{"option": "Ex01 caught", "correct": true}, {"option": "Compilation fails because of an error at line 3", "correct": false}, {"option": "Compilation fails because of an error at line 10", "correct": false}, {"option": "Compilation fails because of an error at line 12", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass HackerEarth {\n    public static void main(String[] args) {\n        int val1 = 0x000F;\n        int val2 = 0x2222;\n        System.out.println(val1 &amp; val2);\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the root class of the exception hierarchy?</p>", "options": [{"option": "Exception", "correct": false}, {"option": "Throwable", "correct": true}, {"option": "Error", "correct": false}, {"option": "RuntimeException", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, when is the Float object eligible for Garbage collection in the following code:</p>\n<pre class=\"prettyprint\"><code>1  Public Object m()\n2 {\n3  Object o = new Float(3.14F);\n4  Object[] oa = new Object[l];\n5  oa[0] = o;\n6  o = null;\n7  oa[0] = null;\n8  return 0;\n9 }\n</code></pre>", "options": [{"option": "After line 5", "correct": false}, {"option": "After line 6", "correct": false}, {"option": "After line 7", "correct": true}, {"option": "After line 8", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is inserted at line 6, is compiled and prints test2 in the following code:</p>\n<pre class=\"prettyprint\"><code>public class A { \npublic void test1(){\nSystem.out.println(\"test1\");\n}\n}\n\npublic class B extends A{ \npublic void test2(){\nSystem.out.println(\"test2\");\n}\n}\n\n1. public class Test{ \n2. public static void main (String[] args){\n3. A a = new A(); \n4. A b = new B(); \n5. B b1 = new B();\n6. // insert code here\n7. }\n8. }\n</code></pre>", "options": [{"option": "(B)b.test2();", "correct": false}, {"option": "((B)b).test2();", "correct": true}, {"option": "b.test2();", "correct": false}, {"option": "a.test2();", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about\u00a0the <strong>yield</strong> method is correct:</p>\n\n<ol>\n\t<li>Indicates\u00a0the thread scheduler that the calling thread is ready to pause and that it may allow another thread of the same or of higher priority to run</li>\n\t<li>Calls\u00a0the waiting thread to allow it to run</li>\n\t<li>Allows a thread of a higher priority to run</li>\n\t<li>Calls from the currently-running thread by passing a thread\u00a0that should be allowed to run\u00a0as a parameter</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass HackerEarth extends Thread\n{\n     int count = 0;\n     public void run()\n     {\n     System.out.println(\"run\");\n     synchronized (this) \n       {\n        for(int i =0; i &lt; 75 ; i++)\n        {\n        count = count + i;\n        }\nnotify();\n       }\n     }\n}\n\n\npublic class Test{\n\npublic static void main(String argv[]) \n{\n    HackerEarth h = new HackerEarth();\n    h.start();\n    synchronized (h) \n    {\n      System.out.println(\"Hacker\");\n      try{\n      h.wait();\n      }catch(InterruptedException e)\n      {\n\n    }\nSystem.out.println(h.count);\n\n    }\n   }\n}</code></pre>", "options": [{"option": "Hacker\r\nrun\r\n2557", "correct": false}, {"option": "Hacker\r\nrun\r\n0", "correct": false}, {"option": "Hacker\r\nrun\r\n2775", "correct": true}, {"option": "Hacker\r\nrun", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following conditions makes a\u00a0<strong>thread</strong> own the <strong>lock</strong> of an object?</p>\n\n<ol>\n\t<li>When the thread executes a synchronized method from that object</li>\n\t<li>When the thread executes a synchronized statement block in that object</li>\n\t<li>When the thread calls <strong>wait()</strong> on the object</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "2 ", "correct": false}, {"option": "3", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Test implements Runnable {\n    Integer id = 1;\n    public static void main(String[] args) {\n        new Thread(new Test()).start();\n        new Thread(new Test()).start();\n        new Thread(new Test()).start();\n    }\n    public void run() {\n        press(id);\n    }\n    synchronized void press(Integer id) {\n        System.out.print(id.intValue());\n        System.out.print((++id).intValue());\n    }\n}\n</code></pre>", "options": [{"option": "212121", "correct": false}, {"option": "121212", "correct": true}, {"option": "111222", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is not a valid data type?</p>", "options": [{"option": "Number", "correct": false}, {"option": "Object", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "Integer", "correct": true}], "level": "Easy"}, {"question": "<p>What are the values of <em>x</em> and <em>y</em> in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>x = \"1\" + 2 + 3;\ny = 1 + 2 + \"3\"\n</code></pre>", "options": [{"option": "123, 123", "correct": false}, {"option": "33, 33", "correct": false}, {"option": "\"123\", \"123\"", "correct": false}, {"option": "\"123\", \"33\"", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>a = ['red', 'blue', 'green'];\na[100] = 'black';\nconsole.log(a.length);\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "100", "correct": false}, {"option": "101", "correct": true}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is not a method of the array object?</p>", "options": [{"option": "toString", "correct": false}, {"option": "join", "correct": false}, {"option": "remove", "correct": true}, {"option": "shift", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function Person(first, last) {\n  return {\n    first: first,\n    last: last,\n    fullName: function() {\n      return this.first + ' ' + this.last;\n    },\n    fullNameReversed: function() {\n      return this.last + ', ' + this.first;\n    }\n  };\n}\n\np = Person(\"James\", \"Bond\");\nvar fullName = p.fullName;\nfullName();\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "James Bond", "correct": false}, {"option": "undefined", "correct": false}, {"option": "undefined undefined", "correct": true}, {"option": "No output", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these ways to add an element at the end of an array is correct?</p>", "options": [{"option": "arr[arr.length+1] = value", "correct": false}, {"option": "arr[arr.length] = value", "correct": true}, {"option": "arr[arr.length-1] = value", "correct": false}, {"option": "arr = arr + value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of\u00a0<em>x</em>\u00a0in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var x = 9 &lt;&lt; 2;\n</code></pre>", "options": [{"option": "18", "correct": false}, {"option": "36", "correct": true}, {"option": "72", "correct": false}, {"option": "18", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of\u00a0<strong>console.log(x)</strong> in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var a = 100;\n\nfunction testHack() {\n    if(false) {\n        var a = 199;\n    }\n    console.log(a); //What does this display?\n}\n\ntestHack();\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "100", "correct": false}, {"option": "199", "correct": false}, {"option": "undefined", "correct": true}, {"option": "null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var xmlhttp = null;\nif (window.XMLHttpRequest) {\n\u00a0\u00a0 \u00a0xmlhttp = new XMLHttpRequest();\n\u00a0\u00a0 \u00a0\n\u00a0\u00a0 \u00a0if (typeof xmlhttp.overrideMimeType != 'undefined') {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('The Dark Knight');\n\u00a0\u00a0 \u00a0}\n} else if (window.ActiveXObject) {\n\u00a0\u00a0 \u00a0alert('The Dark Knight Rises');\n} else {\n\u00a0\u00a0 \u00a0alert('The Knight Down');\n}\n</code></pre>", "options": [{"option": "The Dark Knight", "correct": true}, {"option": "The Dark Knight Rises", "correct": false}, {"option": "The Knight Down", "correct": false}, {"option": "Can't be determined", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript,\u00a0which of these methods should be called before <strong>send()\u00a0</strong>to prepare an <strong>XMLHttpRequest</strong> object?</p>", "options": [{"option": "prepare()", "correct": false}, {"option": "open()", "correct": true}, {"option": "init()", "correct": false}, {"option": "build()", "correct": false}], "level": "Medium"}, {"question": "<p>Rhe correct syntax for including an external script called <strong>myscript.js</strong> in JavaScript is _____________________________.</p>", "options": [{"option": "<script href=\"myScript.js\">", "correct": false}, {"option": "<script name=\"myScript.js\">", "correct": false}, {"option": "<script src=\"myScript.js\">", "correct": true}, {"option": "<script root=\"myScript.js\">", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how do you call the <strong>checkState</strong> method after 10 seconds?</p>", "options": [{"option": "window.setTimeout(checkState, 10);", "correct": false}, {"option": "window.setTimeout(checkState, 10000);", "correct": true}, {"option": "window.setTimeout(checkState(), 10000);", "correct": false}, {"option": "window.setTimeout(checkState(), 10);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is a status code that\u00a0denotes a server error?</p>", "options": [{"option": "100", "correct": false}, {"option": "200", "correct": false}, {"option": "400", "correct": false}, {"option": "500", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how do you add a comment?</p>", "options": [{"option": "//This is a comment.", "correct": true}, {"option": "REM This is a comment-->", "correct": false}, {"option": "This is a comment.", "correct": false}, {"option": "#This is a comment.", "correct": false}], "level": "Easy"}, {"question": "<p>In HTML, what is the purpose of the &lt;<strong>noscript</strong>&gt; tag?</p>", "options": [{"option": "Prevents the page scripts from executing", "correct": false}, {"option": "Shields a part of a page from being modified by JavaScript so that a statement like aDiv.innerHTML = 'something' has no effect", "correct": false}, {"option": "Encloses the text to be displayed if the browser doesn't support JavaScript", "correct": true}, {"option": "No such tag exists", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a primitive data type?</p>", "options": [{"option": "Number", "correct": false}, {"option": "Array", "correct": true}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the difference between <strong>==</strong> and <strong>===</strong>?</p>", "options": [{"option": "== compares type and value\r\n=== compares only type", "correct": false}, {"option": "== compares value\r\n=== compares type", "correct": false}, {"option": "== compares value\r\n=== compares value and type", "correct": true}, {"option": "== and === are equivalent", "correct": false}], "level": "Easy"}, {"question": "<p>\u4e0b\u9762\u54ea\u4e9b\u662fThread\u7c7b\u7684\u65b9\u6cd5\uff1f</p>", "options": [{"option": "start() ", "correct": false}, {"option": "run()", "correct": false}, {"option": "getPriority()", "correct": false}, {"option": "Above all", "correct": true}], "level": ""}, {"question": "<p>\u4ee5\u4e0b\u4e0d\u5c5e\u4e8eRuntimeException\u7684\u662f\uff1f</p>", "options": [{"option": "NullPointerException", "correct": false}, {"option": "IndexOutOfBoundsException", "correct": false}, {"option": "ClassCastException", "correct": false}, {"option": "FileNotFoundException", "correct": true}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a</p>\n<pre class=\"prettyprint\"><code>public static void main(String args[]) {\n    Thread t = new Thread() {\n        public void run() {\n            pong();\n        }\n    };\n    t.run();\n    System.out.print(\"ping\");\n}\n\nstatic void pong() {\n    System.out.print(\"pong\");\n}\n</code></pre>", "options": [{"option": "pingpong", "correct": false}, {"option": "pongping", "correct": true}, {"option": "pingpong\u548cpongping\u90fd\u6709\u53ef\u80fd", "correct": false}, {"option": "\u90fd\u4e0d\u8f93\u51fa", "correct": false}], "level": ""}, {"question": "<p>0.4322\u7684\u6570\u636e\u7c7b\u578b\u662f?</p>", "options": [{"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "Float", "correct": false}, {"option": "Double", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u5c5e\u4e8e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7684\u662f\uff1f</p>", "options": [{"option": "DES", "correct": true}, {"option": "DSA", "correct": false}, {"option": "RSA", "correct": false}, {"option": "SHA", "correct": false}], "level": ""}, {"question": "<p>System.out.println(\"5\" + 2);\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1f</p>", "options": [{"option": "52", "correct": true}, {"option": "7", "correct": false}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u5f53\u8f93\u5165\u4e3a2\u7684\u65f6\u5019\u8fd4\u56de\u503c\u662f\u591a\u5c11?</p>\n<pre class=\"prettyprint\"><code>public static int getValue(int i) {\n        int result = 0;\n        switch (i) {\n        case 1:\n            result = result + i;\n        case 2:\n            result = result + i * 2;\n        case 3:\n            result = result + i * 3;\n        }\n        return result;\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "2", "correct": false}, {"option": "4", "correct": false}, {"option": "10", "correct": true}], "level": ""}, {"question": "<p>\u9009\u9879\u4e2d\u54ea\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u66ff\u6362\u9898\u76ee\u4e2d\u201c//add code here\u201d\u800c\u4e0d\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\uff1f</p>\n<pre class=\"prettyprint\"><code>public abstract class MyClass {\n     public int constInt = 5;\n     //add code here\n     public void method() {\n     }\n}\n</code></pre>", "options": [{"option": "public abstract void method(int a);", "correct": true}, {"option": "constInt = constInt + 5;", "correct": false}, {"option": "public int method();", "correct": false}, {"option": "public abstract void anotherMethod() {}", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u4ec0\u4e48\u6a21\u5f0f\uff1f</p>\n<pre class=\"prettyprint\"><code>public class A { \n  private A instance; \n  private A() { } \n  public static A getInstance { \n    if ( A == null ) instance = new A(); \n    return instance; \n  } \n} \n</code></pre>", "options": [{"option": "Factory", "correct": false}, {"option": "Abstract Factory", "correct": false}, {"option": "Singleton", "correct": true}, {"option": "Builder", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u7684\u610f\u601d\u662f\uff1f</p>\n<pre class=\"prettyprint\"><code> setInterval(\"alert('welcome');\",1000); \n</code></pre>", "options": [{"option": "\u7b49\u5f851000\u79d2\u540e\uff0c\u518d\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": false}, {"option": "\u7b49\u5f851\u79d2\u949f\u540e\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": false}, {"option": "\u6bcf\u9694\u4e00\u79d2\u949f\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": true}, {"option": "\u8bed\u53e5\u62a5\u9519\uff0c\u8bed\u6cd5\u6709\u95ee\u9898", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8f93\u51fa\u7684\u7ed3\u679c\u662f\uff1f</p>\n<pre class=\"prettyprint\"><code>var a=new Array(2,4,4,5,6); \nsum=0;  \nfor (i=1; i&lt;a.length; i++) {\n  sum +=a[i];\n}\ndocument.write(sum); \n</code></pre>", "options": [{"option": "21", "correct": false}, {"option": "19", "correct": true}, {"option": "24456", "correct": false}, {"option": "4456", "correct": false}], "level": ""}, {"question": "<p>\u5728jQuery\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u6587\u6863\u5c31\u7eea\u51fd\u6570\u7684\u5199\u6cd5\u9519\u8bef\u7684\u662f?</p>", "options": [{"option": "$(document).ready(function() {\r\n});", "correct": false}, {"option": "$(function() {\r\n});", "correct": false}, {"option": "$(document) (function() {\r\n});", "correct": true}, {"option": "$().ready(function() {\r\n});", "correct": false}], "level": ""}, {"question": "<p>\u53ef\u4ee5\"\u5339\u914d\u9996\u4f4d\u662f\u5c0f\u5199\u5b57\u6bcd,\u5176\u4ed6\u4f4d\u6570\u662f\u5c0f\u5199\u5b57\u6bcd\u6216\u6570\u5b57\u7684\u6700\u5c11\u4e24\u4f4d\u5b57\u7b26\u4e32\"\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e0b\u9762\u7684\u54ea\u4e00\u4e2a\uff1f</p>", "options": [{"option": "/^\\w{2,}/", "correct": false}, {"option": "/^[a-z][a-z0-9]+$/", "correct": true}, {"option": "/^[a-z0-9]+$/", "correct": false}, {"option": "/^[a-z]\\d+$/", "correct": false}], "level": ""}, {"question": "<p></p><pre class=\"prettyprint\"><code>&lt;div class=\u201dc\u201d&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;a&lt;/div&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;b&lt;/div&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;c&lt;/div&gt;\n  &lt;div class=\"c\" style=\u201ddisplay:none;\u201d&gt;d&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\u201dc\u201d  style=\u201ddisplay:none;\u201d&gt;e&lt;/div&gt;\n&lt;div class=\u201dc\u201d style=\u201ddisplay:none;\u201d&gt;f&lt;/div&gt;\n</code></pre>\njQuery\u4e2d\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u4f7f\u7528\u5982\u4e0bjQuery\u9009\u62e9\u5668<p></p>\n<p></p><pre class=\"prettyprint\"><code>var $x = $(\u201c.c :hidden\u201d);\nvar $y = $(\u201c.c:hidden\u201d);\nvar x_len = $x.length;\nvar y_len = $y.length;\n</code></pre>\n\u6267\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0cx_len\u548cy_en\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u5206\u522b\u662f___ \u548c ___\uff1f<p></p>", "options": [{"option": "4,3", "correct": true}, {"option": "3,4", "correct": false}, {"option": "7,3", "correct": false}, {"option": "3,7", "correct": false}], "level": ""}, {"question": "<p>\u5728JavaScript\u4e2d\uff0c\u628a\u5b57\u7b26\u4e32\u201c123\u201d\u8f6c\u6362\u4e3a\u6574\u578b\u503c123\u7684\u6b63\u786e\u65b9\u6cd5\u662f?</p>", "options": [{"option": "var str=\"123\";\r\nvar num=(int)str;", "correct": false}, {"option": "var str=\"123\";\r\nvar num=str.parseInt(str);", "correct": false}, {"option": "var str=\"123\";\r\nvar num=parseInt(str);", "correct": true}, {"option": "var str=\"123\";\r\nvar num=Integer.parseInt(str);", "correct": false}], "level": ""}, {"question": "<p>\u4ee5\u4e0b\u4e0d\u5c5e\u4e8ejavascript\u4e2d\u63d0\u4f9b\u7684\u5e38\u7528\u6570\u636e\u7c7b\u578b\u7684\u662f?</p>", "options": [{"option": "undefined", "correct": false}, {"option": "null", "correct": false}, {"option": "number", "correct": false}, {"option": "Collection", "correct": true}], "level": ""}, {"question": "<p>\u5047\u8bbe\u4eca\u5929\u662f2006\u5e744\u67081\u65e5\u661f\u671f\u516d,\u8bf7\u95ee\u4ee5\u4e0bjavascript\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u662f?</p>\n<pre class=\"prettyprint\"><code>var time = new Date();\ndocument.write(time.getMonth());\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "4\u6708", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u9009\u9879\u4e2d\uff0c\u9488\u5bf9\u5de5\u5382\u51fd\u6570\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f?</p>", "options": [{"option": "\u5f53$( )\u7684\u53c2\u6570\u4e3aDOM\u5bf9\u8c61\u65f6\uff0c\u5219\u8be5\u5bf9\u8c61\u4e0d\u9700\u8981\u4f7f\u7528\u53cc\u5f15\u53f7\u8fdb\u884c\u5305\u88f9", "correct": false}, {"option": "\u5728JQuery\u4e2d\uff0c$()\u7b49\u4ef7\u4e8eJQuery()", "correct": false}, {"option": "\u5f53DOM\u5bf9\u8c61\u8f6c\u5316\u4e3aJQuery\u5bf9\u8c61\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528JQuery\u7684\u65b9\u6cd5", "correct": false}, {"option": "$()\u7684\u4f5c\u7528\u662f\u5c06DOM\u5bf9\u8c61\u8f6c\u5316\u4e3aWindow\u5bf9\u8c61", "correct": true}], "level": ""}, {"question": "<p>\u4e0b\u9762\u54ea\u4e9b\u662fThread\u7c7b\u7684\u65b9\u6cd5\uff1f</p>", "options": [{"option": "start() ", "correct": false}, {"option": "run()", "correct": false}, {"option": "getPriority()", "correct": false}, {"option": "Above all", "correct": true}], "level": ""}, {"question": "<p>\u4ee5\u4e0b\u4e0d\u5c5e\u4e8eRuntimeException\u7684\u662f\uff1f</p>", "options": [{"option": "NullPointerException", "correct": false}, {"option": "IndexOutOfBoundsException", "correct": false}, {"option": "ClassCastException", "correct": false}, {"option": "FileNotFoundException", "correct": true}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7a0b\u5e8f\u7684\u8fd0\u884c\u7ed3\u679c\u662f\uff1a</p>\n<pre class=\"prettyprint\"><code>public static void main(String args[]) {\n    Thread t = new Thread() {\n        public void run() {\n            pong();\n        }\n    };\n    t.run();\n    System.out.print(\"ping\");\n}\n\nstatic void pong() {\n    System.out.print(\"pong\");\n}\n</code></pre>", "options": [{"option": "pingpong", "correct": false}, {"option": "pongping", "correct": true}, {"option": "pingpong\u548cpongping\u90fd\u6709\u53ef\u80fd", "correct": false}, {"option": "\u90fd\u4e0d\u8f93\u51fa", "correct": false}], "level": ""}, {"question": "<p>0.4322\u7684\u6570\u636e\u7c7b\u578b\u662f?</p>", "options": [{"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "Float", "correct": false}, {"option": "Double", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u5c5e\u4e8e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7684\u662f\uff1f</p>", "options": [{"option": "DES", "correct": true}, {"option": "DSA", "correct": false}, {"option": "RSA", "correct": false}, {"option": "SHA", "correct": false}], "level": ""}, {"question": "<p>System.out.println(\"5\" + 2);\u7684\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u662f\uff1f</p>", "options": [{"option": "52", "correct": true}, {"option": "7", "correct": false}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7684\u65b9\u6cd5\uff0c\u5f53\u8f93\u5165\u4e3a2\u7684\u65f6\u5019\u8fd4\u56de\u503c\u662f\u591a\u5c11?</p>\n<pre class=\"prettyprint\"><code>public static int getValue(int i) {\n        int result = 0;\n        switch (i) {\n        case 1:\n            result = result + i;\n        case 2:\n            result = result + i * 2;\n        case 3:\n            result = result + i * 3;\n        }\n        return result;\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "2", "correct": false}, {"option": "4", "correct": false}, {"option": "10", "correct": true}], "level": ""}, {"question": "<p>\u9009\u9879\u4e2d\u54ea\u4e00\u884c\u4ee3\u7801\u53ef\u4ee5\u66ff\u6362\u9898\u76ee\u4e2d\u201c//add code here\u201d\u800c\u4e0d\u4ea7\u751f\u7f16\u8bd1\u9519\u8bef\uff1f</p>\n<pre class=\"prettyprint\"><code>public abstract class MyClass {\n     public int constInt = 5;\n     //add code here\n     public void method() {\n     }\n}\n</code></pre>", "options": [{"option": "public abstract void method(int a);", "correct": true}, {"option": "constInt = constInt + 5;", "correct": false}, {"option": "public int method();", "correct": false}, {"option": "public abstract void anotherMethod() {}", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\u8bbe\u8ba1\u6a21\u5f0f\u4e2d\u7684\u4ec0\u4e48\u6a21\u5f0f\uff1f</p>\n<pre class=\"prettyprint\"><code>public class A { \n  private A instance; \n  private A() { } \n  public static A getInstance { \n    if ( A == null ) instance = new A(); \n    return instance; \n  } \n} \n</code></pre>", "options": [{"option": "Factory", "correct": false}, {"option": "Abstract Factory", "correct": false}, {"option": "Singleton", "correct": true}, {"option": "Builder", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u8fd9\u53e5\u4ee3\u7801\u7684\u610f\u601d\u662f\uff1f</p>\n<pre class=\"prettyprint\"><code> setInterval(\"alert('welcome');\",1000); \n</code></pre>", "options": [{"option": "\u7b49\u5f851000\u79d2\u540e\uff0c\u518d\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": false}, {"option": "\u7b49\u5f851\u79d2\u949f\u540e\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": false}, {"option": "\u6bcf\u9694\u4e00\u79d2\u949f\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846", "correct": true}, {"option": "\u8bed\u53e5\u62a5\u9519\uff0c\u8bed\u6cd5\u6709\u95ee\u9898", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\u8f93\u51fa\u7684\u7ed3\u679c\u662f\uff1f</p>\n<pre class=\"prettyprint\"><code>var a=new Array(2,4,4,5,6); \nsum=0;  \nfor (i=1; i&lt;a.length; i++) {\n  sum +=a[i];\n}\ndocument.write(sum); \n</code></pre>", "options": [{"option": "21", "correct": false}, {"option": "19", "correct": true}, {"option": "24456", "correct": false}, {"option": "4456", "correct": false}], "level": ""}, {"question": "<p>\u5728jQuery\u4e2d\uff0c\u4e0b\u5217\u5173\u4e8e\u6587\u6863\u5c31\u7eea\u51fd\u6570\u7684\u5199\u6cd5\u9519\u8bef\u7684\u662f?</p>", "options": [{"option": "$(document).ready(function() {\r\n});", "correct": false}, {"option": "$(function() {\r\n});", "correct": false}, {"option": "$(document) (function() {\r\n});", "correct": true}, {"option": "$().ready(function() {\r\n});", "correct": false}], "level": ""}, {"question": "<p>\u53ef\u4ee5\"\u5339\u914d\u9996\u4f4d\u662f\u5c0f\u5199\u5b57\u6bcd,\u5176\u4ed6\u4f4d\u6570\u662f\u5c0f\u5199\u5b57\u6bcd\u6216\u6570\u5b57\u7684\u6700\u5c11\u4e24\u4f4d\u5b57\u7b26\u4e32\"\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u662f\u4e0b\u9762\u7684\u54ea\u4e00\u4e2a\uff1f</p>", "options": [{"option": "/^\\w{2,}/", "correct": false}, {"option": "/^[a-z][a-z0-9]+$/", "correct": true}, {"option": "/^[a-z0-9]+$/", "correct": false}, {"option": "/^[a-z]\\d+$/", "correct": false}], "level": ""}, {"question": "<p></p><pre class=\"prettyprint\"><code>&lt;div class=\u201dc\u201d&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;a&lt;/div&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;b&lt;/div&gt;\n  &lt;div style=\u201ddisplay:none;\u201d&gt;c&lt;/div&gt;\n  &lt;div class=\"c\" style=\u201ddisplay:none;\u201d&gt;d&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;div class=\u201dc\u201d  style=\u201ddisplay:none;\u201d&gt;e&lt;/div&gt;\n&lt;div class=\u201dc\u201d style=\u201ddisplay:none;\u201d&gt;f&lt;/div&gt;\n</code></pre>\njQuery\u4e2d\uff0c\u5bf9\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u4f7f\u7528\u5982\u4e0bjQuery\u9009\u62e9\u5668<p></p>\n<p></p><pre class=\"prettyprint\"><code>var $x = $(\u201c.c :hidden\u201d);\nvar $y = $(\u201c.c:hidden\u201d);\nvar x_len = $x.length;\nvar y_len = $y.length;\n</code></pre>\n\u6267\u884c\u4ee5\u4e0a\u4ee3\u7801\uff0cx_len\u548cy_en\u4e24\u4e2a\u53d8\u91cf\u7684\u503c\u5206\u522b\u662f___ \u548c ___\uff1f<p></p>", "options": [{"option": "4,3", "correct": true}, {"option": "3,4", "correct": false}, {"option": "7,3", "correct": false}, {"option": "3,7", "correct": false}], "level": ""}, {"question": "<p>\u4ee5\u4e0b\u4e0d\u5c5e\u4e8ejavascript\u4e2d\u63d0\u4f9b\u7684\u5e38\u7528\u6570\u636e\u7c7b\u578b\u7684\u662f?</p>", "options": [{"option": "undefined", "correct": false}, {"option": "null", "correct": false}, {"option": "number", "correct": false}, {"option": "Collection", "correct": true}], "level": ""}, {"question": "<p>\u5047\u8bbe\u4eca\u5929\u662f2006\u5e744\u67081\u65e5\u661f\u671f\u516d,\u8bf7\u95ee\u4ee5\u4e0bjavascript\u4ee3\u7801\u8f93\u51fa\u7ed3\u679c\u662f?</p>\n<pre class=\"prettyprint\"><code>var time = new Date();\ndocument.write(time.getMonth());\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "4\u6708", "correct": false}], "level": ""}, {"question": "<p>\u4e0b\u9762\u9009\u9879\u4e2d\uff0c\u9488\u5bf9\u5de5\u5382\u51fd\u6570\u7684\u8bf4\u6cd5\u9519\u8bef\u7684\u662f?</p>", "options": [{"option": "\u5f53$( )\u7684\u53c2\u6570\u4e3aDOM\u5bf9\u8c61\u65f6\uff0c\u5219\u8be5\u5bf9\u8c61\u4e0d\u9700\u8981\u4f7f\u7528\u53cc\u5f15\u53f7\u8fdb\u884c\u5305\u88f9", "correct": false}, {"option": "\u5728JQuery\u4e2d\uff0c$()\u7b49\u4ef7\u4e8eJQuery()", "correct": false}, {"option": "\u5f53DOM\u5bf9\u8c61\u8f6c\u5316\u4e3aJQuery\u5bf9\u8c61\u540e\uff0c\u5c31\u53ef\u4ee5\u8c03\u7528JQuery\u7684\u65b9\u6cd5", "correct": false}, {"option": "$()\u7684\u4f5c\u7528\u662f\u5c06DOM\u5bf9\u8c61\u8f6c\u5316\u4e3aWindow\u5bf9\u8c61", "correct": true}], "level": ""}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\npublic class HackerEarth{\n\n    public static void main(String argv[]){\n        Hack pm1 = new Hack(\"1\");\n        pm1.run();\n        Hack pm2 = new Hack(\"2\");\n        pm2.run();\n        Hack pm3 = new Hack(\"break\");\n        pm3.run();\n    }\n}\n\nclass Hack extends Thread{\n    private String sTname = \"\";\n\n    Hack(String s){\n        sTname = s;\n    }\n\n    public void run(){\n        for(int i =0; i &lt; 2 ; i++){\n            try{\n                sleep(1000);\n            }\n            catch(InterruptedException e){\n\n            }\n\n            yield();\n            System.out.print(sTname+\",\");\n        }\n    }\n}\n\n</code></pre>", "options": [{"option": "1,2,break,1,2,break,", "correct": false}, {"option": "1,2,break,break,2,1,", "correct": false}, {"option": "1,2,1,2,break,break,", "correct": false}, {"option": "1,1,2,2,break,break,", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following, if inserted in line 6, will compile and print <strong>test2</strong>?</p>\n<pre class=\"prettyprint\"><code>public class A { \npublic void test1(){\nSystem.out.println(\"test1\");\n}\n}\n\npublic class B extends A{ \npublic void test2(){\nSystem.out.println(\"test2\");\n}\n}\n\n1. public class Test{ \n2. public static void main (String[] args){\n3. A a = new A(); \n4. A b = new B(); \n5. B b1 = new B();\n6. // insert code here\n7. }\n8. }\n</code></pre>", "options": [{"option": "(B)b.test2();", "correct": false}, {"option": "((B)b).test2();", "correct": true}, {"option": "b.test2();", "correct": false}, {"option": "a.test2();", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following conditions uses\u00a0a\u00a0<strong>yield</strong> method of the <strong>thread</strong> class:</p>\n\n<ol>\n\t<li>To call from the thread which is currently running and allow another thread of the same or higher priority to run.</li>\n\t<li>To call on the waiting thread to allow it to run.</li>\n\t<li>To allow a thread of higher priority to run.</li>\n\t<li>To call from the thread that is currently running\u00a0with a parameter that designates which thread should be allowed to run.</li>\n</ol>", "options": [{"option": "Only 1", "correct": true}, {"option": "Only 1 and 2", "correct": false}, {"option": "Only 2 and 3", "correct": false}, {"option": "Only 1, 2, and 3", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements is true?</p>\n<ol>\n<li>Assertion checking is typically enabled when a program is deployed.</li>\n<li>It is never appropriate to write code to handle the failure of an assert statement.</li>\n<li>Assertion checking is typically enabled during program development and testing.</li>\n<li>Assertion checking can be enabled or disabled selectively on a per-package basis. However, this cannot be done on a per-class basis.</li>\n<li>Assertion checking can be enabled or disabled selectively on both a per-package basis and a per-class basis.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "2, 3, and 5", "correct": true}, {"option": "3, 4, and 5", "correct": false}, {"option": "1, 2, and 5", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following interfaces accepts input parameters at runtime:</p>\n<ol>\n<li>\n<p>java.sql.Statement</p>\n</li>\n<li>\n<p>java.sql.CallableStatement</p>\n</li>\n<li>\n<p>java.sql.PreparedStatement</p>\n</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "1 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>In the following Java code, after line 15 executes, how many objects will be eligible for <strong>garbage collection</strong>?</p>\n\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass HackerEarth\n{\n    public static void main(String args[])\n    {\n        Integer h1=new Integer(2000);\n        Integer h2=new Integer(3000);\n        Integer h3=new Integer(4000);\n\n        Object a = h1;\n        h1=h2;\n        h2=h3;\n        h3=null;// Line 15\n\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is defined in the class Object:</p>\n<ol>\n<li>wait() </li>\n<li>notify()</li>\n<li>toString()</li>\n<li>finalize()</li>\n<li>sleep()</li>\n</ol>", "options": [{"option": "1 and 5", "correct": false}, {"option": "5", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, 3 and 4", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class HackerEarth {\n     private HackerEarth(int h) { // line 3\n        System.out.println(h);\n    }\n    public static HackerEarth() { // line 6\n        System.out.println(10);\n    }\n    public static void main(String args[]) {\n        HackerEarth obj = new HackerEarth(20);\n    }\n}</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": false}, {"option": "Compilation error: Line 3 (constructors cannot be private)", "correct": false}, {"option": "Compilation error: Line 6 (constructors cannot be static)", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Tester {\n    static void method(){\n        throw new Exception();\n    }\n    public static void main(String[] args) {\n        try {\n            method();\n        } catch (Throwable e) {\n            try {\n                throw new Exception() ;\n            } catch (Exception ex) {\n                System.out.print(\"exception\");\n            } finally {\n                System.out.print(\"finally\");\n            }\n        }\n    }\n}\n</code></pre>", "options": [{"option": "finally", "correct": false}, {"option": "finally, exception", "correct": false}, {"option": "exception, finally", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface sweet {}\nclass fruit {}\nclass Apple extends fruit implements sweet {}\nclass HackerEarth {\n    public static void main(String[] args) {\n        fruit a = new Apple();\n        sweet i = (sweet) a; //Line 1\n        fruit b = new fruit(); \n       sweet j = (sweet) b;  //Line 2\n    }\n}\n</code></pre>", "options": [{"option": "Runtime error (due to Line 1)", "correct": false}, {"option": "Runtime error (due to Line 2)", "correct": true}, {"option": "The code compiles fine without any output", "correct": false}, {"option": "The code will not compile", "correct": false}], "level": "Medium"}, {"question": "<p>Inside which HTML element do we put the JavaScript?</p>", "options": [{"option": "<script>\t ", "correct": true}, {"option": "<javascript>", "correct": false}, {"option": "<js>", "correct": false}, {"option": "<scripting>", "correct": false}], "level": ""}, {"question": "<p>What is the correct JavaScript syntax to change the content of the HTML element below?\n    HTML: </p><p>This is a demonstration.</p><p></p>", "options": [{"option": "document.getElement(\"p\").innerHTML = \"Hello World!\";", "correct": false}, {"option": "document.getElementByName(\"p\").innerHTML = \"Hello World!\";", "correct": false}, {"option": "document.getElementById(\"demo\").innerHTML = \"Hello World!\";", "correct": true}, {"option": "#demo.innerHTML = \"Hello World!\";", "correct": false}], "level": ""}, {"question": "<p>Inside which HTML element do we put the JavaScript?</p>", "options": [{"option": "<script>\t ", "correct": true}, {"option": "<javascript>", "correct": false}, {"option": "<js>", "correct": false}, {"option": "<scripting>", "correct": false}], "level": ""}, {"question": "<p>What is the correct JavaScript syntax to change the content of the HTML element below?\n    HTML: </p><p>This is a demonstration.</p><p></p>", "options": [{"option": "document.getElement(\"p\").innerHTML = \"Hello World!\";", "correct": false}, {"option": "document.getElementByName(\"p\").innerHTML = \"Hello World!\";", "correct": false}, {"option": "document.getElementById(\"demo\").innerHTML = \"Hello World!\";", "correct": true}, {"option": "#demo.innerHTML = \"Hello World!\";", "correct": false}], "level": ""}, {"question": "<p>Given the following JavaScript statement:</p>\n<pre class=\"prettyprint\"><code>var a = !\"false\";\n</code></pre>\n<p>What value is assigned to the variable a?</p>", "options": [{"option": "true (Boolean)", "correct": false}, {"option": "false (Boolean)", "correct": true}, {"option": "0 (Number)", "correct": false}, {"option": "There is no value, this expression causes an error.", "correct": false}], "level": "Medium"}, {"question": "<p>Given the following JavaScript statement:</p>\n<pre class=\"prettyprint\"><code>var a = 1 ? \"ok\" : 0;\n</code></pre>\n<p>What value is assigned to the variable a?</p>", "options": [{"option": "\"ok\" (String)", "correct": true}, {"option": "0 (Number)", "correct": false}, {"option": "\"0\" (String)", "correct": false}, {"option": "1 (Number)", "correct": false}], "level": "Easy"}, {"question": "<p>Given the following JavaScript statement:</p>\n<pre class=\"prettyprint\"><code>var a = \"\" + Math.floor(\"3.141592\");\n</code></pre>\n<p>What value is assigned to the variable a?</p>", "options": [{"option": "There is no value, this expression causes an error.", "correct": false}, {"option": "\"3.141592\" (String)", "correct": false}, {"option": "3 (Number)", "correct": false}, {"option": "\"3\" (String)", "correct": true}], "level": "Medium"}, {"question": "<p>Given the following JavaScript statement:</p>\n<pre class=\"prettyprint\"><code>var a = ((7 | 0xFF) &amp; 17) | 8;\n</code></pre>\n<p>What value is assigned to the variable a?</p>", "options": [{"option": "25", "correct": true}, {"option": "255", "correct": false}, {"option": "32", "correct": false}, {"option": "There is no value, this expression causes an error.", "correct": false}], "level": "Easy"}, {"question": "<p>Given the following JavaScript statement:</p>\n<pre class=\"prettyprint\"><code>var a = Boolean(0 || null ? \"true\" : \"false\");\n</code></pre>\n<p>What value is assigned to the variable a?</p>", "options": [{"option": "The value cannot be determined because the evaluation depends on the javascript engine in use.", "correct": false}, {"option": "false (Boolean)", "correct": false}, {"option": "true (Boolean)", "correct": true}, {"option": "There is no value, this expression causes an error.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class A</p>\n<p>{</p>\n<p>final public int GetResult(int a, int b) { return 0; }</p>\n<p>}</p>\n<p>class B extends A</p>\n<p>{</p>\n<p>public int GetResult(int a, int b) {return 1; }</p>\n<p>}</p>\n<p>public class Test</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main( String args[ ])\n\n {\n\n B b = new B();\n\n System.out.println(\"x = \" + b.GetResult(0,1));\n\n }\n</code></pre>\n<p>}</p>", "options": [{"option": "x=0", "correct": false}, {"option": "x=1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "An Exception is thrown at RunTime", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Test p</p>\n<p>{ </p>\n<p>public static void main( String args[] )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>      class Foo\n\n     {\n\n           public int i=3;\n\n      }\n\n      Object o = (Object) new Foo();\n\n       Foo foo = (Foo) o;\n\n       System.out.println(\"i = \" + foo.i);\n  }\n</code></pre>\n<p>}</p>", "options": [{"option": "i = 3", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "i = 5", "correct": false}, {"option": "A ClassCastException will occur", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int  i = 1, j = -1;</p>\n<p>switch ( i )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>     case 0, 1 : j = 1;     /* Line 4 */\n\n     case 2 : j = 2;\n\n     default : j = 0;\n</code></pre>\n<p>}</p>\n<p>System.out.println(\"j = \" + j);</p>", "options": [{"option": "j = -1", "correct": false}, {"option": "j = 0", "correct": false}, {"option": "j = 1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int i = 1, j = 10;</p>\n<p>do</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>   if( i &gt; j )\n   {\n       break;\n    }\n    j--;\n</code></pre>\n<p>} while ( ++i &lt; 5);</p>\n<p>System.out.println(\"i = \" + i + \" and j =\" + j);</p>", "options": [{"option": "i = 6 and j = 5", "correct": false}, {"option": "i = 5 and j = 5", "correct": false}, {"option": "i = 6 and j = 4", "correct": false}, {"option": "i = 5 and j = 6", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassA</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassA p = new PassA();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>long [] a1 = {3,4,5};</p>\n<p>long [] a2 = fix(a1);</p>\n<p>System.out.print(a1[0] + a1[1] + a1[2] + \" \");</p>\n<p>System.out.println(a2[0] + a2[1] + a2[2]);</p>\n<p>}</p>\n<p>long [] fix(long [] a3)</p>\n<p>{</p>\n<p>a3[1] = 7;</p>\n<p>return a3;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "12 15", "correct": false}, {"option": "15 15", "correct": true}, {"option": "3 4 5 3 7 5", "correct": false}, {"option": "3 7 5 3 7 5", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Test</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>Test p = new Test();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>boolean b1 = false;</p>\n<p>boolean b2 = fix(b1);</p>\n<p>System.out.println(b1 + \" \" + b2);</p>\n<p>}</p>\n<p>boolean fix(boolean b1)</p>\n<p>{</p>\n<p>b1 = true;</p>\n<p>return b1;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassS p = new PassS();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>String s1 = \"slip\";</p>\n<p>String s2 = fix(s1);</p>\n<p>System.out.println(s1 + \" \" + s2);</p>\n<p>}</p>\n<p>String fix(String s1)</p>\n<p>{</p>\n<p>s1 = s1 + \"stream\";</p>\n<p>System.out.print(s1 + \" \");</p>\n<p>return \"stream\";</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class RTExcept</p>\n<p>{ </p>\n<p>public static void throwit () </p>\n<p>{ </p>\n<p>System.out.print(\"throwit \"); </p>\n<p>throw new RuntimeException();</p>\n<p>}  </p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>try </p>\n<p>{</p>\n<p>System.out.print(\"hello \");</p>\n<p>throwit();</p>\n<p>}</p>\n<p>catch (Exception re )</p>\n<p>{</p>\n<p>System.out.print(\"caught \"); </p>\n<p>}</p>\n<p>finally </p>\n<p>{</p>\n<p>System.out.print(\"finally \");</p>\n<p>} </p>\n<p>System.out.println(\"after \"); </p>\n<p>} </p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation Fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>Which statement is true?</strong></p>\n<p>A. Programs will not run out of memory.</p>\n<p>B. Objects that will never again be used are eligible for garbage collection.</p>\n<p>C. Objects that are referred to by other objects will never be garbage collected.</p>\n<p>D. Objects that can be reached from a live thread will never be garbage collected.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Medium-Hard"}, {"question": "<p><strong>Which will legally declare, construct, and initialize an array?</strong></p>\n<p>A. int [] myList = {\"1\", \"2\", \"3\"};</p>\n<p>B. int [] myList = (5, 8, 2);</p>\n<p>C. int myList [] [] = {4,9,7,0};</p>\n<p>D. int myList [] = {4, 3, 7};</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class CommandArgs</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>String s1 = args[1];</p>\n<p>String s2 = args[2];</p>\n<p>String s3 = args[3];</p>\n<p>String s4 = args[4];</p>\n<p>System.out.print(\" args[2] = \" + s2);</p>\n<p>}</p>\n<p>}</p>\n<p>and the command-line invocation is</p>\n<p><strong>&gt;java CommandArgs 1 2 3 4</strong></p>", "options": [{"option": "args[2]  =  2", "correct": false}, {"option": "args[2]  =  3", "correct": false}, {"option": "args[2]  =  null", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": true}], "level": "Medium"}, {"question": "<p>public class F0091</p>\n<p>{</p>\n<p>public void main( String[] args )</p>\n<p>{</p>\n<p>System.out.println( \"Hello\" + args[0] );</p>\n<p>}</p>\n<p>} </p>\n<p><strong>What will be the output of the program, if this code is executed with the command line:</strong></p>\n<p><strong>&gt; java F0091 world</strong></p>", "options": [{"option": "Hello", "correct": false}, {"option": "Hello Foo91", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "The code does not run.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>Which is true about a method-local inner class?</strong></p>\n<p>A. It must be marked final.</p>\n<p>B. It can be marked abstract.</p>\n<p>C. It can be marked public.</p>\n<p>D. It can be marked static.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>String x = new String(\"xyz\"); </p>\n<p>String y = \"abc\";</p>\n<p>x = x + y;</p>\n<p>How many String objects have been created?</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>Which of the following are valid calls to Math.max?</strong></p>\n<ol>\n<li>\n<p>Math.max(1,4)</p>\n</li>\n<li>\n<p>Math.max(2.3, 5)</p>\n</li>\n<li>\n<p>Math.max(1, 3, 5, 7)</p>\n</li>\n<li>\n<p>Math.max(-1.5, -2.8f)</p>\n</li>\n</ol>", "options": [{"option": "1, 2 and 4", "correct": true}, {"option": "2, 3 and 4", "correct": false}, {"option": "1, 2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class A</p>\n<p>{</p>\n<p>final public int GetResult(int a, int b) { return 0; }</p>\n<p>}</p>\n<p>class B extends A</p>\n<p>{</p>\n<p>public int GetResult(int a, int b) {return 1; }</p>\n<p>}</p>\n<p>public class Test</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main( String args[ ])\n\n {\n\n B b = new B();\n\n System.out.println(\"x = \" + b.GetResult(0,1));\n\n }\n</code></pre>\n<p>}</p>", "options": [{"option": "x=0", "correct": false}, {"option": "x=1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "An Exception is thrown at RunTime", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Test p</p>\n<p>{ </p>\n<p>public static void main( String args[] )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>      class Foo\n\n     {\n\n           public int i=3;\n\n      }\n\n      Object o = (Object) new Foo();\n\n       Foo foo = (Foo) o;\n\n       System.out.println(\"i = \" + foo.i);\n  }\n</code></pre>\n<p>}</p>", "options": [{"option": "i = 3", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "i = 5", "correct": false}, {"option": "A ClassCastException will occur", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int  i = 1, j = -1;</p>\n<p>switch ( i )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>     case 0, 1 : j = 1;     /* Line 4 */\n\n     case 2 : j = 2;\n\n     default : j = 0;\n</code></pre>\n<p>}</p>\n<p>System.out.println(\"j = \" + j);</p>", "options": [{"option": "j = -1", "correct": false}, {"option": "j = 0", "correct": false}, {"option": "j = 1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int i = 1, j = 10;</p>\n<p>do</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>   if( i &gt; j )\n   {\n       break;\n    }\n    j--;\n</code></pre>\n<p>} while ( ++i &lt; 5);</p>\n<p>System.out.println(\"i = \" + i + \" and j =\" + j);</p>", "options": [{"option": "i = 6 and j = 5", "correct": false}, {"option": "i = 5 and j = 5", "correct": false}, {"option": "i = 6 and j = 4", "correct": false}, {"option": "i = 5 and j = 6", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassA</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassA p = new PassA();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>long [] a1 = {3,4,5};</p>\n<p>long [] a2 = fix(a1);</p>\n<p>System.out.print(a1[0] + a1[1] + a1[2] + \" \");</p>\n<p>System.out.println(a2[0] + a2[1] + a2[2]);</p>\n<p>}</p>\n<p>long [] fix(long [] a3)</p>\n<p>{</p>\n<p>a3[1] = 7;</p>\n<p>return a3;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "12 15", "correct": false}, {"option": "15 15", "correct": true}, {"option": "3 4 5 3 7 5", "correct": false}, {"option": "3 7 5 3 7 5", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Test</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>Test p = new Test();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>boolean b1 = false;</p>\n<p>boolean b2 = fix(b1);</p>\n<p>System.out.println(b1 + \" \" + b2);</p>\n<p>}</p>\n<p>boolean fix(boolean b1)</p>\n<p>{</p>\n<p>b1 = true;</p>\n<p>return b1;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassS p = new PassS();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>String s1 = \"slip\";</p>\n<p>String s2 = fix(s1);</p>\n<p>System.out.println(s1 + \" \" + s2);</p>\n<p>}</p>\n<p>String fix(String s1)</p>\n<p>{</p>\n<p>s1 = s1 + \"stream\";</p>\n<p>System.out.print(s1 + \" \");</p>\n<p>return \"stream\";</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class RTExcept</p>\n<p>{ </p>\n<p>public static void throwit () </p>\n<p>{ </p>\n<p>System.out.print(\"throwit \"); </p>\n<p>throw new RuntimeException();</p>\n<p>}  </p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>try </p>\n<p>{</p>\n<p>System.out.print(\"hello \");</p>\n<p>throwit();</p>\n<p>}</p>\n<p>catch (Exception re )</p>\n<p>{</p>\n<p>System.out.print(\"caught \"); </p>\n<p>}</p>\n<p>finally </p>\n<p>{</p>\n<p>System.out.print(\"finally \");</p>\n<p>} </p>\n<p>System.out.println(\"after \"); </p>\n<p>} </p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation Fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>Which statement is true?</strong></p>\n<p>A. Programs will not run out of memory.</p>\n<p>B. Objects that will never again be used are eligible for garbage collection.</p>\n<p>C. Objects that are referred to by other objects will never be garbage collected.</p>\n<p>D. Objects that can be reached from a live thread will never be garbage collected.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Medium-Hard"}, {"question": "<p><strong>Which will legally declare, construct, and initialize an array?</strong></p>\n<p>A. int [] myList = {\"1\", \"2\", \"3\"};</p>\n<p>B. int [] myList = (5, 8, 2);</p>\n<p>C. int myList [] [] = {4,9,7,0};</p>\n<p>D. int myList [] = {4, 3, 7};</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class CommandArgs</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>String s1 = args[1];</p>\n<p>String s2 = args[2];</p>\n<p>String s3 = args[3];</p>\n<p>String s4 = args[4];</p>\n<p>System.out.print(\" args[2] = \" + s2);</p>\n<p>}</p>\n<p>}</p>\n<p>and the command-line invocation is</p>\n<p><strong>&gt;java CommandArgs 1 2 3 4</strong></p>", "options": [{"option": "args[2]  =  2", "correct": false}, {"option": "args[2]  =  3", "correct": false}, {"option": "args[2]  =  null", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": true}], "level": "Medium"}, {"question": "<p>public class F0091</p>\n<p>{</p>\n<p>public void main( String[] args )</p>\n<p>{</p>\n<p>System.out.println( \"Hello\" + args[0] );</p>\n<p>}</p>\n<p>} </p>\n<p><strong>What will be the output of the program, if this code is executed with the command line:</strong></p>\n<p><strong>&gt; java F0091 world</strong></p>", "options": [{"option": "Hello", "correct": false}, {"option": "Hello Foo91", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "The code does not run.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>Which is true about a method-local inner class?</strong></p>\n<p>A. It must be marked final.</p>\n<p>B. It can be marked abstract.</p>\n<p>C. It can be marked public.</p>\n<p>D. It can be marked static.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>String x = new String(\"xyz\"); </p>\n<p>String y = \"abc\";</p>\n<p>x = x + y;</p>\n<p>How many String objects have been created?</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>Which of the following are valid calls to Math.max?</strong></p>\n<ol>\n<li>\n<p>Math.max(1,4)</p>\n</li>\n<li>\n<p>Math.max(2.3, 5)</p>\n</li>\n<li>\n<p>Math.max(1, 3, 5, 7)</p>\n</li>\n<li>\n<p>Math.max(-1.5, -2.8f)</p>\n</li>\n</ol>", "options": [{"option": "1, 2 and 4", "correct": true}, {"option": "2, 3 and 4", "correct": false}, {"option": "1, 2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Base</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>  Base()\n\n  {\n\n         System.out.print(\"Base\");\n\n   }\n</code></pre>\n<p>} </p>\n<p>public class Alpha extends Base </p>\n<p>{ </p>\n<p>public static void main(String[] args) </p>\n<p>{ </p>\n<pre class=\"prettyprint\"><code>     new Alpha(); /* Line 12 */\n\n     new Base(); /* Line 13 */\n</code></pre>\n<p>}  </p>\n<p>}</p>", "options": [{"option": "Base", "correct": false}, {"option": "BaseBase", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "The Code runs with no output", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class ArrayTest </p>\n<p>{ </p>\n<p>public static void main(String[ ] args) </p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> float f1[], f2[];\n\n f1 = new float[10];\n\n f2 = f1;\n\n System.out.println(\"f2[0] = \" + f2[0]);\n</code></pre>\n<p>}</p>\n<p>}</p>", "options": [{"option": "It prints f2[0] = 0.0", "correct": true}, {"option": "It prints f2[0] = NaN", "correct": false}, {"option": "An error at f2 = f1; causes compile to fail", "correct": false}, {"option": "It prints the garbage value", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int x = 1, y = 6; </p>\n<p>while (y--) </p>\n<p>{   </p>\n<p>x++; </p>\n<p>} </p>\n<p>System.out.println(\"x = \" + x +\" y = \" + y);</p>", "options": [{"option": "x = 6 y = 0", "correct": false}, {"option": "x = 7 y = 0", "correct": false}, {"option": "x = 6 y = -1", "correct": false}, {"option": "Compilation Fails", "correct": true}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Delta </p>\n<p>{ </p>\n<pre class=\"prettyprint\"><code>static boolean foo(char c)\n\n{\n\n    System.out.print(c);\n\n    return true;\n\n}\n\npublic static void main( String[] argv )\n\n{\n\n    int i = 0;\n\n    for (foo('A'); foo('B') &amp;&amp; (i &lt; 2); foo('C'))\n\n    {\n\n    i++;\n\n    foo('D');\n\n    }\n\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "ABDCBDCB", "correct": true}, {"option": "ABCDABCD", "correct": false}, {"option": "Compilation fails.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS </p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>public static void main(String [] args)\n\n{\n\n    PassS p = new PassS();\n\n    p.start();\n\n}\n\nvoid start()\n\n{\n\n    String s1 = \"slip\";\n\n    String s2 = fix(s1);\n\n    System.out.println(s1 + \" \" + s2);\n\n}\n\nString fix(String s1)\n\n{\n\n    s1 = s1 + \"stream\";\n\n    System.out.print(s1 + \" \");\n\n    return \"stream\";\n\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}], "level": "Medium"}, {"question": "<p><strong>Which of the following are legal lines of code?</strong></p>\n<ol>\n<li>\n<p>int w = (int)888.8;</p>\n</li>\n<li>\n<p>byte x = (byte)1000L;</p>\n</li>\n<li>\n<p>long y = (byte)100;</p>\n</li>\n<li>\n<p>byte z = (byte)100L;</p>\n</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "All statements are correct", "correct": true}], "level": "Medium"}, {"question": "<p>Which two statements are equivalent?</p>\n<ol>\n<li>\n<p>16*4</p>\n</li>\n<li>\n<p>16&gt;&gt;2</p>\n</li>\n<li>\n<p>16/2^2</p>\n</li>\n<li>\n<p>16&gt;&gt;&gt;2</p>\n</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 4", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1 and 3", "correct": false}], "level": "Very-Easy"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class X </p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main(String [] args)\n\n {\n\n   try\n\n  {\n\n        badMethod();\n\n        System.out.print(\"A\"); \n    }\n\n    catch (Exception ex)\n\n    {\n\n        System.out.print(\"B\");\n\n    }\n\n    finally\n\n    {\n\n        System.out.print(\"C\");\n\n    }\n\n        System.out.print(\"D\");\n\n}\n\npublic static void badMethod() {}\n</code></pre>\n<p>}</p>", "options": [{"option": "AC", "correct": false}, {"option": "BC", "correct": false}, {"option": "ACD", "correct": true}, {"option": "ABCD", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class MyProgram </p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>public static void main(String args[])\n\n{\n\n try\n\n    {\n\n        System.out.print(\"Hello world \");\n\n    }\n\n     finally\n\n    {\n\n        System.out.println(\"Finally executing \");\n\n    }\n\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "Nothing. The program will not compile because no exceptions are specified.", "correct": false}, {"option": "Nothing. The program will not compile because no catch clauses are specified.", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "Hello world Finally executing", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Nothing. The program will not compile because no exceptions are specified.", "correct": true}, {"option": "  Nothing. The program will not compile because no catch clauses are specified.", "correct": false}, {"option": "  Hello world.", "correct": false}, {"option": "Hello world Finally executing    ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following loops will execute the body of the loop even when, condition controlling the loop is initially false?</p>", "options": [{"option": "do-while", "correct": true}, {"option": " while", "correct": false}, {"option": "for", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n    public static void main(String args[])\n    {\n        Double d = new Double(1 / 0.);\n        boolean x = d.isInfinite();\n        System.out.print(x);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is wrapper for simple data type char?</p>", "options": [{"option": "Float", "correct": true}, {"option": "Character", "correct": false}, {"option": "String", "correct": false}, {"option": "Integer", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n        public static void main(String args[])\n\n        {    \n             int x; \n             x = 15;\n             x = x &gt;&gt; 1;\n             System.out.println(x);\n        } \n    }\n</code></pre>", "options": [{"option": "8", "correct": true}, {"option": "7", "correct": false}, {"option": "6", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class String_demo {\n    public static void main(String args[])\n    {\n\n        int ascii[] = { 65, 66, 67, 68};\n        String s = new String(ascii, 0, 2);\n        System.out.println(s);\n    }\n}\n</code></pre>", "options": [{"option": "ABCD", "correct": true}, {"option": "AB", "correct": false}, {"option": "ABC", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class output {\n       public static void main(String args[])\n       { \n          String s1 = \"Hacker\";\n          String s2 = new String(s1);\n          String s3 = \"HACKER\";\n          System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n       }\n   }\n</code></pre>", "options": [{"option": "Compilation Fails", "correct": true}, {"option": "true true", "correct": false}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Will the following code compile and if yes, what is the output?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\ninterface Colorable {}\nclass Vehicle {}\nclass Car extends Vehicle implements Colorable {}\npublic class Tester {\n    public static void main(String[] args) {\n        Vehicle a = new Car();\n        Colorable i = (Colorable) a;//Line1\n        Vehicle b = new Vehicle(); \n       Colorable j = (Colorable) b; //Line 2\n    }\n}\n</code></pre>", "options": [{"option": "Runtime error (due to Line 1)", "correct": true}, {"option": "Runtime error (due to Line 2)", "correct": false}, {"option": "The code compile fine without any output", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(new StringBuffer(\"H\"));\n        t.add(new StringBuffer(\"A\"));\n        t.add(new StringBuffer(\"C\"));\n        t.add(new StringBuffer(\"K\"));\n        System.out.println(t);\n    }\n}\n</code></pre>", "options": [{"option": "[H,A,C,K]", "correct": true}, {"option": "[K,C,A,H]", "correct": false}, {"option": "ClassCastException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n        boolean a = true;\n        boolean b = !true;\n        boolean c = a | b;\n        boolean d = a &amp; b;\n        boolean e = d ? b : c;\n        System.out.println(d + \" \" + e);\n    }\n}\n</code></pre>", "options": [{"option": "true false ", "correct": true}, {"option": "false true", "correct": false}, {"option": "true true", "correct": false}, {"option": "false false", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following determines what method to invoke during runtime?</p>", "options": [{"option": "Data hiding  ", "correct": true}, {"option": "Dynamic typing  ", "correct": false}, {"option": "Dynamic binding  ", "correct": false}, {"option": "Dynamic loading  ", "correct": false}], "level": "Easy"}, {"question": "<p>Can I increase the size of dynamically allocated array?</p>", "options": [{"option": "yes", "correct": true}, {"option": "no", "correct": false}, {"option": "both", "correct": false}, {"option": "dont know", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program?</p>\n<pre class=\"prettyprint\"><code>  class box {\n        int width;\n        int height;\n        int length;\n    } \n    class mainclass {\n        public static void main(String args[]) \n        {        \n            box obj = new box();\n            System.out.println(obj);\n        } \n    }\n</code></pre>", "options": [{"option": "0\r\n", "correct": false}, {"option": "1\r\n", "correct": false}, {"option": "Runtime error\r\n", "correct": false}, {"option": "Garbage value", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of these is correct way of inheriting class A by class B?</p>", "options": [{"option": "class B + class A {}\r\n", "correct": false}, {"option": "class B inherits class A {}\r\n", "correct": false}, {"option": "class B extends A {}\r\n", "correct": true}, {"option": "class B extends class A {}", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of this program?</p>\n<pre class=\"prettyprint\"><code>    class A {\n        int i;\n    }    \n    class B extends A {\n        int j;\n        void display() {\n            super.i = j + 1;\n            System.out.println(j + \" \" + i);\n        }\n    }    \n    class inheritance {\n        public static void main(String args[])\n        {\n            B obj = new B();\n            obj.i=1;\n            obj.j=2;   \n            obj.display();     \n        }\n   }\n</code></pre>", "options": [{"option": "2 2\r\n", "correct": false}, {"option": "3 3\r\n", "correct": false}, {"option": "2 3\r\n", "correct": true}, {"option": "3 2", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the order of precedence (highest to lowest) of following operators?\n1. &amp;\n2. ^\n3. ?:</p>", "options": [{"option": "1 -> 2 -> 3\r\n", "correct": true}, {"option": "2 -> 1 -> 3\r\n", "correct": false}, {"option": "3 -> 2 -> 1\r\n", "correct": false}, {"option": "2 -> 3 -> 1", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of these method of class String is used to compare two String objects for their equality?</p>", "options": [{"option": "equals()\r\n", "correct": true}, {"option": "Equals()\r\n", "correct": false}, {"option": "isequal()\r\n", "correct": false}, {"option": "Isequal()", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of this program?</p>\n<pre class=\"prettyprint\"><code>    #include &lt;iostream&gt;\n    using namespace std;\n    class number\n    {\n        int i;\n        public:\n        int geti();\n        void puti(int j);\n    };\n    int number::geti()\n    {\n        return i;\n    }\n    void number::puti(int j)\n    {\n        i = j;\n    }\n    int main()\n    {\n        number s;\n        s.puti(10);\n        cout &lt;&lt; s.geti( );\n        return 0;\n    }\n</code></pre>", "options": [{"option": "10", "correct": true}, {"option": "11", "correct": false}, {"option": "20", "correct": false}, {"option": "22", "correct": false}], "level": "Very-Easy"}, {"question": "<p>hjascnhj</p>", "options": [{"option": "hbj", "correct": true}, {"option": "knk", "correct": false}, {"option": "knk", "correct": false}, {"option": "cd", "correct": false}, {"option": "", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following converts human readable file into platform independent code file in Java?</p>", "options": [{"option": "JVM", "correct": false}, {"option": "Applet", "correct": false}, {"option": "Compiler", "correct": true}, {"option": "JRE", "correct": false}], "level": "Very-Easy"}, {"question": "<p>JRE Stands for ____________.</p>", "options": [{"option": "Java Runtime Environment", "correct": true}, {"option": "Java Reply Engine", "correct": false}, {"option": "Java Running Engine", "correct": false}, {"option": "Java Runtime Engine", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Java is called as platform independent language. Do you agree with this statement ?</p>", "options": [{"option": "Yes", "correct": true}, {"option": "No", "correct": false}], "level": "Very-Easy"}, {"question": "<p>The order of three top level element in java source file are</p>", "options": [{"option": "import, package, class", "correct": false}, {"option": "class, import, package", "correct": false}, {"option": "package, import, class", "correct": true}, {"option": "import, class, package", "correct": false}], "level": "Very-Easy"}, {"question": "<p>which one of the following gets highest priority</p>", "options": [{"option": "()", "correct": true}, {"option": "+", "correct": false}, {"option": "*", "correct": false}, {"option": ">>", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Does Java support a class which extends multiple classes?</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Does Java support multiple inheritance?</p>", "options": [{"option": "Yes, but only through interfaces", "correct": true}, {"option": "Yes, but only through extending other classes", "correct": false}, {"option": "Yes, through interfaces and extending multiple classes", "correct": false}, {"option": "No", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What would be the output of this code snippet?</p>\n<pre class=\"prettyprint\"><code>import java.util.stream.*;\npublic class Streamin {\n    public static void main(String[] args) {\n      List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\n      numbers.stream().filter(n -&gt; n % 3 != 0).forEach(System.out::print);\n  }\n}\n</code></pre>", "options": [{"option": "12457", "correct": true}, {"option": "36", "correct": false}, {"option": "123345667", "correct": false}, {"option": "throws an Exception", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following will create and start this thread?</p>\n<pre class=\"prettyprint\"><code>public class MyThread implements Runnable \n{\n    public void run() \n    {\n        // some code here\n    }\n}\n</code></pre>", "options": [{"option": "new Runnable(MyThread).start();", "correct": false}, {"option": "new Thread(MyThread).run();", "correct": false}, {"option": "new Thread(new MyThread()).start();", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>class Foo \n    {\n        class Bar{ }\n    }\n    class Pack \n    {\n        public static void main (String [] args) \n        {\n            Foo f = new Foo();\n            /* Line 10: Missing statement ? */\n        }\n    }\n</code></pre>\n<p>which statement, inserted at line 10, creates an instance of Bar?</p>", "options": [{"option": "   Foo.Bar b = new Foo.Bar();   ", "correct": true}, {"option": "   Foo.Bar b = f.new Bar();   ", "correct": false}, {"option": "   Bar b = new f.Bar();   ", "correct": false}, {"option": "   Bar b = f.new Bar();   ", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\n    public static void main(String args[]){\n        int a = 20;\n        double b = 20.25;\n        System.out.print((a%10)+\" \"+(b%10));\n    }\n}\n</code></pre>", "options": [{"option": "0   0.0", "correct": false}, {"option": "0   0.25", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Output {\n    public static void main(String args[]) {\n        int x = 3.14;\n        int y = (int) Math.abs(x);\n        System.out.print(y);\n    }\n}\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>Does Java support a class which extends multiple classes?</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Does Java support multiple inheritance?</p>", "options": [{"option": "Yes, but only through interfaces", "correct": true}, {"option": "Yes, but only through extending other classes", "correct": false}, {"option": "Yes, through interfaces and extending multiple classes", "correct": false}, {"option": "No", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What would be the output of this code snippet?</p>\n<pre class=\"prettyprint\"><code>import java.util.stream.*;\npublic class Streamin {\n    public static void main(String[] args) {\n      List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7);\n      numbers.stream().filter(n -&gt; n % 3 != 0).forEach(System.out::print);\n  }\n}\n</code></pre>", "options": [{"option": "12457", "correct": true}, {"option": "36", "correct": false}, {"option": "123345667", "correct": false}, {"option": "throws an Exception", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following will create and start this thread?</p>\n<pre class=\"prettyprint\"><code>public class MyThread implements Runnable \n{\n    public void run() \n    {\n        // some code here\n    }\n}\n</code></pre>", "options": [{"option": "new Runnable(MyThread).start();", "correct": false}, {"option": "new Thread(MyThread).run();", "correct": false}, {"option": "new Thread(new MyThread()).start();", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>class Foo \n    {\n        class Bar{ }\n    }\n    class Pack \n    {\n        public static void main (String [] args) \n        {\n            Foo f = new Foo();\n            /* Line 10: Missing statement ? */\n        }\n    }\n</code></pre>\n<p>which statement, inserted at line 10, creates an instance of Bar?</p>", "options": [{"option": "   Foo.Bar b = new Foo.Bar();   ", "correct": true}, {"option": "   Foo.Bar b = f.new Bar();   ", "correct": false}, {"option": "   Bar b = new f.Bar();   ", "correct": false}, {"option": "   Bar b = f.new Bar();   ", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\n    public static void main(String args[]){\n        int a = 20;\n        double b = 20.25;\n        System.out.print((a%10)+\" \"+(b%10));\n    }\n}\n</code></pre>", "options": [{"option": "0   0.0", "correct": false}, {"option": "0   0.25", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Output {\n    public static void main(String args[]) {\n        int x = 3.14;\n        int y = (int) Math.abs(x);\n        System.out.print(y);\n    }\n}\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>[ ] instanceof Object\n[ ] instanceof Array\n</code></pre>\n<p>What are the outputs of the above statements?</p>", "options": [{"option": "false and true", "correct": false}, {"option": "false and error", "correct": false}, {"option": "true and true", "correct": true}, {"option": "false and false", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var func = function(){};\nfunc.prototype.abc = function(){};\nfunc.prototype.foo = function(){};\nvar inst = new func;\n</code></pre>\n<p>Which property in instance of function refers to prototype methods of that function?</p>", "options": [{"option": "inst.ptototype", "correct": false}, {"option": "inst.protoObj", "correct": false}, {"option": "inst.__getter__", "correct": false}, {"option": "inst.__proto__", "correct": true}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var obj = {};\nobj.handleEvent = function(){};\nobj.clickEvent = function(){};\nobj.click = function(){};\n\nElem.addEventListener(\"click\",obj, false);\n</code></pre>\n<p>Which method will execute on click of element?</p>", "options": [{"option": "clickEvent", "correct": false}, {"option": "handleEvent", "correct": true}, {"option": "click", "correct": false}, {"option": "gives error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How to  store data in localstorage?</p>", "options": [{"option": "localstorage['key'] = value;", "correct": false}, {"option": "localstorage.setItem('key', value);", "correct": true}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>[ ] instanceof Object\n[ ] instanceof Array\n</code></pre>\n<p>What are the outputs of the above statements?</p>", "options": [{"option": "false and true", "correct": false}, {"option": "false and error", "correct": false}, {"option": "true and true", "correct": true}, {"option": "false and false", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var func = function(){};\nfunc.prototype.abc = function(){};\nfunc.prototype.foo = function(){};\nvar inst = new func;\n</code></pre>\n<p>Which property in instance of function refers to prototype methods of that function?</p>", "options": [{"option": "inst.ptototype", "correct": false}, {"option": "inst.protoObj", "correct": false}, {"option": "inst.__getter__", "correct": false}, {"option": "inst.__proto__", "correct": true}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var obj = {};\nobj.handleEvent = function(){};\nobj.clickEvent = function(){};\nobj.click = function(){};\n\nElem.addEventListener(\"click\",obj, false);\n</code></pre>\n<p>Which method will execute on click of element?</p>", "options": [{"option": "clickEvent", "correct": false}, {"option": "handleEvent", "correct": true}, {"option": "click", "correct": false}, {"option": "gives error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How to  store data in localstorage?</p>", "options": [{"option": "localstorage['key'] = value;", "correct": false}, {"option": "localstorage.setItem('key', value);", "correct": true}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>[ ] instanceof Object\n[ ] instanceof Array\n</code></pre>\n<p>What are the outputs of the above statements?</p>", "options": [{"option": "false and true", "correct": false}, {"option": "false and error", "correct": false}, {"option": "true and true", "correct": true}, {"option": "false and false", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var func = function(){};\nfunc.prototype.abc = function(){};\nfunc.prototype.foo = function(){};\nvar inst = new func;\n</code></pre>\n<p>Which property in instance of function refers to prototype methods of that function?</p>", "options": [{"option": "inst.ptototype", "correct": false}, {"option": "inst.protoObj", "correct": false}, {"option": "inst.__getter__", "correct": false}, {"option": "inst.__proto__", "correct": true}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var obj = {};\nobj.handleEvent = function(){};\nobj.clickEvent = function(){};\nobj.click = function(){};\n\nElem.addEventListener(\"click\",obj, false);\n</code></pre>\n<p>Which method will execute on click of element?</p>", "options": [{"option": "clickEvent", "correct": false}, {"option": "handleEvent", "correct": true}, {"option": "click", "correct": false}, {"option": "gives error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How to  store data in localstorage?</p>", "options": [{"option": "localstorage['key'] = value;", "correct": false}, {"option": "localstorage.setItem('key', value);", "correct": true}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Please select one of the options as the output of code snippet given below:</p>\n<ol>\n<li>public void test(int a) </li>\n<li>{ </li>\n<li>int odd = 1; </li>\n<li>if(odd) /* Line 4 */</li>\n<li>{</li>\n<li>System.out.println(\"odd\"); </li>\n<li>} </li>\n<li>else </li>\n<li>{</li>\n<li>System.out.println(\"even\"); </li>\n<li>} </li>\n<li>}</li>\n</ol>", "options": [{"option": "Compilation fails", "correct": true}, {"option": "\u201codd\u201d will always be the output", "correct": false}, {"option": "\u201ceven\u201d will always be the output", "correct": false}, {"option": "\"odd\" will be output for odd values, and \"even\" for even values", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>Please select one of the options as the output of code snippet given below:</p>\n<ol>\n<li>public void test(int a) </li>\n<li>{ </li>\n<li>int odd = 1; </li>\n<li>if(odd) /* Line 4 */</li>\n<li>{</li>\n<li>System.out.println(\"odd\"); </li>\n<li>} </li>\n<li>else </li>\n<li>{</li>\n<li>System.out.println(\"even\"); </li>\n<li>} </li>\n<li>}</li>\n</ol>", "options": [{"option": "Compilation fails", "correct": true}, {"option": "\u201codd\u201d will always be the output", "correct": false}, {"option": "\u201ceven\u201d will always be the output", "correct": false}, {"option": "\"odd\" will be output for odd values, and \"even\" for even values", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What is the widest valid returnType for methodA in line 3? Please select one.</p>\n<ol>\n<li>public class ReturnMe </li>\n<li>{ </li>\n<li>returnType methodA(byte x, double y) /* Line 3 */</li>\n<li>{ </li>\n<li>return (long)x / y * 2; </li>\n<li>} 7.  }</li>\n</ol>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "long", "correct": false}, {"option": "double", "correct": true}, {"option": "float", "correct": false}], "level": "Medium"}, {"question": "<p>What is the widest valid returnType for methodA in line 3? Please select one.</p>\n<ol>\n<li>public class ReturnMe </li>\n<li>{ </li>\n<li>returnType methodA(byte x, double y) /* Line 3 */</li>\n<li>{ </li>\n<li>return (long)x / y * 2; </li>\n<li>} 7.  }</li>\n</ol>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "long", "correct": false}, {"option": "double", "correct": true}, {"option": "float", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? </p>\n<p>try </p>\n<p>{</p>\n<p>int x = 0; </p>\n<p>int y = 5 / x; </p>\n<p>}</p>\n<p>catch (Exception e) </p>\n<p>{</p>\n<p>System.out.println(\"Exception\"); </p>\n<p>}</p>\n<p>catch (ArithmeticException ae) </p>\n<p>{</p>\n<p>System.out.println(\"Arithmetic Exception\"); </p>\n<p>}</p>\n<p>System.out.println(\"finished\");</p>", "options": [{"option": "finished", "correct": false}, {"option": "Exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Arithmetic Exception", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? </p>\n<p>try </p>\n<p>{</p>\n<p>int x = 0; </p>\n<p>int y = 5 / x; </p>\n<p>}</p>\n<p>catch (Exception e) </p>\n<p>{</p>\n<p>System.out.println(\"Exception\"); </p>\n<p>}</p>\n<p>catch (ArithmeticException ae) </p>\n<p>{</p>\n<p>System.out.println(\"Arithmetic Exception\"); </p>\n<p>}</p>\n<p>System.out.println(\"finished\");</p>", "options": [{"option": "finished", "correct": false}, {"option": "Exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Arithmetic Exception", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? Please select one.\npublic class RTExcept \n{</p>\n<p>public static void throwit () \n{</p>\n<p>System.out.print(\"throwit \");\nthrow new RuntimeException();\n}\npublic static void main(String [] args) </p>\n<p>{\ntry \n{\nSystem.out.print(\"hello \");\n throwit();\n}\ncatch (Exception re ) \n{\nSystem.out.print(\"caught \");\n}\nfinally \n{\nSystem.out.print(\"finally \");\n}\nSystem.out.println(\"after\");\n}</p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>What will be the output of the program? Please select one.\npublic class RTExcept \n{</p>\n<p>public static void throwit () \n{</p>\n<p>System.out.print(\"throwit \");\nthrow new RuntimeException();\n}\npublic static void main(String [] args) </p>\n<p>{\ntry \n{\nSystem.out.print(\"hello \");\n throwit();\n}\ncatch (Exception re ) \n{\nSystem.out.print(\"caught \");\n}\nfinally \n{\nSystem.out.print(\"finally \");\n}\nSystem.out.println(\"after\");\n}</p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<p>class Test </p>\n<p>{</p>\n<p>public static void main(String [] args) </p>\n<p>{</p>\n<p>int x= 0;</p>\n<p>int y= 0;</p>\n<p>for (int z = 0; z &lt; 5; z++) </p>\n<p>{</p>\n<p>if (( ++x &gt; 2 ) || (++y &gt; 2)) </p>\n<p>{</p>\n<p>x++;</p>\n<p>}</p>\n<p>}</p>\n<p>System.out.println(x + \" \" + y);</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "5 3", "correct": false}, {"option": "8 2", "correct": true}, {"option": "8 3", "correct": false}, {"option": "8 5", "correct": false}, {"option": "2 8", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<p>class Test </p>\n<p>{</p>\n<p>public static void main(String [] args) </p>\n<p>{</p>\n<p>int x= 0;</p>\n<p>int y= 0;</p>\n<p>for (int z = 0; z &lt; 5; z++) </p>\n<p>{</p>\n<p>if (( ++x &gt; 2 ) || (++y &gt; 2)) </p>\n<p>{</p>\n<p>x++;</p>\n<p>}</p>\n<p>}</p>\n<p>System.out.println(x + \" \" + y);</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "5 3", "correct": false}, {"option": "8 2", "correct": true}, {"option": "8 3", "correct": false}, {"option": "8 5", "correct": false}, {"option": "2 8", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these interfaces is not a part of Java\u2019s collection framework? Select one.</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "SortedMap", "correct": false}, {"option": "TreeMap", "correct": false}, {"option": "SortedList", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these interfaces is not a part of Java\u2019s collection framework? Select one.</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "SortedMap", "correct": false}, {"option": "TreeMap", "correct": false}, {"option": "SortedList", "correct": true}], "level": "Medium"}, {"question": "<p>What, inserted at line 39, will sort the keys in the props HashMap? Select one.</p>\n<ol>\n<li>HashMap props = new HashMap();</li>\n<li>props.put(\"key45\", \"some value\");</li>\n<li>props.put(\"key12\", \"some other value\");</li>\n<li>props.put(\"key39\", \"yet another value\");</li>\n<li>Set s = props.keySet();</li>\n<li>// insert code here (Line 39)</li>\n</ol>", "options": [{"option": "Arrays.sort(s);", "correct": false}, {"option": "s = new TreeSet(s);", "correct": true}, {"option": "Collections.sort(s);", "correct": false}, {"option": "s = new SortedSet(s);", "correct": false}, {"option": "s = new LinkedList(s);", "correct": false}], "level": "Medium"}, {"question": "<p>What, inserted at line 39, will sort the keys in the props HashMap? Select one.</p>\n<ol>\n<li>HashMap props = new HashMap();</li>\n<li>props.put(\"key45\", \"some value\");</li>\n<li>props.put(\"key12\", \"some other value\");</li>\n<li>props.put(\"key39\", \"yet another value\");</li>\n<li>Set s = props.keySet();</li>\n<li>// insert code here (Line 39)</li>\n</ol>", "options": [{"option": "Arrays.sort(s);", "correct": false}, {"option": "s = new TreeSet(s);", "correct": true}, {"option": "Collections.sort(s);", "correct": false}, {"option": "s = new SortedSet(s);", "correct": false}, {"option": "s = new LinkedList(s);", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result of the following code?  Please select one.</p>\n<p>. import java.util.*;\n2.\n3. public class LetterASort{\n4.  public static void main(String[] args) {\n5.   List strings = new ArrayList();\n6.   strings.add(\"aAaA\");\n7.   strings.add(\"AaA\");\n8.   strings.add(\"aAa\");\n9.   strings.add(\"AAaa\");\n10.   Collections.sort(strings);\n11.   for (String s : strings) { System.out.print(s + \" \"); }\n12.  }\n13. }</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "aAaA aAa AAaa AaA", "correct": false}, {"option": "AAaa AaA aAa aAaA", "correct": true}, {"option": "AaA AAaa aAaA aAa", "correct": false}, {"option": "aAa AaA aAaA AAaa", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result of the following code?  Please select one.</p>\n<p>. import java.util.*;\n2.\n3. public class LetterASort{\n4.  public static void main(String[] args) {\n5.   List strings = new ArrayList();\n6.   strings.add(\"aAaA\");\n7.   strings.add(\"AaA\");\n8.   strings.add(\"aAa\");\n9.   strings.add(\"AAaa\");\n10.   Collections.sort(strings);\n11.   for (String s : strings) { System.out.print(s + \" \"); }\n12.  }\n13. }</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "aAaA aAa AAaa AaA", "correct": false}, {"option": "AAaa AaA aAa aAaA", "correct": true}, {"option": "AaA AAaa aAaA aAa", "correct": false}, {"option": "aAa AaA aAaA AAaa", "correct": false}], "level": "Medium"}, {"question": "<p>A programmer has an algorithm that requires a java.util.List that provides an efficient implementation of add(0, object), but does NOT need to support quick random access. What supports these requirements? Please select one.</p>", "options": [{"option": "java.util.Queue", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.LinearList", "correct": false}, {"option": "java.util.LinkedList", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>A programmer has an algorithm that requires a java.util.List that provides an efficient implementation of add(0, object), but does NOT need to support quick random access. What supports these requirements? Please select one.</p>", "options": [{"option": "java.util.Queue", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.LinearList", "correct": false}, {"option": "java.util.LinkedList", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result? Select one.</p>\n<ol>\n<li>public static Collection get() {</li>\n<li>Collection sorted = new LinkedList();</li>\n<li>sorted.add(\"B\"); sorted.add(\"C\"); sorted.add(\"A\");</li>\n<li>return sorted;</li>\n<li>}</li>\n<li></li>\n<li>public static void main(String[] args) {</li>\n<li>for (Object obj: get()) {</li>\n<li>System.out.print(obj + \", \");</li>\n<li>}</li>\n<li>}</li>\n</ol>", "options": [{"option": "A, B, C,", "correct": false}, {"option": "B, C, A,", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the result? Select one.</p>\n<ol>\n<li>public static Collection get() {</li>\n<li>Collection sorted = new LinkedList();</li>\n<li>sorted.add(\"B\"); sorted.add(\"C\"); sorted.add(\"A\");</li>\n<li>return sorted;</li>\n<li>}</li>\n<li></li>\n<li>public static void main(String[] args) {</li>\n<li>for (Object obj: get()) {</li>\n<li>System.out.print(obj + \", \");</li>\n<li>}</li>\n<li>}</li>\n</ol>", "options": [{"option": "A, B, C,", "correct": false}, {"option": "B, C, A,", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which statement is static and synchronized in JDBC API?  Please select one.</p>", "options": [{"option": "executeQuery()", "correct": false}, {"option": "executeUpdate()", "correct": false}, {"option": "getConnection()", "correct": true}, {"option": "prepareCall()", "correct": false}, {"option": "getDriver()", "correct": false}], "level": "Medium"}, {"question": "<p>Which statement is static and synchronized in JDBC API?  Please select one.</p>", "options": [{"option": "executeQuery()", "correct": false}, {"option": "executeUpdate()", "correct": false}, {"option": "getConnection()", "correct": true}, {"option": "prepareCall()", "correct": false}, {"option": "getDriver()", "correct": false}], "level": "Medium"}, {"question": "<p>What allows the programmer to destroy an object x?</p>", "options": [{"option": "x.delete();", "correct": false}, {"option": "x.finalize();", "correct": false}, {"option": "Runtime.getRuntime().gc();", "correct": false}, {"option": "Only the garbage collection system can destroy an object", "correct": true}, {"option": "x cannot be destroyed", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What allows the programmer to destroy an object x?</p>", "options": [{"option": "x.delete();", "correct": false}, {"option": "x.finalize();", "correct": false}, {"option": "Runtime.getRuntime().gc();", "correct": false}, {"option": "Only the garbage collection system can destroy an object", "correct": true}, {"option": "x cannot be destroyed", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Based on equals() and hashCode() contract in Java, which of the following is true.</p>", "options": [{"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) must return true", "correct": true}, {"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) might return true", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) must return false", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) might return false", "correct": false}, {"option": "If hashCode(o1) == hashCode(o2) returns true, then o1.equals(o2) must return true", "correct": false}], "level": "Medium"}, {"question": "<p>Based on equals() and hashCode() contract in Java, which of the following is true.</p>", "options": [{"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) must return true", "correct": true}, {"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) might return true", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) must return false", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) might return false", "correct": false}, {"option": "If hashCode(o1) == hashCode(o2) returns true, then o1.equals(o2) must return true", "correct": false}], "level": "Medium"}, {"question": "<p>Given the Spring configuration file, which are the correct statements. </p>\n<p>\n</p>", "options": [{"option": "NationalBank is a scalar value", "correct": true}, {"option": "The p namespace need not be declared", "correct": false}, {"option": "Bean id is bankServiceImpl", "correct": false}, {"option": "The BankServiceImpl references a NationalBank bean", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Given the Spring configuration file, which are the correct statements. </p>\n<p>\n</p>", "options": [{"option": "NationalBank is a scalar value", "correct": true}, {"option": "The p namespace need not be declared", "correct": false}, {"option": "Bean id is bankServiceImpl", "correct": false}, {"option": "The BankServiceImpl references a NationalBank bean", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select method\u2019s signatures that match with the following pointcut. </p>\n<p>execution(* com.test.service..<em>.</em>(*))</p>", "options": [{"option": "void com.test.service.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Money amount)", "correct": true}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select method\u2019s signatures that match with the following pointcut. </p>\n<p>execution(* com.test.service..<em>.</em>(*))</p>", "options": [{"option": "void com.test.service.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Money amount)", "correct": true}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select the right statement about referring a Spring configuration file inside the package com.example.myapp in the below example? Select one.</p>\n<p>ApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:/com.example.myapp.config.xml\");</p>", "options": [{"option": "The slash character preceding com.example could be omitted", "correct": false}, {"option": "Package name with dot is not well formatted using the dot character", "correct": false}, {"option": "The classpath: prefix could be omitted", "correct": false}, {"option": "All of the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Select the right statement about referring a Spring configuration file inside the package com.example.myapp in the below example? Select one.</p>\n<p>ApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:/com.example.myapp.config.xml\");</p>", "options": [{"option": "The slash character preceding com.example could be omitted", "correct": false}, {"option": "Package name with dot is not well formatted using the dot character", "correct": false}, {"option": "The classpath: prefix could be omitted", "correct": false}, {"option": "All of the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>How could you externalize constants from a Spring configuration file or a Spring annotation into a .properties file?</p>", "options": [{"option": "By using the c:namespace", "correct": false}, {"option": "By using the <context:property-placeholder /> tag", "correct": true}, {"option": "By declaring the ConstantPlaceholderConfigurer bean post processor", "correct": false}, {"option": "By using the <util:constant /> tag", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>How could you externalize constants from a Spring configuration file or a Spring annotation into a .properties file?</p>", "options": [{"option": "By using the c:namespace", "correct": false}, {"option": "By using the <context:property-placeholder /> tag", "correct": true}, {"option": "By declaring the ConstantPlaceholderConfigurer bean post processor", "correct": false}, {"option": "By using the <util:constant /> tag", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which statement is correct?</p>", "options": [{"option": "Only the Session that you obtained with sf.getCurrentSession() is flushed and closed automatically", "correct": true}, {"option": "Only the Session that you obtained with sf.openSession() is flushed and closed automatically", "correct": false}, {"option": "Only the Session that you obtained with sf.getNewSession() is flushed and closed automatically", "correct": false}, {"option": "All of the above", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which statement is correct?</p>", "options": [{"option": "Only the Session that you obtained with sf.getCurrentSession() is flushed and closed automatically", "correct": true}, {"option": "Only the Session that you obtained with sf.openSession() is flushed and closed automatically", "correct": false}, {"option": "Only the Session that you obtained with sf.getNewSession() is flushed and closed automatically", "correct": false}, {"option": "All of the above", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What happens when both hibernate.properties and hibernate.cfg.xml are in the classpath?</p>", "options": [{"option": "The settings of the properties file will override the settings used in the XML configuration", "correct": false}, {"option": "The settings of the XML configuration file will override the settings used in the properties", "correct": true}, {"option": "Throws DuplicateConfigurationException", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>What happens when both hibernate.properties and hibernate.cfg.xml are in the classpath?</p>", "options": [{"option": "The settings of the properties file will override the settings used in the XML configuration", "correct": false}, {"option": "The settings of the XML configuration file will override the settings used in the properties", "correct": true}, {"option": "Throws DuplicateConfigurationException", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>If the class is mapped with a proxy then what does session.load() do?</p>", "options": [{"option": "Hit the database and get the result", "correct": false}, {"option": "Does not actually hit database until you invoke a method of the proxy", "correct": true}, {"option": "Hit the database until you invoke a method of the proxy", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>If the class is mapped with a proxy then what does session.load() do?</p>", "options": [{"option": "Hit the database and get the result", "correct": false}, {"option": "Does not actually hit database until you invoke a method of the proxy", "correct": true}, {"option": "Hit the database until you invoke a method of the proxy", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which is a valid CREATE TABLE statement?</p>", "options": [{"option": "CREATE TABLE EMP9$# (empid number(2)); ", "correct": true}, {"option": "CREATE TABLE EMP*123 (empid number(2));", "correct": false}, {"option": "CREATE TABLE PACKAGE AS (packid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP_TEST (empid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP*123 (empid number(2));", "correct": false}], "level": "Medium"}, {"question": "<p>Which is a valid CREATE TABLE statement?</p>", "options": [{"option": "CREATE TABLE EMP9$# (empid number(2)); ", "correct": true}, {"option": "CREATE TABLE EMP*123 (empid number(2));", "correct": false}, {"option": "CREATE TABLE PACKAGE AS (packid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP_TEST (empid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP*123 (empid number(2));", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>[ ] instanceof Object\n[ ] instanceof Array\n</code></pre>\n<p>What are the outputs of the above statements?</p>", "options": [{"option": "false and true", "correct": false}, {"option": "false and error", "correct": false}, {"option": "true and true", "correct": true}, {"option": "false and false", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var func = function(){};\nfunc.prototype.abc = function(){};\nfunc.prototype.foo = function(){};\nvar inst = new func;\n</code></pre>\n<p>Which property in instance of function refers to prototype methods of that function?</p>", "options": [{"option": "inst.ptototype", "correct": false}, {"option": "inst.protoObj", "correct": false}, {"option": "inst.__getter__", "correct": false}, {"option": "inst.__proto__", "correct": true}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var obj = {};\nobj.handleEvent = function(){};\nobj.clickEvent = function(){};\nobj.click = function(){};\n\nElem.addEventListener(\"click\",obj, false);\n</code></pre>\n<p>Which method will execute on click of element?</p>", "options": [{"option": "clickEvent", "correct": false}, {"option": "handleEvent", "correct": true}, {"option": "click", "correct": false}, {"option": "gives error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How to  store data in localstorage?</p>", "options": [{"option": "localstorage['key'] = value;", "correct": false}, {"option": "localstorage.setItem('key', value);", "correct": true}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>[ ] instanceof Object\n[ ] instanceof Array\n</code></pre>\n<p>What are the outputs of the above statements?</p>", "options": [{"option": "false and true", "correct": false}, {"option": "false and error", "correct": false}, {"option": "true and true", "correct": true}, {"option": "false and false", "correct": false}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var func = function(){};\nfunc.prototype.abc = function(){};\nfunc.prototype.foo = function(){};\nvar inst = new func;\n</code></pre>\n<p>Which property in instance of function refers to prototype methods of that function?</p>", "options": [{"option": "inst.ptototype", "correct": false}, {"option": "inst.protoObj", "correct": false}, {"option": "inst.__getter__", "correct": false}, {"option": "inst.__proto__", "correct": true}], "level": "Medium-Hard"}, {"question": "<pre class=\"prettyprint\"><code>var obj = {};\nobj.handleEvent = function(){};\nobj.clickEvent = function(){};\nobj.click = function(){};\n\nElem.addEventListener(\"click\",obj, false);\n</code></pre>\n<p>Which method will execute on click of element?</p>", "options": [{"option": "clickEvent", "correct": false}, {"option": "handleEvent", "correct": true}, {"option": "click", "correct": false}, {"option": "gives error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How to  store data in localstorage?</p>", "options": [{"option": "localstorage['key'] = value;", "correct": false}, {"option": "localstorage.setItem('key', value);", "correct": true}, {"option": "both a and b", "correct": false}, {"option": "none of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Please select one of the options as the output of code snippet given below:</p>\n<pre class=\"prettyprint\"><code>1.  public void test(int a) \n2.  { \n3.      int odd = 1; \n4.      if(odd) /* Line 4 */\n5.      {\n6.          System.out.println(\"odd\"); \n7.      } \n8.      else \n9.      {\n10.         System.out.println(\"even\"); \n11.     } \n12. }\n</code></pre>", "options": [{"option": "Compilation fails", "correct": true}, {"option": "\u201codd\u201d will always be the output", "correct": false}, {"option": "\u201ceven\u201d will always be the output", "correct": false}, {"option": "\"odd\" will be output for odd values, and \"even\" for even values", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What is the widest valid returnType for methodA in line 3? Please select one.</p>\n<pre class=\"prettyprint\"><code>1.  public class ReturnMe \n2.  { \n3.    returnType methodA(byte x, double y) /* Line 3 */\n4.    { \n5.      return (long)x / y * 2; \n6.    } \n7.  }\n</code></pre>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "long", "correct": false}, {"option": "double", "correct": true}, {"option": "float", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? </p>\n<pre class=\"prettyprint\"><code>try \n\n{\n\nint x = 0; \n\nint y = 5 / x; \n\n}\n\ncatch (Exception e) \n\n{\n\nSystem.out.println(\"Exception\"); \n\n}\n\ncatch (ArithmeticException ae) \n\n{\n\nSystem.out.println(\"Arithmetic Exception\"); \n\n}\n\nSystem.out.println(\"finished\");\n</code></pre>", "options": [{"option": "finished", "correct": false}, {"option": "Exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Arithmetic Exception", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<pre class=\"prettyprint\"><code>public class RTExcept \n{\n\npublic static void throwit () \n{\n\nSystem.out.print(\"throwit \");\nthrow new RuntimeException();\n}\npublic static void main(String [] args) \n\n{\ntry \n{\nSystem.out.print(\"hello \");\n throwit();\n}\ncatch (Exception re ) \n{\nSystem.out.print(\"caught \");\n}\nfinally \n{\nSystem.out.print(\"finally \");\n}\nSystem.out.println(\"after\");\n}\n\n}\n</code></pre>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<pre class=\"prettyprint\"><code>class Test \n\n{\n\npublic static void main(String [] args) \n\n{\n\nint x= 0;\n\nint y= 0;\n\nfor (int z = 0; z &lt; 5; z++) \n\n{\n\nif (( ++x &gt; 2 ) || (++y &gt; 2)) \n\n{\n\nx++;\n\n}\n\n}\n\nSystem.out.println(x + \" \" + y);\n\n}\n\n}\n</code></pre>", "options": [{"option": "5 3", "correct": false}, {"option": "8 2", "correct": true}, {"option": "8 3", "correct": false}, {"option": "8 5", "correct": false}, {"option": "2 8", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these interfaces is not a part of Java\u2019s collection framework? Select one.</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "SortedMap", "correct": false}, {"option": "TreeMap", "correct": false}, {"option": "SortedList", "correct": true}], "level": "Medium"}, {"question": "<p>What, inserted at line 39, will sort the keys in the props HashMap? Select one.</p>\n<pre class=\"prettyprint\"><code>34. HashMap props = new HashMap();\n35. props.put(\"key45\", \"some value\");\n36. props.put(\"key12\", \"some other value\");\n37. props.put(\"key39\", \"yet another value\");\n38. Set s = props.keySet();\n39. // insert code here (Line 39)\n</code></pre>", "options": [{"option": "Arrays.sort(s);", "correct": false}, {"option": "s = new TreeSet(s);", "correct": true}, {"option": "Collections.sort(s);", "correct": false}, {"option": "s = new SortedSet(s);", "correct": false}, {"option": "s = new LinkedList(s);", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result of the following code?  Please select one.</p>\n<p>. import java.util.*;\n2.\n3. public class LetterASort{\n4.  public static void main(String[] args) {\n5.   List strings = new ArrayList();\n6.   strings.add(\"aAaA\");\n7.   strings.add(\"AaA\");\n8.   strings.add(\"aAa\");\n9.   strings.add(\"AAaa\");\n10.   Collections.sort(strings);\n11.   for (String s : strings) { System.out.print(s + \" \"); }\n12.  }\n13. }</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "aAaA aAa AAaa AaA", "correct": false}, {"option": "AAaa AaA aAa aAaA", "correct": true}, {"option": "AaA AAaa aAaA aAa", "correct": false}, {"option": "aAa AaA aAaA AAaa", "correct": false}], "level": "Medium"}, {"question": "<p>A programmer has an algorithm that requires a java.util.List that provides an efficient implementation of add(0, object), but does NOT need to support quick random access. What supports these requirements? Please select one.</p>", "options": [{"option": "java.util.Queue", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.LinearList", "correct": false}, {"option": "java.util.LinkedList", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result? Select one.</p>\n<pre class=\"prettyprint\"><code>1.  public static Collection get() {\n2.  Collection sorted = new LinkedList();\n3.  sorted.add(\"B\"); sorted.add(\"C\"); sorted.add(\"A\");\n4.   return sorted;\n5.  }\n6.  \n7.  public static void main(String[] args) {\n8.  for (Object obj: get()) {\n9.   System.out.print(obj + \", \");\n10. }\n11. }\n</code></pre>", "options": [{"option": "A, B, C,", "correct": false}, {"option": "B, C, A,", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which statement is static and synchronized in JDBC API?  Please select one.</p>", "options": [{"option": "executeQuery()", "correct": false}, {"option": "executeUpdate()", "correct": false}, {"option": "getConnection()", "correct": true}, {"option": "prepareCall()", "correct": false}, {"option": "getDriver()", "correct": false}], "level": "Medium"}, {"question": "<p>What allows the programmer to destroy an object x?</p>", "options": [{"option": "x.delete();", "correct": false}, {"option": "x.finalize();", "correct": false}, {"option": "Runtime.getRuntime().gc();", "correct": false}, {"option": "Only the garbage collection system can destroy an object", "correct": true}, {"option": "x cannot be destroyed", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Based on equals() and hashCode() contract in Java, which of the following is true.</p>", "options": [{"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) must return true", "correct": true}, {"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) might return true", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) must return false", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) might return false", "correct": false}, {"option": "If hashCode(o1) == hashCode(o2) returns true, then o1.equals(o2) must return true", "correct": false}], "level": "Medium"}, {"question": "<p>Given the Spring configuration file, which are the correct statements. </p>\n<p>\n</p>", "options": [{"option": "NationalBank is a scalar value", "correct": true}, {"option": "The p namespace need not be declared", "correct": false}, {"option": "Bean id is bankServiceImpl", "correct": false}, {"option": "The BankServiceImpl references a NationalBank bean", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select method\u2019s signatures that match with the following pointcut. </p>\n<pre class=\"prettyprint\"><code>execution(* com.test.service..*.*(*))\n</code></pre>", "options": [{"option": "void com.test.service.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Money amount)", "correct": true}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select the right statement about referring a Spring configuration file inside the package com.example.myapp in the below example? Select one.</p>\n<pre class=\"prettyprint\"><code>ApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:/com.example.myapp.config.xml\");\n</code></pre>", "options": [{"option": "The slash character preceding com.example could be omitted", "correct": false}, {"option": "Package name with dot is not well formatted using the dot character", "correct": false}, {"option": "The classpath: prefix could be omitted", "correct": false}, {"option": "All of the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>How could you externalize constants from a Spring configuration file or a Spring annotation into a .properties file?</p>", "options": [{"option": "By using the c:namespace", "correct": false}, {"option": "By using the <context:property-placeholder /> tag", "correct": true}, {"option": "By declaring the ConstantPlaceholderConfigurer bean post processor", "correct": false}, {"option": "By using the <util:constant /> tag", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which statement is correct?</p>", "options": [{"option": "Only the Session that you obtained with sf.getCurrentSession() is flushed and closed automatically", "correct": true}, {"option": "Only the Session that you obtained with sf.openSession() is flushed and closed automatically", "correct": false}, {"option": "Only the Session that you obtained with sf.getNewSession() is flushed and closed automatically", "correct": false}, {"option": "All of the above", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What happens when both hibernate.properties and hibernate.cfg.xml are in the classpath?</p>", "options": [{"option": "The settings of the properties file will override the settings used in the XML configuration", "correct": false}, {"option": "The settings of the XML configuration file will override the settings used in the properties", "correct": true}, {"option": "Throws DuplicateConfigurationException", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>If the class is mapped with a proxy then what does session.load() do?</p>", "options": [{"option": "Hit the database and get the result", "correct": false}, {"option": "Does not actually hit database until you invoke a method of the proxy", "correct": true}, {"option": "Hit the database until you invoke a method of the proxy", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which is a valid CREATE TABLE statement?</p>", "options": [{"option": "CREATE TABLE EMP9$# (empid number(2)); ", "correct": true}, {"option": "CREATE TABLE EMP*123 (empid number(2));", "correct": false}, {"option": "CREATE TABLE PACKAGE AS (packid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP_TEST (empid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP*123 (empid number(2));", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following script?\n\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.writeln(obj.prop.getFullname());\ndocument.writeln('<br />');\nvar test = obj.prop.getFullname;\ndocument.writeln(test());\n</p>", "options": [{"option": "Frodo Baggins\r\nGandalf", "correct": false}, {"option": "Bilbo Baggins\r\nFrodo Baggins", "correct": true}, {"option": "Frodo Baggins\r\nBilbo Baggins", "correct": false}, {"option": "Frodo Baggins\r\nFrodo Baggins", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following script?</p>\n<pre class=\"prettyprint\"><code>&lt;script&gt;\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.write(obj.prop.getFullname());\ndocument.write(' | ');\nvar test = obj.prop.getFullname;\ndocument.write(test());\n&lt;/script&gt;\n</code></pre>", "options": [{"option": "Frodo Baggins | Gandalf", "correct": false}, {"option": "Bilbo Baggins | Frodo Baggins", "correct": true}, {"option": "Frodo Baggins | Bilbo Baggins", "correct": false}, {"option": "Frodo Baggins | Frodo Baggins", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Medium"}, {"question": "<p>What is closure in Javascript?</p>", "options": [{"option": "A. Is an inner function that has access to the outer (enclosing) function\u2019s variables", "correct": false}, {"option": "B. Is the primary mechanism used to enable data privacy", "correct": false}, {"option": "C. Both A & B", "correct": true}, {"option": "D. None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What will be returned in this Javascript function?</p>\n<pre class=\"prettyprint\"><code>(function(x){\n    delete x;\n    return x;\n  })(1);\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How do you write a conditional statement that will <em>only</em> execute the contained code if variable x has a value 5 of type <em>number</em>?</p>", "options": [{"option": "if (x == 5) { \u2026 }", "correct": false}, {"option": "if x = 5 \u2026", "correct": false}, {"option": "if (x === 5) { \u2026 }", "correct": true}, {"option": "if x = 5 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy"}, {"question": "<p>Please select one of the options as the output of code snippet given below:</p>\n<pre class=\"prettyprint\"><code>1.  public void test(int a) \n2.  { \n3.      int odd = 1; \n4.      if(odd) /* Line 4 */\n5.      {\n6.          System.out.println(\"odd\"); \n7.      } \n8.      else \n9.      {\n10.         System.out.println(\"even\"); \n11.     } \n12. }\n</code></pre>", "options": [{"option": "Compilation fails", "correct": true}, {"option": "\u201codd\u201d will always be the output", "correct": false}, {"option": "\u201ceven\u201d will always be the output", "correct": false}, {"option": "\"odd\" will be output for odd values, and \"even\" for even values", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What is the widest valid returnType for methodA in line 3? Please select one.</p>\n<pre class=\"prettyprint\"><code>1.  public class ReturnMe \n2.  { \n3.    returnType methodA(byte x, double y) /* Line 3 */\n4.    { \n5.      return (long)x / y * 2; \n6.    } \n7.  }\n</code></pre>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "long", "correct": false}, {"option": "double", "correct": true}, {"option": "float", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? </p>\n<pre class=\"prettyprint\"><code>try \n\n{\n\nint x = 0; \n\nint y = 5 / x; \n\n}\n\ncatch (Exception e) \n\n{\n\nSystem.out.println(\"Exception\"); \n\n}\n\ncatch (ArithmeticException ae) \n\n{\n\nSystem.out.println(\"Arithmetic Exception\"); \n\n}\n\nSystem.out.println(\"finished\");\n</code></pre>", "options": [{"option": "finished", "correct": false}, {"option": "Exception", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Arithmetic Exception", "correct": false}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<pre class=\"prettyprint\"><code>public class RTExcept \n{\n\npublic static void throwit () \n{\n\nSystem.out.print(\"throwit \");\nthrow new RuntimeException();\n}\npublic static void main(String [] args) \n\n{\ntry \n{\nSystem.out.print(\"hello \");\n throwit();\n}\ncatch (Exception re ) \n{\nSystem.out.print(\"caught \");\n}\nfinally \n{\nSystem.out.print(\"finally \");\n}\nSystem.out.println(\"after\");\n}\n\n}\n</code></pre>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>What will be the output of the program? Please select one.</p>\n<pre class=\"prettyprint\"><code>class Test \n\n{\n\npublic static void main(String [] args) \n\n{\n\nint x= 0;\n\nint y= 0;\n\nfor (int z = 0; z &lt; 5; z++) \n\n{\n\nif (( ++x &gt; 2 ) || (++y &gt; 2)) \n\n{\n\nx++;\n\n}\n\n}\n\nSystem.out.println(x + \" \" + y);\n\n}\n\n}\n</code></pre>", "options": [{"option": "5 3", "correct": false}, {"option": "8 2", "correct": true}, {"option": "8 3", "correct": false}, {"option": "8 5", "correct": false}, {"option": "2 8", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these interfaces is not a part of Java\u2019s collection framework? Select one.</p>", "options": [{"option": "List", "correct": false}, {"option": "Set", "correct": false}, {"option": "SortedMap", "correct": false}, {"option": "TreeMap", "correct": false}, {"option": "SortedList", "correct": true}], "level": "Medium"}, {"question": "<p>What, inserted at line 39, will sort the keys in the props HashMap? Select one.</p>\n<pre class=\"prettyprint\"><code>34. HashMap props = new HashMap();\n35. props.put(\"key45\", \"some value\");\n36. props.put(\"key12\", \"some other value\");\n37. props.put(\"key39\", \"yet another value\");\n38. Set s = props.keySet();\n39. // insert code here (Line 39)\n</code></pre>", "options": [{"option": "Arrays.sort(s);", "correct": false}, {"option": "s = new TreeSet(s);", "correct": true}, {"option": "Collections.sort(s);", "correct": false}, {"option": "s = new SortedSet(s);", "correct": false}, {"option": "s = new LinkedList(s);", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result of the following code?  Please select one.</p>\n<p>. import java.util.*;\n2.\n3. public class LetterASort{\n4.  public static void main(String[] args) {\n5.   List strings = new ArrayList();\n6.   strings.add(\"aAaA\");\n7.   strings.add(\"AaA\");\n8.   strings.add(\"aAa\");\n9.   strings.add(\"AAaa\");\n10.   Collections.sort(strings);\n11.   for (String s : strings) { System.out.print(s + \" \"); }\n12.  }\n13. }</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "aAaA aAa AAaa AaA", "correct": false}, {"option": "AAaa AaA aAa aAaA", "correct": true}, {"option": "AaA AAaa aAaA aAa", "correct": false}, {"option": "aAa AaA aAaA AAaa", "correct": false}], "level": "Medium"}, {"question": "<p>A programmer has an algorithm that requires a java.util.List that provides an efficient implementation of add(0, object), but does NOT need to support quick random access. What supports these requirements? Please select one.</p>", "options": [{"option": "java.util.Queue", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.LinearList", "correct": false}, {"option": "java.util.LinkedList", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the result? Select one.</p>\n<pre class=\"prettyprint\"><code>1.  public static Collection get() {\n2.  Collection sorted = new LinkedList();\n3.  sorted.add(\"B\"); sorted.add(\"C\"); sorted.add(\"A\");\n4.   return sorted;\n5.  }\n6.  \n7.  public static void main(String[] args) {\n8.  for (Object obj: get()) {\n9.   System.out.print(obj + \", \");\n10. }\n11. }\n</code></pre>", "options": [{"option": "A, B, C,", "correct": false}, {"option": "B, C, A,", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which statement is static and synchronized in JDBC API?  Please select one.</p>", "options": [{"option": "executeQuery()", "correct": false}, {"option": "executeUpdate()", "correct": false}, {"option": "getConnection()", "correct": true}, {"option": "prepareCall()", "correct": false}, {"option": "getDriver()", "correct": false}], "level": "Medium"}, {"question": "<p>What allows the programmer to destroy an object x?</p>", "options": [{"option": "x.delete();", "correct": false}, {"option": "x.finalize();", "correct": false}, {"option": "Runtime.getRuntime().gc();", "correct": false}, {"option": "Only the garbage collection system can destroy an object", "correct": true}, {"option": "x cannot be destroyed", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Based on equals() and hashCode() contract in Java, which of the following is true.</p>", "options": [{"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) must return true", "correct": true}, {"option": "If o1.equals(o2) is true, then hashCode(o1) == hashCode(o2) might return true", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) must return false", "correct": false}, {"option": "If o1.equals(o2) is false, then hashCode(o1) == hashCode(o2) might return false", "correct": false}, {"option": "If hashCode(o1) == hashCode(o2) returns true, then o1.equals(o2) must return true", "correct": false}], "level": "Medium"}, {"question": "<p>Given the Spring configuration file, which are the correct statements. </p>\n<p>\n</p>", "options": [{"option": "NationalBank is a scalar value", "correct": true}, {"option": "The p namespace need not be declared", "correct": false}, {"option": "Bean id is bankServiceImpl", "correct": false}, {"option": "The BankServiceImpl references a NationalBank bean", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select method\u2019s signatures that match with the following pointcut. </p>\n<pre class=\"prettyprint\"><code>execution(* com.test.service..*.*(*))\n</code></pre>", "options": [{"option": "void com.test.service.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Money amount)", "correct": true}, {"option": "void com.test.service.account.MyServiceImpl#transfert(Account account, Money amount)", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Select the right statement about referring a Spring configuration file inside the package com.example.myapp in the below example? Select one.</p>\n<pre class=\"prettyprint\"><code>ApplicationContext context = new ClassPathXmlApplicationContext(\"classpath:/com.example.myapp.config.xml\");\n</code></pre>", "options": [{"option": "The slash character preceding com.example could be omitted", "correct": false}, {"option": "Package name with dot is not well formatted using the dot character", "correct": false}, {"option": "The classpath: prefix could be omitted", "correct": false}, {"option": "All of the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>How could you externalize constants from a Spring configuration file or a Spring annotation into a .properties file?</p>", "options": [{"option": "By using the c:namespace", "correct": false}, {"option": "By using the <context:property-placeholder /> tag", "correct": true}, {"option": "By declaring the ConstantPlaceholderConfigurer bean post processor", "correct": false}, {"option": "By using the <util:constant /> tag", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which statement is correct?</p>", "options": [{"option": "Only the Session that you obtained with sf.getCurrentSession() is flushed and closed automatically", "correct": true}, {"option": "Only the Session that you obtained with sf.openSession() is flushed and closed automatically", "correct": false}, {"option": "Only the Session that you obtained with sf.getNewSession() is flushed and closed automatically", "correct": false}, {"option": "All of the above", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What happens when both hibernate.properties and hibernate.cfg.xml are in the classpath?</p>", "options": [{"option": "The settings of the properties file will override the settings used in the XML configuration", "correct": false}, {"option": "The settings of the XML configuration file will override the settings used in the properties", "correct": true}, {"option": "Throws DuplicateConfigurationException", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>If the class is mapped with a proxy then what does session.load() do?</p>", "options": [{"option": "Hit the database and get the result", "correct": false}, {"option": "Does not actually hit database until you invoke a method of the proxy", "correct": true}, {"option": "Hit the database until you invoke a method of the proxy", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which is a valid CREATE TABLE statement?</p>", "options": [{"option": "CREATE TABLE EMP9$# (empid number(2)); ", "correct": true}, {"option": "CREATE TABLE EMP*123 (empid number(2));", "correct": false}, {"option": "CREATE TABLE PACKAGE AS (packid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP_TEST (empid number(2));", "correct": false}, {"option": "CREATE TABLE 1EMP*123 (empid number(2));", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class A</p>\n<p>{</p>\n<p>final public int GetResult(int a, int b) { return 0; }</p>\n<p>}</p>\n<p>class B extends A</p>\n<p>{</p>\n<p>public int GetResult(int a, int b) {return 1; }</p>\n<p>}</p>\n<p>public class Test</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main( String args[ ])\n\n {\n\n B b = new B();\n\n System.out.println(\"x = \" + b.GetResult(0,1));\n\n }\n</code></pre>\n<p>}</p>", "options": [{"option": "x=0", "correct": false}, {"option": "x=1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "An Exception is thrown at RunTime", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Test p</p>\n<p>{ </p>\n<p>public static void main( String args[] )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>      class Foo\n\n     {\n\n           public int i=3;\n\n      }\n\n      Object o = (Object) new Foo();\n\n       Foo foo = (Foo) o;\n\n       System.out.println(\"i = \" + foo.i);\n  }\n</code></pre>\n<p>}</p>", "options": [{"option": "i = 3", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "i = 5", "correct": false}, {"option": "A ClassCastException will occur", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int  i = 1, j = -1;</p>\n<p>switch ( i )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>     case 0, 1 : j = 1;     /* Line 4 */\n\n     case 2 : j = 2;\n\n     default : j = 0;\n</code></pre>\n<p>}</p>\n<p>System.out.println(\"j = \" + j);</p>", "options": [{"option": "j = -1", "correct": false}, {"option": "j = 0", "correct": false}, {"option": "j = 1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int i = 1, j = 10;</p>\n<p>do</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>   if( i &gt; j )\n   {\n       break;\n    }\n    j--;\n</code></pre>\n<p>} while ( ++i &lt; 5);</p>\n<p>System.out.println(\"i = \" + i + \" and j =\" + j);</p>", "options": [{"option": "i = 6 and j = 5", "correct": false}, {"option": "i = 5 and j = 5", "correct": false}, {"option": "i = 6 and j = 4", "correct": false}, {"option": "i = 5 and j = 6", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassA</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassA p = new PassA();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>long [] a1 = {3,4,5};</p>\n<p>long [] a2 = fix(a1);</p>\n<p>System.out.print(a1[0] + a1[1] + a1[2] + \" \");</p>\n<p>System.out.println(a2[0] + a2[1] + a2[2]);</p>\n<p>}</p>\n<p>long [] fix(long [] a3)</p>\n<p>{</p>\n<p>a3[1] = 7;</p>\n<p>return a3;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "12 15", "correct": false}, {"option": "15 15", "correct": true}, {"option": "3 4 5 3 7 5", "correct": false}, {"option": "3 7 5 3 7 5", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Test</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>Test p = new Test();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>boolean b1 = false;</p>\n<p>boolean b2 = fix(b1);</p>\n<p>System.out.println(b1 + \" \" + b2);</p>\n<p>}</p>\n<p>boolean fix(boolean b1)</p>\n<p>{</p>\n<p>b1 = true;</p>\n<p>return b1;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassS p = new PassS();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>String s1 = \"slip\";</p>\n<p>String s2 = fix(s1);</p>\n<p>System.out.println(s1 + \" \" + s2);</p>\n<p>}</p>\n<p>String fix(String s1)</p>\n<p>{</p>\n<p>s1 = s1 + \"stream\";</p>\n<p>System.out.print(s1 + \" \");</p>\n<p>return \"stream\";</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class RTExcept</p>\n<p>{ </p>\n<p>public static void throwit () </p>\n<p>{ </p>\n<p>System.out.print(\"throwit \"); </p>\n<p>throw new RuntimeException();</p>\n<p>}  </p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>try </p>\n<p>{</p>\n<p>System.out.print(\"hello \");</p>\n<p>throwit();</p>\n<p>}</p>\n<p>catch (Exception re )</p>\n<p>{</p>\n<p>System.out.print(\"caught \"); </p>\n<p>}</p>\n<p>finally </p>\n<p>{</p>\n<p>System.out.print(\"finally \");</p>\n<p>} </p>\n<p>System.out.println(\"after \"); </p>\n<p>} </p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation Fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>Which statement is true?</strong></p>\n<p>A. Programs will not run out of memory.</p>\n<p>B. Objects that will never again be used are eligible for garbage collection.</p>\n<p>C. Objects that are referred to by other objects will never be garbage collected.</p>\n<p>D. Objects that can be reached from a live thread will never be garbage collected.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Medium-Hard"}, {"question": "<p><strong>Which will legally declare, construct, and initialize an array?</strong></p>\n<p>A. int [] myList = {\"1\", \"2\", \"3\"};</p>\n<p>B. int [] myList = (5, 8, 2);</p>\n<p>C. int myList [] [] = {4,9,7,0};</p>\n<p>D. int myList [] = {4, 3, 7};</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class CommandArgs</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>String s1 = args[1];</p>\n<p>String s2 = args[2];</p>\n<p>String s3 = args[3];</p>\n<p>String s4 = args[4];</p>\n<p>System.out.print(\" args[2] = \" + s2);</p>\n<p>}</p>\n<p>}</p>\n<p>and the command-line invocation is</p>\n<p><strong>&gt;java CommandArgs 1 2 3 4</strong></p>", "options": [{"option": "args[2]  =  2", "correct": false}, {"option": "args[2]  =  3", "correct": false}, {"option": "args[2]  =  null", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": true}], "level": "Medium"}, {"question": "<p>public class F0091</p>\n<p>{</p>\n<p>public void main( String[] args )</p>\n<p>{</p>\n<p>System.out.println( \"Hello\" + args[0] );</p>\n<p>}</p>\n<p>} </p>\n<p><strong>What will be the output of the program, if this code is executed with the command line:</strong></p>\n<p><strong>&gt; java F0091 world</strong></p>", "options": [{"option": "Hello", "correct": false}, {"option": "Hello Foo91", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "The code does not run.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>Which is true about a method-local inner class?</strong></p>\n<p>A. It must be marked final.</p>\n<p>B. It can be marked abstract.</p>\n<p>C. It can be marked public.</p>\n<p>D. It can be marked static.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>String x = new String(\"xyz\"); </p>\n<p>String y = \"abc\";</p>\n<p>x = x + y;</p>\n<p>How many String objects have been created?</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>Which of the following are valid calls to Math.max?</strong></p>\n<ol>\n<li>\n<p>Math.max(1,4)</p>\n</li>\n<li>\n<p>Math.max(2.3, 5)</p>\n</li>\n<li>\n<p>Math.max(1, 3, 5, 7)</p>\n</li>\n<li>\n<p>Math.max(-1.5, -2.8f)</p>\n</li>\n</ol>", "options": [{"option": "1, 2 and 4", "correct": true}, {"option": "2, 3 and 4", "correct": false}, {"option": "1, 2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class A</p>\n<p>{</p>\n<p>final public int GetResult(int a, int b) { return 0; }</p>\n<p>}</p>\n<p>class B extends A</p>\n<p>{</p>\n<p>public int GetResult(int a, int b) {return 1; }</p>\n<p>}</p>\n<p>public class Test</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main( String args[ ])\n\n {\n\n B b = new B();\n\n System.out.println(\"x = \" + b.GetResult(0,1));\n\n }\n</code></pre>\n<p>}</p>", "options": [{"option": "x=0", "correct": false}, {"option": "x=1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "An Exception is thrown at RunTime", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Test p</p>\n<p>{ </p>\n<p>public static void main( String args[] )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>      class Foo\n\n     {\n\n           public int i=3;\n\n      }\n\n      Object o = (Object) new Foo();\n\n       Foo foo = (Foo) o;\n\n       System.out.println(\"i = \" + foo.i);\n  }\n</code></pre>\n<p>}</p>", "options": [{"option": "i = 3", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "i = 5", "correct": false}, {"option": "A ClassCastException will occur", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int  i = 1, j = -1;</p>\n<p>switch ( i )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>     case 0, 1 : j = 1;     /* Line 4 */\n\n     case 2 : j = 2;\n\n     default : j = 0;\n</code></pre>\n<p>}</p>\n<p>System.out.println(\"j = \" + j);</p>", "options": [{"option": "j = -1", "correct": false}, {"option": "j = 0", "correct": false}, {"option": "j = 1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int i = 1, j = 10;</p>\n<p>do</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>   if( i &gt; j )\n   {\n       break;\n    }\n    j--;\n</code></pre>\n<p>} while ( ++i &lt; 5);</p>\n<p>System.out.println(\"i = \" + i + \" and j =\" + j);</p>", "options": [{"option": "i = 6 and j = 5", "correct": false}, {"option": "i = 5 and j = 5", "correct": false}, {"option": "i = 6 and j = 4", "correct": false}, {"option": "i = 5 and j = 6", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassA</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassA p = new PassA();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>long [] a1 = {3,4,5};</p>\n<p>long [] a2 = fix(a1);</p>\n<p>System.out.print(a1[0] + a1[1] + a1[2] + \" \");</p>\n<p>System.out.println(a2[0] + a2[1] + a2[2]);</p>\n<p>}</p>\n<p>long [] fix(long [] a3)</p>\n<p>{</p>\n<p>a3[1] = 7;</p>\n<p>return a3;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "12 15", "correct": false}, {"option": "15 15", "correct": true}, {"option": "3 4 5 3 7 5", "correct": false}, {"option": "3 7 5 3 7 5", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Test</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>Test p = new Test();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>boolean b1 = false;</p>\n<p>boolean b2 = fix(b1);</p>\n<p>System.out.println(b1 + \" \" + b2);</p>\n<p>}</p>\n<p>boolean fix(boolean b1)</p>\n<p>{</p>\n<p>b1 = true;</p>\n<p>return b1;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassS p = new PassS();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>String s1 = \"slip\";</p>\n<p>String s2 = fix(s1);</p>\n<p>System.out.println(s1 + \" \" + s2);</p>\n<p>}</p>\n<p>String fix(String s1)</p>\n<p>{</p>\n<p>s1 = s1 + \"stream\";</p>\n<p>System.out.print(s1 + \" \");</p>\n<p>return \"stream\";</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class RTExcept</p>\n<p>{ </p>\n<p>public static void throwit () </p>\n<p>{ </p>\n<p>System.out.print(\"throwit \"); </p>\n<p>throw new RuntimeException();</p>\n<p>}  </p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>try </p>\n<p>{</p>\n<p>System.out.print(\"hello \");</p>\n<p>throwit();</p>\n<p>}</p>\n<p>catch (Exception re )</p>\n<p>{</p>\n<p>System.out.print(\"caught \"); </p>\n<p>}</p>\n<p>finally </p>\n<p>{</p>\n<p>System.out.print(\"finally \");</p>\n<p>} </p>\n<p>System.out.println(\"after \"); </p>\n<p>} </p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation Fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>Which statement is true?</strong></p>\n<p>A. Programs will not run out of memory.</p>\n<p>B. Objects that will never again be used are eligible for garbage collection.</p>\n<p>C. Objects that are referred to by other objects will never be garbage collected.</p>\n<p>D. Objects that can be reached from a live thread will never be garbage collected.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Medium-Hard"}, {"question": "<p><strong>Which will legally declare, construct, and initialize an array?</strong></p>\n<p>A. int [] myList = {\"1\", \"2\", \"3\"};</p>\n<p>B. int [] myList = (5, 8, 2);</p>\n<p>C. int myList [] [] = {4,9,7,0};</p>\n<p>D. int myList [] = {4, 3, 7};</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class CommandArgs</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>String s1 = args[1];</p>\n<p>String s2 = args[2];</p>\n<p>String s3 = args[3];</p>\n<p>String s4 = args[4];</p>\n<p>System.out.print(\" args[2] = \" + s2);</p>\n<p>}</p>\n<p>}</p>\n<p>and the command-line invocation is</p>\n<p><strong>&gt;java CommandArgs 1 2 3 4</strong></p>", "options": [{"option": "args[2]  =  2", "correct": false}, {"option": "args[2]  =  3", "correct": false}, {"option": "args[2]  =  null", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": true}], "level": "Medium"}, {"question": "<p>public class F0091</p>\n<p>{</p>\n<p>public void main( String[] args )</p>\n<p>{</p>\n<p>System.out.println( \"Hello\" + args[0] );</p>\n<p>}</p>\n<p>} </p>\n<p><strong>What will be the output of the program, if this code is executed with the command line:</strong></p>\n<p><strong>&gt; java F0091 world</strong></p>", "options": [{"option": "Hello", "correct": false}, {"option": "Hello Foo91", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "The code does not run.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>Which is true about a method-local inner class?</strong></p>\n<p>A. It must be marked final.</p>\n<p>B. It can be marked abstract.</p>\n<p>C. It can be marked public.</p>\n<p>D. It can be marked static.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>String x = new String(\"xyz\"); </p>\n<p>String y = \"abc\";</p>\n<p>x = x + y;</p>\n<p>How many String objects have been created?</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>Which of the following are valid calls to Math.max?</strong></p>\n<ol>\n<li>\n<p>Math.max(1,4)</p>\n</li>\n<li>\n<p>Math.max(2.3, 5)</p>\n</li>\n<li>\n<p>Math.max(1, 3, 5, 7)</p>\n</li>\n<li>\n<p>Math.max(-1.5, -2.8f)</p>\n</li>\n</ol>", "options": [{"option": "1, 2 and 4", "correct": true}, {"option": "2, 3 and 4", "correct": false}, {"option": "1, 2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class A</p>\n<p>{</p>\n<p>final public int GetResult(int a, int b) { return 0; }</p>\n<p>}</p>\n<p>class B extends A</p>\n<p>{</p>\n<p>public int GetResult(int a, int b) {return 1; }</p>\n<p>}</p>\n<p>public class Test</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code> public static void main( String args[ ])\n\n {\n\n B b = new B();\n\n System.out.println(\"x = \" + b.GetResult(0,1));\n\n }\n</code></pre>\n<p>}</p>", "options": [{"option": "x=0", "correct": false}, {"option": "x=1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "An Exception is thrown at RunTime", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class Test p</p>\n<p>{ </p>\n<p>public static void main( String args[] )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>      class Foo\n\n     {\n\n           public int i=3;\n\n      }\n\n      Object o = (Object) new Foo();\n\n       Foo foo = (Foo) o;\n\n       System.out.println(\"i = \" + foo.i);\n  }\n</code></pre>\n<p>}</p>", "options": [{"option": "i = 3", "correct": true}, {"option": "Compilation Fails", "correct": false}, {"option": "i = 5", "correct": false}, {"option": "A ClassCastException will occur", "correct": false}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int  i = 1, j = -1;</p>\n<p>switch ( i )</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>     case 0, 1 : j = 1;     /* Line 4 */\n\n     case 2 : j = 2;\n\n     default : j = 0;\n</code></pre>\n<p>}</p>\n<p>System.out.println(\"j = \" + j);</p>", "options": [{"option": "j = -1", "correct": false}, {"option": "j = 0", "correct": false}, {"option": "j = 1", "correct": false}, {"option": "Compilation Fails", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>int i = 1, j = 10;</p>\n<p>do</p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>   if( i &gt; j )\n   {\n       break;\n    }\n    j--;\n</code></pre>\n<p>} while ( ++i &lt; 5);</p>\n<p>System.out.println(\"i = \" + i + \" and j =\" + j);</p>", "options": [{"option": "i = 6 and j = 5", "correct": false}, {"option": "i = 5 and j = 5", "correct": false}, {"option": "i = 6 and j = 4", "correct": false}, {"option": "i = 5 and j = 6", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassA</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassA p = new PassA();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>long [] a1 = {3,4,5};</p>\n<p>long [] a2 = fix(a1);</p>\n<p>System.out.print(a1[0] + a1[1] + a1[2] + \" \");</p>\n<p>System.out.println(a2[0] + a2[1] + a2[2]);</p>\n<p>}</p>\n<p>long [] fix(long [] a3)</p>\n<p>{</p>\n<p>a3[1] = 7;</p>\n<p>return a3;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "12 15", "correct": false}, {"option": "15 15", "correct": true}, {"option": "3 4 5 3 7 5", "correct": false}, {"option": "3 7 5 3 7 5", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class Test</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>Test p = new Test();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>boolean b1 = false;</p>\n<p>boolean b2 = fix(b1);</p>\n<p>System.out.println(b1 + \" \" + b2);</p>\n<p>}</p>\n<p>boolean fix(boolean b1)</p>\n<p>{</p>\n<p>b1 = true;</p>\n<p>return b1;</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "true true", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>class PassS</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>PassS p = new PassS();</p>\n<p>p.start();</p>\n<p>}</p>\n<p>void start()</p>\n<p>{</p>\n<p>String s1 = \"slip\";</p>\n<p>String s2 = fix(s1);</p>\n<p>System.out.println(s1 + \" \" + s2);</p>\n<p>}</p>\n<p>String fix(String s1)</p>\n<p>{</p>\n<p>s1 = s1 + \"stream\";</p>\n<p>System.out.print(s1 + \" \");</p>\n<p>return \"stream\";</p>\n<p>}</p>\n<p>}</p>", "options": [{"option": "slip stream", "correct": false}, {"option": "slipstream stream", "correct": false}, {"option": "stream slip stream", "correct": false}, {"option": "slipstream slip stream", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class RTExcept</p>\n<p>{ </p>\n<p>public static void throwit () </p>\n<p>{ </p>\n<p>System.out.print(\"throwit \"); </p>\n<p>throw new RuntimeException();</p>\n<p>}  </p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>try </p>\n<p>{</p>\n<p>System.out.print(\"hello \");</p>\n<p>throwit();</p>\n<p>}</p>\n<p>catch (Exception re )</p>\n<p>{</p>\n<p>System.out.print(\"caught \"); </p>\n<p>}</p>\n<p>finally </p>\n<p>{</p>\n<p>System.out.print(\"finally \");</p>\n<p>} </p>\n<p>System.out.println(\"after \"); </p>\n<p>} </p>\n<p>}</p>", "options": [{"option": "hello throwit caught", "correct": false}, {"option": "Compilation Fails", "correct": false}, {"option": "hello throwit RuntimeException caught after", "correct": false}, {"option": "hello throwit caught finally after", "correct": true}, {"option": "None", "correct": false}], "level": "Medium-Hard"}, {"question": "<p><strong>Which statement is true?</strong></p>\n<p>A. Programs will not run out of memory.</p>\n<p>B. Objects that will never again be used are eligible for garbage collection.</p>\n<p>C. Objects that are referred to by other objects will never be garbage collected.</p>\n<p>D. Objects that can be reached from a live thread will never be garbage collected.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Medium-Hard"}, {"question": "<p><strong>Which will legally declare, construct, and initialize an array?</strong></p>\n<p>A. int [] myList = {\"1\", \"2\", \"3\"};</p>\n<p>B. int [] myList = (5, 8, 2);</p>\n<p>C. int myList [] [] = {4,9,7,0};</p>\n<p>D. int myList [] = {4, 3, 7};</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>public class CommandArgs</p>\n<p>{</p>\n<p>public static void main(String [] args)</p>\n<p>{</p>\n<p>String s1 = args[1];</p>\n<p>String s2 = args[2];</p>\n<p>String s3 = args[3];</p>\n<p>String s4 = args[4];</p>\n<p>System.out.print(\" args[2] = \" + s2);</p>\n<p>}</p>\n<p>}</p>\n<p>and the command-line invocation is</p>\n<p><strong>&gt;java CommandArgs 1 2 3 4</strong></p>", "options": [{"option": "args[2]  =  2", "correct": false}, {"option": "args[2]  =  3", "correct": false}, {"option": "args[2]  =  null", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": true}], "level": "Medium"}, {"question": "<p>public class F0091</p>\n<p>{</p>\n<p>public void main( String[] args )</p>\n<p>{</p>\n<p>System.out.println( \"Hello\" + args[0] );</p>\n<p>}</p>\n<p>} </p>\n<p><strong>What will be the output of the program, if this code is executed with the command line:</strong></p>\n<p><strong>&gt; java F0091 world</strong></p>", "options": [{"option": "Hello", "correct": false}, {"option": "Hello Foo91", "correct": false}, {"option": "Hello world", "correct": false}, {"option": "The code does not run.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p><strong>Which is true about a method-local inner class?</strong></p>\n<p>A. It must be marked final.</p>\n<p>B. It can be marked abstract.</p>\n<p>C. It can be marked public.</p>\n<p>D. It can be marked static.</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>What will be the output of the program?</strong></p>\n<p>String x = new String(\"xyz\"); </p>\n<p>String y = \"abc\";</p>\n<p>x = x + y;</p>\n<p>How many String objects have been created?</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "5", "correct": false}], "level": "Easy-Medium"}, {"question": "<p><strong>Which of the following are valid calls to Math.max?</strong></p>\n<ol>\n<li>\n<p>Math.max(1,4)</p>\n</li>\n<li>\n<p>Math.max(2.3, 5)</p>\n</li>\n<li>\n<p>Math.max(1, 3, 5, 7)</p>\n</li>\n<li>\n<p>Math.max(-1.5, -2.8f)</p>\n</li>\n</ol>", "options": [{"option": "1, 2 and 4", "correct": true}, {"option": "2, 3 and 4", "correct": false}, {"option": "1, 2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In C++, which of the following determines the method to be invoked during runtime?</p>", "options": [{"option": "Data hiding  ", "correct": false}, {"option": "Dynamic typing  ", "correct": false}, {"option": "Dynamic binding  ", "correct": true}, {"option": "Dynamic loading  ", "correct": false}], "level": "Easy"}, {"question": "<p>What happens if a class has no name in Java?</p>", "options": [{"option": "It will have a destructor.  ", "correct": false}, {"option": "It will have a constructor.  ", "correct": false}, {"option": "It cannot have a constructor as well as a destructor.", "correct": false}, {"option": "An error occurs.", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of the following is a reserved keyword in Java?</p>", "options": [{"option": "Method  ", "correct": false}, {"option": "Native  ", "correct": true}, {"option": "Subclasses  ", "correct": false}, {"option": "Reference  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, which of these statements about an <strong>anonymous inner class</strong> is true?</p>", "options": [{"option": "It can extend exactly one class and implement exactly one interface. ", "correct": false}, {"option": "It can extend exactly one class and implement multiple interfaces. ", "correct": false}, {"option": "It can extend exactly one class or implement only one interface. ", "correct": true}, {"option": "It can implement multiple interfaces regardless of whether a class is extended. ", "correct": false}], "level": "Medium"}, {"question": "<p>In C++, which of these statements about a <strong>static nested class</strong> is true?</p>", "options": [{"option": "There must be a reference to an instance of the enclosing class in order to instantiate it.  ", "correct": false}, {"option": "It does not have access to the non-static members of the enclosing class.  ", "correct": true}, {"option": "The variables and methods must be static.  ", "correct": false}, {"option": "It must extend the enclosing class.  ", "correct": false}], "level": "Medium"}, {"question": "<p>In C++, which of the following compiles without an error?</p>", "options": [{"option": "int a = Math.abs(-5); ", "correct": true}, {"option": "int b = Math.abs(5.0); ", "correct": false}, {"option": "int c = Math.abs(5.5F); ", "correct": false}, {"option": "int d = Math.abs(5L); ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following are valid constructors for <strong>Thread</strong>:</p>\n<ol>\n<li>Thread(Runnable r, String name)</li>\n<li>Thread()</li>\n<li>Thread(int priority)</li>\n<li>Thread(Runnable r, ThreadGroup g)</li>\n<li>Thread(Runnable r, int priority)</li>\n</ol>", "options": [{"option": "1 and 3  ", "correct": false}, {"option": "2 and 4  ", "correct": false}, {"option": "1 and 2  ", "correct": true}, {"option": "2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "A static method cannot be synchronized.", "correct": false}, {"option": "If a class has a synchronized code, then multiple threads can still access the non-synchronized code.    ", "correct": true}, {"option": "Variables can be protected from concurrent access problems by marking them with a synchronized keyword.    ", "correct": false}, {"option": "When a thread sleeps, it releases its locks.", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "The notifyAll() method must be called from a synchronized context.  ", "correct": true}, {"option": "To call wait(), an object must own the lock on the thread.  ", "correct": false}, {"option": "The notify() method is defined in class java.lang.Thread.  ", "correct": false}, {"option": "The notify() method causes a thread to immediately release its locks.  ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is the most restrictive access specifier to allow subclasses in any package to access the members of a superclass?</p>", "options": [{"option": "Public ", "correct": false}, {"option": "Private ", "correct": false}, {"option": "Protected ", "correct": true}, {"option": "Transient ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following is a valid declaration of a string?</p>", "options": [{"option": "String s1 = null;  ", "correct": true}, {"option": "String s2 = 'null';  ", "correct": false}, {"option": "String s3 = (String) 'abc';  ", "correct": false}, {"option": "String s4 = (String) '\\ufeed';  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C, the preprocessor is a program that __________.</p>", "options": [{"option": "Processes its input data to produce output which is used as input to another program  ", "correct": true}, {"option": "Is a loader  ", "correct": false}, {"option": "Links various source files  ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, what is the advantages of the function objects over the function call?</p>", "options": [{"option": "It contains a state", "correct": false}, {"option": "It is a type and can be used as a template parameter  ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following method(s) retain the <strong>Thread t</strong> in run state?</p>", "options": [{"option": "    t.start()    ", "correct": true}, {"option": "    t.run()    ", "correct": false}, {"option": "    t.setRun( )    ", "correct": false}, {"option": "t.yield()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following method throws the error, when the param given to the thread\u2019s method <strong>setPriority( )</strong> is not in the range of 1 to 10?</p>", "options": [{"option": "   ArithmeticException   ", "correct": false}, {"option": "   IllegalArgumentException   ", "correct": true}, {"option": "    IllegalValueException    ", "correct": false}, {"option": "NullPointerException", "correct": false}], "level": "Medium"}, {"question": "<p>Mark has written an app without using any thread priorities. When mark compiles the program, does JVM apply any thread priorities?</p>", "options": [{"option": "  imposes  ", "correct": true}, {"option": "  does not impose  ", "correct": false}, {"option": "  depends on the underlying system  ", "correct": false}, {"option": "  None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements is correct if a user defines a protected method in  the public class?</p>", "options": [{"option": "  This method is only accessible from inside the class itself and from inside all subclasses.  ", "correct": false}, {"option": "  In a class, you cannot declare methods with a lower visibility than the visibility of the class in which it is defined.\r\n  ", "correct": false}, {"option": "  From within protected methods you do not have access to public methods.\r\n  ", "correct": false}, {"option": "  This method is accessible from within the class itself and from within all classes defined in the same package as the class itself.\r\n  ", "correct": true}], "level": "Medium"}, {"question": "<p>Consider the below code:</p>\n<pre class=\"prettyprint\"><code>public class Person{\npublic void talk(){\nSystem.out.print(\"I am a Person \");\n}\npublic class Student extends Person {\npublic void talk(){\nSystem.out.print(\"I am a Student \");\n}\n</code></pre>\n<p>What is the result of the piece of code below?</p>\n<pre class=\"prettyprint\"><code>public class Test{\npublic static void main(String args[]){\nPerson p = new Student();\np.talk();\n}\n}\n</code></pre>", "options": [{"option": "    I am a Person    ", "correct": false}, {"option": "    I am a Student    ", "correct": true}, {"option": "    I am a Person I am a Student    ", "correct": false}, {"option": "     I am a Student I am a Person    ", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the result of the following piece of code:</p>\n<pre class=\"prettyprint\"><code> class Men { public int number; }\n\n    public class Test{\n    public void doIt(int i , Men p){\n    i = 5;\n    p.number = 8;\n    }\n\n    public static void main(String args[]){\n    int x = 0;\n    Men p = new Men();\n    new Test().doIt(x, p);\n    System.out.println(x + \" \" + p.number);\n\n    }\n    }\n\n</code></pre>", "options": [{"option": "   0 8   ", "correct": true}, {"option": "   5 0   ", "correct": false}, {"option": "   0 0   ", "correct": false}, {"option": "   5 8   ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following collection class links values with keys, and orders the keys according to their natural order?</p>", "options": [{"option": "   java.util.HashSet   ", "correct": false}, {"option": "   java.util.LinkedList   ", "correct": false}, {"option": "   java.util.TreeMap   ", "correct": true}, {"option": "   java.util.SortedSet   ", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which of the following statement about GUI components is incorrect?</p>", "options": [{"option": " Swing exists since version 1.2 of the jdk. ", "correct": false}, {"option": " AWT stands for Abstract Window Toolkit. ", "correct": false}, {"option": " You can not place AWT components on Swing containers. ", "correct": false}, {"option": " The AWT classes are deprecated. ", "correct": true}], "level": "Medium"}, {"question": "<p>How can you <strong>serialize</strong> an object?</p>", "options": [{"option": " You have to make the class of the object implement the interface Serializable.  ", "correct": true}, {"option": "  You must call the method serializeObject() (which is inherited from class Object) on\r\nthe object.\r\n  ", "correct": false}, {"option": "  You should call the static method serialize(Object obj) from class Serializer, with as argument the object to be serialized.\r\n  ", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Given the following piece of code:</p>\n<pre class=\"prettyprint\"><code>public class MyThread extends Thread{\npublic String hel;\npublic void run(){\nSystem.out.print(hel);\n}\n}\n\npublic class Test2{\npublic static void main(String args[]){\nMyThread t1 = new MyThread();\nMyThread t2 = new MyThread();\nt1.start();\nt2.start();\nSystem.out.print(\"3 \");\n\n}\n\n}\n</code></pre>\n<p>Which of the following statements is true?</p>", "options": [{"option": "  If you execute this program, the result is always one two three\r\n  ", "correct": false}, {"option": "  If you execute this program, the result is always three one two\r\n  ", "correct": false}, {"option": "  The result of this program is undetermined.  ", "correct": true}, {"option": "  Compilation will fail.  ", "correct": false}], "level": "Medium"}, {"question": "<p>Consider that you would like to make an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?</p>", "options": [{"option": " TreeMap ", "correct": false}, {"option": " HashMap ", "correct": false}, {"option": " LinkedHashMap ", "correct": true}, {"option": " The answer depends on the implementation of the existing instance. ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following class does not override the <strong>equals()</strong> and <strong>hashCode() methods</strong>, inheriting the property directly from class Object?</p>", "options": [{"option": " java.lang.String ", "correct": false}, {"option": " java.lang.Double ", "correct": false}, {"option": " java.lang.StringBuffer ", "correct": true}, {"option": " java.lang.Character ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following collection class provides you to expand or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?</p>", "options": [{"option": " java.util.HashSet ", "correct": false}, {"option": " java.util.LinkedHashSet ", "correct": false}, {"option": " java.util.List ", "correct": false}, {"option": " java.util.ArrayList ", "correct": true}], "level": "Medium"}, {"question": "<p>Consider that you need to save the elements in a collection that assures that no duplicates are saved and all elements can be accessed in natural order. Which interface gives that ability?</p>", "options": [{"option": " java.util.Map ", "correct": false}, {"option": " java.util.Set ", "correct": true}, {"option": " java.util.List ", "correct": false}, {"option": " java.util.Collection ", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>package foo; \nimport java.util.Vector; /* Line 2 */\nprivate class MyWord extends Word \n{\n    int i = 4; /* Line 5 */\n    public MyWord() \n    { \n        i = 2; \n    } \n} \npublic class MyNewWord extends MyWord \n{\n    public MyNewVector () \n    { \n        i = 4; /* Line 15 */\n    } \n    public static void main (String args []) \n    { \n        MyWord v = new MyNewWord(); /* Line 19 */\n    } \n}\n</code></pre>", "options": [{"option": "  Compilation will succeed.  ", "correct": false}, {"option": "  Compilation will fail at line 3  ", "correct": true}, {"option": "  Compilation will fail at line 5.  ", "correct": false}, {"option": "  Compilation will fail at line 15.  ", "correct": false}], "level": "Medium"}, {"question": "<p>public class Vat \n    { \n        public void someOuterMethod() \n        {\n            //Line 5 \n        } \n        public class Var { } </p>\n<pre class=\"prettyprint\"><code>    public static void main(String[] argv) \n    {\n        Vat ot = new Vat(); \n        //Line 10\n    } \n}\n</code></pre>\n<p>Which of the following code fragments inserted, will allow to compile?</p>", "options": [{"option": "  new Inner(); //At line 5  ", "correct": true}, {"option": "  new Inner(); //At line 10  ", "correct": false}, {"option": "  new ot.Inner(); //At line 10  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class A \n{\n    final public int GetResult(int a, int b) { return 0; } \n} \nclass B extends A \n{ \n    public int GetResult(int a, int b) {return 1; } \n} \npublic class Test \n{\n    public static void main(String args[]) \n    { \n        B b = new B(); \n        System.out.println(\"x = \" + b.GetResult(0, 1));  \n    } \n}\n</code></pre>", "options": [{"option": " x = 0   ", "correct": false}, {"option": " x = 1   ", "correct": false}, {"option": " Compilation fails.   ", "correct": true}, {"option": " An exception is thrown at runtime.   ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Super\n    { \n        public int i = 0; \n\n        public Super(String text) /* Line 4 */\n        {\n            i = 1; \n        } \n    } \n\n    class Sub extends Super\n    {\n        public Sub(String text)\n        {\n            i = 2; \n        } \n\n        public static void main(String args[])\n        {\n            Sub sub = new Sub(\"Hello\"); \n            System.out.println(sub.i); \n        } \n    }\n</code></pre>", "options": [{"option": "0  ", "correct": false}, {"option": "1  ", "correct": false}, {"option": "2   ", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the two statements from the below given statements are true for any concrete class implementing the java.lang.Runnable interface?</p>\n<ol>\n<li>We can extend the Runnable interface as long as you override the public run() method.</li>\n<li>The class must contain a method called run() from which all code for that thread will be initiated.</li>\n<li>The class must contain an empty public void method named run().</li>\n<li>The class must contain a public void method named runnable().</li>\n<li>The class definition must include the words implements Threads and contain a method called run().</li>\n<li>The mandatory method must be public, with a return type of void, must be called run(), and cannot take any arguments.</li>\n</ol>", "options": [{"option": " 1 and 3 ", "correct": false}, {"option": " 2 and 4 ", "correct": false}, {"option": " 1 and 5 ", "correct": false}, {"option": " 2 and 6 ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements, when added to the beginning of the following Java code, allow it to compile:</p>\n<pre class=\"prettyprint\"><code>    public class NewSet extends java.util.TreeSet\n    {\n        public static void main(String [] args) \n        {\n            java.util.Set t = new java.util.Set();\n            t.clear();\n        }\n        public void clear() \n        {\n            TreeMap m = new TreeMap();\n            m.clear();\n        }\n    }\n\n</code></pre>", "options": [{"option": "No statement required", "correct": false}, {"option": "import java.util.*; and import java.util.TreeMap;", "correct": true}, {"option": "import.java.util.Tree*; and import java.util.TreeSet;", "correct": false}, {"option": "import.java.util.Tree*; and import java.util.TreeMap;", "correct": false}], "level": "Hard"}, {"question": "<p>Consider the following information:</p>\n<ul>\n<li><strong>File</strong> is an abstract class and the <strong>toFile()</strong> method is defined in this class. </li>\n<li><strong>ImageFile</strong> and <strong>BinaryFile</strong> are concrete classes of the abstract class <strong>file</strong>.</li>\n<li><strong>toFile()</strong> is implemented in both the <strong>ImageFile</strong> and <strong>BinaryFile</strong> classes.</li>\n</ul>\n<p>If the <strong>file</strong> class references an <strong>ImageFile</strong> object in the memory and the <strong>toFile</strong> method is called, then which of the following methods will be invoked?</p>", "options": [{"option": "Binary File ", "correct": false}, {"option": "Image File ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class PetA \n{\n    public static void main(String [] args) \n    {\n        PetA p = new PetA();\n        p.start();\n    }\n\n    void start() \n    {\n        long [] a1 = {3,4,5};\n        long [] a2 = fix(a1);\n        System.out.print(a1[0] + a1[1] + a1[2] + \" \");\n        System.out.println(a2[0] + a2[1] + a2[2]);\n    }\n\n    long [] fix(long [] a3) \n    {\n        a3[1] = 7;\n        return a3;\n    }\n}\n</code></pre>", "options": [{"option": "  12 ,15  ", "correct": false}, {"option": "  15 ,15\r\n  ", "correct": true}, {"option": "  3, 4, 5, 3, 7,5  ", "correct": false}, {"option": "  3, 7,5 ,3, 7, 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class Check \n{\npublic static void main(String [] args) \n{\n    Check p = new Check();\n    p.start();\n}\n\nvoid start() \n{\n    boolean b1 = false;\n    boolean b2 = fix(b1);\n    System.out.println(b1 + \" \" + b2);\n}\n\nboolean fix(boolean b1) \n{\n    b1 = true;\n    return b1;\n}\n}\n</code></pre>", "options": [{"option": "  true true ", "correct": false}, {"option": "  false true ", "correct": true}, {"option": "  true false ", "correct": false}, {"option": "  false false ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>class PassS \n{\n    public static void main(String [] args) \n    {\n        PassS p = new PassS();\n        p.start();\n    }\n\n    void start() \n    {\n        String s1 = \"sleep\";\n        String s2 = fix(s1);\n        System.out.println(s1 + \" \" + s2);\n    }\n\n    String fix(String s1) \n    {\n        s1 = s1 + \"stream\";\n        System.out.print(s1 + \" \");\n        return \"steem\";\n    }\n}\n</code></pre>", "options": [{"option": "  sleep steem ", "correct": false}, {"option": "sleepsteem steem  ", "correct": false}, {"option": "  steem sleep steem\t  ", "correct": false}, {"option": "  sleepsteem sleep steem  ", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class PassS \n    {\n        public static void main(String [] args) \n        {\n            PassS p = new PassS();\n            p.start();\n        }\n\n        void start() \n        {\n            String s1 = \"step\";\n            String s2 = fix(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String fix(String s1) \n        {\n            s1 = s1 + \"steem\";\n            System.out.print(s1 + \" \");\n            return \"steem\";\n        }\n    }\n</code></pre>", "options": [{"option": "step steem  ", "correct": false}, {"option": "stepsteem steem   ", "correct": false}, {"option": "steem step steem\t   ", "correct": false}, {"option": "stepsteem step steem   ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>reserved word</strong> in the Java?</p>", "options": [{"option": "   method   ", "correct": false}, {"option": "   native   ", "correct": true}, {"option": "   subclasses   ", "correct": false}, {"option": "   reference   ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which is the <strong>valid declarations</strong> within an interface definition?</p>", "options": [{"option": "  public double method();  ", "correct": true}, {"option": "  public final double method();  ", "correct": false}, {"option": "  static void method(double d1);  ", "correct": false}, {"option": "  protected void method(double d1);  ", "correct": false}], "level": "Easy"}, {"question": "<p>Identify an accurate statement about a <strong>method-local inner class</strong>.</p>", "options": [{"option": "  It must be marked final  ", "correct": false}, {"option": "  It can be marked abstract  ", "correct": true}, {"option": "  It can be marked public.  ", "correct": false}, {"option": "  It can be marked static  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which statement is true about a <strong>static nested class</strong>?</p>", "options": [{"option": "  You must have a reference to an instance of the enclosing class in order to instantiate it.  ", "correct": false}, {"option": "  It does not have access to nonstatic members of the enclosing class.  ", "correct": true}, {"option": "  It's variables and methods must be static.  ", "correct": false}, {"option": "  It must extend the enclosing class.  ", "correct": false}], "level": "Easy"}, {"question": "<p>class Foo \n    {\n        class Bar{ }\n    }\n    class Pack \n    {\n        public static void main (String [] args) \n        {\n            Foo f = new Foo();\n            /* Line 10: Missing statement ? */\n        }\n    }</p>\n<p>Which statement, inserted at line 10, creates an instance of Bar?</p>", "options": [{"option": "   Foo.Bar b = new Foo.Bar();   ", "correct": false}, {"option": "   Foo.Bar b = f.new Bar();   ", "correct": true}, {"option": "   Bar b = new f.Bar();   ", "correct": false}, {"option": "   Bar b = f.new Bar();   ", "correct": false}], "level": "Medium"}, {"question": "<p>The JDBC-ODBC bridge is</p>", "options": [{"option": "  Three tiered  ", "correct": false}, {"option": "  Multithreaded  ", "correct": true}, {"option": "  Best for any platform  ", "correct": false}, {"option": " Two tiered", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a correct representation of a method in an Abstract class ?</p>", "options": [{"option": "  abstract double area() { }  ", "correct": false}, {"option": "  abstract double area()  ", "correct": false}, {"option": "  abstract double area();  ", "correct": true}, {"option": "  abstract double area(); { }  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is synchronized?</p>", "options": [{"option": "    Set    ", "correct": false}, {"option": "    LinkedList    ", "correct": false}, {"option": "    Vector    ", "correct": true}, {"option": "    WeakHashMap    ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the use of object of DataInputStream?</p>", "options": [{"option": " To covert binary stream into character stream. ", "correct": true}, {"option": " To covert character stream into binary stream. ", "correct": false}, {"option": " To write data onto output object. ", "correct": false}, {"option": "To convert the character stream into the buffer stream.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following should be used to execute the threads one after another?</p>", "options": [{"option": " The keyword synchronize is used ", "correct": false}, {"option": " The keyword synchronizable is used ", "correct": false}, {"option": " The keyword synchronized is used ", "correct": true}, {"option": "The keyword sync is used", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following can be thrown by using throw keyword in Java?</p>\n<ol>\n<li>Error</li>\n<li>Event</li>\n<li>Object</li>\n<li>Throwable</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n</ol>", "options": [{"option": " 1, 2, 3 and 4 ", "correct": false}, {"option": " 2, 3, 4 and 5 ", "correct": false}, {"option": " 1, 4, 5 and 6 ", "correct": true}, {"option": " 2, 4, 5 and 6 ", "correct": false}], "level": "Medium"}, {"question": "<p>In OOP, which class members does a friend function of a class have access to?</p>", "options": [{"option": "Private & protected members    ", "correct": true}, {"option": "Public & protected members", "correct": false}, {"option": "Private & public members    ", "correct": false}, {"option": "Private members", "correct": false}, {"option": "Protected members", "correct": false}], "level": "Medium"}, {"question": "<p>Which method is called only once during the run time of an applet?</p>", "options": [{"option": "   init()\r\n\t   ", "correct": true}, {"option": "   update()\r\n\t   ", "correct": false}, {"option": "   start()\r\n\t   ", "correct": false}, {"option": "   destroy()   ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>\u201cYou need to insert the String s2 at the position <strong>n</strong> of the string S1.\u201d- Which of the following StringBuffer method fulfills the task?</p>", "options": [{"option": "    s2.insert(s1,n)    ", "correct": false}, {"option": "    s1.insert(n,s2)    ", "correct": true}, {"option": "    s2.insert(n,s1)    ", "correct": false}, {"option": "    s1.insert(s2,n)    ", "correct": false}], "level": "Easy"}, {"question": "<p>Which two are valid constructors for Thread?</p>\n<p>1 Thread(Runnable r, String name)</p>\n<p>2 Thread()</p>\n<p>3 Thread(int priority)</p>\n<p>4 Thread(Runnable r, ThreadGroup g)</p>\n<p>5 Thread(Runnable r, int priority)</p>", "options": [{"option": "     1 and 3\t\r\n     ", "correct": false}, {"option": "     1 and 2\t     ", "correct": true}, {"option": "     2 and 5     ", "correct": false}, {"option": "     2 and 4     ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of program?</p>\n<pre class=\"prettyprint\"><code>    try \n    { \n        int x = 0; \n        int y = 5 / x; \n    } \n    catch (Exception e) \n    {\n        System.out.println(\"Exception\"); \n    } \n    catch (ArithmeticException ae) \n    {\n        System.out.println(\" Arithmetic Exception\"); \n    } \n    System.out.println(\"finished\");\n</code></pre>", "options": [{"option": "    finished\t\r\n    ", "correct": false}, {"option": "    Compilation fails.    ", "correct": true}, {"option": "    Exception    ", "correct": false}, {"option": "    Arithmetic Exception    ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class X \n    {  \n        public static void main(String [] args) \n        {\n            try \n            {\n                badMethod();  \n                System.out.print(\"A\"); \n            }  \n            catch (Exception ex) \n            {\n                System.out.print(\"B\");  \n            } \n            finally \n            {\n                System.out.print(\"C\"); \n            } \n            System.out.print(\"D\"); \n        }  \n        public static void badMethod() \n        {\n            throw new Error(); \n        } \n    }\n</code></pre>", "options": [{"option": "      ABCD\r\n      ", "correct": false}, {"option": "      Compilation fails.\r\n.      ", "correct": false}, {"option": "      C is printed before exiting with an error message.\r\n      ", "correct": true}, {"option": "      BC is printed before exiting with an error message      ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class X \n    {  \n        public static void main(String [] args) \n        {\n            try \n            {\n                badMethod();  \n                System.out.print(\"A\");  \n            } \n            catch (RuntimeException ex) /* Line 10 */\n            { \n                System.out.print(\"B\"); \n            } \n            catch (Exception ex1) \n            { \n                System.out.print(\"C\"); \n            } \n            finally \n            {\n                System.out.print(\"D\"); \n            } \n            System.out.print(\"E\"); \n        } \n        public static void badMethod() \n        { \n            throw new RuntimeException(); \n        } \n    }\n</code></pre>", "options": [{"option": "    BD\r\n    ", "correct": false}, {"option": "    BDE\t    ", "correct": true}, {"option": "    BCDE    ", "correct": false}, {"option": "    BCD    ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class RTExcept \n    {\n        public static void throwit () \n        {\n            System.out.print(\"throwit \");\n            throw new RuntimeException();\n        }\n        public static void main(String [] args) \n        {\n            try \n            {\n                System.out.print(\"hello \");\n                throwit();\n            }\n            catch (Exception re ) \n            {\n                System.out.print(\"caught \");\n            }\n            finally \n            {\n                System.out.print(\"finally \");\n            }\n            System.out.println(\"after \");\n        }\n    }\n</code></pre>", "options": [{"option": "      hello throwit caught\r\n      ", "correct": false}, {"option": "      Compilation fails\r\n      ", "correct": false}, {"option": "      hello throwit RuntimeException caught after\r\n      ", "correct": false}, {"option": "      hello throwit caught finally after      ", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class Test \n    {  \n        public static void aMethod() throws Exception \n        {\n            try /* Line 5 */\n            {\n                throw new Exception(); /* Line 7 */\n            } \n            finally /* Line 9 */\n            {\n                System.out.print(\"finally \"); /* Line 11 */\n            } \n        } \n        public static void main(String args[]) \n        {\n            try \n            {\n                aMethod();  \n            } \n            catch (Exception e) /* Line 20 */\n            {\n                System.out.print(\"exception \"); \n            } \n            System.out.print(\"finished\"); /* Line 24 */\n        } \n    }\n</code></pre>", "options": [{"option": "     .finally\r\n     ", "correct": false}, {"option": "     exception finished\r\n     ", "correct": false}, {"option": "     finally exception finished\r\n     ", "correct": true}, {"option": "     Compilation fails     ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class X \n    { \n        public static void main(String [] args) \n        {\n            try \n            {\n                badMethod();  \n                System.out.print(\"A\"); \n            }  \n            catch (Exception ex) \n            {\n                System.out.print(\"B\"); \n            }  \n            finally \n            {\n                System.out.print(\"C\"); \n            }  \n            System.out.print(\"D\"); \n        }  \n        public static void badMethod() {} \n    }\n</code></pre>", "options": [{"option": "    AC\t\r\n    ", "correct": false}, {"option": "    ACD    ", "correct": true}, {"option": "    BC    ", "correct": false}, {"option": "    ABCD    ", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class X \n    {  \n        public static void main(String [] args) \n        {\n            try \n            {\n                badMethod(); \n                System.out.print(\"A\"); \n            } \n            catch (Exception ex) \n            {\n                System.out.print(\"B\"); \n            } \n            finally /* Line 14 */\n            {\n                System.out.print(\"C\"); \n            }  \n            System.out.print(\"D\"); \n        } \n        public static void badMethod() \n        {\n            throw new RuntimeException(); \n        } \n    }\n</code></pre>", "options": [{"option": "     AB\t\r\n     ", "correct": false}, {"option": "     ABC\t     ", "correct": false}, {"option": "     BC     ", "correct": false}, {"option": "     BCD     ", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Nothing. The program will not compile because no exceptions are specified.\r\n    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.\r\n    ", "correct": false}, {"option": "    Hello world.\r\n    ", "correct": false}, {"option": "    Hello world Finally executing    ", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    public class MyProgram \n    {\n        public static void main(String args[])\n        {\n            try \n            {\n                System.out.print(\"Hello world \");\n            }\n            finally \n            {\n                System.out.println(\"Finally executing \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "    Hello world Finally executing    ", "correct": true}, {"option": "    Nothing. The program will not compile because no exceptions are specified.\r\n\r\n    ", "correct": false}, {"option": "    Hello world.    ", "correct": false}, {"option": "    Nothing. The program will not compile because no catch clauses are specified.    ", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>    class Exc0 extends Exception { } \n    class Exc1 extends Exc0 { } /* Line 2 */\n    public class Test \n    {  \n        public static void main(String args[]) \n        { \n            try \n            {  \n                throw new Exc1(); /* Line 9 */\n            } \n            catch (Exc0 e0) /* Line 11 */\n            {\n                System.out.println(\"Ex0 caught\"); \n            } \n            catch (Exception e) \n            {\n                System.out.println(\"exception caught\");  \n            } \n        } \n    }\n</code></pre>", "options": [{"option": "   Ex0 caught\r\n   ", "correct": true}, {"option": "   exception caught\r\n\r\n.   ", "correct": false}, {"option": "   Compilation fails because of an error at line 9   ", "correct": false}, {"option": "   Compilation fails because of an error at line 2.   ", "correct": false}], "level": "Medium"}, {"question": "<p>void start() {<br />\n            A a = new A(); \n            B b = new B(); \n            a.s(b);<br />\n            b = null; /* Line 5 <em>/\n            a = null;  /</em> Line 6 <em>/\n            System.out.println(\"start completed\"); /</em> Line 7 */\n        } </p>\n<pre class=\"prettyprint\"><code>When is the B object, created in line 3, eligible for garbage collection?\n</code></pre>", "options": [{"option": "     after line 5\r\n     ", "correct": false}, {"option": "     after line 6\r\n     ", "correct": false}, {"option": "     after line 7\r\n     ", "correct": false}, {"option": "     There is no way to be absolutely certain     ", "correct": true}], "level": "Medium"}, {"question": "<p>class HappyGarbage01 \n        { \n            public static void main(String args[]) \n            {\n                HappyGarbage01 h = new HappyGarbage01(); \n                h.methodA(); /* Line 6 */\n            } \n            Object methodA() \n            {\n                Object obj1 = new Object(); \n                Object [] obj2 = new Object[1]; \n                obj2[0] = obj1; \n                obj1 = null; \n                return obj2[0]; \n            } \n        }</p>\n<pre class=\"prettyprint\"><code>Where will be the most chance of the garbage collector being invoked?\n</code></pre>", "options": [{"option": "   After line 9\r\n   ", "correct": false}, {"option": "   After line 10\r\n   ", "correct": false}, {"option": "   After line 11\r\n   ", "correct": false}, {"option": "   Garbage collector never invoked in methodA()   ", "correct": true}], "level": "Medium"}, {"question": "<p>class Bar { } \n        class Test \n        {<br />\n            Bar doBar() \n            {\n                Bar b = new Bar(); /* Line 6 <em>/\n                return b; /</em> Line 7 <em>/\n            } \n            public static void main (String args[]) \n            { \n                Test t = new Test();  /</em> Line 11 <em>/\n                Bar newBar = t.doBar();  /</em> Line 12 <em>/\n                System.out.println(\"newBar\"); \n                newBar = new Bar(); /</em> Line 14 <em>/\n                System.out.println(\"finishing\"); /</em> Line 15 */\n            } \n        }</p>\n<p>At what point is the Bar object, created on line 6, eligible for garbage collection?</p>", "options": [{"option": "   after line 12\r\n   ", "correct": false}, {"option": "   after line 14\r\n   ", "correct": true}, {"option": "   after line 7, when doBar() completes\r\n   ", "correct": false}, {"option": "   after line 15, when main() completes     ", "correct": false}], "level": "Medium"}, {"question": "<p>public class X </p>\n<pre class=\"prettyprint\"><code>    {\n        public static void main(String [] args) \n        {\n            X x = new X();\n            X x2 = m1(x); /* Line 6 */\n            X x4 = new X();\n            x2 = x4; /* Line 8 */\n            doComplexStuff();\n        }\n        static X m1(X mx) \n        {\n            mx = new X();\n            return mx;\n        }\n    }\n</code></pre>\n<p>After line 8 runs. how many objects are eligible for garbage collection?</p>", "options": [{"option": "    0    ", "correct": false}, {"option": "    2\t    ", "correct": false}, {"option": "    3    ", "correct": false}, {"option": "    1    ", "correct": true}], "level": "Easy"}, {"question": "<p>public Object m() \n    {<br />\n        Object o = new Float(3.14F); </p>\n<pre class=\"prettyprint\"><code>    Object [] oa = new Object[l];\n    oa[0] = o; /* Line 5 */\n    o = null;  /* Line 6 */\n    oa[0] = null; /* Line 7 */\n    return o; /* Line 8 */\n}\n</code></pre>\n<p>When is the Float object, created in line 3, eligible for garbage collection?</p>", "options": [{"option": "   just after line 5\r\n   ", "correct": false}, {"option": "   just after line 7\t   ", "correct": true}, {"option": "   just after line 6   ", "correct": false}, {"option": "   just after line 8   ", "correct": false}], "level": "Easy"}, {"question": "<p>class X2 \n    {\n        public X2 x;\n        public static void main(String [] args) \n        {\n            X2 x2 = new X2();  /* Line 6 <em>/\n            X2 x3 = new X2();  /</em> Line 7 <em>/\n            x2.x = x3;\n            x3.x = x2;\n            x2 = new X2();\n            x3 = x2; /</em> Line 11 */\n            doComplexStuff();\n        }\n    }</p>\n<p>After line 11 runs, how many objects are eligible for garbage collection?</p>", "options": [{"option": "   0\r\n   ", "correct": false}, {"option": "   2   ", "correct": true}, {"option": "   1   ", "correct": false}, {"option": "   3   ", "correct": false}], "level": "Medium"}, {"question": "<p>class X2 \n    {\n      public X2 x;\n      public static void main(String [] args) \n      {\n         X2 x2 = new X2();  /* Line 6 <em>/\n         X2 x3 = new X2();  /</em> Line 7 <em>/\n         x2.x = x3;\n         x3.x = x2;\n         x2 = new X2();\n         x3 = x2; /</em> Line 11 */\n         doComplexStuff();\n      }\n    }</p>\n<p>After line 11 runs, how many objects are eligible for garbage collection?</p>", "options": [{"option": "   0\r\n   ", "correct": false}, {"option": "   2   ", "correct": true}, {"option": "   1   ", "correct": false}, {"option": "   3   ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is used to destroy an object x?</p>", "options": [{"option": "x.delete().   ", "correct": false}, {"option": "x.finalize()\r\n   ", "correct": false}, {"option": "Runtime.getRuntime().gc()\r\n   ", "correct": false}, {"option": "Only the garbage collection system can destroy an object   ", "correct": true}], "level": "Easy"}, {"question": "<p>You want subclasses in any package to have access to members of a superclass. Which is the most restrictive access that accomplishes this objective?</p>", "options": [{"option": "   public   ", "correct": false}, {"option": "   private   ", "correct": false}, {"option": "   protected   ", "correct": true}, {"option": "   transient   ", "correct": false}], "level": "Easy"}, {"question": "<p>public class Outer \n    { \n        public void someOuterMethod() \n        {\n            //Line 5 \n        } \n        public class Inner { } </p>\n<pre class=\"prettyprint\"><code>    public static void main(String[] argv) \n    {\n        Outer ot = new Outer(); \n        //Line 10\n    } \n}\n</code></pre>\n<p>Which of the following code fragments inserted, will allow to compile?</p>", "options": [{"option": "  new Inner(); //At line 5\r\n   ", "correct": true}, {"option": "  new Inner(); //At line 10\r\n   ", "correct": false}, {"option": "  new ot.Inner(); //At line 10\r\n  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Medium"}, {"question": "<p>public class Test { }. </p>\n<p>What is the prototype of the default constructor in Java?</p>", "options": [{"option": "  Test( )\t  ", "correct": false}, {"option": "  Test(void)\r\n  ", "correct": false}, {"option": "  public Test( )\t  ", "correct": true}, {"option": "  public Test(void)  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, what is the widest valid <strong>ReturnType</strong> for <strong>methodA</strong> in the line 3?</p>\n<pre class=\"prettyprint\"><code>    class ReturnIt \n    { \n        ReturnType methodA(byte x, double y) /* Line 3 */\n        { \n            return (long)x / y * 2; \n        } \n    }\n</code></pre>", "options": [{"option": "int    ", "correct": false}, {"option": "byte    ", "correct": false}, {"option": "long    ", "correct": false}, {"option": "double    ", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following class level (nonlocal) variable declarations will not compile?</p>", "options": [{"option": "  protected int a;\r\n  ", "correct": false}, {"option": "  transient int b = 3;\r\n  ", "correct": false}, {"option": "  private synchronized int e;\r\n  ", "correct": true}, {"option": "  volatile int d;  ", "correct": false}], "level": "Medium"}, {"question": "<p>Suppose that you would like to create an instance of a new Map that has an iteration order that is the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?</p>", "options": [{"option": "  TreeMap\r\n  ", "correct": false}, {"option": "  HashMap\r\n  ", "correct": false}, {"option": "  LinkedHashMap\r\n  ", "correct": true}, {"option": "  The answer depends on the implementation of the existing instance.  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which class does not override the equals() and hashCode() methods, inheriting them directly from class Object?</p>", "options": [{"option": "  java.lang.String\t  ", "correct": false}, {"option": "  java.lang.Double\r\n  ", "correct": false}, {"option": "  java.lang.StringBuffer  ", "correct": true}, {"option": "  java.lang.Character  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which collection class allows you to grow or shrink its size and provides indexed access to its elements, but whose methods are not synchronized?</p>", "options": [{"option": "  java.util.HashSet  ", "correct": false}, {"option": "  java.util.LinkedHashSet  ", "correct": false}, {"option": "  java.util.List  ", "correct": false}, {"option": "  java.util.ArrayList     ", "correct": true}], "level": "Easy"}, {"question": "<p>Which interface does java.util.Hashtable implement?</p>", "options": [{"option": "  Java.util.Collection  ", "correct": false}, {"option": "  Java.util.HashTable  ", "correct": false}, {"option": "  Java.util.Map  ", "correct": true}, {"option": "  Java.util.List  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which collection class allows you to associate its elements with key values, and allows you to retrieve objects in FIFO (first-in, first-out) sequence?</p>", "options": [{"option": "  java.util.ArrayList\t\r\n  ", "correct": false}, {"option": "  java.util.HashMap  ", "correct": false}, {"option": "  java.util.LinkedHashMap  ", "correct": true}, {"option": "  java.util.TreeMap  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C, the size of the <strong>dynamically allocated</strong> array can be increased.</p>", "options": [{"option": "True    ", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements about the number <strong>6</strong> used in the following C code is correct:</p>\n<pre class=\"prettyprint\"><code>int num[6];  \nnum[6]=21;\n</code></pre>", "options": [{"option": "In the first statement 6 specifies a particular element, whereas in the second statement it specifies a type.  ", "correct": false}, {"option": "In the first statement 6 specifies an array size, whereas in the second statement it specifies a particular element of an array.  ", "correct": true}, {"option": "In the first statement 6 specifies a particular element, whereas in the second statement it specifies an array size.  ", "correct": false}, {"option": "In both the statement 6 specifies an array size.  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C, for the <strong>string</strong> functions to work efficiently, the strings must be terminated with <strong>'\\0'</strong>.</p>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, the <strong>ftell()</strong> function returns the current position of the pointer in a file stream.</p>", "options": [{"option": "True  ", "correct": true}, {"option": "False  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>\"i'm a lasagna hog\".split(\"\").reverse().join(\"\");\n</code></pre>", "options": [{"option": "\"goh angasal m'i a\"", "correct": false}, {"option": "\"goh angasal a m'i\"", "correct": true}, {"option": "\"a m'i goh angasal\"", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>~~3.14\n</code></pre>", "options": [{"option": "3.14159", "correct": false}, {"option": "3.1", "correct": false}, {"option": "3", "correct": true}, {"option": "3.2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <strong>window.foo</strong> in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>( window.foo || ( window.foo = \"bar\" ) )\n</code></pre>", "options": [{"option": "'bar' if window.foo is false else it retains its value", "correct": false}, {"option": "'bar' if window.foo is true", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>Consider the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var foo = \"Hello\";\n (function()\n { \nvar bar = \" World\"; alert(foo + bar); \n})();\nalert(foo + bar);\n</code></pre>\n<p>What is the output of the <strong>alert</strong> functions?</p>", "options": [{"option": "1. Hello World", "correct": false}, {"option": "2. Reference Error: bar is not defined", "correct": false}, {"option": "3. Error: No output", "correct": false}, {"option": "Options (1) and (2)\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>What is the value of <strong>foo.length</strong> in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var foo = [];\nfoo.push(1);\nfoo.push(2);\nfoo.push(3);\n</code></pre>", "options": [{"option": "1  ", "correct": false}, {"option": "2  ", "correct": false}, {"option": "3  ", "correct": true}, {"option": "0  ", "correct": false}], "level": "Easy"}, {"question": "<p>What happens if you do not include the <strong>doctype</strong> declaration in your document?</p>", "options": [{"option": "The page will not be rendered correctly.", "correct": false}, {"option": "The page may not be rendered correctly in some cases.", "correct": true}, {"option": "There will be no effect on page rendering.", "correct": false}, {"option": "The page is not rendered.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the difference between <strong>==</strong> and <strong>===</strong>?</p>", "options": [{"option": "== performs strict comparison and === performs type converting comparison ", "correct": false}, {"option": "=== performs strict comparison and == performs type converting comparison\r\n ", "correct": true}, {"option": "Both perform strict comparison ", "correct": false}, {"option": "Both perform type converting comparison\r\n ", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Who developed the Javascript programming language?</p>", "options": [{"option": "Brendan Eich ", "correct": true}, {"option": "Tim Duncan ", "correct": false}, {"option": "Bjarne Stroustrup ", "correct": false}, {"option": "Dennis Ritchie ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is JavaScript used for?</p>", "options": [{"option": "Server-side web development ", "correct": false}, {"option": "Client-side web development ", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following companies is credited with the development of JavaScript?</p>", "options": [{"option": "Microsoft ", "correct": false}, {"option": "IBM ", "correct": false}, {"option": "Google ", "correct": false}, {"option": "Netscape", "correct": true}], "level": "Very-Easy"}, {"question": "<p>JavaScript was originally called ___________________.</p>", "options": [{"option": "Oak", "correct": false}, {"option": "Mocha", "correct": true}, {"option": "JScript", "correct": false}, {"option": "JSL", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which pop up box is used to verify something from the user?</p>", "options": [{"option": "alert(\"Write some text here\") ;", "correct": false}, {"option": "confirm(\"Write some text here\");\r\n ", "correct": true}, {"option": "prompt(\"Write some text here\",\"Write the default value here\") ;", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following pop up boxes is used to confirm that the information comes from the user?</p>", "options": [{"option": "alert(\"Write some text here\") ", "correct": true}, {"option": "confirm(\"Write some text here\") ", "correct": false}, {"option": "prompt(\"Write some text here\",\"Write the default value here\") ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following commands is used to set up the window to capture all the <strong>Click</strong> events?</p>", "options": [{"option": "window.captureEvents(Event.CLICK);", "correct": true}, {"option": "window.handleEvents (Event.CLICK);", "correct": false}, {"option": "window.routeEvents(Event.CLICK );", "correct": false}, {"option": "window.raiseEvents(Event.CLICK );", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following window object attributes is tainted?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Protocol", "correct": false}, {"option": "Default status", "correct": true}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, ____ is an object of the target language data type that encloses an object of the source language.</p>", "options": [{"option": "a wrapper ", "correct": true}, {"option": "a link ", "correct": false}, {"option": "a cursor ", "correct": false}, {"option": "a form ", "correct": false}], "level": "Easy"}, {"question": "<p>Which type of wrapper is created by the runtime engine when a JavaScript object is sent to a Java code?</p>", "options": [{"option": "Jobject", "correct": false}, {"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following classes provides an interface to call JavaScript methods and inspect JavaScript properties?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following <strong>wrapped</strong> Java arrays can be retrieved in JavaScript?</p>", "options": [{"option": "JavaArray", "correct": true}, {"option": "JavaClass", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following exceptions of JavaScript exist in a Java code?</p>", "options": [{"option": "netscape.javascript.JSException", "correct": true}, {"option": "netscape.javascript.JSObject", "correct": false}, {"option": "netscape.plugin.JSException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>If the console opens automatically due to a JavaScript error, which of the following statements is added to <strong>prefs.js</strong>?</p>", "options": [{"option": "user_pref(\"javascript.console.open_on_error\", true);", "correct": true}, {"option": "user_pref(\"javascript.console.open_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", false);", "correct": false}, {"option": "user_pref(\" javascript.console.open_on_error\", false);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is added to <strong>test.js</strong> if an error occurs while opening a dialog box?</p>", "options": [{"option": "user_test(\"javascript.classic.error_alerts\", true);", "correct": true}, {"option": "user_test(\"javascript.classic.error_alerts \", false);", "correct": false}, {"option": "user_test(\"javascript.console.open_on_error \", false);", "correct": false}, {"option": "user_test(\"javascript.console.open_on_error \", true);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the syntax of the <strong>blur</strong> method in a <strong>button</strong> object?</p>", "options": [{"option": "Blur()", "correct": true}, {"option": "Blur(contrast)", "correct": false}, {"option": "Blur(value)", "correct": false}, {"option": "Blur(depth)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the correct representation of the <strong>captureEvents</strong> method for a <strong>document</strong> object?</p>", "options": [{"option": "captureEvents(eventVal)", "correct": false}, {"option": "captureEvents(args eventType)", "correct": false}, {"option": "captureEvents(eventType)", "correct": true}, {"option": "captureEvents()", "correct": false}], "level": "Hard"}, {"question": "<p>_________________________ is the representation of the <strong>close</strong> method for a <strong>document</strong> object.</p>", "options": [{"option": "close(object)    ", "correct": false}, {"option": "close(doc)    ", "correct": false}, {"option": "close(val)    ", "correct": false}, {"option": "close()    ", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these can be used to print the following output:</p>\n<pre class=\"prettyprint\"><code>Holla you!\n</code></pre>", "options": [{"option": "document.write (\"Holla you!\") ", "correct": true}, {"option": "print (\"Holla you!\") ", "correct": false}, {"option": "print.write (\"Holla you!\") ", "correct": false}, {"option": "script.write (\"Holla you!\") ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following is the correct representation of the <strong>for</strong> loop?</p>", "options": [{"option": "for(i=0; i<=5; i++)", "correct": true}, {"option": "for(i<=5; i++)", "correct": false}, {"option": "for i = 1 to 5", "correct": false}, {"option": "for(i=0; i<=5)", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>client-side</strong> object?</p>", "options": [{"option": "Database  ", "correct": false}, {"option": "Cursor  ", "correct": false}, {"option": "Client  ", "correct": false}, {"option": "FileUpload  ", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following is not an operator?</p>", "options": [{"option": "new ", "correct": false}, {"option": "this ", "correct": true}, {"option": "delete ", "correct": false}, {"option": "typeof ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to declare the <strong>language</strong> attribute?</p>", "options": [{"option": "<language=\"JavaScriptVersion\">", "correct": false}, {"option": "<script language=\"JavaScriptVersion\">", "correct": false}, {"option": "<script language=\"JavaScriptVersion\"> JavaScript statements </script>", "correct": true}, {"option": "<script language=\"JavaScriptVersion\"!> JavaScript statements </script>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to refer an external script called <strong>xyz.js</strong>?</p>", "options": [{"option": "<script href=\"xyz.js\">", "correct": false}, {"option": "<script name=\"xyz.js\">", "correct": false}, {"option": "<script src=\"xyz.js\">", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following <strong>image maps</strong> can be used with JavaScript?</p>", "options": [{"option": "Server-side ", "correct": false}, {"option": "Client-side", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following <strong>navigator object</strong> attributes is the same in the <strong>Netscape</strong> and <strong>Internet Explorer</strong> browsers?</p>", "options": [{"option": "navigator.appCodeName", "correct": true}, {"option": "navigator.appName", "correct": false}, {"option": "navigator.appVersion", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following is used to define an array?</p>", "options": [{"option": "var txt = new Array(1:\"tim\",2:\"kim\",3:\"jim\")", "correct": false}, {"option": "var txt = new Array:1=(\"tim\")2=(\"kim\")3=(\"jim\")", "correct": false}, {"option": "var txt = new Array(\"tim\",\"kim\",\"jim\")", "correct": true}, {"option": "var txt = new Array=\"tim\",\"kim\",\"jim\"", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following is used to create a <strong>multiline</strong> comment?</p>", "options": [{"option": " //This comment has\r\nmore than one line//\r\n", "correct": false}, {"option": "/*This comment has\r\nmore than one line*/\r\n", "correct": true}, {"option": "*/This comment has\r\nmore than one line*/\r\n", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to round off 7.25 to the nearest integer?</p>", "options": [{"option": "Math.round(7.25)", "correct": true}, {"option": "Math.rnd(7.25)", "correct": false}, {"option": "round(7.25)", "correct": false}, {"option": "rnd(7.25)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to set the text in the Status bar of the browser?</p>", "options": [{"option": "status(put your message here?)", "correct": false}, {"option": "window.status = \"put your message here\"", "correct": true}, {"option": "statusbar = put your message here?", "correct": false}, {"option": "window.status(put your message here?)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to find the name of the client's browser?</p>", "options": [{"option": "browser.name", "correct": false}, {"option": "navigator.appName", "correct": true}, {"option": "client.navName", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a reserved word in the Java programming language?</p>", "options": [{"option": "pointer", "correct": false}, {"option": "native", "correct": true}, {"option": "subclasses", "correct": false}, {"option": "run", "correct": false}, {"option": "array", "correct": false}], "level": "Easy"}, {"question": "<p>Which three piece of codes are equivalent to line 3?</p>\n<p>public interface Foo </p>\n<p>{ \n    int a = 6; /* Line 3 */\n}  </p>\n<p>1.final int a = 6;</p>\n<p>2.public int a = 6;</p>\n<p>3.static int a = 6;</p>\n<p>4.abstract int a = 6;</p>\n<p>5.volatile int a = 6;</p>", "options": [{"option": "1, 2 and 3", "correct": true}, {"option": "2, 3 and 5", "correct": false}, {"option": "3, 4 and 5", "correct": false}, {"option": "4, 5 and 1", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the valid declarations within an interface definition?</p>", "options": [{"option": "public double methodx();", "correct": true}, {"option": "public final double methodx();", "correct": false}, {"option": "static void methodx(double d1);", "correct": false}, {"option": "protected void methodx(double d1);", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is/are true statements?</p>", "options": [{"option": "AbstractSet extends AbstractClass", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": true}, {"option": "HashSet extends AbstractCollection\r\n ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is/are true statements?</p>", "options": [{"option": "The default char data type is a space( ? ? ) character", "correct": false}, {"option": "The default integer data type is ?int? and real data type is ?double?", "correct": true}, {"option": "The default integer data type is ?long? and real data type is ?float?", "correct": false}, {"option": "The default integer data type is ?int? and real data type is ?char?", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is incorrect regarding an anonymous inner class?</p>", "options": [{"option": "It can extend exactly one class.", "correct": false}, {"option": "It can extend exactly one class or can implement exactly one interface.", "correct": false}, {"option": "It can extend exactly two classes and can implement more than one interfaces.", "correct": false}, {"option": "Both a and c", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements are incorrect?</p>", "options": [{"option": "Assignment operators are more efficiently implemented by Java run-time system than their equivalent long forms.", "correct": false}, {"option": "Assignment operators run faster than their equivalent long forms.", "correct": false}, {"option": "Assignment operators can be used only with numeric and character data type.", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Which statement, when placed in a class other than output or input, would instantiates an instance of the nested class?</p>\n<p>public class output {</p>\n<pre class=\"prettyprint\"><code>public static class input \n{\n    public static void foo() { }\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "output.input m = new output.input();", "correct": true}, {"option": "output.input mi = new input();", "correct": false}, {"option": "output m = new output();\r\noutput.input mi = m.new output.input();", "correct": false}, {"option": "input mi = new output.input();", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the given below statements is incorrect regarding a static nested class?</p>", "options": [{"option": "It does not have access to nonstatic members of the enclosing class.", "correct": false}, {"option": "One must not have a reference to an instance of the enclosing class in order to instantiate it.", "correct": true}, {"option": "It's variables and methods must be static.", "correct": false}, {"option": "Both b and c\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which two code fragments inserted at end of the program, will allow the code to compile?</p>\n<p>interface Doadd</p>\n<p>{\n    double getArea(int rad); \n}</p>\n<p>interface MathPlus </p>\n<p>{\n    double getVol(int b, int h);</p>\n<p>}\n/* Missing Statements ? */</p>\n<ol>\n<li>\n<p>class AllMath extends DoAdd { double getArea(int r); }</p>\n</li>\n<li>\n<p>interface AllMath implements MathPlus { double getVol(int x, int y); }</p>\n</li>\n<li>\n<p>interface AllMath extends DoAdd { float getAvg(int h, int l); }</p>\n</li>\n<li>\n<p>class AllMath implements MathPlus { double getArea(int rad); }</p>\n</li>\n<li>\n<p>abstract class AllMath implements DoAdd, MathPlus { public double getArea(int rad) { return rad * rad * 3.14; } }</p>\n</li>\n</ol>", "options": [{"option": "1 only", "correct": false}, {"option": "3 and 5", "correct": true}, {"option": "2 only", "correct": false}, {"option": "1 and 4 ", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which is the correct declarations of a String?</p>", "options": [{"option": "String s1 = null;", "correct": true}, {"option": "String s2 = ?null?;\r\n", "correct": false}, {"option": "String s3 = (String) 'abc';\r\n", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following statement is true regarding java hotspot virtual machine?</p>", "options": [{"option": "It is additional virtual machine which improves the performance of an application.", "correct": true}, {"option": "It is internal device which convert source code into byte code.", "correct": false}, {"option": "It is virtual machine which detects runtime exception.", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following is a not command line tool?</p>", "options": [{"option": "java", "correct": false}, {"option": "javaw", "correct": false}, {"option": "javapath", "correct": true}, {"option": "javadoc", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statement(s) is/are incorrect about java?</p>", "options": [{"option": "Java platform is bit faster than actual CPU platform", "correct": true}, {"option": "javac is compiler tool", "correct": false}, {"option": "java command launch an application", "correct": false}, {"option": "javadoc is documentation tool", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following will create and start this thread?</p>\n<p>public class MyThread implements Runnable </p>\n<p>{</p>\n<pre class=\"prettyprint\"><code>public void run() \n{\n    // some code here\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "new Runnable(MyThread).start();", "correct": false}, {"option": "new Thread(MyThread).run();", "correct": false}, {"option": "new Thread(new MyThread()).start();", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following are correct array declarations?</p>\n<ol>\n<li>public int x [ ]</li>\n<li>static int [ ] x</li>\n<li>public [ ] int x</li>\n<li>private int x [3]</li>\n<li>private int [3] x [ ]</li>\n</ol>", "options": [{"option": "1, 3", "correct": false}, {"option": "4, 5", "correct": false}, {"option": "1, 2 ", "correct": true}, {"option": "2, 5", "correct": false}], "level": "Easy"}, {"question": "<p>What is the role of synchronization in reference to a thread?</p>", "options": [{"option": "Its a method that allow to more than one thread to access any information require.", "correct": false}, {"option": "Its a process by which no thread is able to access same shared resource simultaneously.", "correct": false}, {"option": "Its a process by which a method not a thread is able to access many different threads simultaneously.", "correct": false}, {"option": "It deals with a process of handling situations when two or more threads need access to a shared resource.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is the most restrictive access modifier that will allow members of one class to have access to members of another class within in the same package?</p>", "options": [{"option": " abstract ", "correct": false}, {"option": " protected ", "correct": false}, {"option": " default access ", "correct": true}, {"option": " synchronized\t ", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>public static void main(String[] args) \n{\n    Demo obj = new Demo() \n    {\n        public int hashCode() \n        {\n            return 40;\n        }\n    }; \n    System.out.println(obj.hashCode()); \n}\n</code></pre>", "options": [{"option": " 40 ", "correct": true}, {"option": " Runtime Exception ", "correct": false}, {"option": " Compile Error at line 5 ", "correct": false}, {"option": " Compile Error at line 2 ", "correct": false}], "level": "Medium"}, {"question": "<p>How many methods exist in the Serializable interface?</p>", "options": [{"option": "One method", "correct": false}, {"option": "Three methods", "correct": false}, {"option": "No method", "correct": true}, {"option": "Infinite methods", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not supported by java?</p>", "options": [{"option": " Signed number ", "correct": false}, {"option": " Unsigned number ", "correct": true}, {"option": " Signed right shift ", "correct": false}, {"option": " Unsigned right shift ", "correct": false}], "level": "Easy"}, {"question": "<p>What is incorrect regarding the <strong>new</strong> operator?</p>", "options": [{"option": "new is reserved word of java programming.", "correct": false}, {"option": "It dynamically allocates memory.", "correct": false}, {"option": "If new operator is not able to allocate memory for object then run time exception will occur.", "correct": false}, {"option": "With the help delete keyword we can release the memory spaces which has been allocated by new operator.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to create an instance of an array?</p>", "options": [{"option": "int[ ] i = new int[15];", "correct": true}, {"option": "float f = new float[20];", "correct": false}, {"option": "char[ ] c = \"Some String\";", "correct": false}, {"option": "int i[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following class level (nonlocal) variable declarations will not compile?</p>", "options": [{"option": "protected int i;", "correct": false}, {"option": "transient int j = 3;", "correct": false}, {"option": "private synchronized int k;", "correct": true}, {"option": "volatile int l;", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Why the below written code returns garbage value?</p>\n<pre class=\"prettyprint\"><code>   class cube {\n        int w;\n        int h;\n        int l;\n    } \n    class example {\n        public static void main(String args[]) \n        {        \n            cube ob = new cube();\n            System.out.println(ob);\n        } \n    }\n</code></pre>", "options": [{"option": "No constructors to default initialized the values in the class", "correct": false}, {"option": "No methods exits in the class to initialize values", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the default priority number of the thread in below program?</p>\n<pre class=\"prettyprint\"><code>    class example {\n        public static void main(String args[]) {\n            Thread t = Thread.currentThread();\n            System.out.println(t);        \n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements are incorrect?</p>", "options": [{"option": "Two or more methods with same name can be differentiated on the basis of their parameters' data type.", "correct": false}, {"option": "Two or more method having same name can be differentiated on basis of number of parameters.", "correct": false}, {"option": "Any already defined method in java's library can be defined again in the program with different data type of parameters.", "correct": false}, {"option": "If a method is returning a value, then the calling statement must have a variable to store that value.\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>Which two are methods of the Object class?</p>\n<p>1.notify();</p>\n<p>2.notifyAll();</p>\n<p>3.isInterrupted();</p>\n<p>4.synchronized();</p>", "options": [{"option": "1, 3\t", "correct": false}, {"option": "2, 4", "correct": false}, {"option": "1, 2", "correct": true}, {"option": "2, 3", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods cannot directly cause a thread to stop from executing?</p>", "options": [{"option": "Calling the SetPriority() method on a Thread object.", "correct": false}, {"option": "Calling notify() method on an object.", "correct": true}, {"option": "Calling the wait() method on an object.", "correct": false}, {"option": "Calling read() method on an InputStream object.\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following package is used for handling security related issues in a program?</p>", "options": [{"option": "java.security", "correct": true}, {"option": "java.lang.sec", "correct": false}, {"option": "java.awt.image", "correct": false}, {"option": "java.io.lang.security", "correct": false}], "level": "Easy"}, {"question": "<p>Is following loop valid in java?</p>\n<p>while(1)\n{</p>\n<p>//some code</p>\n<p>}</p>", "options": [{"option": "No", "correct": true}, {"option": "Yes", "correct": false}, {"option": "Depends upon compiler", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is defined by a class for implementing the <strong>java.lang.Runnable interface</strong>?</p>", "options": [{"option": "void run()", "correct": false}, {"option": "public void run()", "correct": true}, {"option": "public void start()", "correct": false}, {"option": "void run(int x)", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is a not a part of Abstract Window Toolkit (AWT) ?</p>", "options": [{"option": "volatile()", "correct": false}, {"option": "transient()", "correct": false}, {"option": "notify()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Assume the following method written below is properly synchronized and called from a thread A on an object B:</p>\n<p>wait(5000);</p>\n<p>After calling this method, when will the thread A become a candidate to get another turn at the CPU?</p>", "options": [{"option": "Five seconds after thread A is notified.", "correct": false}, {"option": "After the lock on B is released, or after five seconds.", "correct": false}, {"option": "After thread A is notified, or after five seconds", "correct": true}, {"option": "Five seconds after lock B is released.\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the classes given below is not used by character streams for input and output operations?</p>", "options": [{"option": "InputStream", "correct": false}, {"option": "ReadStream", "correct": false}, {"option": "Neither a nor b", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Easy"}, {"question": "<p>What action will be performed by finally in the below code?</p>\n<p>try\n{</p>\n<p>//some code\nreturn();</p>\n<p>}</p>\n<p>finally{\n//some code\n}</p>", "options": [{"option": "No, as it exits the program", "correct": false}, {"option": "Finally always gets executed", "correct": true}, {"option": "Every try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Does the finally gets executed in the below code?</p>\n<p>try{</p>\n<p>//some code</p>\n<p>System.exit();</p>\n<p>}</p>\n<p>finally{\n//some code</p>\n<p>}</p>", "options": [{"option": "No, as it exits the program", "correct": true}, {"option": "Finally always gets executed", "correct": false}, {"option": "A Try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of \"a\" after this line of code has been executed?</p>\n<p>double a = Math.round ( 2.5 + Math.random() );</p>", "options": [{"option": "2.0", "correct": false}, {"option": "Compile time error", "correct": false}, {"option": "3.0", "correct": true}, {"option": "2.5", "correct": false}], "level": "Medium"}, {"question": "<p>How many objects will be created in following code?</p>\n<p>String obj1=\"JAVA\";</p>\n<p>String obj2=\"JAVA\";</p>\n<p>String obj3=\"JAVA\";</p>", "options": [{"option": "3", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which two statements are equivalent?</p>\n<ol>\n<li>3/2</li>\n<li>3&lt;&lt;2</li>\n<li>3*4</li>\n<li>3&lt;&lt;&lt;2</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the base class for errors and exceptions?</p>", "options": [{"option": "Throwable", "correct": true}, {"option": "Runnable", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Assume that one would like to create an instance of a new Map that has an iteration order that is the not the same as the iteration order of an existing instance of a Map. Which concrete implementation of the Map interface should be used for the new instance?</p>", "options": [{"option": "TreeMap", "correct": false}, {"option": "HashMap", "correct": false}, {"option": "LinkedHashMap", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Medium"}, {"question": "<p>Which collection class does not allows us to grow or shrink its size and provides indexed access to its elements, and also whose methods are not synchronized?</p>", "options": [{"option": "java.util.HashSet", "correct": false}, {"option": "java.util.ArrayList", "correct": false}, {"option": "java.util.List", "correct": false}, {"option": "Both a and c", "correct": true}], "level": "Medium"}, {"question": "<p>Which interface is not implemented by java.util.Hashtable in its code?</p>", "options": [{"option": "Java.util.Map\t", "correct": false}, {"option": "Java.util.List", "correct": false}, {"option": "Java.util.HashTable", "correct": false}, {"option": "Both b and c", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which protocol is not used for breaking and sending packets to an address across a network in java?</p>", "options": [{"option": "TCIP/IP", "correct": false}, {"option": "DNS", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What does the marker interface deals with?</p>", "options": [{"option": "Interface having data members and methods of its own", "correct": false}, {"option": "Interface having its methods", "correct": false}, {"option": " Interface having no data members and method of its own", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>After execution of line 8, how many objects are eligible for garbage collection?</p>\n<pre class=\"prettyprint\"><code>  public class sample \n{\n    public static void main(String [] args) \n    {\n        sample x = new sample();\n        sample x2 = m1(x); /* Line 6 */\n        sample x4 = new sample();\n        x2 = x4; /* Line 8 */\n        doComplexStuff();\n    }\n    static sample m1(sample mx) \n    {\n        mx = new sample();\n        return mx;\n    }\n}\n\n</code></pre>", "options": [{"option": "0 ", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "None", "correct": false}], "level": "Medium"}, {"question": "<p>What is the priority number of the thread in output of this program?</p>\n<pre class=\"prettyprint\"><code>    class example {\n        public static void main(String args[]) {\n            Thread t = Thread.currentThread();\n            System.out.println(t);        \n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "0", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>What is done by the programmer to destroy an object x of any class?</p>", "options": [{"option": "Garbage collector", "correct": false}, {"option": "x.finalize()", "correct": false}, {"option": "Runtime.getRuntime().gc()", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which one of the following does not extend the java.lang.Number class?</p>", "options": [{"option": "Float ", "correct": false}, {"option": "Boolean ", "correct": true}, {"option": "Long ", "correct": false}, {"option": "BigDecimal", "correct": false}], "level": "Easy"}, {"question": "<p>What is the default layout manager that is used for panels and applets?</p>", "options": [{"option": "Flowlayout ", "correct": true}, {"option": "Gridlayout", "correct": false}, {"option": "BorderLayout", "correct": false}, {"option": "GridBagLayout", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is correct statement regarding passing an argument by call-by-value process?</p>", "options": [{"option": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument. ", "correct": false}, {"option": "Reference to original argument is passed to formal parameter of the subroutine.", "correct": false}, {"option": "Copy of argument is made into the formal parameter of the subroutine", "correct": true}, {"option": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument.\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which one of the following layout managers honors the components's preferred size?</p>", "options": [{"option": "FlowLayout", "correct": true}, {"option": "GridLayout ", "correct": false}, {"option": "BorderLayout", "correct": false}, {"option": "CardLayout", "correct": false}], "level": "Medium"}, {"question": "<p>What is the stored in the object x in following lines of code?</p>\n<p>sample x;</p>", "options": [{"option": "Memory address of allocated memory of object.\r\n", "correct": false}, {"option": "NULL", "correct": true}, {"option": "Any arbitrary pointer", "correct": false}, {"option": "Garbage value\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Do virtual functions exist in java?</p>", "options": [{"option": "Yes, by use of virtual keyword", "correct": false}, {"option": "No, they don't exist", "correct": false}, {"option": "By default all functions are virtual", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the method given below is used by Object class to obtain class of an object at run time?</p>", "options": [{"option": "get()\r\n\r\n\r\n", "correct": false}, {"option": "void getclass()\r\n", "correct": false}, {"option": "Class getclass()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which class can never be a subclass in java?</p>", "options": [{"option": "Abstract class", "correct": false}, {"option": "Parent class", "correct": false}, {"option": "Final class", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which collection class associates values with keys, and indexes all the keys according to their natural order?</p>", "options": [{"option": "java.util.HashSet", "correct": false}, {"option": "java.util.LinkedList", "correct": false}, {"option": "java.util.TreeMap", "correct": true}, {"option": "java.util.SortedSet", "correct": false}], "level": "Medium"}, {"question": "<p>How can one execute program without main() method?</p>", "options": [{"option": "Using abstract", "correct": false}, {"option": "Using interface", "correct": false}, {"option": "Using static block", "correct": true}, {"option": "Using final", "correct": false}], "level": "Medium"}, {"question": "<p>What is the numerical value of false in java?</p>", "options": [{"option": "0", "correct": false}, {"option": "Zero and all negative integers", "correct": false}, {"option": "No numerical value is supported", "correct": true}, {"option": "Any integer", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following is correct in java?</p>", "options": [{"option": "Switch statement is slower than if-else ladder.", "correct": false}, {"option": "Nested switch case is not possible.", "correct": false}, {"option": "A switch statement without any case is possible.", "correct": true}, {"option": "All of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the class given below relies upon its subclasses for complete implementation of its methods?</p>", "options": [{"option": "TreeSet class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is meant by class loader?</p>", "options": [{"option": "Subsystem of JVM that is used to load classes and interfaces.", "correct": true}, {"option": "JVM that loads classes and interfaces.", "correct": false}, {"option": "Not part of JVM but used to load classes and interfaces.", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What are Native methods in Java?</p>", "options": [{"option": "It is possible to execute C or C++ code by a Java application, but the process is done by taking certain performance issues and without taking access to the underlying host operating systems into consideration.\r\nTo execute these programs, Java Native Interface framework is not required.", "correct": false}, {"option": "It is possible to execute C or C++ code by a Java application, but this process is done by taking certain performance issues and access to the underlying host operating systems into consideration. To execute these programs, Java Native Interface framework is used.", "correct": true}, {"option": "Both a and b hold", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these events gets activated when the size of a component is being changed?</p>", "options": [{"option": "ItemEvent", "correct": false}, {"option": "ActionEvent", "correct": false}, {"option": "FocusEvent", "correct": false}, {"option": "ComponentEvent", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods is used to get the reference to a component that has been removed from the container?</p>", "options": [{"option": "getComponent()", "correct": false}, {"option": "getContainerComponent()", "correct": false}, {"option": "getchild()", "correct": true}, {"option": "child()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is  base class of ContainerEvent class?</p>", "options": [{"option": "WindowClosingEvent", "correct": false}, {"option": "ActionEvent", "correct": false}, {"option": "ItemEvent", "correct": false}, {"option": "ComponentEvent", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of the given below methods is used to change location of an event?</p>", "options": [{"option": "ChangePoint()", "correct": false}, {"option": "ChangeLocation()", "correct": false}, {"option": "ChangeCordinates()", "correct": false}, {"option": "TranslatePoint()\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following are constants that are defined in WindowEvent class?</p>", "options": [{"option": "WINDOW_MAXIMIZED", "correct": false}, {"option": "WINDOW_OPENED", "correct": false}, {"option": "WINDOW_DEICONIFIED", "correct": true}, {"option": "None of these\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which interface defines a method called the itemStateChanged() ?</p>", "options": [{"option": "WindowClosingListener", "correct": false}, {"option": "ContainerListener", "correct": false}, {"option": "ActionListener", "correct": false}, {"option": "ItemListener", "correct": true}], "level": "Easy"}, {"question": "<p>By what means Javabeans are used by JSP pages?</p>", "options": [{"option": "<jsp:useBean id=\"beanName\" class=\"fully_qualified_classname\" scope=\"scope\"/>", "correct": true}, {"option": "<jsp:useBean id=\"beanName\" value=\"fully_qualified_classname\" scope=\"scope\"/>", "correct": false}, {"option": "<jsp:useBean id=\"beanName\" scope=\"scope\"/>", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following class is superclass for String and StringBuffer class?</p>", "options": [{"option": "java.swingx", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.string", "correct": false}, {"option": "java.awt", "correct": false}], "level": "Easy"}, {"question": "<p>What is meant by Servlet Chaining?</p>", "options": [{"option": "It is the last servlet in the chain that provides the output to the Web browser", "correct": false}, {"option": "It is the first servlet in the chain that provides the output to the Web browser", "correct": false}, {"option": "It is a method in which the output of one servlet is piped into the next servlet", "correct": false}, {"option": "It is a method in which the output of one servlet is not piped into the next servlet", "correct": false}, {"option": "both a and c", "correct": true}, {"option": "both b and d", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What do you mean by the term thread safety and synchronization?</p>", "options": [{"option": " The term Thread safety means each method in a multi threaded environment can access data by multiple threads at the same time. Synchronization is the way to provide a resources between threads and thus ensure Thread Safety. ", "correct": false}, {"option": " The term Thread safety means each method in a multi threaded environment doesn't access data by multiple threads at the same time. Synchronization is the way to provide a secured environment and thus ensure Thread Safety ", "correct": true}, {"option": "A piece of code is thread-safe if it functions correctly during simultaneous execution by multiple threads. Java enables you to coordinate the actions of multiple threads without using synchronized methods and synchronized statements.", "correct": false}, {"option": " None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is done in order to add a new item to a JComboBox once the JComboBox has been constructed?</p>", "options": [{"option": "Use the addItem method.", "correct": true}, {"option": "Have the user add the item through the GUI.", "correct": false}, {"option": "Add the item as you would add a new value to an array, such as by doing jlist[num+1] = new String(...);. ", "correct": false}, {"option": "Use the add method. \r\n ", "correct": false}], "level": "Easy"}, {"question": "<p>What can be done in order to determine the type that a polymorphic variable refers to?</p>", "options": [{"option": "Operating system when the program is loaded into memory.", "correct": false}, {"option": "Java run-time environment at run time", "correct": true}, {"option": "Compiler at compile time. ", "correct": false}, {"option": "Programmer at the time the program is written", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following iterators is used only with List?</p>", "options": [{"option": "Setiterator", "correct": false}, {"option": "ListIterator", "correct": true}, {"option": "HashIterator", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What interface is extended by AWT event listeners?</p>", "options": [{"option": "java.util.Event interface\r\n\r\n ", "correct": false}, {"option": "java.util.EventListener interface", "correct": true}, {"option": "java.util.EventComponentListener interface", "correct": false}, {"option": "java.util.awt.event interface", "correct": false}], "level": "Easy"}, {"question": "<p>What are the different types of statements in JDBC?</p>", "options": [{"option": "Statement using SQL", "correct": false}, {"option": "Non-Callable statements", "correct": false}, {"option": "Prepared statement", "correct": false}, {"option": "Both a and c", "correct": true}], "level": "Easy"}, {"question": "<p>What is the difference between Swing and JSF?</p>", "options": [{"option": "JSF applications cannot be operated when a network is present while Swing applications can operate on local data when the network is absent.", "correct": false}, {"option": "JSF applications can operate when a network is not present while Swing applications cannot operate on local data when the network is not there.", "correct": false}, {"option": "JSF applications cannot operate when a network is not present while Swing applications can operate on local data when the network is not there.", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>How can applets communicate with each other?</p>", "options": [{"option": "If the applets are of the same class, they can communicate via shared static variables.", "correct": false}, {"option": "If the applets are of different classes, then each will need a reference to the same class with static variables. ", "correct": false}, {"option": "By not using static variable.", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statement is incorrect about java?</p>", "options": [{"option": "Java deallocates memory automatically.", "correct": false}, {"option": "Finalize method is just called before garbage collection.", "correct": false}, {"option": "Garbage collection runs when there is reference with object and runs periodically.", "correct": true}, {"option": "Inside finalize method we keep those code which must be executed before object is destroyed by garbage collection.", "correct": false}], "level": "Easy"}, {"question": "<p>Does importing a package imports the sub-packages as well? \ne.g. Does importing com.MyTest.* also import com.MyTest.UnitTests.*?</p>", "options": [{"option": " No you will have to import the subpackages explicitly. Importing com.MyTest.* will import classes in the package MyTest only. ", "correct": true}, {"option": " Yes it will automatically import the subpackages explicitly.Importing com.MyTest.* will also import subclasses classes in the package MyTest  ", "correct": false}, {"option": " Both a and b ", "correct": false}, {"option": " None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the methods is used to compare a specific region inside one string with another specific region in another string?</p>", "options": [{"option": "regionMatches()", "correct": true}, {"option": "match()", "correct": false}, {"option": "RegionMatches()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What value is returned when the invoking string is less than the string compared by the function compareTo()?</p>", "options": [{"option": " Value always greater than zero. ", "correct": false}, {"option": " Value less than zero. ", "correct": true}, {"option": " Zero. ", "correct": false}, {"option": " None of these. ", "correct": false}], "level": "Easy"}, {"question": "<p>Is there any difference between Keywords and Identifiers?</p>", "options": [{"option": "There is no difference between Keywords and Identifiers.", "correct": false}, {"option": "Java doesn't allow Identifiers, it only has Keywords.", "correct": false}, {"option": "Java doesn't allow Keywords, it only has Identifiers.", "correct": false}, {"option": "An identifier identifies something in a programming language. It may be, in Java, like variable, a method, a class, \r\na package, an interface. A keyword has a special meaning to the compiler and conveys some information to the compiler.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is used to fully abstract a class from its implementation?</p>", "options": [{"option": "Objects", "correct": false}, {"option": "Classes", "correct": false}, {"option": "Interfaces", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how does an object maintain a record of all the threads that have accessed it?</p>", "options": [{"option": "By using join() method to record the accessing thread", "correct": false}, {"option": "By using Thread.currentThread() method to record the accessing thread", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is difference between a Java applet and a Java application?</p>", "options": [{"option": "An application can in general be trusted whereas an applet can't.", "correct": false}, {"option": "An applet must be executed in a browser environment.", "correct": false}, {"option": "An applet is not able to access the files of the computer it runs on.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods is used as a wrapper Integer for obtaining hash code for the invoking object?</p>", "options": [{"option": "int hash()", "correct": false}, {"option": "int hashcode()", "correct": false}, {"option": "int hashCode()", "correct": true}, {"option": "All of these.", "correct": false}], "level": "Medium"}, {"question": "<p>How can a dead thread be restarted?</p>", "options": [{"option": "With the help of danging pointers.", "correct": false}, {"option": "Garbage collector.", "correct": false}, {"option": "Cannot be restarted.", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these method is used to return the remainder of dividend / divisor?</p>", "options": [{"option": "remainder()", "correct": false}, {"option": "modulous()", "correct": false}, {"option": "CSIremainder()", "correct": false}, {"option": "IEEEremainder()\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>Does a class inherit the constructors of its superclass?</p>", "options": [{"option": "A class does inherit constructors from any of its super classes.", "correct": false}, {"option": "A class does not inherit constructors from any of its super classes.", "correct": true}, {"option": "A class does inherit constructors from its immediate super class.", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Can an object be garbage collected while it is still reachable?</p>", "options": [{"option": "A reachable object cannot be garbage collected.", "correct": true}, {"option": "A reachable object can always be garbage collected.", "correct": false}, {"option": "Both a and b.", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Can an anonymous class be declared as implementing an interface and extending a class?</p>", "options": [{"option": "An anonymous class cannot implement an interface or extend a superclass, but can be declared to do both.", "correct": false}, {"option": "An anonymous class may implement an interface or extend a superclass, but cannot be declared to do both", "correct": true}, {"option": "An anonymous class can only implement an interface but can't extend a superclass.", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>In Perl, the <strong>autoincrement</strong> operator can be applied to floating point values.</p>", "options": [{"option": "True\r\n  ", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>In Unix, which of the following commands is used to find the lines starting with <strong>a</strong> in a file named <em>sample</em>?</p>", "options": [{"option": "find $a sample ", "correct": false}, {"option": "find ^a sample ", "correct": false}, {"option": "grep $a sample ", "correct": false}, {"option": "grep ^a sample ", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In XML, the android.background attribute is used to set a background. Which method must be implemented if you want to set the background using Java?</p>", "options": [{"option": "setBackgroundResource()", "correct": true}, {"option": "setBackground()", "correct": false}, {"option": "setBackgroundTintList()", "correct": false}, {"option": "setBackgroundList()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>        public class Code16 { \n        static\n     { \n        System.out.print(\"Planet \"); \n        } \n        public static void main(String... args) { \n        } \n        static { \n        System.out.print(\"Welcome \"); \n        } \n        }\n</code></pre><p></p>", "options": [{"option": "Welcome, Planet ", "correct": false}, {"option": "Planet, Welcome ", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Planet ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    public class Pass { \n    static int j=20; \n    public static void main(String argv[]) { \n    int i=10; \n    Pass p = new Pass(); \n    p.amethod(i); \n    System.out.println(i); \n    System.out.println(j); \n    } \n    public void amethod(int x) { \n    x=x*2; \n    j=j*2; \n    } \n    }\n</code></pre><p></p>", "options": [{"option": "10, 40", "correct": true}, {"option": "20, 40 ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10, 20", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    class TestString3 { \n    public static void main(String args[]) { \n    String s1 = \"Hello\"; \n    StringBuffer sb = new StringBuffer(s1); \n    sb.reverse(); \n    s1.concat(sb.toString()); \n    System.out.println(s1 + sb + s1.length() + sb.length()); \n    } \n    }\n</code></pre><p></p>", "options": [{"option": "HelloolleH55 ", "correct": true}, {"option": "HelloolleH44", "correct": false}, {"option": "HelloHello44 ", "correct": false}, {"option": "HelloHello33 ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>finalize()</strong> method is correct?</p>", "options": [{"option": "The finalize() method can be overloaded. ", "correct": false}, {"option": "The finalize() method is called when an object becomes eligible for garbage collection.", "correct": false}, {"option": "When the finalize() method is called, the object becomes eligible for garbage collection.", "correct": false}, {"option": "The finalize() method is guaranteed to run only once before the garbage collector deletes an object.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    class ExampleFive {\n    public static void main(String[] args) {\n    final int i = 22;\n    byte b = i;\n    System.out.println(i + \", \" + b);\n    }\n    }\n</code></pre><p></p>", "options": [{"option": "22, 20 ", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "22, 22", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    public class ThreadJoin extends Thread{\n    public static void main(String[] args) {\n    Thread t1 = new Thread(\"T1\");\n    Thread t2 = new Thread(\"T2\");\n    try {\n    t1.join();\n    t2.join();\n    } catch (InterruptedException e) {\n    System.out.println(\"Main Thread interrupted.\");\n    }\n    }\n    public void run(){\n    System.out.println(\"Run executed\");\n    }\n    }\n</code></pre><p></p>", "options": [{"option": "Runtime error ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Main thread interrupted", "correct": false}, {"option": "No output", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code> public class TestString9\n{\n\n    public static void main(String st[])\n    {\n        String s1 = \"java\";\n        String s2 = \"java\";\n        String s3 = \"JAVA\";\n        s2.toUpperCase();\n        s3.toUpperCase();\n        boolean b1 = s1==s2;\n        boolean b2 = s1==s3;\n        System.out.print(b1);\n        System.out.print(\" \"+b2);\n    }\n}\n</code></pre><p></p>", "options": [{"option": "false, true", "correct": false}, {"option": "true, false ", "correct": true}, {"option": "false, false", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>A web application in Java is saved in the ____________________ folder of <strong>Tomcat</strong>.</p>", "options": [{"option": "web-app", "correct": false}, {"option": "web-apps", "correct": false}, {"option": "webapp", "correct": false}, {"option": "webapps", "correct": true}], "level": "Easy"}, {"question": "<p>Which method shows the client, what server is receiving?</p>", "options": [{"option": "goGet", "correct": false}, {"option": "doOption", "correct": false}, {"option": "doTrace", "correct": true}, {"option": "doPost", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags is used to define the <strong>ServletContext</strong> interface in Java?</p>", "options": [{"option": "config-param", "correct": false}, {"option": "context-param", "correct": true}, {"option": "init-param", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the <strong><code>get()</code></strong> function is used to send _______________ characters at a time.</p>", "options": [{"option": "1024", "correct": true}, {"option": "1082", "correct": false}, {"option": "1084", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is used to apply the <strong>ServletContext</strong> interface on a web application?</p>", "options": [{"option": "getServletContext().getServletConfig().getInitParameter()", "correct": false}, {"option": "getServletConfig().getInitParameter()", "correct": false}, {"option": "this.getServletConfig().getInitParameter()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the container reads <strong>init</strong> parameters when the _______________________________.</p>", "options": [{"option": "Container starts", "correct": false}, {"option": "doGet/doPost is called", "correct": false}, {"option": "Servlet is intialised", "correct": true}, {"option": "Constuctor is called", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        public class Code10 \n    {\n        {\n         final Vector v;\n        v=new Vector();\n        }\n        public Code10 ()\n     {\n     }\n        public void codeMethod() \n        {\n        System.out.println(v.isEmpty());\n        }\n        public static void main(String args[]) \n       { \n    new Code10().codeMethod(); \n    } \n    }\n</code></pre>", "options": [{"option": "Prints 'False'", "correct": false}, {"option": "Runtime error: NullPointerException", "correct": false}, {"option": "Compilation error: Cannot find the symbol", "correct": true}, {"option": "Prints 'True'", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    package com.java.test;\n    public class A {\n    public int x;\n    public static int y;\n    protected static int z;\n    }\n    package com.java.test1;\n    import com.java.test.A;\n    public class B {\n    public static void main(String[] args) {\n    A a = new A(), b = new A();\n    a.x++;\n    b.y++;\n    a.z++;\n    System.out.print(a.x + \" \" + a.y + \" \" + b.x + \" \" + b.y + \" \" a.z);\n    }\n    }\n</code></pre>", "options": [{"option": "Compilation error: 'a.z is not visible'\r\n", "correct": true}, {"option": "Prints: 1 0 0 1 0\r\n", "correct": false}, {"option": "Prints: 0 0 0 0 0\r\n", "correct": false}, {"option": "Prints: 1 1 0 1 1\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code>        import java.util.*;\n        public class Test{\n        public static void main(String[] args) {\n        Set h = new HashSet();\n        h.add(\"One\");\n        h.add(\"Two\");\n        h.add(\"Three\");\n        h.add(\"Four\");\n        h.add(\"One\");\n        h.add(\"Four\");\n        List l = new ArrayList();\n        l.add(\"One\");\n        l.add(\"Two\");\n        l.add(\"Three\");\n        h.retainAll(l);\n        System.out.println(\"Size:\" + l.size()+ h.size());\n        }\n    }\n</code></pre>", "options": [{"option": "Size: 36", "correct": false}, {"option": "Size: 33", "correct": true}, {"option": "Size: 63", "correct": false}, {"option": "Size: 66", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class TestString {\n    public static void main(String args[]) {\n    String s = \"Get Entertained\";\n    StringTokenizer st = new StringTokenizer(s, \"t\");\n    while(st.hasMoreElements())\n    System.out.print(st.nextToken());\n    }\n    }\n</code></pre>", "options": [{"option": "Get Entertained", "correct": false}, {"option": "Ge Enerained", "correct": true}, {"option": "Entertained Get", "correct": false}, {"option": "Get Entertained", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "The external JavaScript file must contain the <script> tag.", "correct": true}, {"option": "JavaScript is a loosely typed language.", "correct": false}, {"option": "The blur() method is used to remove focus from the specified object.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how is a function named <strong>myFunction</strong> called?</p>", "options": [{"option": "myFunction() ", "correct": true}, {"option": "call function myFunction() ", "correct": false}, {"option": "call myFunction()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how is <strong>if \"i\" is NOT equal to</strong> written in code?</p>", "options": [{"option": "if i <> 5 ", "correct": false}, {"option": "if (i != 5) ", "correct": true}, {"option": "if i =! 5 then ", "correct": false}, {"option": "if (i <> 5) ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>JavaScript is inserted in ____________________________ of a document.</p>", "options": [{"option": "The <head> section", "correct": false}, {"option": "The <body> section", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to refer this script:</p>\n<p><strong><code>java.js</code></strong></p>", "options": [{"option": "<script href=\"java.js\"> ", "correct": false}, {"option": "<script name=\"java.js\"> ", "correct": false}, {"option": "<script src=\"java.js\"> ", "correct": true}, {"option": "<script =\"java.js\"> ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to define \"Hello World\" alert?</p>", "options": [{"option": "msg(\"Hello World\"); ", "correct": false}, {"option": "alert(\"Hello World\"); \t", "correct": true}, {"option": "msgBox(\"Hello World\"); ", "correct": false}, {"option": "alertBox(\"Hello World\"); ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags is used to insert JavaScript in an HTML element?</p>", "options": [{"option": "js tag ", "correct": false}, {"option": "javascript tag ", "correct": false}, {"option": "script tag ", "correct": true}, {"option": "scripting tag ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of these syntaxes is used to write an <strong>IF</strong> statement?</p>", "options": [{"option": "if i = 5 then ", "correct": false}, {"option": "if i = 5 ", "correct": false}, {"option": "if i == 5 then ", "correct": false}, {"option": "if (i == 5) ", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>In Javascript, which of the following commands is used to print <strong>Hello World</strong> on the screen?</p>", "options": [{"option": "(\"Hello World\"); ", "correct": false}, {"option": "echo \"Hello World\"; ", "correct": false}, {"option": "document.write(\"Hello World\"); ", "correct": true}, {"option": "response.write(\"Hello World\"); ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to define a function?</p>", "options": [{"option": "function myFunction() ", "correct": true}, {"option": "function = myFunction() ", "correct": false}, {"option": "function:myFunction() ", "correct": false}, {"option": "my function()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to open a new window?</p>", "options": [{"option": "q1 = window.open(\"http://www.xyz.com\");", "correct": false}, {"option": "q1 = window.new(\"http://www.xyz.com\");", "correct": true}, {"option": "q1 = window.create(\"http://www.xyz.com\");", "correct": false}, {"option": "open(\"http://www.xyz.com\");", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following statements is used insert a command having more than one line of text?</p>", "options": [{"option": "//This comment has\r\nmore than one line// ", "correct": false}, {"option": "<!--This comment has \r\nmore than one line--> ", "correct": false}, {"option": "/*This comment has \r\nmore than one line*/ ", "correct": true}, {"option": "/*!This comment has \r\nmore than one line!*/ ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following commands is used to start a <strong>for</strong> loop in JavaScript?</p>", "options": [{"option": "for (i = 0; i <= 5; i++)", "correct": true}, {"option": "for i = 1 to 5", "correct": false}, {"option": "for (i = 0; i <= 5)", "correct": false}, {"option": "for (i <= 5; i++)", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to create an array?</p>", "options": [{"option": "var colors = [\"red\", \"green\", \"blue\"]", "correct": true}, {"option": "var colors = (1:\"red\", 2:\"green\", 3:\"blue\")", "correct": false}, {"option": "var colors = \"red\", \"green\", \"blue\"", "correct": false}, {"option": "var colors = 1 = (\"red\"), 2 = (\"green\"), 3 = (\"blue\")", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these methods is used to round the number <strong>11.49</strong> to its nearest integer?</p>", "options": [{"option": "Math.round(11.49)", "correct": true}, {"option": "Math.rnd(11.49)", "correct": false}, {"option": "round(11.49)", "correct": false}, {"option": "rnd(11.49)", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to add a one-line comment?</p>", "options": [{"option": "//This is a comment", "correct": true}, {"option": "\"This is a comment\"", "correct": false}, {"option": "<!--This is a comment\u2192", "correct": false}, {"option": "*/This is a comment/", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following commands is used to start a <strong>while</strong> loop?</p>", "options": [{"option": "while (i <= 10){};", "correct": true}, {"option": "while i = 1 to 10", "correct": false}, {"option": "while (i <= 10; i++)", "correct": false}, {"option": "while(i:10)", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of these is used to detect the client\u00b4s browser name?</p>", "options": [{"option": "navigator.appName", "correct": true}, {"option": "browser.name", "correct": false}, {"option": "client.navName", "correct": false}, {"option": "server.appName", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these methods is used to find the maximum of two values?</p>", "options": [{"option": "Math.ceil(x, y)", "correct": false}, {"option": "Math.max(x, y)", "correct": true}, {"option": "ceil(x, y)", "correct": false}, {"option": "top(x, y)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these parameters is not valid?</p>", "options": [{"option": "Text", "correct": false}, {"option": "Variable", "correct": false}, {"option": "Operator", "correct": true}, {"option": "Number", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these methods is used to run JavaScript after the page has loaded?</p>", "options": [{"option": "onfinished", "correct": false}, {"option": "onload", "correct": true}, {"option": "onunload", "correct": false}, {"option": "oncomplete", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following classes is used to call a method?</p>", "options": [{"option": "obj.method", "correct": false}, {"option": "obj.method[]", "correct": false}, {"option": "obj.method()", "correct": true}, {"option": "obj-method", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is true:    </p>\n<ol>\n<li>HTML can be coded in a text string in contrast to JavaScript.  </li>\n<li>The search() method searches a string for a specified value and returns the position of the match.  </li>\n<li>The two methods, indexOf() and search(), are equal.</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1, 2", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these methods obtains a random number between 5 and 9?</p>", "options": [{"option": "Math.floor((Math.random() * 5) + 4);", "correct": false}, {"option": "Math.floor((Math.random() * 4) + 4)", "correct": false}, {"option": "Math.floor((Math.random() * 4) + 5)", "correct": false}, {"option": "Math.floor((Math.random() * 5) + 5)", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is not a comparison operator?</p>", "options": [{"option": "<", "correct": false}, {"option": ">", "correct": false}, {"option": "=", "correct": true}, {"option": "!=", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is a keyboard specific event?</p>", "options": [{"option": "onclick", "correct": false}, {"option": "onfocus", "correct": false}, {"option": "onkeydown", "correct": true}, {"option": "onkeyboardpress", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of these is used to check whether all the variables have equal values?</p>", "options": [{"option": "A = B = C", "correct": false}, {"option": "(A == B) && (B = C)", "correct": false}, {"option": "(A = B) && (B = C)", "correct": false}, {"option": "(A == B) && (B == C)", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how many parameters can be passed to a single function?</p>", "options": [{"option": "None", "correct": false}, {"option": "As many as you like", "correct": false}, {"option": "One for each argument", "correct": true}, {"option": "Cannot be determined", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is equivalent to <strong>A ? B : C</strong>?</p>", "options": [{"option": "if (A) {B} else {C}", "correct": true}, {"option": "if (A == B) C", "correct": false}, {"option": "if (A != B) C", "correct": false}, {"option": "if (A) {B; C}", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is not a mouse event?</p>", "options": [{"option": "onmousescroller", "correct": false}, {"option": "onclick", "correct": false}, {"option": "onmouseover", "correct": true}, {"option": "onmousemove", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these catches all the values except those which are not specified?</p>", "options": [{"option": "otherwise", "correct": false}, {"option": "default", "correct": true}, {"option": "any", "correct": false}, {"option": "all", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following does not result in a variable going out of scope?</p>", "options": [{"option": "End of the block in which it was defined.", "correct": false}, {"option": "Start of a block in which a like named variable is defined.", "correct": false}, {"option": "When a function is called.", "correct": true}, {"option": "When the program finishes running.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is an antonym for <strong>onmouseover</strong>?</p>", "options": [{"option": "onmouseoff", "correct": false}, {"option": "onmouseout", "correct": true}, {"option": "onmouseunder", "correct": false}, {"option": "onnotmouseover", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of these supplies the value of a function?</p>", "options": [{"option": "return", "correct": true}, {"option": "cancel", "correct": false}, {"option": "continue", "correct": false}, {"option": "valueOf", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a property of the window object?</p>", "options": [{"option": "document", "correct": true}, {"option": "menu", "correct": false}, {"option": "navigator", "correct": false}, {"option": "history", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a property is an object-oriented equivalent to _____________________________.</p>", "options": [{"option": "A function", "correct": false}, {"option": "An if statement", "correct": false}, {"option": "A variable", "correct": true}, {"option": "A reserved word", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a valid function call?</p>", "options": [{"option": "var x = myfunc();", "correct": false}, {"option": "myfunc;", "correct": true}, {"option": "x = myfunc();", "correct": false}, {"option": "myfunc();", "correct": false}], "level": "Easy"}, {"question": "<p>Browsers that do not understand JavaScript ____.</p>", "options": [{"option": "ignore all <script> and <noscript> tags", "correct": false}, {"option": "display the content of <script> tags", "correct": false}, {"option": "display the content of <noscript> tags", "correct": true}, {"option": "display the content of <script> and <noscript> tags", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "External scripts must include the <script> tag.", "correct": true}, {"option": "slice() extracts a part of a string and returns the extracted part in a new string.", "correct": false}, {"option": "substring() is similar to slice().", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>You cannot trigger JavaScript from an event handler ____.</p>", "options": [{"option": "when another event is still being processed", "correct": false}, {"option": "when JavaScript is disabled", "correct": true}, {"option": "when the page uses stylesheets", "correct": false}, {"option": "when it is running locally instead of on the web", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is true?</p>", "options": [{"option": "Arguments are parameters.", "correct": false}, {"option": "Arguments and parameters must have the same name.", "correct": false}, {"option": "Arguments are placeholders.", "correct": false}, {"option": "Arguments are disagreements between parameters.", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these contains an executable statement?</p>", "options": [{"option": "// var a = 0; // var b = 0;", "correct": false}, {"option": "/* var a = 0; // var b = 0; */", "correct": false}, {"option": "/* var a = 0; */ var b = 0;", "correct": true}, {"option": "// var a = 0; /* var b = 0; */", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, the <strong>noscript</strong> tag ________________________________________________.</p>", "options": [{"option": "Provides alternate content for browsers with external JavaScript", "correct": false}, {"option": "Provides alternate content for browsers with internal and external JavaScript", "correct": false}, {"option": "Provides alternate content for browsers whether or not there is any JavaScript ", "correct": true}, {"option": "Provides alternate content for browsers that do not know what JavaScript is.", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following options is used to turn on the Debug mode in Internet Explorer?</p>", "options": [{"option": "General ", "correct": false}, {"option": "Content ", "correct": false}, {"option": "Programs ", "correct": false}, {"option": "Advanced ", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following helps in defining the property of <strong>myobj</strong>?</p>", "options": [{"option": "property myobj x", "correct": false}, {"option": "myobj.x", "correct": true}, {"option": "myobj property x", "correct": false}, {"option": "var x propertyOf myobj", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is used to identify that a JavaScript is added to a web page?</p>", "options": [{"option": "<javascript>", "correct": false}, {"option": "<program>", "correct": false}, {"option": "<script>", "correct": true}, {"option": "<js>", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to locate the third character in a string?</p>", "options": [{"option": "Substring()", "correct": false}, {"option": "String()", "correct": false}, {"option": "Stringlength()", "correct": false}, {"option": "CharAt()", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these prompts a user with a message and requests user input?</p>", "options": [{"option": "Alert()", "correct": false}, {"option": "Display()", "correct": false}, {"option": "Prompt()", "correct": true}, {"option": "Confirm()", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following is the correct syntax for the <strong>for</strong> loop?</p>", "options": [{"option": "for ( increment; initialize; test)", "correct": false}, {"option": "for ( initialize; test), increment", "correct": false}, {"option": "for ( initialize; test; increment)", "correct": true}, {"option": "for ( test; initalize; increment)", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following is done before designing a form validation mechanism using string methods?</p>", "options": [{"option": "Check for the presence of certain characters", "correct": false}, {"option": "Check the position of substrings", "correct": false}, {"option": "Test the length of data", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is the minimum browser version that supports JavaScript?</p>", "options": [{"option": "Navigator v2.0", "correct": true}, {"option": "Mozilla V1.5", "correct": false}, {"option": "IE 2.0", "correct": false}, {"option": "Navigator V1.0", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following should be used for a multi-way branch?</p>", "options": [{"option": "If", "correct": false}, {"option": "Ifthen", "correct": false}, {"option": "Ifelse", "correct": false}, {"option": "switch", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used by the <strong>date</strong> object to call a function based on its elapsed time?</p>", "options": [{"option": "setElapsedTime()", "correct": false}, {"option": "Timeout()", "correct": false}, {"option": "setTimeout()", "correct": false}, {"option": "setTime()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is true?</p>", "options": [{"option": "JavaScript is Object-oriented.", "correct": false}, {"option": "JavaScript is Object-based.", "correct": true}, {"option": "JavaScript is Object-driven.", "correct": false}, {"option": "JavaScript has no relationship with objects.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is used to restart the inner most loop?</p>", "options": [{"option": "Abort", "correct": false}, {"option": "Breakloop", "correct": false}, {"option": "Stop", "correct": false}, {"option": "Continue label", "correct": true}], "level": "Medium"}, {"question": "<p>Which line contains an error in the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    a = new Array(); \n    a[0] = 12; \n    a[1] = false; \n    a[2] = \"text\"; \n    a[3] = a;\n</code></pre>", "options": [{"option": "Line 3", "correct": true}, {"option": "Line 4", "correct": false}, {"option": "Line 5", "correct": false}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements is true for this JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    statement a = new Array(2,4)\n</code></pre>", "options": [{"option": "It defines a new two-dimensional array a whose dimensions are 2 and 4.", "correct": false}, {"option": "It defines an array ,'a',and assigns the values 2 and 4 to a[1] and a[2].", "correct": false}, {"option": "It defines an array, 'a', and assigns the values 2 and 4 to a[0] and a[1].", "correct": true}, {"option": "It defines a three-element array whose elements have indexes 2 through 4.", "correct": false}], "level": "Medium"}, {"question": "<p>How many times does the alert box appear for the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    a = new Array(1,2,3); \n    for (i in a) alert(\"a[i]=\"+a[i]);\n</code></pre>", "options": [{"option": "3 times", "correct": false}, {"option": "4 times ", "correct": false}, {"option": "Either 3 or 4 times, depending on the browser.", "correct": true}, {"option": "The for loop in the above code will cause an error.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following browsers supports the <strong>sort()</strong> method?</p>", "options": [{"option": "Netscape Navigator 2.0", "correct": false}, {"option": "Netscape Navigator 3.0", "correct": true}, {"option": "Microsoft Internet Explorer 3.0", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods uses arrays?</p>", "options": [{"option": "k = a(i)", "correct": false}, {"option": "k = a[i]", "correct": true}, {"option": "k = a >> i", "correct": false}, {"option": "k = a ^ i", "correct": false}], "level": "Medium"}, {"question": "<p>What is the order of the elements in the array <strong>a</strong> after the following JavaScript code is executed:</p>\n<pre class=\"prettyprint\"><code>    a=(new Array(\"test\",1,2,3,-1,-2,-3,0xFFFFF)).sort()\n</code></pre>", "options": [{"option": "-1,-2,-3,1,1048575,2,3,\"test\"", "correct": true}, {"option": "-1,-2,-3,1,2,3,1048575,\"test\"", "correct": false}, {"option": "\"test\",-1,-2,-3,1,2,3,1048575", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of <strong>a</strong> after the following JavaScript code is executed:</p>\n<pre class=\"prettyprint\"><code>     statement a=(new Array(10)).toString()\n</code></pre>", "options": [{"option": "String \"10\"", "correct": false}, {"option": "Array of 10 empty strings", "correct": false}, {"option": "String \",,,,,,,,,\"", "correct": false}, {"option": "Error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the value of <strong>a</strong> after the following JavaScript code is executed:</p>\n<pre class=\"prettyprint\"><code>    function myarr(arr) {arr[1]++;arr=arr+arr} \n    a = new Array(1,3,2,5); \n    myarrr(a);\n</code></pre>", "options": [{"option": "1,3,2,5", "correct": false}, {"option": "1,4,2,5", "correct": false}, {"option": "1,4,2,5,1,4,2,5", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Medium"}, {"question": "<p>What are the values of <strong>a[1]</strong> and <strong>a[2]</strong> after the following JavaScript is executed:</p>\n<pre class=\"prettyprint\"><code>    a = new Array(); \n    b = new Array(); \n    a[1] = 3; \n    b[2] = 5; \n    a = b;\n</code></pre>", "options": [{"option": "a[1] is 3 and a[2] is 5.", "correct": false}, {"option": "a[1] is undefined and a[2] is 5.", "correct": true}, {"option": "Both a[1] and a[2] are undefined.", "correct": false}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    \"1\" - - \"1\";\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "2", "correct": true}, {"option": "11", "correct": false}, {"option": "\"11\"", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    Number(\"1\") - 1 == 0;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    new Array(5).toString();\n</code></pre>", "options": [{"option": "[]", "correct": false}, {"option": "\"[]\"", "correct": false}, {"option": "\",,,,\"", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    function console() { \n    return func; \n    func = 10; \n    function func() {} \n    var func = 11; \n    } \n    alert(typeof console());\n</code></pre>", "options": [{"option": "number", "correct": false}, {"option": "function", "correct": true}, {"option": "undefined", "correct": false}, {"option": "string", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:   </p>\n<pre class=\"prettyprint\"><code> var func = function func() { \n    console.log(func === func); \n    }; \n    func();\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "ReferenceError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    (true + false) &gt; 2 + true;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "TypeError", "correct": false}, {"option": "NAN", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>     function bbb() { \n    return \n    { \n    test: 1 \n    }; \n    } \n    alert(typeof bbb());\n</code></pre>", "options": [{"option": "Function", "correct": false}, {"option": "Number", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "NAN", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    String('Hello') === 'Hello';\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>     new String(\"This is a string\") instanceof String;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    8&gt; 7 &gt; 6 === true;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "Error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    function func(a, b) { \n    arguments[1] = 2; \n    alert(b); \n    } \n    func(1);\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "NAN", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    NaN === NaN;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "TypeError", "correct": false}, {"option": "Uncaught exeption", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var x = 0; \n    function func() { \n    x++; \n    this.x = x; \n    return func; \n    } \n    var bar = new new func; \n    console.log(bar.x);\n</code></pre>", "options": [{"option": "ReferrenceError", "correct": false}, {"option": "TypeError", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    \"This is a string\" instanceof String;\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "TypeError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In  JavaScript, what is the purpose of the <code>&lt;noscript&gt;</code> tag?</p>", "options": [{"option": "It prevents scripts on the page from executing.", "correct": false}, {"option": "It encloses text to be displayed by non-JavaScript browsers.", "correct": true}, {"option": "It suppresses the result to be displayed on the web page.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes is used to hold the version?</p>", "options": [{"option": "SCRIPT", "correct": false}, {"option": "VERSION", "correct": false}, {"option": "LANGUAGE", "correct": true}, {"option": "VER", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a capability of functions?</p>", "options": [{"option": "Returning multiple values", "correct": false}, {"option": "Accepting parameters and returning values", "correct": true}, {"option": "Accepting parameters", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to insert special characters?</p>", "options": [{"option": "&", "correct": false}, {"option": "/", "correct": true}, {"option": "-", "correct": false}, {"option": "%", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "File is a server-side JavaScript object.", "correct": true}, {"option": "substring() cannot accept negative indexes.", "correct": false}, {"option": "substr() is similar to slice().", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is negative infinity?</p>", "options": [{"option": "A number which is derived by dividing a negative number by zero.", "correct": false}, {"option": "A number which is derived by dividing a number by a negative number.", "correct": false}, {"option": "A number which is derived by dividing a number by zero.", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a client-side object?</p>", "options": [{"option": "File", "correct": false}, {"option": "Function", "correct": false}, {"option": "FileUpload", "correct": true}, {"option": "Time", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of these statements is false?</p>", "options": [{"option": "JavaScript ignores extra spaces. ", "correct": true}, {"option": "JavaScript is not case sensitive.", "correct": false}, {"option": "The char() method is used to find out the character at a position in a string. ", "correct": false}, {"option": "JavaScript does not ignore extra spaces.  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n       &lt;!--\n          var myVar = \"HELLO\"; \n          function checkscope( ) {\n             var myVar = \"HI\";  \n             document.write(myVar);\n          }\n       //--&gt;\n    &lt;/script&gt;\n</code></pre>", "options": [{"option": "HI", "correct": true}, {"option": "HELLO", "correct": false}, {"option": "HI HELLO", "correct": false}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements about Java and JavaScript is true?</p>", "options": [{"option": "The syntax of JavaScript is loosely based on the Java syntax.", "correct": true}, {"option": "JavaScript is a stripped-down version of Java.", "correct": false}, {"option": "They both support Object Oriented Programming.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following ways of instantiating a date is incorrect?</p>", "options": [{"option": "new Date(dateString)", "correct": false}, {"option": "new Date()", "correct": false}, {"option": "new Date(seconds)", "correct": true}, {"option": "new Date(year, month, day, hours, minutes, seconds, milliseconds)", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, how do you refer an external script named as <strong>script.js</strong>?</p>", "options": [{"option": "< script href = \"script.js\">", "correct": false}, {"option": "< script source = \"script.js\">", "correct": false}, {"option": "< script name = \"script.js\">", "correct": false}, {"option": "< script src = \"script.js\">", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following settings is used to make the elements invisible?</p>", "options": [{"option": "visibilty", "correct": true}, {"option": "visible", "correct": false}, {"option": "invisibility", "correct": false}, {"option": "invisible", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not a variable name in JavaScript?</p>", "options": [{"option": "2java ", "correct": true}, {"option": " _java_and_ java _names ", "correct": false}, {"option": "javaandjava ", "correct": false}, {"option": "java2java ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is correct?</p>", "options": [{"option": "JavaScript is not case sensitive.", "correct": false}, {"option": "JavaScript statements can be grouped together in blocks.", "correct": true}, {"option": "The semicolon at the end of the statements is mandatory.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about JavaScript is incorrect?</p>", "options": [{"option": "JavaScript can react to events.", "correct": false}, {"option": "JavaScript can read and write HTML elements.", "correct": false}, {"option": "JavaScript can not be used to create cookies.", "correct": true}, {"option": "JavaScript is case-sensitive.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the entities begin with ____________ and the end with _____________.</p>", "options": [{"option": "A semicolon, a colon ", "correct": false}, {"option": "A semicolon, an ampersand ", "correct": false}, {"option": "An ampersand, a colon ", "correct": false}, {"option": "An ampersand, a semicolon ", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of the following is a server-side object in JavaScript?</p>", "options": [{"option": "Function", "correct": false}, {"option": "File", "correct": true}, {"option": "FileUpload", "correct": false}, {"option": "Date", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to display \u201cHello World\u201d on the web page?</p>", "options": [{"option": "System.out.println(\"Hello World\")", "correct": false}, {"option": "print(\"Hello World\")", "correct": false}, {"option": "document.write(\"Hello World\")", "correct": true}, {"option": "response.write(\"Hello World\")", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is generated if a JavaScript object is sent to Java?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}, {"option": "JSObject", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is triggered when the <code>&lt;button&gt;</code> and the <code>&lt;textarea&gt;</code> form elements lose focus?</p>", "options": [{"option": "Onclick", "correct": false}, {"option": "Ondblclick", "correct": false}, {"option": "Onfocus", "correct": false}, {"option": "Onblur", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is used to write arrays in JavaScript?</p>", "options": [{"option": "var salaries = new Array( 1:39438, 2:39839 3:83729)", "correct": false}, {"option": "var salaries = new (Array:1=39438, Array:2=39839, Array:3=83729)", "correct": false}, {"option": "var salaries = new Array(39438,39839,83729)", "correct": true}, {"option": "var salaries = new Array() values=39438,39839,83729", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to append the specified value to an array?</p>", "options": [{"option": "arr[arr.length] = value", "correct": true}, {"option": "arr[arr.length+1] = new Arrays()", "correct": false}, {"option": "arr[arr.length-1] = value", "correct": false}, {"option": "arr[arr.length*1] = value", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following holds true for writing an array?</p>", "options": [{"option": "var txt = new Array(1:\"arr\",2:\"kim\",3:\"jim\")", "correct": false}, {"option": "var txt = new Array:1=(\" arr \")2=(\"kim\")3=(\"jim\")", "correct": false}, {"option": "var txt = new Array(\"arr \",\"kim\",\"jim\")", "correct": true}, {"option": "var txt = new Array=\" arr \",\"kim\",\"jim\"", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>  var a = 5; \n    function one() { \n    a = 6; \n    } \n    function two() { \n    alert(a); \n    } \n    two();\n</code></pre><p></p>", "options": [{"option": "0", "correct": false}, {"option": "5", "correct": true}, {"option": "6", "correct": false}, {"option": "null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(({ valueOf:function() { return 1; } }) === true);\n</code></pre><p></p>", "options": [{"option": "Error", "correct": true}, {"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = (function a() \n    { \n    return '1'; \n    }, \n    function b() \n    { \n    return 2; \n    } \n    )(); \n    alert(typeof a);\n</code></pre><p></p>", "options": [{"option": "Function", "correct": false}, {"option": "String", "correct": false}, {"option": "Number", "correct": true}, {"option": "Uncaught exception", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the <strong>my_func(2)</strong> function in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function my_func(a) \n    { \n    var temp = 2; \n    function self(b) \n    { \n    alert(a + b + (++temp)); \n    } \n    self(9); \n    } \n    my_func(2);\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "16", "correct": false}, {"option": "13", "correct": false}, {"option": "14", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var p = 1, \n    q = function p(x) { \n    x &amp;&amp; p(x); \n    }; \n    alert(p);\n</code></pre><p></p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    !function () {}();\n</code></pre><p></p>", "options": [{"option": "Undefined", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "Error ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    x = 0.000002; \n    y = 0.000003; \n    result = (Math.abs(x,y) &lt; 0.000001) \n    alert(result);\n</code></pre><p></p>", "options": [{"option": "Error ", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function my_func(a, b, c) \n    { \n    arguments[2] = 10; \n    alert(c); \n    } \n    my_func(20, 20, 20);\n</code></pre><p></p>", "options": [{"option": "Error ", "correct": false}, {"option": "10", "correct": true}, {"option": "20", "correct": false}, {"option": "2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(typeof typeof(typeof(undefined)));\n</code></pre><p></p>", "options": [{"option": "Null", "correct": false}, {"option": "String", "correct": true}, {"option": "Undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(({ valueOf:function() { return 2; } }) == 2);\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    (1.22e-10).toFixed(2)\n</code></pre><p></p>", "options": [{"option": "0.00", "correct": true}, {"option": "122000000000000000000.00", "correct": false}, {"option": "0", "correct": false}, {"option": "0.0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    ~~(-5.5)\n</code></pre><p></p>", "options": [{"option": "5", "correct": false}, {"option": "-6", "correct": false}, {"option": "-5", "correct": true}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    alert(parseInt(1 / 0, 19));\n</code></pre><p></p>", "options": [{"option": "19", "correct": false}, {"option": "18", "correct": true}, {"option": "20", "correct": false}, {"option": "NaN", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    (function () {})()\n</code></pre><p></p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "Error ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    [[[[[[[22]]]]]]] == 22;\n</code></pre><p></p>", "options": [{"option": "True ", "correct": true}, {"option": "False ", "correct": false}, {"option": "Undefined ", "correct": false}, {"option": "Null", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>  parseInt( null, 24 ) === 23\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "Undefined", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    null == undefined\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "Error ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    ?,,,,? == Array(4)\n</code></pre><p></p>", "options": [{"option": "False ", "correct": true}, {"option": "True ", "correct": false}, {"option": "Undefined ", "correct": false}, {"option": "Null", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code> a = 5; \n    b = 4; \n    alert(a + +(+(+(+b))));\n</code></pre><p></p>", "options": [{"option": "9", "correct": true}, {"option": "14", "correct": false}, {"option": "19", "correct": false}, {"option": "18", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    !!~1\n</code></pre><p></p>", "options": [{"option": "Null", "correct": false}, {"option": "True", "correct": true}, {"option": "Error", "correct": false}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about the relationship behavior between JavaScript and DHTML is correct?</p>", "options": [{"option": "JavaScript is DHTML plus CSS plus Document Object Model.", "correct": false}, {"option": "DHTML is Document Object Model plus JavaScript plus CSS.", "correct": false}, {"option": "Document Object Model is JavaScript plus DHTML plus CSS.", "correct": true}, {"option": "JavaScript has nothing to do with DHTML.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about the relationship behavior between JavaScript and Java is correct?</p>", "options": [{"option": "JavaScript and Java are different names of the same thing.", "correct": false}, {"option": "The JavaScript code can call Java code.", "correct": true}, {"option": "Both the JavaScript code and the Java code is compiled into byte-code, which is then interpreted by the browser.", "correct": false}, {"option": "Browsers supporting Java support JavaScript as well.", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following JavaScript versions introduced the <strong>image swapping</strong> or the <strong>image roll-overs</strong> features?</p>", "options": [{"option": "JavaScript 1.0", "correct": false}, {"option": "JavaScript 1.1", "correct": true}, {"option": "JavaScript 1.2", "correct": false}, {"option": "JavaScript 1.3", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following corporations first implemented the JavaScript language?</p>", "options": [{"option": "Netscape Communications ", "correct": true}, {"option": "Microsoft ", "correct": false}, {"option": "Sun Microsystems ", "correct": false}, {"option": "A consortium of all the companies", "correct": false}], "level": "Medium"}, {"question": "<p>When was the first release of the browser that supports JavaScript?</p>", "options": [{"option": "1994", "correct": false}, {"option": "1995", "correct": true}, {"option": "1996", "correct": false}, {"option": "1997", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about comments is incorrect?</p>", "options": [{"option": "The comments can make the code easier to understand. ", "correct": false}, {"option": "The comments can not help hide the code from browsers that cannot interpret JavaScript. ", "correct": true}, {"option": "The comments can help display a warning to the users of the old browsers that do not support JavaScript. ", "correct": false}, {"option": "The comments can not make the code easier to understand. ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following browsers does not support JavaScript?</p>", "options": [{"option": "Microsoft Internet Explorer 3.02", "correct": false}, {"option": "Netscape Navigator 3.02", "correct": false}, {"option": "Opera 3.51", "correct": false}, {"option": "SunSoft HotJava 1.0", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is the original name of JavaScript?</p>", "options": [{"option": "JavaScript", "correct": false}, {"option": "LiveScript", "correct": true}, {"option": "WireScript", "correct": false}, {"option": "ECMAScript", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is the international standard of JavaScript?</p>", "options": [{"option": "ECMA-262 ", "correct": true}, {"option": "DHTML ", "correct": false}, {"option": "JavaScript 1.3 ", "correct": false}, {"option": "ISO-262 ", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following browsers was the first to support JavaScript?</p>", "options": [{"option": "Microsoft Internet Explorer 2.0 beta", "correct": false}, {"option": "Netscape Navigator 2.0 beta", "correct": true}, {"option": "Opera 2.0 beta", "correct": false}, {"option": "SunSoft HotJava 2.0 beta", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not a logical operator in JavaScript?</p>", "options": [{"option": "&&", "correct": false}, {"option": "&", "correct": true}, {"option": "||", "correct": false}, {"option": "!", "correct": false}], "level": "Medium"}, {"question": "<p>The Javascript code is not triggered from an event handler when _______________.</p>", "options": [{"option": "Another event is still being processed", "correct": false}, {"option": "Javascript is disabled", "correct": true}, {"option": "The page uses stylesheets", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following options are provided by Netscape?</p>", "options": [{"option": "Debugger and error finder", "correct": false}, {"option": "Console and debugger", "correct": true}, {"option": "Debugger and trace", "correct": false}, {"option": "Trace and error finder", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is triggered automatically at regular intervals?</p>", "options": [{"option": "onload", "correct": false}, {"option": "setTimeout", "correct": false}, {"option": "setInterval", "correct": true}, {"option": "setAutomatic", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a valid argument in JavaScript?</p>", "options": [{"option": "x", "correct": true}, {"option": "3", "correct": false}, {"option": "4.5", "correct": false}, {"option": "None of  these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following can cause a while loop to exit?</p>", "options": [{"option": "Any variable in the loop being set to false", "correct": false}, {"option": "A break statement", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is not just a mathematical operator in JavaScript?</p>", "options": [{"option": "/", "correct": false}, {"option": "*", "correct": false}, {"option": "-", "correct": false}, {"option": "+", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, how many semi-colon separated statements are used to control the <strong>for</strong> loop?</p>", "options": [{"option": "One", "correct": false}, {"option": "Two", "correct": false}, {"option": "Three", "correct": true}, {"option": "Four", "correct": false}], "level": "Medium"}, {"question": "<p>What is the value of the <strong>a</strong> variable the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a= \u00b4A\u00b4; var b = 2; a = b;\n</code></pre><p></p>", "options": [{"option": "Text", "correct": false}, {"option": "A number", "correct": true}, {"option": "True", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements about loops is correct?</p>", "options": [{"option": "It is an executable statement or a block.", "correct": true}, {"option": "It is a group of individual statements.", "correct": false}, {"option": "It is a group of individual blocks.", "correct": false}, {"option": "It is a function call statement.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements about strings is incorrect?</p>", "options": [{"option": "A string is converted to upper case with UpperCase().", "correct": false}, {"option": "A string is converted to lower case with LowerCase():", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following DOM methods is supported by Netscape 4?</p>", "options": [{"option": "getElementById ", "correct": false}, {"option": "layer ", "correct": true}, {"option": "getElementsByTagName ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements about the running behavior of <code>do while (a &lt; b)</code> is correct?</p>", "options": [{"option": "until a >= b", "correct": true}, {"option": "until a < b", "correct": false}, {"option": "until a > b", "correct": false}, {"option": "until a <= b", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is executed when the field loses focus?</p>", "options": [{"option": "onmouseout", "correct": false}, {"option": "onblur", "correct": true}, {"option": "onunfocus", "correct": false}, {"option": "onkeyup", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to define an array?</p>", "options": [{"option": "var new array = myarray;", "correct": false}, {"option": "var myarray = array new;", "correct": true}, {"option": "var new Array() = myarray;", "correct": false}, {"option": "var myarray = new Array();", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following keywords is used to catch all the values except those specified?</p>", "options": [{"option": "otherwise ", "correct": false}, {"option": "default ", "correct": true}, {"option": "any ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to reference a part of the string?</p>", "options": [{"option": "txt.substr(5,6);", "correct": true}, {"option": "text.part(5,6);", "correct": false}, {"option": "text.piece(5,6);", "correct": false}, {"option": "text.split(5,6);", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to define a numerical value?</p>", "options": [{"option": "var mynum = new Math;", "correct": false}, {"option": "var mynum = Math(6);", "correct": false}, {"option": "var mynum = 6;", "correct": true}, {"option": "Math.mynum = 6;", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to locate the first occurrence of the specified character in a string?</p>", "options": [{"option": "find", "correct": false}, {"option": "locate", "correct": false}, {"option": "indexOf() ", "correct": true}, {"option": "countTo() ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements is used to attach an external JavaScript file?</p>", "options": [{"option": "<script source=ext.js\" ...", "correct": false}, {"option": "<script src=\"ext.js\" ...", "correct": true}, {"option": "<script external=\"ext.js\" ...", "correct": false}, {"option": "<external src=\"ext.js\" ...", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how many alert boxes can appear in a browser at once?</p>", "options": [{"option": "One", "correct": true}, {"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "Four", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following internet-options tabs is used to switch on debugging in Internet Explorer?</p>", "options": [{"option": "General", "correct": false}, {"option": "Content", "correct": false}, {"option": "Programs", "correct": false}, {"option": "Advanced", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following operators is used to perform multiplication?</p>", "options": [{"option": "x", "correct": false}, {"option": "*", "correct": true}, {"option": "X", "correct": false}, {"option": "+", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, when is the control statement on <strong>do-while</strong> loops tested?</p>", "options": [{"option": "Before each time through the loop", "correct": false}, {"option": "After each time through the loop", "correct": true}, {"option": "Once at the end", "correct": false}, {"option": "Once at the start", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to calculate the area of a circle?</p>", "options": [{"option": "area = pi * r ^2;", "correct": false}, {"option": "area = Math.PI * r^2;", "correct": false}, {"option": "area = Math.PI * Math.sqr(r);", "correct": false}, {"option": "area = Math.PI * r * r;", "correct": true}], "level": "Medium"}, {"question": "<p>Where are the event handlers added in JavaScript?</p>", "options": [{"option": "At the external Javascript.", "correct": false}, {"option": "In the Javascript code.", "correct": false}, {"option": "At the HTML.", "correct": false}, {"option": "Within the HTML that is to trigger the event", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, what does the <strong>View Source</strong> Bookmarklet display?</p>", "options": [{"option": "The original source", "correct": false}, {"option": "The source and all Javascript values", "correct": false}, {"option": "The source after applying changes", "correct": true}, {"option": "The source and all images", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to set a four digit year?</p>", "options": [{"option": "setyear()", "correct": false}, {"option": "setfullyear()", "correct": false}, {"option": "setYear()", "correct": false}, {"option": "setFullYear()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events causes a delay?</p>", "options": [{"option": "ondelay", "correct": false}, {"option": "setTimeout", "correct": true}, {"option": "setDelay", "correct": false}, {"option": "ontimeout", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following values can be returned by the functions in JavaScript?</p>", "options": [{"option": "Text", "correct": false}, {"option": "True or False", "correct": false}, {"option": "Numbers", "correct": false}, {"option": "Variable or object", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is not triggered by clicking the field with the mouse?</p>", "options": [{"option": "onfocus", "correct": false}, {"option": "onclick", "correct": false}, {"option": "onkeydown", "correct": true}, {"option": "onmousedown", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to reference an entry in an array?</p>", "options": [{"option": "myarray(entry)", "correct": false}, {"option": "myarray[entry]", "correct": true}, {"option": "myarray{entry}", "correct": false}, {"option": "myarray<entry>", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>++</strong> operator in JavaScript?</p>", "options": [{"option": "It adds two numbers.", "correct": false}, {"option": "It joins two text strings together.", "correct": false}, {"option": "It adds 1 to the number.", "correct": true}, {"option": "It adds 2 to the number.", "correct": false}], "level": "Easy"}, {"question": "<p>How many event triggers can a web page contain in JavaScript?</p>", "options": [{"option": "One", "correct": false}, {"option": "One per HTML tag", "correct": false}, {"option": "As many as needed", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following characters is at the beginning of variable names?</p>", "options": [{"option": "An underscore", "correct": false}, {"option": "A comma", "correct": false}, {"option": "A letter", "correct": false}, {"option": "An underscore or a letter", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these is the main purpose of JavaScript in a web browser?</p>", "options": [{"option": "Creating animations and other visual effects ", "correct": true}, {"option": "User interface ", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "Visual effects", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is used to traverse and manipulate the document contents of the program?</p>", "options": [{"option": "Element ", "correct": false}, {"option": "Document ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to define the behavior of the document element?</p>", "options": [{"option": "Document object", "correct": false}, {"option": "Registering appropriate event handlers", "correct": true}, {"option": "Element object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the service that enables networking through the scripted HTTP requests is called as the _______________.</p>", "options": [{"option": "XMLHttpResponse ", "correct": false}, {"option": "XMLRequest ", "correct": false}, {"option": "XMLHttpRequest ", "correct": true}, {"option": "XMLHttpsRequest ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is specified by HTML5 in contrast to JavaScript?</p>", "options": [{"option": "Data storage ", "correct": false}, {"option": "Graphics APIs ", "correct": false}, {"option": "Other APIs for the web apps ", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the code between a pair of the <strong>script</strong> tags is referred to as the _____________.</p>", "options": [{"option": "Non-inline", "correct": false}, {"option": "External", "correct": false}, {"option": "Referenced", "correct": false}, {"option": "Inline", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following does a Client-side JavaScript code is embedded within HTML documents?</p>", "options": [{"option": " A URL that uses the special javascript:encoding", "correct": false}, {"option": "A URL that uses the special javascript:stack", "correct": false}, {"option": "A URL that uses the special javascript:protocol", "correct": true}, {"option": " A URL that uses the special javascript:code\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not an advanced service in JavaScript?</p>", "options": [{"option": "Data storage", "correct": false}, {"option": "Networking", "correct": false}, {"option": "XMLHttpRequest object", "correct": false}, {"option": "None of these\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web pages is used to communicate with server-side CGI scripts through HTML form submissions?</p>", "options": [{"option": "Static ", "correct": false}, {"option": "Interactive ", "correct": true}, {"option": "Conditional ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why do JavaScript and Java have similar names?</p>", "options": [{"option": "JavaScript is a stripped-down version of Java.", "correct": false}, {"option": "JavaScript's syntax is loosely based on that of Java's.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is also called as the client-side JavaScript?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Navigator", "correct": true}, {"option": "LiveWire", "correct": false}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is also called as the server-side JavaScript?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Navigator", "correct": false}, {"option": "LiveWire", "correct": true}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "<p>What should appear at the end of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    The &lt;script LANGUAGE=\"\"JavaScript\"\"&gt;tag\"\n</code></pre><p></p>", "options": [{"option": "</script>", "correct": true}, {"option": "<script>", "correct": false}, {"option": "The END statement", "correct": false}, {"option": "LANGUAGE", "correct": false}], "level": "Easy"}, {"question": "<p>What cannot be done with client-side JavaScript?</p>", "options": [{"option": "Validating a form", "correct": false}, {"option": "Sending a form's contents by email", "correct": false}, {"option": "Storing the form's contents to a database file on the server", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following capabilities are included in functions?</p>", "options": [{"option": "Return values", "correct": false}, {"option": "Accept parameters and return values", "correct": false}, {"option": "Accept parameters", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not a variable name in JavaScript?</p>", "options": [{"option": "2names", "correct": true}, {"option": " _first_and_last_names", "correct": false}, {"option": "FirstAndLast", "correct": false}, {"option": "name12", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags is used to encircle multiple statements in JavaScript?</p>", "options": [{"option": "<SCRIPT>", "correct": true}, {"option": "<BODY>", "correct": false}, {"option": "<HEAD>", "correct": false}, {"option": "<TITLE>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes includes the version details?</p>", "options": [{"option": "Language", "correct": true}, {"option": "Script", "correct": false}, {"option": "Version", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to indicate the <strong>LANGUAGE</strong> attribute?</p>", "options": [{"option": "<LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">    JavaScript statements\u2026</SCRIPT>", "correct": true}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\"!>    JavaScript statements\u2026</SCRIPT>", "correct": false}], "level": "Easy"}, {"question": "<p>Which of following image maps is used in JavaScript?</p>", "options": [{"option": "Server-side ", "correct": false}, {"option": "Client-side ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to change the text within the paragraph which includes the <strong>para1</strong> DOM object?</p>", "options": [{"option": "\"New Text\"", "correct": false}, {"option": "para1.value=\"New Text\";", "correct": true}, {"option": "para1.firstChild.nodeValue= \"New Text\";", "correct": false}, {"option": "para1.nodeValue=\"New Text\";", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about JavaScript is correct?</p>", "options": [{"option": "It is a low-level programming language.", "correct": false}, {"option": "It is a scripting language pre-compiled in the browser.", "correct": false}, {"option": "It is a compiled scripting language.", "correct": false}, {"option": "It is an object-oriented scripting language.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following operators is not supported by JavaScript?</p>", "options": [{"option": "new", "correct": false}, {"option": "this", "correct": true}, {"option": "delete", "correct": false}, {"option": "typeof", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the correct syntax for the <strong>Eval</strong> function?</p>", "options": [{"option": "[objectName.]eval(numeric)].", "correct": false}, {"option": "[objectName.]eval(string)", "correct": true}, {"option": "[EvalName.]eval(string)", "correct": false}, {"option": "[EvalName.]eval(numeriC.\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is used to interpret JavaScript code?</p>", "options": [{"option": "Client", "correct": true}, {"option": "Server", "correct": false}, {"option": "Object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to test for a specific condition in JavaScript?</p>", "options": [{"option": "Select", "correct": true}, {"option": "If", "correct": false}, {"option": "Switch", "correct": false}, {"option": "For", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following algorithms supports the <strong>blob</strong> objects in JavaScript?</p>", "options": [{"option": "Structured clone", "correct": true}, {"option": "Double buffer", "correct": false}, {"option": "Chen\u2019s ", "correct": false}, {"option": "Retrieval ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to create the <strong>Date</strong> objects in JavaScript?</p>", "options": [{"option": "dateObjectName = new Date([parameters])", "correct": true}, {"option": "dateObjectName.new Date([parameters])", "correct": false}, {"option": "dateObjectName += new Date([parameters])", "correct": false}, {"option": "dateObjectName Date([parameters])", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to add or remove elements from arrays?</p>", "options": [{"option": "Reverse", "correct": false}, {"option": "Shift", "correct": false}, {"option": "Slice", "correct": false}, {"option": "Splice", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to mount up the windows that can capture all <strong>Click</strong> events?</p>", "options": [{"option": "window.captureEvents(Event.CLICK);", "correct": true}, {"option": "window.handleEvents (Event.CLICK);", "correct": false}, {"option": "window.routeEvents(Event.CLICK );", "correct": false}, {"option": "window.raiseEvents(Event.CLICK );", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following elements is used to handle the mouse events in Netscape?</p>", "options": [{"option": "<IMG>", "correct": false}, {"option": "<A>", "correct": true}, {"option": "<BR>", "correct": false}, {"option": "<h>", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a tainted property of the window object?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Protocol", "correct": false}, {"option": "Defaultstatus", "correct": true}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is used to enable data tainting in JavaScript?</p>", "options": [{"option": "ENABLE_TAINT", "correct": false}, {"option": "MS_ENABLE_TAINT", "correct": false}, {"option": "NS_ENABLE_TAINT", "correct": true}, {"option": "ENABLE_TAINT_NS", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is created when an object is sent to Java?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is used to provide an interface that can invoke methods and examine properties?</p>", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a wrapped array that is accessed from its code?</p>", "options": [{"option": "JavaArray", "correct": true}, {"option": "JavaClass", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, which of the following is a reference to the classes in the Java package?</p>", "options": [{"option": "JavaArray", "correct": false}, {"option": "JavaClass", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following instances is available to the Java code?</p>", "options": [{"option": "netscape.javascript.JSObject", "correct": false}, {"option": "netscape.javascript.JSException", "correct": true}, {"option": "netscape.plugin.JSException", "correct": false}, {"option": "netscape.java.JSException", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is added to the <strong>prefs.js</strong> file to automatically open the console at the occurrence of an error?</p>", "options": [{"option": "user_pref(\" javascript.console.open_on_error\", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error\", true);", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is added to the <strong>prefs.js</strong> file to open a dialog box at the occurrence of an error?</p>", "options": [{"option": "user_pref(\"javascript.classic.error_alerts\", true);", "correct": true}, {"option": "user_pref(\"javascript.classic.error_alerts \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", false);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the correct syntax of the <strong>blur</strong> method in the <strong>button</strong> object?</p>", "options": [{"option": "Blur()", "correct": true}, {"option": "Blur(contrast)", "correct": false}, {"option": "Blur(value)", "correct": false}, {"option": "Blur(depth)", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the correct syntax of the <strong>capture events</strong> method for the <strong>document</strong> object?</p>", "options": [{"option": "captureEvents()", "correct": false}, {"option": "captureEvents(args eventType)", "correct": false}, {"option": "captureEvents(eventType)", "correct": true}, {"option": "captureEvents(eventVal)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the correct syntax of the <strong>close</strong> method for the <strong>document</strong> object?</p>", "options": [{"option": "Close(doC.)", "correct": false}, {"option": "Close(object)", "correct": false}, {"option": "Close(val)", "correct": false}, {"option": "Close()", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n    y=4+\"4\";\n    document.write(y);\n    &lt;/script&gt;\n</code></pre><p></p>", "options": [{"option": "44", "correct": true}, {"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "4\"4\"", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In JavaScript, which of the following statements about declarations is correct?</p>", "options": [{"option": "Storing a value in a variable is called variable declaration.", "correct": false}, {"option": "The var keyword is used only for declarations.", "correct": false}, {"option": "The var keyword is used for the declarations or the initialization.", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the scripting language is a _____________ level programming language.</p>", "options": [{"option": "High", "correct": true}, {"option": "Assembly ", "correct": false}, {"option": "Machine ", "correct": false}, {"option": "Low ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What does the <strong>getSelection()</strong> method return in JavaScript?</p>", "options": [{"option": "The value of a selected option", "correct": false}, {"option": "The document.URL of the window in focus", "correct": false}, {"option": "The value of the cursor-selected text", "correct": true}, {"option": "The value of a checked radio input", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which of the following is a client-side object in JavaScript?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Medium"}, {"question": "<p>What is the significance of the \"this\" keyword in JavaScript?</p>", "options": [{"option": "It refers the current object.", "correct": true}, {"option": "It refers the previous object.", "correct": false}, {"option": "It is a variable which contains a value.", "correct": false}, {"option": "It refers to the current-next value.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    d();\n    console.log(a);\n\n    var a='abc';\n    function d()\n    {\n    console.log(\"called d!\");\n    }\n\n</code></pre><p></p>", "options": [{"option": "Undefined\r\n ", "correct": false}, {"option": "called d!\r\n ", "correct": true}, {"option": "called d!\r\nabc", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code snippet:</p>\n<pre class=\"prettyprint\"><code>var a;\n\nif (a===undefined)\n\n{\n\n    console.log('a is not defined!');\n\n }\n\nelse\n\n{\n\n    console.log('a is defined!');\n\n}\n</code></pre>", "options": [{"option": "a is defined!  ", "correct": false}, {"option": "a is not defined!  ", "correct": true}, {"option": "Runtime error  ", "correct": false}, {"option": "Compilation error  ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>      var a='Hello World!';\n         console.log(a);\n           a = undefined;\n          if(a===undefined)\n            {\n            console.log('a is not defined!');\n            }\n            else\n            {\n            console.log('a is defined!');\n        }\n\n</code></pre><p></p>", "options": [{"option": "Hello World!\r\na is not defined!", "correct": true}, {"option": "Hello World!\r\na is defined!", "correct": false}, {"option": "a is defined!", "correct": false}, {"option": "Hello World!", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hack(){\n    var myvar;\n    console.log(myvar);\n    }\n\n    function hacker(){\n    var myvar=2;\n    console.log(myvar);\n    hack();\n    }\n    var myvar=5;\n    console.log(myvar);\n    hacker();\n    console.log(myvar);\n</code></pre><p></p>", "options": [{"option": "Undefined\r\n2\r\n5\r\n5", "correct": false}, {"option": "5\r\n2\r\nUndefined\r\n5", "correct": true}, {"option": "5\r\n5\r\nUndefined\r\n2", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hack(){\n    console.log(myvar);\n    }\n\n    function hacker(){\n    var myvar=2;\n    hack();\n    }\n    var myvar=1;\n     hacker();\n</code></pre><p></p>", "options": [{"option": "Undefined", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Undefined\r\n1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>        function hack(){\n        function hacker(){\n       console.log(myvar);\n        }\n        var myvar=2;\n        hacker();\n        }\n        var myvar=1;\n         hack();\n        hacker();\n</code></pre><p></p>", "options": [{"option": "2, undefined  ", "correct": false}, {"option": "2, Uncaught referenceError: hacker is not defined", "correct": true}, {"option": "2, 1  ", "correct": false}, {"option": "1, 2", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a=4,b=6,c=9;\n\n    c=b=a;\n    console.log(c);\n\n</code></pre><p></p>", "options": [{"option": "9", "correct": false}, {"option": "4", "correct": true}, {"option": "6", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a=1+'1'\n    console.log(a);\n</code></pre><p></p>", "options": [{"option": "2", "correct": false}, {"option": "11 ", "correct": true}, {"option": "101 ", "correct": false}, {"option": "0 ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code snippet:</p>\n<pre class=\"prettyprint\"><code>  console.log(3&lt;2&lt;1);\n</code></pre>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code snippet:  </p>\n<pre class=\"prettyprint\"><code>  console.log(\" \"== 0);\n</code></pre>", "options": [{"option": "false   ", "correct": false}, {"option": "true  ", "correct": true}, {"option": "uncaught syntaxError  ", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a;\n    a=0;\n    if(a||a ===0)\n    {\n    console.log('Hack');\n    }\n\n</code></pre><p></p>", "options": [{"option": "Uncaught referenceError", "correct": false}, {"option": "Hack", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements is used to declare a module in <strong>JSON</strong>?</p>", "options": [{"option": "<module name=\"xyz\"     path=\"link\"     style=\"display\">", "correct": false}, {"option": "<module id=\"xyz\"           url=\"link\"       style=\"display\">", "correct": false}, {"option": "<module name=\"xyz\"      src=\"link\"     style=\"display\">", "correct": false}, {"option": "<module id=\"xyz\"           src=\"link\"       style=\"display\">", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is true for this code in Java:</p>\n<pre class=\"prettyprint\"><code>class demo&lt;a&gt; { \n        a ob;   \n             }\n</code></pre>", "options": [{"option": "This shows a generic class declaration.", "correct": false}, {"option": "This shows a declaration of a variable. ", "correct": false}, {"option": "This shows a simple class declaration.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is used to get information about the use and ability of types in Java?</p>", "options": [{"option": "Runtime ID ", "correct": false}, {"option": "Reflection ", "correct": true}, {"option": "Runtime Polymorphism ", "correct": false}, {"option": "Polymorphism", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following symbols is used by the test in the call to the <strong><code>get()</code></strong> function?</p>", "options": [{"option": ":show", "correct": true}, {"option": ";show", "correct": false}, {"option": "#show", "correct": false}, {"option": "&show", "correct": false}], "level": "Hard"}, {"question": "<p>In C++, a <strong>friend</strong> function can access all the private members of the class in which it is defined.</p>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>    int num[2][3]={ {1,2}, {3,4}, {5, 6} };\n</code></pre>", "options": [{"option": "Assigns a value 2 to num[1][2]  ", "correct": false}, {"option": "Assigns a value 4 to num[1][2]  ", "correct": false}, {"option": "Gives an error message  ", "correct": true}, {"option": "Assigns a value 3 to num[1][2]  ", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following statements generates a compilation error?</p>", "options": [{"option": "Integer results[ ] = {new Integer(3), new Integer(5), new Integer(8)};  ", "correct": false}, {"option": "boolean results[ ] = new boolean [] {true, false, true};  ", "correct": false}, {"option": "String cats[ ] = {\"Fluffy\", \"Spot\", \"Zeus\"};  ", "correct": false}, {"option": "int [ ][ ] scores = {2,7,6}, {9,3,45};  ", "correct": true}, {"option": "int[ ] scores = {3, 5, 7};  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following interfaces stores elements in a collection that guarantees that no duplicates are stored and all elements can be accessed in the natural order?</p>", "options": [{"option": "Array ", "correct": false}, {"option": "Set ", "correct": true}, {"option": "List ", "correct": false}, {"option": "Queue ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, the <strong>auto-increment (++)</strong> and the <strong>auto-decrement (--)</strong> operators work on floating point values.</p>", "options": [{"option": "True", "correct": true}, {"option": "False\r\n  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p><code>public class test34 {\n        public static void main(String[] args) {\n            int b1=80;\n            int b2=10;\n            int b3;\n            b3 = ++b1 * b1 /100 + ++b2;\n            System.out.println(\"b3 = \" + b3);\n        } }</code></p>", "options": [{"option": "b3=81", "correct": false}, {"option": "b3=175", "correct": false}, {"option": "b3=176", "correct": false}, {"option": "b3 =76", "correct": true}], "level": "Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class test34 {\n    private int variableA = showOutput();\n    static final int variableB = 20;\n    private int showOutput(){\n        return variableB;\n    }\n    public static void main(String[] args) {\n        System.out.println((new test34()).variableB);\n    }}\n</code></pre>", "options": [{"option": "20", "correct": true}, {"option": "0", "correct": false}, {"option": "200", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>To execute the threads one after another_________</p>", "options": [{"option": " the keyword synchronize is used. ", "correct": false}, {"option": " the keyword synchronizable is used. ", "correct": false}, {"option": " the keyword synchronized is used. ", "correct": true}, {"option": "the keyword sync is used.", "correct": false}], "level": "Medium"}, {"question": "<p>Methods declared as _________ cannot be overridden.</p>", "options": [{"option": "public,static or abstract", "correct": false}, {"option": "public or final", "correct": false}, {"option": "private, static or final", "correct": true}, {"option": "final", "correct": false}], "level": "Easy"}, {"question": "<p>By default, all java program belongs to ________.</p>", "options": [{"option": "java.String class", "correct": false}, {"option": "java.io class", "correct": false}, {"option": "java.lang string", "correct": false}, {"option": "java.lang package", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class test34 {\n    static String value = \"testify\";\n    static int value1=25;\n    static {\n        value1=50;\n        System.out.println(value);\n    System.out.println(value1); }\n    public static void main(String args[])\n    { }\n    {\n        System.out.println(value);\n    }}\n</code></pre>", "options": [{"option": "testify\r\n25", "correct": false}, {"option": "25\r\n50", "correct": false}, {"option": "testify\r\ntestify", "correct": false}, {"option": "testify\r\n50", "correct": true}], "level": "Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>  public class Hacker{\n    public static void main(String[] args)\n    {\n        int varA = 0;\n        addTwo(varA++);\n    System.out.println(varA);}\n    void addTwo(int varA) {\n        varA += 3;\n    }\n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class CommandLine {\n    public static void main(String [] args) {\n        String [] arg;\n        int x;\n        x = args.length;\n        for (int y = 1; y &lt;= x; y++) {\n            System.out.print(\" \" + args[y]);\n        }\n    }\n}\n</code></pre>\n<p>and the command-line invocation,\njava CommandLine 1 2 3</p>\n<p>What is the output of the above program?</p>", "options": [{"option": "1 2 3", "correct": false}, {"option": "0 0 0", "correct": false}, {"option": "Null Null Null", "correct": false}, {"option": "An Exception is thrown at Runtime", "correct": true}], "level": "Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>public class TestHack{\n    public static void main(String [] args) {\n        String s1 = args[1];\n        String s2 = args[2];\n        String s3 = args[3];\n        System.out.print(\" args[2] = \" + s2);\n    }\n}\n</code></pre>\n<p>and the command-line invocation,\njava TestHack 1 2 3 </p>\n<p>What is the result of the  above Java Code:</p>", "options": [{"option": "args[2]=1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An Exception is thrown at runtime", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> public class TestHack{\n    public static void main(String [] args) {\n        String s1 = args[1];\n        String s2 = args[2];\n        System.out.print(\" args[2] = \" + s2);\n    }\n}\n</code></pre>\n<p>and the command-line invocation,\njava TestHack 1 2 3</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "args[2]=1", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the numerical range of the data type <strong>short</strong> in java?</p>", "options": [{"option": "0 to  32,767", "correct": false}, {"option": "\u2013 32,768 to 32,767", "correct": true}, {"option": "\u2013 128 to 127", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the width of data type <strong>int</strong> in Java?</p>", "options": [{"option": "16", "correct": false}, {"option": "8", "correct": false}, {"option": "32", "correct": true}, {"option": "64", "correct": false}], "level": "Medium"}, {"question": "<p>Which one is the valid declaration of <strong>String</strong> in Java?</p>", "options": [{"option": "String s5 = 'null';\r\n", "correct": false}, {"option": "String s1 = null;\r\n", "correct": true}, {"option": "String s5 = \u201cstrings rule\u201d\r\n", "correct": false}, {"option": "String s5 = \"null\";", "correct": false}], "level": "Easy"}, {"question": "<p>Which one correctly represent <strong>character literals</strong> in Java?</p>", "options": [{"option": "char a = 'a';\r\n", "correct": true}, {"option": "char letterN = \\u004E;\r\n", "correct": false}, {"option": "char String s=\\u004E;", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which one is the correct way to declare a <strong>multi-dimensional array</strong>?</p>", "options": [{"option": "int[][] num = new int[5][2];", "correct": false}, {"option": "int num[][] = new int[5][2];", "correct": false}, {"option": "int[] num[] = new int[5][2];", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the default value of <strong>Object reference</strong> in Java?</p>", "options": [{"option": "0", "correct": false}, {"option": "false", "correct": false}, {"option": "null\r\n", "correct": true}, {"option": "\u2018\\u0000\u2019\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is <strong>Nonaccess</strong> modifiers?</p>", "options": [{"option": "strictfp\r\n", "correct": false}, {"option": "final", "correct": false}, {"option": "abstract", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Super{\n    public final void showSample() {\n        System.out.println(\"One\");\n    }\n}\nclass Sub extends Super{\n    public void showSample(){\n        System.out.println(\"Another thing.\");\n    }\n}\n</code></pre>", "options": [{"option": "One", "correct": false}, {"option": "Another thing", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "One\r\nAnother thing", "correct": false}], "level": "Medium"}, {"question": "<p>What will happen when we compile the below Java code:</p>\n<pre class=\"prettyprint\"><code>public abstract class A {\n    abstract void foo();\n}\nclass B extends A {\n    void foo(int I) {\n    }\n}\n</code></pre>", "options": [{"option": "It will compile successfully.", "correct": false}, {"option": "It will compile and run successfully without output.", "correct": false}, {"option": "Compile time error.", "correct": true}, {"option": "Runtime error.", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>  interface i1 {\n    int i = 0;\n}\ninterface i2 {\n    int i = 0;\n}\nclass inter implements i1, i2 {\n    public static void main(String[] a) {\n        System.out.println(i);\n    }\n}\n</code></pre>", "options": [{"option": "Runtime Error\r\n", "correct": false}, {"option": "Prints: 0\r\n", "correct": false}, {"option": "No output\r\n", "correct": false}, {"option": "Compilation Error\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\n    public static void main(String args[] ) throws Exception {\n        TestClass junk = new TestClass();\n        junk.sampleMap();\n    }\n    public void sampleMap(){\n        TreeMap tm = new TreeMap();\n        tm.put(\"a\",\"Hello\");\n        tm.put(\"b\",\"Java\");\n        tm.put(\"c\",\"World\");\n        Iterator it = tm.keySet().iterator();\n        while(it.hasNext()){\n            System.out.print(it.next());\n        }\n    }\n}\n</code></pre>", "options": [{"option": " abc\r\n", "correct": true}, {"option": " HelloJavaWorld\r\n", "correct": false}, {"option": " abc   HelloJavaWorld", "correct": false}, {"option": " Runtime error\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following <strong>modifier</strong> cannot be applied to the declaration of a field\n(member variable of a class)?</p>", "options": [{"option": " protected\r\n", "correct": false}, {"option": "private\r\n", "correct": false}, {"option": "final\r\n", "correct": false}, {"option": "abstract\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements are valid <strong>3 dimensional character array</strong>\ndeclarations?</p>", "options": [{"option": " char[][][] charArray = {{'a', 'b'}, {'c', 'd'}, {'e', 'f'}};\r\n", "correct": false}, {"option": "char[][][] charArray = new char[2][2][];\r\n", "correct": false}, {"option": "char[][][] charArray = {{{'a', 'b'}, {'c', 'd'}, {'e', 'f'}}};\r\n", "correct": false}, {"option": "Both b and c", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Test{\n    public static void main(String args[]) {\n        String s1 = \"Its Great\";\n        String s2 = \"Its Tricky\";\n        System.out.print(s1.concat(s2).length() + \" \");\n        System.out.print(s1.concat(s2.substring(1, s1.length())).length());\n    }\n}\n</code></pre>", "options": [{"option": "18 17", "correct": false}, {"option": "20 18\r\n", "correct": false}, {"option": "19 17\r\n", "correct": true}, {"option": "19 20", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following options is true about <strong>multi-level inheritance</strong>?</p>", "options": [{"option": "Inheriting from two super classes\r\n", "correct": false}, {"option": "Inheriting from a class which is already in an inheritance\r\nhierarchy.\r\n", "correct": true}, {"option": "Inheriting from more than one super class.\r\n", "correct": false}, {"option": "Inheriting from a single class.\r\n", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Consider the following code snippet:</p>\n<pre class=\"prettyprint\"><code>String deepak = \"Did Deepak see bees Deepak did.\";\n</code></pre>\n<p>Which of the following method calls would refer to the letter <strong>b</strong> in the string\nreferred by the variable deepak?</p>", "options": [{"option": " charAt(16)\r\n", "correct": false}, {"option": " charAt(15)\r\n", "correct": true}, {"option": " charAt(12)\r\n", "correct": false}, {"option": " charAt(13)\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> public class Test {\n    public static void main(String [] args) {\n        int j = 2, y = 3, z = 10;\n        for (;j &lt; 6;j++) {\n            y = (++y + z++);\n            System.out.println(y+z);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "25, 38, 52, 67\r\n", "correct": true}, {"option": "24, 38, 52, 68", "correct": false}, {"option": "27, 41, 56, 72", "correct": false}, {"option": "24, 38, 5, 68", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Test {\n    public static void main(String[] args) {\n        int[][] a1 = {{1,2,3},{4,5,6},{7,8,9,10}};\n        System.out.print(a1[0][2]+\",\"+a1[1][0]+\",\"+a1[2][1]);\n    }}\n</code></pre>", "options": [{"option": " Run-time error\r\n", "correct": false}, {"option": "7, 2, 6\r\n", "correct": false}, {"option": "3, 4, 8\r\n", "correct": true}, {"option": "Compile time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Two {\n    public static void main(String args[]) {\n    int z = 8;\n    z += --z;\n    System.out.println(\"Value of z : \" + z);\n    }\n    }\n</code></pre>", "options": [{"option": "Value of z : 14", "correct": false}, {"option": "Value of z : 15\r\n", "correct": true}, {"option": "Value of z : 16", "correct": false}, {"option": "Value of z : 13", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following code segment:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n\nint z = 8;\n    z /= z--;\n    System.out.println(\"Value of z : \" + z);\n    }\n}\n</code></pre>\n<p>Which of the following gives the valid output for above?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n    public static void main(String args[] ) throws Exception {\n        int x = 10;\n        switch(x) {\n            case 10: System.out.println(\"10\");\n            case 10: System.out.println(\"10\");\n            case 20: System.out.println(\"20\");\n            default: System.out.println(\"30\");\n        }}}\n</code></pre>", "options": [{"option": "10  10  20\r\n", "correct": false}, {"option": "30\r\n", "correct": false}, {"option": "10  10\r\n", "correct": false}, {"option": " Compilation Error\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n        String d = \"java \";\n        d += d;\n        d += \"world of \";\n        String c=d.concat(\"programming \");\n        System.out.println(c.toUpperCase());\n    }\n}\n</code></pre>", "options": [{"option": "java java world of\r\n", "correct": false}, {"option": "JAVA JAVA WORLD OF PROGRAMMING ", "correct": true}, {"option": "java java world of programming\r\n", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n        String d = \"java \";\n        d += d;\n        d += \"world of \";\n        d.concat(\"programming \");\n        System.out.println(d);\n    }\n}\n</code></pre>", "options": [{"option": "java java world of programming\r\n", "correct": false}, {"option": "JAVA JAVA WORLD OF PROGRAMMING\r\n", "correct": false}, {"option": "java java world of\r\n", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n    public static void main(String args[] ) throws Exception {\n        String a = \"abc\";\n        System.out.println(a=\"\\\"\"+a+\"\\\"\");\n    }}\n</code></pre>", "options": [{"option": "\\\"abc\\\"\r\n", "correct": false}, {"option": "\"abc\"", "correct": true}, {"option": "\"\"abc\"\"\r\n", "correct": false}, {"option": " abc\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\ndouble A = 1.0F / 3.0F;//Line 3\nif( ( A * 3.0) == 1.0F ) //LIne 4\n System.out.println( \"Equal\" );\n else System.out.println( \"Not Equal\" );\n }}\n</code></pre>", "options": [{"option": "Equal", "correct": false}, {"option": "Not Equal", "correct": true}, {"option": "Compilation fails at line 3", "correct": false}, {"option": "Compilation fails at line 4", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following code segment:</p>\n<pre class=\"prettyprint\"><code>public class Three {\npublic static void main(String args[]) {\n    int i = 1; // Line 1\n    short s = 1; // Line 2\n    long l = 1; // Line 3\n    i = l + i; // Line 4\n    l = s + i; // Line 5\n}\n}\n</code></pre>\n<p>Which of the following gives the line number in the above program that will result in error?</p>", "options": [{"option": "Line 5", "correct": false}, {"option": "Line 4", "correct": true}, {"option": "Line 3", "correct": false}, {"option": "No error", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n class TestClass {\n\n public void method(Object object) {\n\n System.out.println(\"Object\");}\n\n public void method(String string) {\n\n System.out.println(\"String\");}\n\n public static void main(String args[] ) throws Exception {\n new TestClass().method(0);}\n</code></pre>\n<p>}</p>", "options": [{"option": "Object", "correct": true}, {"option": "String ", "correct": false}, {"option": "0 ", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\npublic static void main(String args[] ) throws Exception {\nbyte x = 6;\nbyte y = 10;\nSystem.out.print((y%x) + \", \");\nSystem.out.println(y == ((y/x) *x +(y%x)));}}\n</code></pre>", "options": [{"option": "1,true", "correct": false}, {"option": "4,0", "correct": false}, {"option": "1,false", "correct": false}, {"option": "4 ,true", "correct": true}], "level": "Easy"}, {"question": "<p>A <strong>package</strong> is a collection of ....</p>", "options": [{"option": " Classes", "correct": false}, {"option": " Interfaces", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class simple{\n public static void main(String args[]){ \n int a[10];\n System.out.println(a[1]);}}\n</code></pre>", "options": [{"option": "Accessing the second element of the array.", "correct": false}, {"option": "Compilation fails.", "correct": true}, {"option": "Accessing the first element of the array.", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which keyword is used to prevent an <strong>object</strong> from being <strong>serialized</strong>?</p>", "options": [{"option": "private", "correct": false}, {"option": "protected", "correct": false}, {"option": "public", "correct": false}, {"option": "transient", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which one is the valid <strong>method signatures</strong> in an <strong>interface</strong>?</p>", "options": [{"option": "public void main(String [ ] args);\r\n", "correct": false}, {"option": "public float getArea(float x);\r\n", "correct": false}, {"option": "boolean  setFlag(Boolean [ ] test [ ]);\r\n", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which is <strong>not</strong> the valid <strong>method signatures</strong> in an <strong>interface</strong>?</p>", "options": [{"option": "public void main(String [] args);\r\n", "correct": false}, {"option": "public float getVol(float x);\r\n", "correct": false}, {"option": " public static void main(String [] args);\r\n", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the below Java code snippet:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\nint x= 0;\nwhile (0) {\nSystem.out.print(\"x plus one is \" + (x + 1));}}}\n</code></pre>\n<p>What is the result?</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation fails ", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Which one of the following provides <strong>runtime environment</strong> to <strong>execute bytecode</strong>?</p>", "options": [{"option": "JDK", "correct": false}, {"option": "JVM", "correct": true}, {"option": "JRE", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which one contains set of libraries and tools?</p>", "options": [{"option": "JVM", "correct": false}, {"option": "JDK", "correct": false}, {"option": "JRE", "correct": true}, {"option": "None of above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which one is <strong>super class</strong> for all Java classes?</p>", "options": [{"option": "Object", "correct": true}, {"option": "String", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In which area <strong>object references</strong> are stored in Java?</p>", "options": [{"option": "Heap area", "correct": true}, {"option": "Method area", "correct": false}, {"option": "Java stack", "correct": false}, {"option": "Class loader", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following <strong>Java code</strong> snippet:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\ntry {\nSystem.out.print(\"Hello world \");\n}\n</code></pre>\n<p>catch(Exception e)\n    {</p>\n<pre class=\"prettyprint\"><code> }\n</code></pre>\n<p>}\n}</p>\n<p>What is the output?</p>", "options": [{"option": "Hello world", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Compile and run sucessfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following <strong>Java code</strong> snippet:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\ntry {\nSystem.out.print(\"Hello world \");\n       }\nfinally {\nSystem.out.println(\"Finally executing \");\n   }}}\n</code></pre>\n<p>What is the output of the above code?</p>", "options": [{"option": "Hello world", "correct": false}, {"option": "Hello world  Finally executing", "correct": true}, {"option": "Finally executing", "correct": false}, {"option": "Compilation fails:No catch block is provided.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the statements not true about <strong>Constructor</strong> in Java?</p>", "options": [{"option": "Constructors are not inherited.\r\n", "correct": false}, {"option": "Constructors cannot be overloaded.\r\n", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "JVM doesn't provide default constructor and you need to create constructors by coding.", "correct": true}], "level": "Easy"}, {"question": "<p>Consider the following <strong>Java code</strong> snippet:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\ndouble value = -16.0;\nSystem.out.println( Math.sqrt(value));\n}\n}\n</code></pre>\n<p>What is the output of the above Java program?</p>", "options": [{"option": "4.0\r\n", "correct": false}, {"option": "\u20134.0\r\n", "correct": false}, {"option": "NaN\r\n", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n        String a = \"hackerearth\";\n        a = a.substring(5,7);\n        char b = a.charAt(1);\n        a = a + b;\n        System.out.println(a);\n    }}\n</code></pre>", "options": [{"option": "ere", "correct": false}, {"option": "ree", "correct": true}, {"option": "rer", "correct": false}, {"option": "rtha", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\npublic static void main(String args[] ) throws Exception {\nString a = \"xyz\";\na.toUpperCase();\nString y = a.substring(1,2);\n y = y + \"abc\";\n System.out.println(y);\n  }}\n</code></pre>", "options": [{"option": "Yabc", "correct": false}, {"option": "yabc", "correct": true}, {"option": "Xabc", "correct": false}, {"option": "xabc", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>public class test{\n    public static void main(String args[] ) throws Exception {\n        String h = \"hackerearth\";\n        h.substring(1,7);\n        h= \"w\" + h;\n        h.append(\"woo\");\n        System.out.println(h);\n    }}\n</code></pre>", "options": [{"option": "whackerwoo", "correct": false}, {"option": "wackerewoo", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "whackerewoo", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the method wakes up a thread that is waiting for object\u2019s lock?</p>", "options": [{"option": "void finalize() \r\n", "correct": false}, {"option": "void notifyAll() \r\n", "correct": false}, {"option": "final void notify() ", "correct": true}, {"option": "final void wait() \r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Which method returns a <strong>text representation</strong> of the object?</p>", "options": [{"option": "String() \r\n", "correct": false}, {"option": "String toString() \r\n", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which modifier we can apply on <strong>Inner classes</strong> in Java?</p>", "options": [{"option": "final\r\n", "correct": false}, {"option": "private\r\n", "correct": false}, {"option": "protected\r\n", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Which is true about a <strong>method-local inner class</strong>?</p>", "options": [{"option": "It must be marked final.\r\n", "correct": false}, {"option": "It can be marked public.\r\n", "correct": false}, {"option": "It can be marked static.\r\n", "correct": false}, {"option": "It can be marked abstract.\r\n", "correct": true}], "level": "Medium"}, {"question": "<p>What is done by the programmer to <strong>destroy</strong> an object x?</p>", "options": [{"option": "garbage collector", "correct": false}, {"option": "x.finalize()", "correct": false}, {"option": "Runtime.getRuntime().gc()", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which one of the following does not extend the <strong>java.lang.Number package</strong>?</p>", "options": [{"option": "Float ", "correct": false}, {"option": "Boolean ", "correct": true}, {"option": "Long ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which class can never be a <strong>subclass</strong> in Java?</p>", "options": [{"option": "Abstract class", "correct": false}, {"option": "Parent class", "correct": false}, {"option": "Final class", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statement below is <strong>correct</strong>?</p>", "options": [{"option": "You can not override private or static method in Java.\r\n\r\n", "correct": false}, {"option": "Java does not support multiple inheritance.", "correct": false}, {"option": "Both a and b.", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below <strong>Java</strong> program?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n   class hacker\n    {\n        public static void main(String []args)\n        {\n            int x=5;\n            while(x&lt;10)\n            {\n                System.out.print(x);\n                x++;\n            }\n        }\n</code></pre>", "options": [{"option": "5 6 7 8 9", "correct": true}, {"option": "5 6 7 8 9 10", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below <strong>Java</strong> code?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass\n{\n    public static void main(String []args)\n    {\n        int x=5;\n        while(x&lt;10)\n        {\n            System.out.print(x);\n            x++;\n        }\n    }\n}\n</code></pre>", "options": [{"option": "5 6 7 8 9", "correct": true}, {"option": "Compilation fails ", "correct": false}, {"option": "5 6 7 8 9 10", "correct": false}, {"option": "Run time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass hacker\n{\n    public static void main(String []args)\n    {\n        int x=0xF;\n        for(;x&lt;15;)\n        {\n            System.out.print(x);\n            x++;\n        }\n    }\n}\n</code></pre>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "15", "correct": false}, {"option": "Runtime error ", "correct": false}, {"option": "Compile successfully without output", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass hacker\n{\n    public void static main(String []args)\n    {\n        int x=0xF;\n        for(;x&lt;15;)\n        {\n            System.out.print(x);\n            x++;\n        }\n    }\n}\n</code></pre>", "options": [{"option": "15", "correct": false}, {"option": "Compile successfully without output. ", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following below is the <strong>correct</strong> statement?</p>", "options": [{"option": "All java code is defined in a class.", "correct": false}, {"option": "A class can inherit instance variables and methods from a more abstract super class.", "correct": false}, {"option": "An object is like a blueprint.", "correct": false}, {"option": "Both a and b", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following below behaves like a <strong>template</strong> in Java?</p>", "options": [{"option": "class", "correct": true}, {"option": "method ", "correct": false}, {"option": "object", "correct": false}, {"option": "variables", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which of the following below  <strong>live on the heap</strong> in Java?</p>", "options": [{"option": "Class", "correct": false}, {"option": "Instance variable", "correct": false}, {"option": "Method", "correct": false}, {"option": "Object", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following below is <strong>compiled</strong> from a <strong>.java file</strong> ?</p>", "options": [{"option": "Object", "correct": false}, {"option": "Method ", "correct": false}, {"option": "Class", "correct": true}, {"option": "Instance variable", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of the <strong>reference variable</strong> in Java when it is not referencing any object?</p>", "options": [{"option": "0", "correct": false}, {"option": "Null", "correct": true}, {"option": "Both a and b ", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following below is correct in Java?</p>", "options": [{"option": "Instance variable is declared inside a class but not within a method.", "correct": false}, {"option": "Local variable are declared within a method.", "correct": false}, {"option": "Local variable must be initialized  before use.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n    public static void main(String args[] ) throws Exception {\n       int a=3;\n       byte b=3;\n       if(a==b)\n       {\n           System.out.println(\"True\");\n\n       }\n       else\n       {\n           System.out.println(\"False\");\n       }\n    }\n}\n</code></pre>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n       TestClass t1=new  TestClass();\n       TestClass t2=new  TestClass();\n        TestClass t3=t1;\n        if(t3==t2)\n        {\n            System.out.println(\"Not equal\");\n        }\n        else if(t3==t1)\n        {\n             System.out.println(\"Equal\");\n        }\n       else\n       {\n            System.out.println(\"Hack\");\n       }\n    }\n}\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Not equal", "correct": false}, {"option": "Equal", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\n    public static void main(String args[] ) throws Exception {\n\n       int b=Integer.parseInt('3');\n       System.out.println(b);\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "\"3\"", "correct": false}, {"option": "'3'", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>Which of the following statement(s) below is/are true ?</p>", "options": [{"option": "Classes are grouped into packages.", "correct": false}, {"option": "ArrayList is a class in Java API.", "correct": false}, {"option": "An ArrayList resizes dynamically to whatever size is needed.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Which keyword is used to prevent the class from being instantiated?</p>", "options": [{"option": "Interface", "correct": false}, {"option": "Abstract", "correct": true}, {"option": "Final", "correct": false}, {"option": "Concrete", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>class A1 {\n        public int i;\n        protected int j;\n}    \nclass B2 extends A1 {\n        int j;\n        void display() {\n            super.j = 3;\n            super.i=10;\n            System.out.println(i + \" \" + j);\n        }\n}    \npublic class OutputClass {\n    public static void main(String args[])\n    {\n        B2 obj = new B2();\n        obj.i=1;\n        obj.j=2;   \n        obj.display();     \n    }\n}\n</code></pre>", "options": [{"option": "1  2", "correct": false}, {"option": "10  2", "correct": true}, {"option": "10 3", "correct": false}, {"option": "1 3", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>abstract class A1 {\n        protected int i;\n        abstract void display();\n    }    \n    class B1 extends A1 {\n        int j=30;\n        void display() {\n            int j=10;\n            System.out.println(j);\n        }\n    }    \n    class Abstract_demo {\n        public static void main(String args[])\n        {\n            B1 obj = new B1();\n            obj.j=20;\n            obj.display();    \n        }\n   }\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "10", "correct": true}, {"option": "20", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the below Java code?</p>\n<pre class=\"prettyprint\"><code>class test {\n        public static void main(String args[])\n        {\n            StringBuffer s1 = new StringBuffer(\"Hello World\");\n            s1.insert(8 , \"Good \");\n            System.out.println(s1);\n        }\n   }\n</code></pre>", "options": [{"option": "Hello Good World", "correct": false}, {"option": "Hello WGood orld", "correct": false}, {"option": "Hello WoGood rld", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following below is/are constructor(s) for <strong>Vector class</strong> in Java?</p>", "options": [{"option": "Vector( )", "correct": false}, {"option": "Vector(int size, int increament)", "correct": false}, {"option": "Vector(Collection c)", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following below is/are <strong>true</strong>?</p>", "options": [{"option": "You can mark a constructor with a keyword 'static'.", "correct": false}, {"option": "Constructors are called before static variables are initialized.", "correct": false}, {"option": "If a class is marked final, all of its methods must be marked final.", "correct": false}, {"option": "A static initializer block runs before a class's constructor runs.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is false?</p>", "options": [{"option": "Static methods do not have access to an object's instance variables. ", "correct": false}, {"option": "There is no wrapper class for Boolean primitives.", "correct": true}, {"option": "A wrapper is used when you want to treat a primitive like an object.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following below is/are <strong>checked exception(s)</strong>?</p>", "options": [{"option": "Class ArrayIndexOutOfBoundsException", "correct": false}, {"option": "Class ClassCastException", "correct": false}, {"option": "Class IllegalArgumentException", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass A1\n{\nA1(){}\n}\n\nclass B1 extends A1 {\nB1()\n{}\nB1(int b)\n{}\n}\nclass C1 extends B1\n{\npublic static int main(String[]a)\n{\nC1 v = new C1();\n}\n}\n</code></pre>", "options": [{"option": "The above code will run successfully.", "correct": false}, {"option": "The above code will return a run time error.", "correct": false}, {"option": " The above code has compile time error.", "correct": false}, {"option": "The above code will run successfully without any output.", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass A1\n{ }\nclass B1 extends A1\n{ }\n\nclass c1\n{\npublic static void main(String[]a)\n{\nB1 b = new B1();\n}\n}\n</code></pre>", "options": [{"option": "The above code will return a run time error.", "correct": false}, {"option": " The above code has compile time error.", "correct": false}, {"option": "The above code will run successfully.", "correct": true}, {"option": " The above code will compile but will not run.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below Java Code?</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass A{\n}\nclass B extends A{\n}\n\nclass C extends B\n{\npublic static void main(String []args){\nA b=new B();\n}\n}\n</code></pre>", "options": [{"option": " The above code will return a run time error.", "correct": false}, {"option": "The above code will run successfully.", "correct": true}, {"option": "The above code has compile time error.", "correct": false}, {"option": " The above code will compile but will not run.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following below is one and only interface of <strong>LegacyClasses</strong>?</p>", "options": [{"option": "Properties", "correct": false}, {"option": "Stack", "correct": false}, {"option": "Vector", "correct": false}, {"option": "Enumeration", "correct": true}], "level": "Medium"}, {"question": "<p><strong>Stack legacy</strong> class is defined under which package?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.util", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class vector {\n        public static void main(String args[]) {\n            Vector obj = new Vector(0,0);\n            obj.addElement(new Integer(3));\n            obj.addElement(new Integer(2));\n            obj.addElement(new Integer(5));\n            System.out.println(obj.lastElement());\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "5", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class vector {\n        public static void main(String args[]) {\n            Vector obj = new Vector();\n            obj.addElement(new Integer(3));\n            obj.addElement(new Integer(2));\n            obj.addElement(new Integer(5));\n            obj.addElement(new Integer(5));\n            obj.addElement(new Integer(2));\n            System.out.println(obj.capacity());\n        }\n    }\n</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "5", "correct": false}, {"option": "20", "correct": false}, {"option": "10", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following below is/are correct?</p>", "options": [{"option": "Vector is a list, so duplicates are allowed.", "correct": false}, {"option": "Insertion order of object will be preserved in Vector.", "correct": false}, {"option": "'null'  insertion  in vector is possible.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Vector has a default capacity for holding 10 elements and  if someone is trying to add 1 more element in that vector then what is the size of the newly created vector?</p>", "options": [{"option": "11", "correct": false}, {"option": "12", "correct": false}, {"option": "20", "correct": true}, {"option": "40", "correct": false}], "level": "Medium"}, {"question": "<p>ArrayList has a default capacity for holding 10 elements and if someone is trying to add 1 more element in that ArrayList then what is the size of newly created ArrayList?</p>", "options": [{"option": "16", "correct": true}, {"option": "20", "correct": false}, {"option": "40", "correct": false}, {"option": "11", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Output {\n        public static void main(String args[]) {\n            ArrayList al = new ArrayList();\n            al.add(\"A\");\n            al.add(0, \"B\");\n            al.add(null);\n            System.out.println(al.size());\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>In collection whenever we are trying to print any object reference, internally which method will be called?</p>", "options": [{"option": "to Collection()", "correct": false}, {"option": "to char ()", "correct": false}, {"option": "to int ()", "correct": false}, {"option": "to String()", "correct": true}], "level": "Medium"}, {"question": "<p>We can use Collections to hold and transfer objects from one place to another place. Which interface implementation provides this feature?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Cloneable", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code: </p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Output {\n        public static void main(String args[]) {\n            ArrayList al = new ArrayList();\n            al.add(\"A\");\n            al.add(10);\n            al.add(null);\n            System.out.println(al);\n        }\n    }\n</code></pre>", "options": [{"option": "[A, 10]", "correct": false}, {"option": "[A, 10, null]", "correct": true}, {"option": "{A, 10, null}", "correct": false}, {"option": "{A, 10}", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of the below Java code: </p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n import java.io.Serializable;\n    class Output {\n        public static void main(String args[]) {\n            ArrayList al = new ArrayList();\n            LinkedList ll=new LinkedList();\n            System.out.println(al instanceof Serializable);\n            System.out.println(ll instanceof RandomAccess);\n        }\n    }\n</code></pre>", "options": [{"option": "true\r\ntrue", "correct": false}, {"option": "false\r\nfalse", "correct": false}, {"option": "true\r\nfalse", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code: </p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n  class Output {\n        public static void main(String args[]) {\n            ArrayList al = new ArrayList();\n            LinkedList ll=new LinkedList();\n            System.out.println(al instanceof Serializable);\n            System.out.println(ll instanceof RandomAccess);\n        }\n    }\n</code></pre>", "options": [{"option": "true \r\nfalse", "correct": false}, {"option": "false\r\ntrue", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following Collection class method is used to get synchronized version of ArrayList?</p>", "options": [{"option": "public static List syncrohonized();", "correct": false}, {"option": "public static List syncrohonizeList(l1);", "correct": false}, {"option": "public static List syncrohonizedList(l1);", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>In Collection, Stack class  is a child of which class ?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "Vector", "correct": true}, {"option": "TreeSet", "correct": false}], "level": "Medium"}, {"question": "<p>Which method  is used to return to top of the stack without removal of objects?</p>", "options": [{"option": "pop()", "correct": false}, {"option": "peek()", "correct": true}, {"option": "last()", "correct": false}, {"option": "empty()", "correct": false}], "level": "Easy"}, {"question": "<p>If the specified object is not present in the stack, then what will it returns?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "-1", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\n    public static void main(String args[] ) throws Exception {\n        Stack s =new Stack();\n        s.push(\"A\");\n        s.push(\"B\");\n        System.out.println(s);\n        System.out.println( s.search(\"Z\"));\n    }\n}\n</code></pre>", "options": [{"option": "[B, A]\r\n-1", "correct": false}, {"option": "[A, B]\r\n-1", "correct": true}, {"option": "[A, B]\r\n1", "correct": false}, {"option": "[B,A]\r\n0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class TestClass {\n        public static void main(String args[] ) throws Exception {\n            Stack s =new Stack();\n            s.push(\"A\");\n            s.push(\"B\");\n            System.out.println(s);\n            System.out.println( s.serch(\"Z\"));\n            System.out.println(s.isEmpty());\n        }\n    }\n</code></pre>", "options": [{"option": "[A,B]\r\n-1\r\nfalse", "correct": false}, {"option": "[B,A]\r\n0\r\nfalse", "correct": false}, {"option": "[A,B]\r\n1\r\nfalse", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following is/are cursor(s) available in Java to retrieve objects?</p>", "options": [{"option": "Enumeration", "correct": false}, {"option": "Iterator", "correct": false}, {"option": "ListIterator", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following below is/are method of Iterator in Java?</p>", "options": [{"option": "public boolean  hasMoreElements()", "correct": false}, {"option": "public Object next()", "correct": false}, {"option": "public boolean hasNext()", "correct": false}, {"option": "Both b and c", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following below is/are correct for Map?</p>", "options": [{"option": "A Map is a object that maps keys to values.", "correct": false}, {"option": "A map cannot contain duplicate keys.", "correct": false}, {"option": "Each key-value pair is also known as Entry.", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Which method we can use to get all the keys from the HashMap?</p>", "options": [{"option": "keySetAll()", "correct": false}, {"option": "keySet()", "correct": true}, {"option": "keyAll()", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the return type of values() method in HashMap?</p>", "options": [{"option": "Map", "correct": false}, {"option": "Set", "correct": false}, {"option": "Collection", "correct": true}, {"option": "Hash", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the below class is extended by the HashMap class?</p>", "options": [{"option": "Map", "correct": false}, {"option": "AbstractMap", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the below class implements the AbstractMap class?</p>", "options": [{"option": "TreeMap", "correct": false}, {"option": "HashMap", "correct": false}, {"option": "Map", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is inherited from the AbstractMap class?</p>", "options": [{"option": "equals()", "correct": false}, {"option": "hashcode()", "correct": false}, {"option": "toString()", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following methods are inherited from Object class?</p>", "options": [{"option": "wait()", "correct": false}, {"option": "getClass()", "correct": false}, {"option": "finalize()", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the initial default capacity of HashMap?</p>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": false}, {"option": "15", "correct": false}, {"option": "16", "correct": true}], "level": "Medium"}, {"question": "<p>What is the initial default load factor of HashMap?</p>", "options": [{"option": "1", "correct": false}, {"option": "0.50", "correct": false}, {"option": "0.75", "correct": true}, {"option": "2", "correct": false}], "level": "Easy"}, {"question": "<p>Output of below the Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\npublic static void main(String args[] ) throws Exception {\nHashMap&lt;Integer,String&gt; hash=new HashMap&lt;Integer,String&gt;();\nSystem.out.println(hash);\n hash.put(1,\"hack\");\n hash.put(2,\"earth\");\n System.out.println(hash);\n  hash.clear();\n        }\n    }\n</code></pre>", "options": [{"option": "[]   [1=hack, 2=earth]", "correct": false}, {"option": "Nothing will be printed", "correct": false}, {"option": "{}  {1=hack, 2=earth}", "correct": true}, {"option": "{1=hack, 2=earth}", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of below the Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\npublic static void main(String args[] ) throws Exception {\nHashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\nhash.put(\"hack\",1);\nhash.put(\"earth\",1);\nSystem.out.println(hash);\n hash.clear();\n    }\n}\n</code></pre>", "options": [{"option": "[hack=1, earth=1]", "correct": false}, {"option": "{hack=1, earth=1}", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "hack=1, earth=1", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\n    public static void main(String args[] ) throws Exception {\n        HashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\n        hash.put(\"hack\",1);\n        hash.put(\"earth\",1);\n        System.out.println(hash);\n        hash.clear();\n        TreeMap &lt;String,Integer&gt; tm=new TreeMap &lt;String,Integer&gt; (hash);\n        System.out.println(tm);\n    }\n}\n</code></pre>", "options": [{"option": "{hack=1, earth=1}\r\n", "correct": false}, {"option": "{hack=1, earth=1}  {}", "correct": true}, {"option": "{hack=1, earth=1}  {hack=1, earth=1}", "correct": false}, {"option": "{}", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass TestClass {\n    public static void main(String args[] ) throws Exception {\n        HashMap&lt;String,Integer&gt; hash=new HashMap&lt;String,Integer&gt; ();\n        hash.put(\"hack\",1);\n        hash.put(\"earth\",1);\n        System.out.println(hash);\n        TreeMap &lt;String,Integer&gt; tm=new TreeMap &lt;String,Integer&gt; (hash);\n        System.out.println(tm);\n    }\n}\n</code></pre>", "options": [{"option": "{earth=1,hack=1}\r\n{earth=1, hack=1}", "correct": false}, {"option": "{hack=1, earth=1}\r\n{earth=1, hack=1}", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "{hack=1, earth=1}\r\n{}", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below is <strong>bidirectional</strong> cursor in Java Collection?</p>", "options": [{"option": "Enumeration", "correct": false}, {"option": "Iterator", "correct": true}, {"option": "ListIterator", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Which method of <strong>LIst Interface</strong> can be used to create ListIterator object?</p>", "options": [{"option": "public listiterator()", "correct": false}, {"option": "public ListIterator listIterator()", "correct": true}, {"option": "public  int ListIterator listiterator", "correct": false}, {"option": "public void  ListIterator listiterator", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n        int a=5;\n        int b=1;\n        try\n        {\n            System.out.println(b/a);\n        }\n        finally\n        {\n            System.out.println(\"There is no error\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "1\r\nThere is no error", "correct": false}, {"option": "0\r\nThere is no error", "correct": true}, {"option": "There is no error", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    public static void main(String args[] ) throws Exception {\n\n        try\n        {\n            int a=5;\n            int b=0;\n            int c=a/b;\n            System.out.println(c);\n        }\n        catch(Exception e)\n        {\n            System.out.print(\"There is a error\");\n        }\n        finally\n        {\n            System.out.println(\"There is no error\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "0\r\nThere is no error", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "There is a error\r\nThere is no error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which of the following below is/are <strong>false</strong> about HashSet?</p>", "options": [{"option": "Heterogeneous objects are allowed.", "correct": false}, {"option": "Duplicates are allowed.", "correct": true}, {"option": "Null insertion is possible.", "correct": false}, {"option": "Implements serializable and cloneable interface.", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        LinkedHashSet hs=new LinkedHashSet();\n        hs.add(\"a\");\n        hs.add(\"b\");\n        hs.add(null);\n       System.out.println( hs.add(\"b\"));\n       System.out.println(hs);\n    }}\n</code></pre>", "options": [{"option": "false\r\n[a, b, null,b]", "correct": false}, {"option": "false\r\n[a, b, null]", "correct": true}, {"option": "false\r\n[a, b]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the best choice to develop <strong>cache based applications</strong> in Java?</p>", "options": [{"option": "Map", "correct": false}, {"option": "LinkedHashSet", "correct": true}, {"option": "TreeSet", "correct": false}, {"option": "All of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the return type of comparator() of SortedSet if we are using default natural sorting order?</p>", "options": [{"option": "0", "correct": false}, {"option": "null", "correct": true}, {"option": "Both a and b.", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the underlying <strong>data structure</strong> for <strong>TreeSet</strong>?</p>", "options": [{"option": "LinkedList", "correct": false}, {"option": "Balanced Tree", "correct": true}, {"option": "Stack", "correct": false}, {"option": "Queue", "correct": false}], "level": "Medium"}, {"question": "<p>Which type of exception is caught when we want to add heterogeneous object in TreeSet?</p>", "options": [{"option": "NullPointerException", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "IllegalArgumentException", "correct": false}, {"option": "SecurityException", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following below creates an empty TreeSet object where elements will be inserted according to customized sorting order?</p>", "options": [{"option": "TreeSet t=new TreeSet (SortedSet s)", "correct": false}, {"option": "TreeSet t=new TreeSet ()", "correct": false}, {"option": "TreeSet t=new TreeSet (Comparator c)", "correct": true}, {"option": "TreeSet t=new TreeSet (Collection c)", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the correct output of the below Java program:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(\"a\");\n        t.add(\"b\");\n        t.add(\"A\");\n       System.out.println(t);\n    }}\n</code></pre>", "options": [{"option": "[a, b,A]\r\n", "correct": false}, {"option": "[A, a, b]", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the correct output of the below Java program:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(null);\n        t.add(\"A\");\n        System.out.println(t);\n    }\n}\n</code></pre>", "options": [{"option": "[null,A]", "correct": false}, {"option": "NullPointerException", "correct": true}, {"option": "{A,null}", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<p>import java.util.*;</p>\n<pre class=\"prettyprint\"><code>class Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(1);\n        t.add(10);\n        t.add(0);\n        System.out.println(t);\n    }\n}\n</code></pre>", "options": [{"option": "{0, 1, 10}", "correct": false}, {"option": "[1, 10, 0]", "correct": false}, {"option": "[0, 1, 10]", "correct": true}, {"option": "{1, 10, 0}", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(1);\n        t.add(10);\n        t.add(0);\n        t.add(null);\n        t.add(\"R\");\n        System.out.println(t);\n    }\n}\n</code></pre>", "options": [{"option": "[1,10,0,null,R]", "correct": false}, {"option": "{1,10,0,null,R}", "correct": false}, {"option": "NullPointerException", "correct": true}, {"option": "[R,0,null,10,1]", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Test {\n    public static void main(String args[] ) throws Exception {\n        TreeSet t=new  TreeSet ();\n        t.add(new StringBuffer(\"H\"));\n        t.add(new StringBuffer(\"A\"));\n        t.add(new StringBuffer(\"C\"));\n        t.add(new StringBuffer(\"K\"));\n        System.out.println(t);\n    }\n}\n</code></pre>", "options": [{"option": "[H,A,C,K]", "correct": false}, {"option": "[K,C,A,H]", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Hard"}, {"question": "<p>In which of the below package, <strong>Comparable interface</strong> is present ?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.util", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following method is/are present in Comparable interface?</p>", "options": [{"option": "compare()", "correct": false}, {"option": "compareTo()", "correct": true}, {"option": "compareEqual()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the return type of compareTo() method in Comparable Interface?</p>", "options": [{"option": "boolean", "correct": false}, {"option": "int", "correct": true}, {"option": "float", "correct": false}, {"option": "String", "correct": false}], "level": "Hard"}, {"question": "<p>Consider the below code:</p>\n<pre class=\"prettyprint\"><code>obj1.compareTo(obj2)\n</code></pre>\n<p>If obj1 has to come before obj2, then what is the return type?</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "-1", "correct": true}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass HackerEarth{\n    public static void main(String args[] ) throws Exception {\n        System.out.println(\"Z\".compareTo(\"B\"));\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "24", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Hackerearth {\n        public static void main(String args[] ) throws Exception {\n            System.out.println(\"G\".compareTo(\"Z\"));\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "-19", "correct": true}, {"option": "-1", "correct": false}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Hacker {\n        public static void main(String args[] ) throws Exception {\n            int h=9;\n            int a=++h + ++h + --h + h--;\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "40", "correct": false}, {"option": "41", "correct": true}, {"option": "42", "correct": false}, {"option": "39", "correct": false}], "level": "Medium"}, {"question": "<p>A scripting language is a ___________________________________.</p>", "options": [{"option": "Low-level programming language", "correct": false}, {"option": "Assembly level programming language", "correct": false}, {"option": "Machine level programming language", "correct": false}, {"option": "High-level programming language", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following attributes is used to include an external JavaScript code in an HTML document?</p>", "options": [{"option": "ext", "correct": false}, {"option": "src", "correct": true}, {"option": "script", "correct": false}, {"option": "link", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following about JavaScript is true?</p>", "options": [{"option": "It is directly written into HTML pages.", "correct": false}, {"option": "It is directly written into a JavaScript file and included in a HTML document.", "correct": true}, {"option": "It is directly written on the server page.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is used to call a JavaScript code?</p>", "options": [{"option": "Triggering event", "correct": false}, {"option": "RMI", "correct": false}, {"option": "Preprocessor", "correct": false}, {"option": "Function", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, when a page has finished parsing, which of the following attributes is used to specify that the script has been executed?</p>", "options": [{"option": "parse", "correct": false}, {"option": "async", "correct": false}, {"option": "type", "correct": false}, {"option": "defer", "correct": true}], "level": "Hard"}, {"question": "<p>What is JavaScript used for?</p>", "options": [{"option": "To make computations in HTML simpler", "correct": false}, {"option": "To increase the download time for the client", "correct": false}, {"option": "To minimize storage requirements on the web server", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>The <code>&lt;script&gt;</code> tag is used in the _____________________.</p>", "options": [{"option": "Header", "correct": false}, {"option": "Header and body", "correct": true}, {"option": "Title and header", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is <strong>Netscape Livewire</strong> used for?</p>", "options": [{"option": "To create a linkage between the client-side and the server-side", "correct": false}, {"option": "To support only non-relational databases", "correct": false}, {"option": "To allow the server-side and the JavaScript code to connect to the RDBMS", "correct": true}, {"option": "To interpret the JavaScript code", "correct": false}], "level": "Medium"}, {"question": "<p>What does the <code>a===b</code> statement refer to?</p>", "options": [{"option": "Both 'a' and 'b' are equal in value", "correct": false}, {"option": "Both 'a' and 'b' are equal in value and type", "correct": true}, {"option": "Both 'a' and 'b' are equal in value, type and reference address", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to check if the \u201ca\u201d character is not equal to \u201cnull\u201d?</p>", "options": [{"option": "if(a!null)", "correct": false}, {"option": "if(a!=null)", "correct": false}, {"option": "if (!a)", "correct": false}, {"option": "if(a!==null)", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>\u2018\\f\u2019</strong> escape sequence stands for ________________.</p>", "options": [{"option": "Floating numbers", "correct": false}, {"option": "Form feed", "correct": true}, {"option": "The representation of functions that returns a value", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not an error in JavaScript?</p>", "options": [{"option": "Syntax error", "correct": false}, {"option": "Missing of semicolons", "correct": false}, {"option": "Division by zero", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an indefinite or an infinite value during an arithmetic value computation is displayed as ____________.</p>", "options": [{"option": "An Error", "correct": false}, {"option": "\u201cInfinity\u201d", "correct": true}, {"option": "As such", "correct": false}, {"option": "An overflow error", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the syntax of a real number representation?</p>", "options": [{"option": "[digits][+digits][(E|e)[(+|-)]digits]", "correct": false}, {"option": "[digits][.digits][(E|e)[(+|-)]digits]", "correct": true}, {"option": "[digits][(E|e)[(+|-)]digits]", "correct": false}, {"option": "[.digits][digits][(E|e)[(+|-)]digits]", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the hexadecimal literals begins with _______________.</p>", "options": [{"option": "0X", "correct": false}, {"option": "0x", "correct": false}, {"option": "Either of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following variables is volatile?</p>", "options": [{"option": "Volatile ", "correct": false}, {"option": "Immutable", "correct": false}, {"option": "Mutable ", "correct": true}, {"option": "Dynamic ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var string1 = \u201d123\u201d;\n    var intvalue = 123;\n    alert( string1 + intvalue );\n</code></pre><p></p>", "options": [{"option": "123246", "correct": false}, {"option": "123123", "correct": true}, {"option": "Compilation failure", "correct": false}, {"option": "123", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    string1=\"abc\";\n    string2=4;\n    alert(string1.concat(string2));\n</code></pre><p></p>", "options": [{"option": "abc", "correct": false}, {"option": "4", "correct": false}, {"option": "abcd", "correct": false}, {"option": "abc4", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, function definitions are also known as function ____________.</p>", "options": [{"option": "Prototypes", "correct": false}, {"option": "Literals", "correct": true}, {"option": "Expressions", "correct": false}, {"option": "Declarations", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about the primary expressions is correct?</p>", "options": [{"option": "The primary expressions are basic expressions containing all necessary functions.", "correct": false}, {"option": "The primary expressions are those that stand alone.", "correct": true}, {"option": "The primary expressions contain variable references.", "correct": false}, {"option": "The primary expressions are complex expressions.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following expression types is used to call functions?</p>", "options": [{"option": "Primary", "correct": false}, {"option": "Invocation ", "correct": true}, {"option": "Functional ", "correct": false}, {"option": "Property access ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the significance of the <strong>new Point(2,3)</strong> expression?</p>", "options": [{"option": "Object creation ", "correct": true}, {"option": "Invocation ", "correct": false}, {"option": "Constructor calling ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following operators is used to check the existence of specific properties?</p>", "options": [{"option": "exists", "correct": false}, {"option": "exist", "correct": false}, {"option": "in", "correct": true}, {"option": "within", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a ternary operator in JavaScript?</p>", "options": [{"option": "+", "correct": false}, {"option": ":", "correct": false}, {"option": "\u2013", "correct": false}, {"option": "?:", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these statements is equivalent to the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    x = ~-y;\n    w = x = y = z;\n    q = a?b:c?d:e?f:g;\n</code></pre><p></p>", "options": [{"option": "x = a?b:(c?d:(e?f:g));\r\nq = ~(-y); w = (x = (y = z));", "correct": false}, {"option": "x = (x = (y = z));w = ~(-y);\r\nq = a?b:(c?d:(e?f:g));", "correct": false}, {"option": "x = ~(-y); w = (x = (y = z));\r\nq = a?b:(c?d:(e?f:g));", "correct": true}, {"option": "x = ~(-y); w = (x = (y = z)); \r\nq = (c?d:(e?f:g));", "correct": false}], "level": "Hard"}, {"question": "<p>JavaScript is  _______________________________________-.</p>", "options": [{"option": "an object-oriented language", "correct": false}, {"option": "an object-based language", "correct": true}, {"option": "a high-level language", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code snippet:</p>\n<pre class=\"prettyprint\"><code>var a=5 , b=1;\nvar obj = { a : 10 };\nwith(obj) \n{\n      alert(b);\n}\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "10", "correct": false}, {"option": "1", "correct": true}, {"option": "undefined", "correct": false}], "level": "Hard"}, {"question": "<p>Consider the below <strong>JavaScript</strong> code and predict the output:</p>\n<pre class=\"prettyprint\"><code>var a=5 , b=1\nvar obj = { a : 10 }\nwith(obj) \n{\n      alert(a)\n}\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "1", "correct": false}, {"option": "10", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>A conditional expression is also known as a ______________________________________.</p>", "options": [{"option": "if-else statement", "correct": false}, {"option": "if-then-else statement", "correct": false}, {"option": "if statement", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is a <strong>statement block</strong>?</p>", "options": [{"option": "A conditional block", "correct": false}, {"option": "A block that combines multiple statements into a single compound statement", "correct": true}, {"option": "A block that contains a single statement", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>When an empty statement is encountered, a JavaScript interpreter __________________.</p>", "options": [{"option": "Displays a prompt to complete the statement", "correct": false}, {"option": "Ignores the statement", "correct": true}, {"option": "Throws an error", "correct": false}, {"option": "Throws an exception", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what are <strong>var</strong> and <strong>function</strong>?</p>", "options": [{"option": "Declaration statements", "correct": true}, {"option": "Keywords", "correct": false}, {"option": "Datatypes", "correct": false}, {"option": "Prototypes", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var count = 0;\n    while (count &lt; 10) \n    {\n         console.log(count);\n         count++;\n    }  \n</code></pre>", "options": [{"option": "Value of count from 0 to 9 is displayed in the console.", "correct": false}, {"option": "The code results in an error.", "correct": true}, {"option": "Value of count from 1 to 9 is displayed in the console.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how can an <strong>enumeration order</strong> become implementation dependent and non-interoperable?</p>", "options": [{"option": "If the object does not have the properties present in the integer array indices.", "correct": false}, {"option": "If the object inherits the enumerable properties.", "correct": true}, {"option": "If the 'delete' keyword is never used.", "correct": false}, {"option": "If the Object.defineProperty() method is not used.", "correct": false}], "level": "Hard"}, {"question": "<p>What are the three important manipulations done in a \"for\" loop on a loop variable?</p>", "options": [{"option": "Updation, Incrementation, Initialization", "correct": false}, {"option": "Testing, Updation, Testing", "correct": false}, {"option": "Initialization,Testing, Incrementation", "correct": false}, {"option": " Initialization,Testing, Updation", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following <strong>JavaScript</strong> code:</p>\n<pre class=\"prettyprint\"><code>function tail(o) \n    { \n        for (; o.next; o = o.next) ;\n        return o;\n    }\n</code></pre>", "options": [{"option": "Null", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "No error", "correct": true}, {"option": "Undefined", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if the body of the <strong>for</strong> or the <strong>in</strong> loop deletes a non-enumerated property, _______________.</p>", "options": [{"option": "The property will not be enumerated.", "correct": true}, {"option": "The property will be stored in a cache.", "correct": false}, {"option": "The loop will not be executed.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when an exception is thrown the interpreter in the <strong>jump</strong> statement ____________.</p>", "options": [{"option": "Stops its work", "correct": false}, {"option": "Jumps to the nearest enclosing exception handler", "correct": true}, {"option": "Throws another exception", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>continue</strong> keyword in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    while (a != 0)\n    {\n       if (a == 1) \n           continue;\n       else \n           a++;\n    }\n\n</code></pre><p></p>", "options": [{"option": "It is used to restart the loop.", "correct": false}, {"option": "It is used to skips the rest of the statements in the iteration.", "correct": true}, {"option": "It skips the next iteration.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the significance of the <strong>debugger</strong> statement in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function f(o) \n    {\n         if (o === undefined) debugger;\n    }\n\n</code></pre><p></p>", "options": [{"option": "It debugs the error in the statement.", "correct": false}, {"option": "It performs a simple break-point.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following keywords is not a statement in JavaScript?</p>", "options": [{"option": "debugger", "correct": false}, {"option": "use strict", "correct": true}, {"option": "with", "correct": false}, {"option": "if", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following attributes are included in objects?</p>", "options": [{"option": "The class, the parameters, and the object\u2019s extensible flag", "correct": false}, {"option": "The native object, the classes and Interfacces, and the object\u2019s extensible flag", "correct": false}, {"option": "The prototype, the class, and the object's parameters", "correct": false}, {"option": "The prototype, the class, and the object\u2019s extensible flag", "correct": true}], "level": "Hard"}, {"question": "<p>What do the <strong>firstname</strong> and the <strong>surname</strong> values indicate in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var book = {\n    \"main title\": \"JavaScript\", \n    'sub-title': \"The Definitive Guide\", \n    \"for\": \"all audiences\", \n    author: { \n    firstname: \"Dave\", \n    surname: \"Martins\" \n    }\n    };\n\n</code></pre><p></p>", "options": [{"option": "Properties", "correct": false}, {"option": "Property values", "correct": false}, {"option": "Property names", "correct": true}, {"option": "Objects", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the linkage of a series of prototype objects is known as a _______________.</p>", "options": [{"option": "Prototype stack", "correct": false}, {"option": "Prototype chain\r\n", "correct": true}, {"option": "Prototype class", "correct": false}, {"option": "Prototypes", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript statement, the datatype enclosed within the square brackets should be ______________.\n</p><pre class=\"prettyprint\"><code>    book[datatype]=assignment_value;\n\n</code></pre><p></p>", "options": [{"option": "An integer", "correct": false}, {"option": "An object", "correct": false}, {"option": "A string", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to display <strong>\u201cHello World\u201d</strong> on the web page?</p>", "options": [{"option": "print(\u201cHello World\u201d)", "correct": false}, {"option": "System.out.println(\u201cHello World\u201d)", "correct": false}, {"option": "document.write(\u201cHello World\u201d)", "correct": true}, {"option": "response.write(\u201cHello World\u201d)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to check if an object is the prototype of another object?</p>", "options": [{"option": "equals() ", "correct": false}, {"option": "isPrototypeOf() ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>The following JavaScript statement is a _____________.\n</p><pre class=\"prettyprint\"><code>    function f() {};\n</code></pre><p></p>", "options": [{"option": "Function ", "correct": false}, {"option": "Prototype of a function", "correct": false}, {"option": "Custom constructor", "correct": true}, {"option": "Return statement", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>extensible</strong> attribute in JavaScript?</p>", "options": [{"option": "It modifies the properties of an object to make it non-configurable.", "correct": false}, {"option": "It \"locks down\u201d objects into a known state to prevent outside tampering.", "correct": true}, {"option": "It configures and returns a writable property.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these processes is incorporated in the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    o = {x:1, y:{z:[false,null,\"\"]}}; \n    s = JSON.stringify(o); \n    p = JSON.parse(s);\n</code></pre><p></p>", "options": [{"option": "Object Encapsulation", "correct": false}, {"option": "Object Serialization", "correct": true}, {"option": "Object Encoding", "correct": false}, {"option": "Object Abstraction", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>toLocaleString()</strong> method is used to return a ________________.</p>", "options": [{"option": "Localized object representation", "correct": false}, {"option": "Parsed string", "correct": false}, {"option": "Local time in the string format", "correct": false}, {"option": "Localized string representation of the object", "correct": true}], "level": "Medium"}, {"question": "<p>What is the significance of the <code>var count = [1,,3];</code> statement in JavaScript?</p>", "options": [{"option": "It is an error.", "correct": false}, {"option": "The omitted value is undefined.", "correct": true}, {"option": "It is an exception.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following <strong>JavaScript</strong> code:\n</p><pre class=\"prettyprint\"><code>    var a1 = [,,,]; \n    var a2 = new Array(3); \n    0 in a1 \n    0 in a2\n</code></pre><p></p>", "options": [{"option": "true true", "correct": false}, {"option": "false false", "correct": false}, {"option": "false true", "correct": false}, {"option": "true false", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used by the <strong>or</strong> operator to identify the arrays?</p>", "options": [{"option": "isarrayType()", "correct": false}, {"option": "typeof", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following operations is executed by the <strong>reduce</strong> and <strong>reduceRight</strong> methods?</p>", "options": [{"option": "Filter and fold", "correct": false}, {"option": "Inject and fold", "correct": true}, {"option": "Finger and fold", "correct": false}, {"option": "Fold", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = []; \n    a.unshift(1); \n    a.unshift(22);\n    a.shift();\n</code></pre><p></p>", "options": [{"option": "12", "correct": false}, {"option": "1", "correct": false}, {"option": "22", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var a = []; \n    a.unshift(1); \n    a.unshift(22);\n    a.shift(); \n    a.unshift(3,[4,5]); \n    a.shift();\n</code></pre><p></p>", "options": [{"option": "22", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the significance of the <code>if (!a[i]) continue;</code> statement is JavaScript?</p>", "options": [{"option": "The undefined elements are skipped", "correct": false}, {"option": "The non existent elements are skipped", "correct": false}, {"option": "The null elements are skipped", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>What is the significance of the <strong>pop()</strong> method in JavaScript?</p>", "options": [{"option": "It increments the total length by 1.", "correct": false}, {"option": "It decrements the total length by 1.", "correct": true}, {"option": "It prints the first element of an array.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, function definitions begin with _______________.</p>", "options": [{"option": "The return type, the function keyword, the identifier and the parentheses", "correct": false}, {"option": "The return type and the identifier", "correct": false}, {"option": "The identifier and the parentheses", "correct": true}, {"option": "The identifier and the return type", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function printprops(o) \n    {\n        for(var p in o)\n          console.log(p + \": \" + o[p] + \"\\n\");\n    }\n</code></pre><p></p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Undefined", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the function name is optional when the function is ___________________.</p>", "options": [{"option": "Defined as a looping statement", "correct": false}, {"option": "Predefined", "correct": false}, {"option": "Defined as expressions", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>return</strong> statement in JavaScript?</p>", "options": [{"option": "It returns the value and continues executing the rest of the statements.", "correct": false}, {"option": "It returns the value and stops the program.", "correct": false}, {"option": "It returns the value and stops executing the function.", "correct": false}, {"option": "It stops executing the function and returns the value.", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a function without a return value?</p>", "options": [{"option": "Method", "correct": false}, {"option": "Procedures", "correct": true}, {"option": "Constructor", "correct": false}, {"option": "Destructor", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function hypotenuse(a, b) \n    {\n           function square(x) \n           { \n                return x*x; \n           }\n           return Math.sqrt(square(a) + square(b));\n    }\n</code></pre><p></p>", "options": [{"option": "The sum of the squares of 'a' and 'b'", "correct": true}, {"option": "The square of the sum of 'a' and 'b'", "correct": false}, {"option": "The sum of 'a' and 'b' squared", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to invoke the <strong>m</strong> function of the <strong>o</strong> class which expects the <strong>x</strong> and the <strong>y</strong> arguments?</p>", "options": [{"option": "o(x,y);", "correct": false}, {"option": "o.m(x) && o.m(y);", "correct": false}, {"option": "o.m(x,y);", "correct": true}, {"option": "m(x,y);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is equivalent to the <code>o.m(x,y);</code> statement?</p>", "options": [{"option": "o[\"m\"](x,y);", "correct": true}, {"option": "o.m(x) && o.m(y);", "correct": false}, {"option": "o(m)[\"x\",\"y\"];", "correct": false}, {"option": "o.m(x && y);", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var grand_Total=eval(\"10*10+5\");\n</code></pre><p></p>", "options": [{"option": "10*10+5", "correct": false}, {"option": "105 as a string", "correct": false}, {"option": "105 as an integer value", "correct": true}, {"option": "100", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, some functions returns values by default.</p>", "options": [{"option": "Yes", "correct": true}, {"option": "No", "correct": false}], "level": "Easy"}, {"question": "<p>The following JavaScript code does not throw any errors:\n</p><pre class=\"prettyprint\"><code>    var t = (function(x) {return x*x;}(10));\n</code></pre><p></p>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var string2Num=parseInt(\"123xyz\");\n</code></pre><p></p>", "options": [{"option": "NaN", "correct": false}, {"option": "123", "correct": false}, {"option": "123xyz", "correct": true}, {"option": "Exception", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to define the <strong>m</strong> method with respect to the <strong>f</strong> function and the <strong>o</strong> object?</p>", "options": [{"option": "o.m=f.o", "correct": false}, {"option": "o.m=f", "correct": true}, {"option": "f=o.m ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the equivalent code of the following code snippet:</p>\n<pre class=\"prettyprint\"><code>var o = new Object();\n</code></pre>", "options": [{"option": "var o;", "correct": false}, {"option": "var o=Object();", "correct": false}, {"option": "object o=new Object();", "correct": false}, {"option": "var o=new Object;", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the difference between the following JavaScript statements:\n</p><pre class=\"prettyprint\"><code>    !!(obj1 &amp;&amp; obj2);\n    (obj1 &amp;&amp; obj2);\n</code></pre><p></p>", "options": [{"option": "Both the statements return a boolean value \u201cTrue\u201d.", "correct": false}, {"option": "Both the statements return a boolean value \u201cFalse\u201d.", "correct": false}, {"option": "Both the statements checks for the existence of the specified objects. ", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function constfuncs() \n    {\n        var funcs = [];\n        for(var i = 0; i &lt; 10; i++)\n            funcs[i] = function() { return i; };\n        return funcs;\n    }\n    var funcs = constfuncs();\n    funcs[5]()\n</code></pre><p></p>", "options": [{"option": "9", "correct": false}, {"option": "0", "correct": false}, {"option": "10", "correct": true}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following types of scoping is used in JavaScript?</p>", "options": [{"option": "Literal", "correct": false}, {"option": "Lexical", "correct": true}, {"option": "Segmental", "correct": false}, {"option": "Sequential", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following enables the implementation of <strong>Lexical Scoping</strong>?</p>", "options": [{"option": "Object acquisition", "correct": false}, {"option": "Dereferencing the current scope chain", "correct": false}, {"option": "Referencing the current scope chain", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is a <strong>closure</strong> in JavaScript?</p>", "options": [{"option": "Function objects", "correct": false}, {"option": "The scope where the function variables are resolved", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a closure in JavaScript?</p>", "options": [{"option": "Objects", "correct": false}, {"option": "Variables", "correct": false}, {"option": "Functions", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var scope = \"global scope\";\n    function checkscope() {\n    var scope = \"local scope\"; \n    function f() \n    { \n         return scope; \n    }\n    return f;\n</code></pre><p></p>", "options": [{"option": "Null", "correct": false}, {"option": "Exception", "correct": false}, {"option": "The value in scope", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the fundamental rule of lexical scoping in JavaScript?</p>", "options": [{"option": "The functions are executed using the scope chain.", "correct": true}, {"option": "The functions are declared in the scope.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following scoping procedures is functionally opposite to the lexical scoping procedure?</p>", "options": [{"option": "Literal ", "correct": false}, {"option": "Static ", "correct": false}, {"option": "Dynamic ", "correct": true}, {"option": "Generic ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>dynamic scoping</strong> procedure in JavaScript?</p>", "options": [{"option": "The variables can be declared outside the scope.", "correct": true}, {"option": "The variables must be declared outside the scope.", "correct": false}, {"option": "The variables cannot be declared outside the scope.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following algorithmic languages is used to standardize the <strong>lexical scoping</strong> technique?</p>", "options": [{"option": "Ada", "correct": false}, {"option": "Pascal", "correct": false}, {"option": "Modula2", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following entities is used to define the behavior of the class instances present within a method?</p>", "options": [{"option": "Method", "correct": false}, {"option": "Classes", "correct": true}, {"option": "Interfaces", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following keywords is used to refer to an object which invoked the specified keyword?</p>", "options": [{"option": "from", "correct": false}, {"option": "to", "correct": false}, {"option": "this", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var o = new F();\n    o.constructor === F\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the augmenting class objects inherit the prototype properties in the _____________.</p>", "options": [{"option": "Static state ", "correct": false}, {"option": "Dynamic state", "correct": true}, {"option": "Static and the dynamic states", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>JSON()</strong> method in JavaScript?</p>", "options": [{"option": "It can be invoked manually as 'object.JSON()'.", "correct": false}, {"option": "It will be automatically invoked by the compiler.", "correct": false}, {"option": "It is invoked automatically by the 'JSON.stringify()' method.", "correct": true}, {"option": "It cannot be invoked in any form.", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>B</strong> class can extend the <strong>A</strong> class when _____________.</p>", "options": [{"option": "B is the superclass and A is the subclass", "correct": false}, {"option": "A is the superclass and B is the subclass", "correct": true}, {"option": "Both the classes are superclasses", "correct": false}, {"option": "Both the classes are subclasses", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements represents the <strong>B</strong> subclass inheriting the <strong>A</strong> superclass?</p>", "options": [{"option": "B=inherit(A);", "correct": false}, {"option": "B=A.inherit();", "correct": false}, {"option": "B.prototype=inherit(A);", "correct": true}, {"option": "B.prototype=inherit(A.prototype);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to create new properties and modify the attributes of existing properties?</p>", "options": [{"option": "Object.defineProperty()", "correct": false}, {"option": "Object.defineProperties()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, how many global symbols can be defined by modules?</p>", "options": [{"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "One", "correct": true}, {"option": "Four", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the scope of a function is also known as the ______________.</p>", "options": [{"option": "Function\u2019s scope", "correct": false}, {"option": "Module function", "correct": true}, {"option": "Modulated function", "correct": false}, {"option": "Private function", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the modules that have multiple items in their API can __________________.</p>", "options": [{"option": "Assign itself to a global variable", "correct": false}, {"option": "Invoke another module of the same kind", "correct": false}, {"option": "Return a namespace object", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>provides()</strong> function and the <strong>exports</strong> object are used to ________________.</p>", "options": [{"option": "Store the module\u2019s API and register their APIs", "correct": false}, {"option": "Register the module\u2019s API and store their APIs", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var sets = com.davidflanagan.collections.sets;\n</code></pre><p></p>", "options": [{"option": "A single module is imported", "correct": true}, {"option": "A module is partially imported", "correct": false}, {"option": "A namespace is imported", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>properties()</strong> method is ________________.</p>", "options": [{"option": "A non-enumerable method", "correct": true}, {"option": "An enumerable method", "correct": false}, {"option": "An operational method", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>\u2018$\u2019</strong> in the RegExp object is a ______________.</p>", "options": [{"option": "character", "correct": false}, {"option": "matcher", "correct": false}, {"option": "metacharacter", "correct": true}, {"option": "metadata", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following expressions is used to match the characters that are not enclosed in brackets?</p>", "options": [{"option": "[...]", "correct": false}, {"option": "[^]", "correct": false}, {"option": "[^...]", "correct": true}, {"option": "[\\D]", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the <strong>/[^(]</strong>* regular expression in JavaScript?</p>", "options": [{"option": "It matches one or more characters that are not open parentheses.", "correct": false}, {"option": "It matches zero or more characters that are open parentheses.", "correct": false}, {"option": "It matches zero or more characters that are not open parentheses.", "correct": true}, {"option": "It matches one or more characters that are open parentheses.", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the significance of parentheses in regular expressions?</p>", "options": [{"option": "It defines the pattern matching techniques.", "correct": false}, {"option": "It defines the portion of strings in the regular expressions.", "correct": false}, {"option": "It defines the subpatterns within the complete patterns.", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to perform the <strong>search-and-replace</strong> operation on strings for pattern matching?</p>", "options": [{"option": "searchandreplace()", "correct": false}, {"option": "replace()", "correct": true}, {"option": "add()", "correct": false}, {"option": "edit()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is not included in the <strong>Crockford\u2019s</strong> subset?</p>", "options": [{"option": "coeval()", "correct": false}, {"option": "eval()", "correct": true}, {"option": "equal()", "correct": false}, {"option": "equivalent()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, why are the <strong>==</strong> and the <strong>!=</strong> operators not allowed by subsets?</p>", "options": [{"option": "It uses bitwise checking.", "correct": false}, {"option": "It uses the 'equals()' and the 'notequals()' methods instead.", "correct": false}, {"option": "It uses the '===' and the '!==' operators instead.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Why was <strong>\u201cThe Good Parts\u201d</strong> designed as a language subset in JavaScript?</p>", "options": [{"option": "To improve the programmer flexibility", "correct": false}, {"option": "To improve the programmer productivity", "correct": true}, {"option": "To balance the work load of the programmer", "correct": false}, {"option": "To create an in-built compiler and interpreter", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following subsets is a secure container designed to safely run untrusted JavaScript?</p>", "options": [{"option": "The Good Parts", "correct": false}, {"option": "Sandbox", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why is the <strong>this</strong> keyword forbidden in JavaScript?</p>", "options": [{"option": "The functions should access the global objects.", "correct": false}, {"option": "The functions should not access the global objects.", "correct": true}, {"option": "It is very inefficient to use.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions are not allowed in secure subsets?</p>", "options": [{"option": "debugger(), test()", "correct": false}, {"option": "eval(), function() constructor", "correct": true}, {"option": "eval(), debugger()", "correct": false}, {"option": "evaluate(), restrict()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following objects is used to define methods that allow complete control over the page contents?</p>", "options": [{"option": "Server-side document", "correct": false}, {"option": "Client-side document ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is one of the first security subsets proposed in JavaScript?</p>", "options": [{"option": "FBJS", "correct": false}, {"option": "Caja", "correct": false}, {"option": "Dojox.secure", "correct": false}, {"option": "ADSafe", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following subsets is used to transform the web content into secure modules that can be hosted on web pages?</p>", "options": [{"option": "Microsoft Web Sandbox", "correct": false}, {"option": "ADsafe", "correct": false}, {"option": "Caja", "correct": false}, {"option": "dojox.secure", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    const pi=3.14;\n    var pi=4;\n    console.log(pi);\n</code></pre><p></p>", "options": [{"option": "4", "correct": false}, {"option": "3.14", "correct": false}, {"option": "Error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the significance of the <strong>let</strong> keyword in JavaScript?</p>", "options": [{"option": "It is used in the 'for' or the 'for/in' loop, as a substitute for var.", "correct": false}, {"option": "It is used as a block statement, to define new variables.", "correct": false}, {"option": "It is used to define variables that are scoped to a single expression.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the difference between the variables that are declared with <strong>var</strong> and <strong>let</strong>?</p>", "options": [{"option": "'var' is confined to a particular function but 'let' is not.", "correct": false}, {"option": "'let' is confined to a particular function but 'var' is not.", "correct": true}, {"option": "'var' defines values based on conditions but 'let' does not.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    function oddsums(5) \n    {\n         let total = 0, result=[]; \n         for(let x = 1; x &lt;= n; x++) \n         { \n            let odd = 2*x-1; \n            total += odd;\n            result.push(total);\n         }\n         return result;\n    }\n</code></pre><p></p>", "options": [{"option": "1,2,3,4,5", "correct": false}, {"option": "3,6,9,12,15", "correct": false}, {"option": "1,4,9,16,25", "correct": true}, {"option": "1,3,5,7,9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    let x=x+1;\n    console.log(x);\n</code></pre><p></p>", "options": [{"option": "0", "correct": false}, {"option": "NaN", "correct": true}, {"option": "Null", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    [x,y]=[y,x];\n</code></pre><p></p>", "options": [{"option": "A new reference object is created", "correct": false}, {"option": "An error is flashed", "correct": true}, {"option": "An exception is thrown", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following looping statements allows XML tags to appear in JavaScript programs and is used to add API for operating on XML data?</p>", "options": [{"option": "for ", "correct": false}, {"option": "while ", "correct": false}, {"option": "for/each ", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following exceptions is thrown by the iterators from the <strong>next()</strong> method when there are no more values to iterate in the finite collections?</p>", "options": [{"option": "ExitIteration", "correct": true}, {"option": "AbortIteration", "correct": false}, {"option": "Abort", "correct": false}, {"option": "StopIteration", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods of the <strong>iterable</strong> object is used to return the iterator objects for the collection?</p>", "options": [{"option": "iterator()", "correct": false}, {"option": "_iteration_()", "correct": false}, {"option": "_iterator_()", "correct": true}, {"option": "_return_iterator_()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    let succ = function(x) x+1, yes = function() true, no = function() false;\n</code></pre><p></p>", "options": [{"option": "Modular behaviour", "correct": false}, {"option": "Functional behaviour", "correct": true}, {"option": "Shorthand expression", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    data.sort(function(a,b),b-a);\n</code></pre><p></p>", "options": [{"option": "Alphabetical order sort", "correct": false}, {"option": "Chronological order sort", "correct": false}, {"option": "Reverse alphabetical order sort", "correct": false}, {"option": "Reverse numerical order sort", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to trim whitespaces?</p>", "options": [{"option": "let trimmed=(trim(l));", "correct": false}, {"option": "let trimmed=(l.trim() for (l in lines));", "correct": true}, {"option": "let trimmed=l.trim();", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the default value of the <strong>catch</strong> clause when it has no conditionals?</p>", "options": [{"option": "0", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>finally</strong> block is called when ________________.</p>", "options": [{"option": "There are no exceptions", "correct": false}, {"option": "The catches do not match", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the return type of the <strong>typeof</strong> operator in standard JavaScript objects?</p>", "options": [{"option": "XML", "correct": false}, {"option": "DOM", "correct": false}, {"option": "HTML", "correct": false}, {"option": "Object", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to work with <strong>XML fragments</strong> and not with the <strong>XML()</strong> function?</p>", "options": [{"option": "XMLInterface()", "correct": false}, {"option": "XMLClass()", "correct": false}, {"option": "XMLList()", "correct": true}, {"option": "XMLArray()", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is a <strong>descendant</strong> operator in JavaScript?</p>", "options": [{"option": "..", "correct": false}, {"option": "\u2026", "correct": true}, {"option": "*", "correct": false}, {"option": "@", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to perform XML manipulations using the XML objects invocation?</p>", "options": [{"option": "insertChildAfter()", "correct": false}, {"option": "insertChildBefore()", "correct": true}, {"option": "appendChildAfter(\u2026)", "correct": false}, {"option": "appendChildBefore(\u2026)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to delete <strong>weight</strong> tags?</p>", "options": [{"option": "delete weight(pt).all;", "correct": false}, {"option": "delete pt.element[all];", "correct": false}, {"option": "delete pt;", "correct": false}, {"option": "delete pt..weight;", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the events generated by the node objects is called as _______________.</p>", "options": [{"option": "Emitters", "correct": true}, {"option": "Generators", "correct": false}, {"option": "Dispatchers", "correct": false}, {"option": "Highevents", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to deregister the <strong>f</strong> event handler?</p>", "options": [{"option": "removerListener(name,f)", "correct": true}, {"option": "removeAllListeners(name)", "correct": false}, {"option": "deleteAllListeners(name)", "correct": false}, {"option": "deleteListener(name,f)", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following functions is functionally similar to the <strong>on()</strong> function?</p>", "options": [{"option": "listeners()", "correct": false}, {"option": "addListener()", "correct": true}, {"option": "once()", "correct": false}, {"option": "add()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is an <strong>event emitter</strong>?</p>", "options": [{"option": "once", "correct": false}, {"option": "process", "correct": true}, {"option": "listeners", "correct": false}, {"option": "on", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>uncaught</strong> exceptions generate events when ______________.</p>", "options": [{"option": "Handlers are deregistered", "correct": false}, {"option": "Handler functions are called", "correct": false}, {"option": "Handlers are registered", "correct": true}, {"option": "Handlers do not have a matching catch clause", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following <strong>POSIX</strong> signals is used to generate events in JavaScript?</p>", "options": [{"option": "SIGFLOAT", "correct": false}, {"option": "SIGINT", "correct": true}, {"option": "SIGSHORT", "correct": false}, {"option": "SIGDOWN", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to pause <strong>data</strong> events in JavaScript?</p>", "options": [{"option": "s.stop();", "correct": false}, {"option": "s.pause();", "correct": true}, {"option": "s.halt();", "correct": false}, {"option": "s.wait();", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following methods is used to execute the <strong>end</strong> event on the <strong>EOF</strong> when no more data will arrive?</p>", "options": [{"option": "s.on(\"data\",f);", "correct": false}, {"option": "s.on(\"error\",f);", "correct": false}, {"option": "s.on(\"default\",f);", "correct": false}, {"option": "s.on(\"end\",f);", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the return value of the <strong>write()</strong> method when the node data is not written immediately and is internally buffered?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following global functions is not included in core JavaScript?</p>", "options": [{"option": "trim();", "correct": false}, {"option": "spawn(f);", "correct": true}, {"option": "exult();", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to quit the Rhino environment?</p>", "options": [{"option": "terminate()", "correct": false}, {"option": "exit()", "correct": false}, {"option": "close()", "correct": false}, {"option": "quit()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how are small and simple Rhino programs executed?</p>", "options": [{"option": "By starting a one to one shell", "correct": false}, {"option": "By starting an interative shell", "correct": true}, {"option": "By creating a thread to do simple programs", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to import the packages and the classes as objects?</p>", "options": [{"option": "import(java.util.*);", "correct": false}, {"option": "importClass(java.util.*);", "correct": true}, {"option": "import.Class(java.util.*);", "correct": false}, {"option": "Class.import(java.util.*);", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    var f = new java.io.File(\"/tmp/test\");\n    var out = new java.io.FileWriter(f);\n    out instanceof java.io.Reader\n</code></pre><p></p>", "options": [{"option": "Error", "correct": false}, {"option": "True", "correct": false}, {"option": "Exception", "correct": false}, {"option": "False", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following operators is used to instantiate classes?</p>", "options": [{"option": "new", "correct": true}, {"option": "create", "correct": false}, {"option": "instantiate", "correct": false}, {"option": "create.new", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following classes is used to create JavaScript programs from new Java arrays?</p>", "options": [{"option": "java.Array", "correct": false}, {"option": "java.lang.reflect.Array", "correct": true}, {"option": "java.lang.*", "correct": false}, {"option": "java.lang.Array", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to register handlers in JavaScript?</p>", "options": [{"option": "register()", "correct": false}, {"option": "add()", "correct": false}, {"option": "on()", "correct": true}, {"option": "include()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following namespaces include the necessary globals of a node?</p>", "options": [{"option": "variables", "correct": false}, {"option": "system", "correct": false}, {"option": "process", "correct": true}, {"option": "using", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following client-side timer functions is supported by Node?</p>", "options": [{"option": "getInterval()", "correct": false}, {"option": "Interval()", "correct": false}, {"option": "clearTime()", "correct": false}, {"option": "clearTimeout()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what of the following functions is used to debug the output in Node?</p>", "options": [{"option": "print();", "correct": false}, {"option": "console.log(\u2026);", "correct": true}, {"option": "debug(\u2026);", "correct": false}, {"option": "execute(\u2026);", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is functionally similar to the <strong>load()</strong> function in Node?</p>", "options": [{"option": "store()", "correct": false}, {"option": "module()", "correct": false}, {"option": "log()", "correct": false}, {"option": "require()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following commands to run Node programs in JavaScript?</p>", "options": [{"option": "node(program.js)", "correct": false}, {"option": "program.js", "correct": false}, {"option": "node program.js", "correct": true}, {"option": "node.program.js", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, Node relies on the event handlers because the APIs are _________________.</p>", "options": [{"option": "Synchronous", "correct": false}, {"option": "Reusable", "correct": false}, {"option": "Asynchronous", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a fast C++ based JavaScript interpreter?</p>", "options": [{"option": "Sockets", "correct": false}, {"option": "Node", "correct": true}, {"option": "Processors", "correct": false}, {"option": "Closures", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following forms is included in client-side storage?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following storages allows the caching of web pages and their associated resources?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the Microsoft\u2019s own proprietary client-side storage?</p>", "options": [{"option": "Offline Web Applications", "correct": false}, {"option": "IE User Data", "correct": true}, {"option": "Cookies", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following databases is used to handle huge amounts of data?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Datawarehouse", "correct": false}, {"option": "Web databases", "correct": true}, {"option": "Access", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>localStorage</strong> and <strong>sessionStorage</strong>?</p>", "options": [{"option": "Element ", "correct": false}, {"option": "Window ", "correct": true}, {"option": "Hash ", "correct": false}, {"option": "DOM ", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the difference between the <strong>localStorage</strong> and the <strong>sessionStorage</strong>?</p>", "options": [{"option": "Lifetime", "correct": false}, {"option": "Scope", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functions is used to retrieve values in JavaScript?</p>", "options": [{"option": "get()", "correct": false}, {"option": "retrieve()", "correct": false}, {"option": "getItem()", "correct": true}, {"option": "retrieveItem()", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functions is used to store values in JavaScript?</p>", "options": [{"option": "set()", "correct": false}, {"option": "setItem()", "correct": true}, {"option": "storeItem()", "correct": false}, {"option": "store()", "correct": false}], "level": "Hard"}, {"question": "<p>What is the default value of the <strong>type</strong> attribute in JavaScript?</p>", "options": [{"option": "text/css", "correct": false}, {"option": "text/javascript", "correct": true}, {"option": "text", "correct": false}, {"option": "xml", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>src</strong> attribute in JavaScript?</p>", "options": [{"option": "It simplifies the HTML files.", "correct": true}, {"option": "It restricts the manipulation in the HTML files.", "correct": false}, {"option": "It makes the HTML file modular.", "correct": false}, {"option": "It becomes self-cached.", "correct": false}], "level": "Easy"}, {"question": "<p>In JavScript, which of the following statements is used to display the time while the document loads?</p>", "options": [{"option": "window.=displayTime;", "correct": false}, {"option": " onload=displayTime;", "correct": false}, {"option": " window.onload=start;", "correct": false}, {"option": "window.onload=displayTime;", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following characters is interpreted as an XML markup?</p>", "options": [{"option": "!", "correct": false}, {"option": ">", "correct": false}, {"option": "&", "correct": true}, {"option": "*", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>document</strong> refers to ________________.</p>", "options": [{"option": "Dynamic Information", "correct": false}, {"option": "Static Information", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is the entry point to all the client-side features and APIs?</p>", "options": [{"option": "Standard", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following identifiers represents a browser window or frame?</p>", "options": [{"option": "Frames", "correct": false}, {"option": "Window", "correct": true}, {"option": "Location", "correct": false}, {"option": "Frame", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties of the <strong>Window</strong> object is used to refer to a location object?</p>", "options": [{"option": "Position", "correct": false}, {"option": "Area", "correct": false}, {"option": "Window", "correct": false}, {"option": "Location", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaSCript, which of the following <strong>Window-object</strong> methods is used to display the message in the dialog box?</p>", "options": [{"option": "alert()", "correct": true}, {"option": "message()", "correct": false}, {"option": "prompt()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>setTimeout()</strong> method is used to _________________.</p>", "options": [{"option": "Make the event sleep", "correct": false}, {"option": "Register a function that is to be invoked after a certain time", "correct": true}, {"option": "Invoke events after a certain time", "correct": false}, {"option": "Set the time for iteration", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is a <strong>global object</strong> in JavaScript?</p>", "options": [{"option": "Register", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to represent the content that is displayed in the window?</p>", "options": [{"option": "Document", "correct": true}, {"option": "Content", "correct": false}, {"option": "Window", "correct": false}, {"option": "Frame", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to choose a document-element based on the value of its <strong>id</strong> attribute?</p>", "options": [{"option": "getElementsbyId()", "correct": false}, {"option": "getElementbyId()", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to access the first child of a node?</p>", "options": [{"option": "timestamp.Child1", "correct": false}, {"option": "timestamp.Child(1)", "correct": false}, {"option": "timestamp.Child(0)", "correct": false}, {"option": "timestamp.firstChild", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>style</strong> property?</p>", "options": [{"option": "Window", "correct": false}, {"option": "Element", "correct": true}, {"option": "Location", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of the event handlers in the JavaScript?</p>", "options": [{"option": "The event handlers add inner-HTML pages to the code.", "correct": false}, {"option": "The event handlers performs the handling of exceptions and occurrences.", "correct": false}, {"option": "The event handlers allow the JavaScript code to alter the behavior of windows.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following handlers is triggered when the document in the window is stable and is ready for manipulation?</p>", "options": [{"option": "onload", "correct": true}, {"option": "manipulate", "correct": false}, {"option": "create", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following functions is necessary for programs that extensively use event handlers?</p>", "options": [{"option": "Modular ", "correct": false}, {"option": "Split up ", "correct": false}, {"option": "Nested ", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to find all the container elements with the <strong>reveal</strong> class?</p>", "options": [{"option": "var elements=document.getElementByClassName(\"reveal\");", "correct": false}, {"option": "var elements=document.getElementsByClassName(\"reveal\")", "correct": true}, {"option": "var elements=document.getElementByName(\"reveal\");", "correct": false}, {"option": "var elements=document.getElementsClassName(\"reveal\");", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements is used to update the contents of the timestamp element when clicked?</p>", "options": [{"option": "timestamp.onLoad=function() { this.innerHTML = new Date().toString(); }", "correct": false}, {"option": "timestamp.onload=function() { this.innerHTML = new Date().toString(); }", "correct": false}, {"option": "timestamp.onclick=function() { this.innerHTML = new Date().toString(); }", "correct": true}, {"option": "timestamp.onclick=function() { innerHTML = new Date().toString(); }", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is not an object in JavaScript?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Location", "correct": false}, {"option": "Position", "correct": true}, {"option": "Window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to change the class and let the stylesheet specify the details?</p>", "options": [{"option": "timestamp.className = \"change\";", "correct": false}, {"option": "timestamp.className = \"specify\";", "correct": false}, {"option": "timestamp.className = \"move\";", "correct": false}, {"option": "timestamp.className = \"highlight\"", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that can only be invoked once?</p>", "options": [{"option": "setTotaltime()", "correct": false}, {"option": "setTimeout()", "correct": true}, {"option": "setInterval()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that is to be invoked repeatedly after a specified period?</p>", "options": [{"option": "setTimeout()", "correct": false}, {"option": "setTotaltime()", "correct": false}, {"option": "setInterval()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following handler methods is invoked at the occurrence of uncaught exceptions?</p>", "options": [{"option": "onhalt", "correct": false}, {"option": "onerror", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to obtain information on the browser vendor and version?</p>", "options": [{"option": "modal", "correct": false}, {"option": "version", "correct": false}, {"option": "browser", "correct": false}, {"option": "navigator", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods receives the return value of the <strong>setInterval()</strong> function so that it can cancel future invocations?</p>", "options": [{"option": "clearInvocation()", "correct": false}, {"option": "cancelInvocation()", "correct": false}, {"option": "clearInterval()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects include the <strong>setTimeout()</strong> function?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": true}, {"option": "Location", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>location</strong> property?</p>", "options": [{"option": "Position", "correct": false}, {"option": "Window", "correct": true}, {"option": "Element", "correct": false}, {"option": "Location", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    window.location === document.location\n</code></pre><p></p>", "options": [{"option": "False", "correct": false}, {"option": "True", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following frameworks is used to focus on the <strong>DOM</strong> and <strong>Ajax</strong> utilities?</p>", "options": [{"option": "jQuery", "correct": false}, {"option": "Prototype", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>Dojo</strong> framework in JavaScript?</p>", "options": [{"option": "It focuses on the 'DOM' and the 'Ajax' utilities.", "correct": false}, {"option": "It advertises incredible depth.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What of the following versions of the <strong>YUI</strong> framework is incompatible in JavaScript?</p>", "options": [{"option": "YUI2 ", "correct": false}, {"option": "YUI1 ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web applications is included in the API framework?</p>", "options": [{"option": "Dojo", "correct": false}, {"option": "YUI", "correct": false}, {"option": "GWT", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects include the <strong>URL</strong> property?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Document", "correct": true}, {"option": "Location", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is represented by the <strong>location</strong> property?</p>", "options": [{"option": "DOM", "correct": true}, {"option": "URL", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is not included by the <strong>Location</strong> object?</p>", "options": [{"option": "protocol", "correct": false}, {"option": "host", "correct": false}, {"option": "hostname", "correct": false}, {"option": "hostee", "correct": true}], "level": "Medium"}, {"question": "<p>What is the return type of the <strong>hash</strong> property in JavaScript?</p>", "options": [{"option": "Query string", "correct": false}, {"option": "Packets", "correct": false}, {"option": "String", "correct": false}, {"option": "Fragment identifier", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to extract arguments from the <strong>search</strong> property of the URL?</p>", "options": [{"option": "urlArgs()", "correct": true}, {"option": "url()", "correct": false}, {"option": "hash()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following frameworks is used to define the <strong>decodeURIComponent()</strong> method?</p>", "options": [{"option": "Server-side", "correct": false}, {"option": "Client-side", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to remove the current document from the browsing history before loading the new one?</p>", "options": [{"option": "modify()", "correct": false}, {"option": "assign()", "correct": false}, {"option": "replace()", "correct": true}, {"option": "remove()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, why is the <strong>replace()</strong> method preferred over the <strong>assign()</strong> method?</p>", "options": [{"option": "Reliability", "correct": false}, {"option": "Compatibility", "correct": false}, {"option": "Efficiency", "correct": false}, {"option": "The 'replace()' method handles the unconditional loading.", "correct": true}], "level": "Hard"}, {"question": "<p>What is the significance of the <strong>assign()</strong> method in JavaScript?</p>", "options": [{"option": "it displays the current window.", "correct": false}, {"option": "It loads the window and the display.", "correct": false}, {"option": "It unloads the window.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>history</strong> property?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": false}, {"option": "History", "correct": true}, {"option": "Location", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how is <strong>browser history</strong> affected if a window has a child window?</p>", "options": [{"option": "Numerically interleaved", "correct": false}, {"option": "Chronologically interleaved", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>length</strong> property belongs to ___________________________ object.</p>", "options": [{"option": "Window", "correct": false}, {"option": "Element", "correct": false}, {"option": "History", "correct": true}, {"option": "Document", "correct": false}], "level": "Hard"}, {"question": "<p>What is the datatype of the <strong>go()</strong> method\u2019s parameter in JavaScript?</p>", "options": [{"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Integer", "correct": true}, {"option": "Double", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the special feature of the modern web applications?</p>", "options": [{"option": "Must load the document to manipulate", "correct": false}, {"option": "Can alter contents without loading document", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>navigator</strong> property belongs to _________________________ object.</p>", "options": [{"option": "Document", "correct": false}, {"option": "Window", "correct": false}, {"option": "Location", "correct": false}, {"option": "Navigator", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the vendor-neutral synonym for the <strong>navigator</strong>?</p>", "options": [{"option": "Static data", "correct": false}, {"option": "Purpose information", "correct": false}, {"option": "Data information", "correct": false}, {"option": "Client information", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is preferred in JavaScripting?</p>", "options": [{"option": "Software testing", "correct": false}, {"option": "Blackbox testing", "correct": false}, {"option": "Feature testing", "correct": true}, {"option": "Whitebox testing", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following properties is used for <strong>browser sniffing</strong>?</p>", "options": [{"option": "Platform", "correct": false}, {"option": "AppVersion", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, where is the information of the <strong>userAgent</strong> property located?</p>", "options": [{"option": "App Id", "correct": false}, {"option": "App Version", "correct": true}, {"option": "Platform", "correct": false}, {"option": "App Name", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, each tab in a web browser window is called as ______________________________________.</p>", "options": [{"option": "Browser information", "correct": false}, {"option": "Browsing context", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In HTML, a document is nested by using ____________________.</p>", "options": [{"option": "frame", "correct": false}, {"option": "nest", "correct": false}, {"option": "iframe", "correct": true}, {"option": "into", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods of the window object is used to open a new web browser window?</p>", "options": [{"option": "Createtab()", "correct": false}, {"option": "Window.open()", "correct": true}, {"option": "Open()", "correct": false}, {"option": "Createtab() and Open()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which object serves as the <strong>global</strong> object at the top of the scope chain?</p>", "options": [{"option": "Hash", "correct": false}, {"option": "Property", "correct": false}, {"option": "Element ", "correct": false}, {"option": "Window", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties of the <strong>window</strong> object holds the <strong>name</strong> of a frame?</p>", "options": [{"option": "Name", "correct": true}, {"option": "Title", "correct": false}, {"option": "Description", "correct": false}, {"option": "Name and Title", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about the usage of the fourth argument in <strong>open()</strong> is true?</p>", "options": [{"option": "Second argument is a name of a retired window", "correct": false}, {"option": "First argument is a name of an existing window", "correct": false}, {"option": "Second argument is a name of an existing window", "correct": true}, {"option": "First argument is a name of a retired window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the <strong>inner</strong> frame within a top-level window?</p>", "options": [{"option": "parent(parent)", "correct": false}, {"option": "parent.parent", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the <strong>central</strong> object in a larger API?</p>", "options": [{"option": "Document object material", "correct": false}, {"option": "Document object model", "correct": true}, {"option": "Binary object model", "correct": false}, {"option": "Document object material and document object model", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the node directly connected to another node when moving towards the root?</p>", "options": [{"option": "Sibling", "correct": false}, {"option": "Child", "correct": false}, {"option": "Parent", "correct": true}, {"option": "Ancestors", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>text</strong> and the <strong>comment</strong> belongs to _____________________________.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Character Data", "correct": true}, {"option": "Document", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following nodes represents <strong>HTML</strong> elements?</p>", "options": [{"option": "Subclass", "correct": false}, {"option": "Element", "correct": true}, {"option": "HTML", "correct": false}, {"option": "Window", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is/are of <strong>Text nodes</strong>?</p>", "options": [{"option": "Text", "correct": false}, {"option": "Comment", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of the these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to query a document for an element or elements?</p>", "options": [{"option": "A specified id attribute", "correct": false}, {"option": "By matching the specified CSS selector", "correct": false}, {"option": "A specified tag name", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to select an HTML element based on the value of its name attribute?</p>", "options": [{"option": "getElementByName()", "correct": false}, {"option": "getElementsByName()", "correct": true}, {"option": "getElementsName()", "correct": false}, {"option": "getElementName()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties refers to the <strong>root</strong> element of the document?</p>", "options": [{"option": "Document Element", "correct": true}, {"option": "Element document", "correct": false}, {"option": "Root document", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the return type of the method <strong>getElementsByClassName()</strong>?</p>", "options": [{"option": "DOM", "correct": false}, {"option": "Document", "correct": false}, {"option": "Node", "correct": false}, {"option": "NodeList", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the syntax used to describe elements in CSS?</p>", "options": [{"option": "Protectors", "correct": false}, {"option": "Selectors", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>The <strong>C</strong> in <strong>CSS</strong> stands for</p>", "options": [{"option": "Continuous", "correct": false}, {"option": "Cascaded", "correct": false}, {"option": " Cascading", "correct": true}, {"option": " Contentional", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is an example of the <strong>shortcut property</strong>?</p>", "options": [{"option": "Border", "correct": false}, {"option": "Font", "correct": false}, {"option": "Text", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is the default <strong>position</strong> of the elements with CSS?</p>", "options": [{"option": "Relative", "correct": false}, {"option": "Static", "correct": true}, {"option": "Absolute", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties allows you to specify an element\u2019s position with respect to the browser window?</p>", "options": [{"option": "Relative", "correct": false}, {"option": "Fixed", "correct": true}, {"option": "Static", "correct": false}, {"option": "Absolute", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following specifies the type of the event that occurred?</p>", "options": [{"option": "Event type", "correct": true}, {"option": "Event target", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects is associated with an event?</p>", "options": [{"option": "Event type", "correct": false}, {"option": "Event target", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a browser invokes the <strong>handler</strong> when _____________________________________.</p>", "options": [{"option": "The program begins", "correct": false}, {"option": "Any event occurs", "correct": false}, {"option": "Specified event occurs", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an <strong>event handler</strong> is a ________________________________.</p>", "options": [{"option": "Function", "correct": true}, {"option": "Interface", "correct": false}, {"option": "Event", "correct": false}, {"option": "Handler", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following specifies the property of an <strong>event</strong>?</p>", "options": [{"option": "Type", "correct": true}, {"option": "Target", "correct": false}, {"option": "Manner", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is directly connected to a specific input device?</p>", "options": [{"option": "Device-independent input", "correct": false}, {"option": "Device-dependent input", "correct": true}, {"option": "User interface", "correct": false}, {"option": "State change", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following events is a <strong>high-level</strong> event?</p>", "options": [{"option": "User interface events", "correct": true}, {"option": "Device-independent events", "correct": false}, {"option": "Device-dependent events", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is not directly connected to a specific input device?</p>", "options": [{"option": "User interface", "correct": false}, {"option": "Device-independent", "correct": true}, {"option": "Device-dependent", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is fired on any <strong>scrollable</strong> document element?</p>", "options": [{"option": "Window", "correct": false}, {"option": "Scroll", "correct": true}, {"option": "Load", "correct": false}, {"option": "Unload", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>mouse</strong> event is generated when the user ________________________________________.</p>", "options": [{"option": "Clicks the mouse over a document", "correct": true}, {"option": "Moves the pointer over a document", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties specifies the <strong>position</strong> and the <strong>button</strong> state of the mouse?</p>", "options": [{"option": "ClientY and ClientX", "correct": false}, {"option": "AltKey and CtrlKey", "correct": false}, {"option": "ClientX and ClientY", "correct": true}, {"option": "MetaKey and ShiftKey", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following keys are set to true when the <strong>keyboard modifier</strong> keys are held down?</p>", "options": [{"option": "AltKey", "correct": false}, {"option": "CtrlKey", "correct": false}, {"option": "MetaKey", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, how to <strong>detect</strong> and <strong>respond</strong> to mouse drags?</p>", "options": [{"option": "Registering a mouseover handler", "correct": false}, {"option": "Releasing a mousedown handler", "correct": false}, {"option": "Registering a mousedown handler", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>mouse out</strong> event is fired when the _______________________________________.</p>", "options": [{"option": "Mouse is no longer over an element", "correct": true}, {"option": "Mouse is over an element", "correct": false}, {"option": "Mouse is hovered", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>focus</strong> and the <strong>blur</strong> events belongs to ______________________________________ event.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Handler", "correct": false}, {"option": "Window", "correct": true}, {"option": "Scroll", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following elements is used to register handlers for <strong>load</strong> and <strong>error</strong> events?</p>", "options": [{"option": "Html", "correct": false}, {"option": "Img", "correct": true}, {"option": "Body", "correct": false}, {"option": "Form", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following events is emulated by the jQuery library?</p>", "options": [{"option": "Focusarea and Focusover", "correct": false}, {"option": "Focusall and Focusnone", "correct": true}, {"option": "Focusdown and Focusup", "correct": false}, {"option": "Focusin and Focusout", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following <strong>events</strong> is currently unnecessary?</p>", "options": [{"option": "DOM Activate", "correct": false}, {"option": "DOM FocusIn", "correct": false}, {"option": "DOM Node Inserted", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is passed as an argument to the handler for <strong>keydown</strong>, <strong>keyup</strong>, and <strong>keypress</strong> events?</p>", "options": [{"option": "Keyboard event", "correct": true}, {"option": "Key event", "correct": false}, {"option": "Mouse event", "correct": false}, {"option": "Alphabet event", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following reports <strong>rotation</strong> around three different mouse wheel axes?</p>", "options": [{"option": "ctrlKey", "correct": false}, {"option": "alterX", "correct": false}, {"option": "alterY", "correct": false}, {"option": "deltaX", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following properties specifies the string of text entered?</p>", "options": [{"option": "Message", "correct": false}, {"option": "Data", "correct": true}, {"option": "String", "correct": false}, {"option": "Text", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is defined by the <strong>specification</strong>?</p>", "options": [{"option": "Data Method", "correct": false}, {"option": "Input", "correct": false}, {"option": "Input Method", "correct": true}, {"option": "Input Data Method", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following has the <strong>generated text</strong> for key events?</p>", "options": [{"option": "Key and Char", "correct": true}, {"option": "Char and Text", "correct": false}, {"option": "Text and Key", "correct": false}, {"option": "Key and Value", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following belongs to <strong>drag</strong> and <strong>drop</strong> event?</p>", "options": [{"option": "Drop", "correct": false}, {"option": "Dragstart", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties holds a <strong>data transfer object</strong>  that contains information about the data being transferred and the formats in which it is available?</p>", "options": [{"option": "DataTransfer", "correct": true}, {"option": "TransferData", "correct": false}, {"option": "DataExchange", "correct": false}, {"option": "ExchangeData", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following APIs allows scripts in a document from one server to exchange messages with scripts in a document from another server?</p>", "options": [{"option": "Cross-Document Messaging API", "correct": true}, {"option": "Web application API", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>keyboard</strong> events are fired when the user _____________________________________.</p>", "options": [{"option": "Manually calls the button", "correct": false}, {"option": "Clicks a key", "correct": true}, {"option": "Calls the modifier", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, multiple <strong>keydown</strong> events is generated by ________________________________________.</p>", "options": [{"option": "Repeating the same process", "correct": false}, {"option": "Pressing multiple keys", "correct": false}, {"option": "Pressing the key longer than usual", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to specify the key type when pressed?</p>", "options": [{"option": "KeyName", "correct": false}, {"option": "KeyCode", "correct": true}, {"option": "KeyType", "correct": false}, {"option": "KeyProperty", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when the <strong>shift key</strong> is pressed for adding punctuation character, the value of the <strong>keyCode</strong> property is _______________________________________.</p>", "options": [{"option": "Special characters", "correct": false}, {"option": "Alphabets", "correct": false}, {"option": "Alphanumeric", "correct": false}, {"option": "Digits", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a <strong>key event</strong> property?</p>", "options": [{"option": "Alt Key", "correct": false}, {"option": "Code key", "correct": true}, {"option": "Ctrl Key", "correct": false}, {"option": "Shift Key", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following key properties holds the key name as a <strong>string</strong>?</p>", "options": [{"option": "KeyName", "correct": false}, {"option": "Key", "correct": true}, {"option": "KeyName(string)", "correct": false}, {"option": "Nameofkey(string)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if the key is a <strong>function</strong> key, then which of the following values will not be held by the <strong>key</strong> property?</p>", "options": [{"option": "F8", "correct": true}, {"option": "F2", "correct": false}, {"option": "Home", "correct": false}, {"option": "Left", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to add a <strong>binding</strong>?</p>", "options": [{"option": "Binding()", "correct": false}, {"option": "Add_bind()", "correct": false}, {"option": "Bind()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to remove a <strong>binding</strong>?</p>", "options": [{"option": "Unbind()", "correct": false}, {"option": "Removebind()", "correct": false}, {"option": "Remove(Bind b)", "correct": false}, {"option": "Unbind()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following parameters is passed to the <strong>keymap</strong> after installation?</p>", "options": [{"option": "Key property", "correct": false}, {"option": "Key name", "correct": false}, {"option": "Keydown event\u2019s object", "correct": true}, {"option": "Key stroke", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, how many types of nodes is there in total?</p>", "options": [{"option": "Eleven", "correct": false}, {"option": "Ten", "correct": false}, {"option": "Twelve", "correct": true}, {"option": "Twenty", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the node object property, <strong>ownerDocument</strong> returns the __________________________.</p>", "options": [{"option": "Last element", "correct": false}, {"option": "Parent node", "correct": false}, {"option": "Root element", "correct": true}, {"option": "Immediate node", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following node object properties returns the <strong>local</strong> part of the name of a node?</p>", "options": [{"option": "LastName", "correct": false}, {"option": "LocalName", "correct": true}, {"option": "FirstName", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>textContent</strong> property ____________________________________.</p>", "options": [{"option": "Sets the textual content of a node", "correct": false}, {"option": "Returns the textual content of a node", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the total number of <strong>node object methods</strong> available?</p>", "options": [{"option": "Nineteen", "correct": false}, {"option": "Eighteen", "correct": true}, {"option": "Twenty", "correct": false}, {"option": "Twenty one", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following Node object property returns the node immediately before a node?</p>", "options": [{"option": "textContent", "correct": false}, {"option": " index", "correct": false}, {"option": " localName", "correct": false}, {"option": "previousSibling", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>getUserData(key)</strong> method __________________________________.</p>", "options": [{"option": "Returns the associated object", "correct": true}, {"option": "Gets the user data", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to test if two nodes are equal?</p>", "options": [{"option": "equal()", "correct": false}, {"option": "isEqualNode()", "correct": true}, {"option": "==", "correct": false}, {"option": "===", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to associate an <strong>object</strong> to a <strong>key</strong> on a node?</p>", "options": [{"option": "getUserData()", "correct": false}, {"option": "cloneNode()", "correct": false}, {"option": "setUserData (key, data, handler)", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to compare the placement of two <strong>document</strong> nodes in the <strong>DOM</strong> hierarchy?</p>", "options": [{"option": "compareDocumentPosition()", "correct": true}, {"option": "cloneNode()", "correct": false}, {"option": "getUserData()", "correct": false}, {"option": "getFeature()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, a <strong>node</strong> object represents a ______________________________________.</p>", "options": [{"option": "Single node", "correct": true}, {"option": "Set of nodes", "correct": false}, {"option": "Double node", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>nodeName</strong> of the <strong>nodeType</strong> document returns ______________________________.</p>", "options": [{"option": "Doctype name", "correct": false}, {"option": "Target", "correct": false}, {"option": "#comment", "correct": false}, {"option": "#document", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, the method <strong>item()</strong> returns a _______________________________________.</p>", "options": [{"option": "Node after the specified index", "correct": false}, {"option": "Node before the specified index", "correct": false}, {"option": "Node at the specified index", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to access the <strong>nodes</strong> in the <strong>node list</strong>?</p>", "options": [{"option": "Key", "correct": false}, {"option": "Index number", "correct": true}, {"option": "Looping", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the child of the node type <strong>EntityReference</strong>?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Text", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following node types represents the <strong>root node</strong> of the <strong>DOM</strong> tree?</p>", "options": [{"option": "Document", "correct": true}, {"option": "DocumentFragment", "correct": false}, {"option": "DocumentType", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>DocumentFragment</strong> node type is used to __________________________________________.</p>", "options": [{"option": "Hold a portion of a document", "correct": true}, {"option": "Split the document into fragments", "correct": false}, {"option": "Hold the entire document", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following node types have a node value equal to <strong>null</strong>?</p>", "options": [{"option": "Document", "correct": false}, {"option": "DocumentFragment", "correct": false}, {"option": "DocumentType", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how many <strong>node object properties</strong> are there?</p>", "options": [{"option": "Twelve", "correct": false}, {"option": "Fourteen", "correct": false}, {"option": "Fifteen", "correct": false}, {"option": "Sixteen", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used for <strong>cookie manipulation</strong>?</p>", "options": [{"option": "Cookies", "correct": false}, {"option": "Manipulate", "correct": false}, {"option": "Cookie", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following explains the nature of a <strong>cookie</strong>?</p>", "options": [{"option": "Non-Volatile", "correct": false}, {"option": "Volatile", "correct": false}, {"option": "Intransient", "correct": false}, {"option": "Transient", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScipt, which of the following attributes is used to extend the <strong>lifetime</strong> of a cookie?</p>", "options": [{"option": "Higher-age", "correct": false}, {"option": "Increase-age", "correct": false}, {"option": "Max-age", "correct": true}, {"option": "Lifetime", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following defines the <strong>visibility</strong> of a cookie?</p>", "options": [{"option": "Document Path", "correct": false}, {"option": "localStorage", "correct": false}, {"option": "SessionStorage", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to <strong>configure</strong> the scope of the cookie visibility?</p>", "options": [{"option": "Path", "correct": false}, {"option": "Domain", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how do you set a cookie visibility scope to <strong>localStorage</strong>?</p>", "options": [{"option": "Set the path of a cookie to /", "correct": true}, {"option": "Set the path of a cookie to %", "correct": false}, {"option": "Set the path of a cookie to *", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>boolean</strong> cookie attribute?</p>", "options": [{"option": "Bool", "correct": false}, {"option": "Secure", "correct": true}, {"option": "Lookup", "correct": false}, {"option": "Domain", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following function is a consequence of not including <strong>semicolons</strong>, <strong>commas</strong> or <strong>whitespaces</strong> in a cookie value?</p>", "options": [{"option": "encodeURIComponent()", "correct": true}, {"option": "encodeURI()", "correct": false}, {"option": "encodeComponent()", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the constraint on the <strong>data</strong> per cookie?</p>", "options": [{"option": "2 KB", "correct": false}, {"option": "1 KB", "correct": false}, {"option": "4 KB", "correct": true}, {"option": "8 KB", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties is used to initiate an HTTP request?</p>", "options": [{"option": "Request", "correct": false}, {"option": "Location", "correct": true}, {"option": "Send", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is an alternative to the property, <strong>location</strong> of a window object?</p>", "options": [{"option": "Locate()", "correct": false}, {"option": "Submit()", "correct": true}, {"option": "Load()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following uses a <strong>scripted HTTP</strong>?</p>", "options": [{"option": "XML", "correct": false}, {"option": "HTML", "correct": false}, {"option": "Ajax", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a literal <strong>reverse</strong> of <strong>Ajax</strong>?</p>", "options": [{"option": "HTTP", "correct": false}, {"option": "HTML", "correct": false}, {"option": "XML", "correct": false}, {"option": "Comet", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>comet</strong> is also known as ________________________________________.</p>", "options": [{"option": "Server Push", "correct": false}, {"option": "Ajax Push", "correct": false}, {"option": "HTTP Streaming", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following elements has a <strong>src</strong> property to initiate HTTP GET request?</p>", "options": [{"option": "IFrame", "correct": false}, {"option": "Img", "correct": false}, {"option": "Script", "correct": false}, {"option": "Img and script", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>XMLHttpRequest</strong> is ________________________________________.</p>", "options": [{"option": "An object", "correct": false}, {"option": "A class", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a feature of an <strong>HTTP request</strong>?</p>", "options": [{"option": "Optional request body", "correct": false}, {"option": "URL being requested", "correct": false}, {"option": "Optional set of request headers", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a feature of an <strong>HTTP response</strong>?</p>", "options": [{"option": "Optional response body", "correct": false}, {"option": "Mandatory response body", "correct": true}, {"option": "URL being released", "correct": false}, {"option": "Optional set of response headers", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following an appropriate code to begin a <strong>HTTP GET request</strong>?</p>", "options": [{"option": "request.open(\"GET\",\"data\");", "correct": true}, {"option": "request.open(\"GET\");", "correct": false}, {"option": "request.open(GET,\"data.csv\");", "correct": false}, {"option": "request.open(\"GET\",\"data.csv\")", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is a single <strong>global</strong> function defined in the <strong>jQuery library?</strong></p>", "options": [{"option": "$()", "correct": true}, {"option": "jQuery()", "correct": false}, {"option": "Queryanalysis()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a <strong>factory function</strong>?</p>", "options": [{"option": "jQuery()", "correct": true}, {"option": "$()", "correct": false}, {"option": "Queryanalysis()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following code returns the set of all <strong>div</strong> elements in a document?</p>", "options": [{"option": "var divs = $(div);", "correct": false}, {"option": "var divs = jQuery(\"div\");", "correct": false}, {"option": "var divs = #(\"div\");", "correct": false}, {"option": "var divs = $(\"div\");", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods operates on the return value of <strong>$()</strong>?</p>", "options": [{"option": "show()", "correct": false}, {"option": "click()", "correct": false}, {"option": "done()", "correct": false}, {"option": "css()", "correct": true}], "level": "Medium"}, {"question": "<p>In the following JavaScript code, <strong>min</strong> stands for ____________________:</p>\n<pre class=\"prettyprint\"><code>    &lt;script src=\"jquery-1.4.2.min.js\"&gt;&lt;/script&gt; \n</code></pre>", "options": [{"option": "Miniature", "correct": false}, {"option": "Minimised version", "correct": true}, {"option": "Minimised parameters", "correct": false}, {"option": "Minimum value", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is <strong>heavily overloaded</strong>?</p>", "options": [{"option": "jQuery()", "correct": false}, {"option": "script()", "correct": false}, {"option": "$()", "correct": false}, {"option": "script() and $()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is an equivalent replacement of <strong>$(document).ready(f)</strong>?</p>", "options": [{"option": "jQuery(f)", "correct": false}, {"option": "#(f)", "correct": false}, {"option": "$(f)", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>utility function</strong> in <strong>jQuery</strong>?</p>", "options": [{"option": "jQuery.noConflict()", "correct": true}, {"option": "jQuery.each()", "correct": false}, {"option": "jQuery.parseJSON()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to parse the <strong>JSON</strong> text?</p>", "options": [{"option": "jQuery.each()", "correct": false}, {"option": "jQuery.noConflict()", "correct": false}, {"option": "jQuery.parseJSON()", "correct": true}, {"option": "jQuery.noConflict() and jQuery.parseJSON()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following indicates different forms of <strong>client-side</strong> storage?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following storages allows the caching of web pages and their associated resources?</p>", "options": [{"option": "Web Databases", "correct": false}, {"option": "FileSystem API", "correct": false}, {"option": "Offline Web Applications", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these is the <strong>Microsoft\u2019s</strong> own proprietary client-side storage?</p>", "options": [{"option": "Offline Web Applications", "correct": false}, {"option": "IE User Data", "correct": true}, {"option": "Cookies", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following objects supports <strong>File system</strong> API?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": false}, {"option": "File", "correct": true}, {"option": "DOM", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>localStorage</strong> and the <strong>sessionStorage</strong> belongs to ________________________________ object.</p>", "options": [{"option": "Element", "correct": false}, {"option": "Window", "correct": true}, {"option": "Hash", "correct": false}, {"option": "DOM", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is the parameter used to invoke the Audio() constructor?</p>", "options": [{"option": "File type", "correct": false}, {"option": "Music type", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a property of the <strong>video</strong> tag?</p>", "options": [{"option": "Width", "correct": false}, {"option": "Breadth", "correct": true}, {"option": "Height", "correct": false}, {"option": "Width and Height", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes is common to both <strong>audio</strong> and <strong>video</strong>?</p>", "options": [{"option": "Enter", "correct": false}, {"option": "Control", "correct": false}, {"option": "Controls", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following elements is used to include <strong>audio</strong>?</p>", "options": [{"option": "Audio", "correct": true}, {"option": "Video", "correct": false}, {"option": "Svg", "correct": false}, {"option": "Audio and svg", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, __________________________ is used to find all the <strong>img</strong> elements in the document?</p>", "options": [{"option": "document(images)", "correct": false}, {"option": "document(img)", "correct": false}, {"option": "document.images[]", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an <strong>image replacement</strong> is used to ________________________________.</p>", "options": [{"option": "Replace an image", "correct": false}, {"option": "Implement image rollovers", "correct": true}, {"option": "Implement special effects", "correct": false}, {"option": "Remove image rollovers", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following uses more number of <strong>CPU cycles</strong>?</p>", "options": [{"option": "GUI", "correct": false}, {"option": "Statically generated graphics", "correct": false}, {"option": "Dynamically generated graphics", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>rendering engine</strong> is used for __________________________________________.</p>", "options": [{"option": "Parsing objects in the page", "correct": false}, {"option": "Drawing all objects in the page", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The <strong>JavaScript engine</strong> is used for ________________________________________.</p>", "options": [{"option": "Compiling the JavaScript", "correct": false}, {"option": "Interpreting the JavaScript", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following browsers uses the <strong>webkit</strong>?</p>", "options": [{"option": "Chrome", "correct": false}, {"option": "Safari", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Chrome and Safari", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following browsers first developed <strong>Gecko</strong>?</p>", "options": [{"option": "Safari", "correct": false}, {"option": "Opera", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Netscape", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following renders <strong>HTML</strong>?</p>", "options": [{"option": "Email Clients", "correct": false}, {"option": "Web Components", "correct": false}, {"option": "Browsers", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>SpiderMonkey</strong> was developed by _____________________________________.</p>", "options": [{"option": "Internet Explorer", "correct": false}, {"option": "Firefox", "correct": true}, {"option": "Safari", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following browsers uses the <strong>Carakan</strong>?</p>", "options": [{"option": "Firefox", "correct": false}, {"option": "Safari", "correct": false}, {"option": "Opera", "correct": true}, {"option": "Internet Explorer", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the alternate name for the <strong>JavaScriptCore</strong> that is used in Safari?</p>", "options": [{"option": "SpiderMoney", "correct": false}, {"option": "Nitro", "correct": true}, {"option": "Carakan", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the term <strong>performance</strong> is defined as the ________________________________.</p>", "options": [{"option": "Speed of the input take in", "correct": false}, {"option": "Speed of the output display", "correct": false}, {"option": "Speed at which an application functions", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the advantage of the <strong>code-produced</strong> graphics over an <strong>image</strong>?</p>", "options": [{"option": "Increase in bandwidth", "correct": false}, {"option": "Saves bandwidth ", "correct": true}, {"option": "Dynamic advantages", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to <strong>skip</strong> or <strong>seek</strong> to the desired location in a sound or video?</p>", "options": [{"option": "audioSkip", "correct": false}, {"option": "currentTime", "correct": true}, {"option": "videoSkip", "correct": false}, {"option": "SkiptoTime", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following shows a better <strong>runtime</strong> performance in <strong>coalescing</strong> functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": false}, {"option": "Firefox UsingFunct", "correct": true}, {"option": "Firefox UsingObject", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following has a poor <strong>runtime</strong> performance in <strong>coalescing</strong> functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": true}, {"option": "Firefox UsingFunct", "correct": false}, {"option": "Firefox UsingObject", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>closure</strong> compiler runs in ___________________________ modes.</p>", "options": [{"option": "Three", "correct": false}, {"option": "Four", "correct": false}, {"option": "Five", "correct": false}, {"option": "Two", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>firebug</strong> is an extension of _________________________browser.</p>", "options": [{"option": "Mozilla Firefox", "correct": true}, {"option": "Internet Explorer", "correct": false}, {"option": "Chrome", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is used to inspect ______________________________________.</p>", "options": [{"option": "HTML", "correct": false}, {"option": "CSS", "correct": false}, {"option": "DOM", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is used by a developer to ______________________________.</p>", "options": [{"option": "Track cookies", "correct": false}, {"option": "Track sessions", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>firebug</strong> is mainly used to achieve __________________________________.</p>", "options": [{"option": "Performance", "correct": true}, {"option": "Reliability", "correct": false}, {"option": "Complexity", "correct": false}, {"option": "Adaptability", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, ____________________________ is the goal of using the <strong>firebug</strong>.</p>", "options": [{"option": "Modularity", "correct": false}, {"option": "Shared code", "correct": false}, {"option": "Compatibility", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a feature of the <strong>user interface</strong>?</p>", "options": [{"option": "Skinnable interface", "correct": false}, {"option": "Resizable side panel", "correct": false}, {"option": "Fixed side panel", "correct": true}, {"option": "Menu options", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the default value of the property <strong>overrideConsole</strong></p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following properties has <strong>false</strong> as default value?</p>", "options": [{"option": "disableWhenFirebugActive", "correct": false}, {"option": "disableXHRListener", "correct": true}, {"option": "showIconWhenHidden", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following actions is possible if a firebug is used as a <strong>debugger</strong> and <strong>profiler</strong>?</p>", "options": [{"option": "Pause execution in any line", "correct": false}, {"option": "Find scripts easily", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In the following JavaScript code, what is the result or type of error, if <strong>a</strong> is not defined?</p>\n<pre class=\"prettyprint\"><code>    console.log(a)\n</code></pre>", "options": [{"option": " Zero", "correct": false}, {"option": "ReferenceError", "correct": true}, {"option": "Null", "correct": false}, {"option": "ValueNotFoundError", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>PhantonJS</strong> uses <strong>YSlow</strong> _____________________________________.</p>", "options": [{"option": "Queries", "correct": false}, {"option": "Command Line Prompt", "correct": false}, {"option": "Statements", "correct": false}, {"option": "Command Line Script", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the two output formats of <strong>YSlow</strong> are ________________________________________.</p>", "options": [{"option": "JIT, TRD", "correct": false}, {"option": "TAP, JUnit", "correct": true}, {"option": "JKP, RFD", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, initially <strong>YSlow</strong> was an extension of ________________________________ browser.</p>", "options": [{"option": "Chrome", "correct": true}, {"option": "Firefox", "correct": false}, {"option": "Internet Explorer", "correct": false}, {"option": "Opera", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to analyze the performance of a web page?</p>", "options": [{"option": "WebPageTest", "correct": false}, {"option": "YSlow", "correct": true}, {"option": "Firebug", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is mandatorily run before running <strong>YSlow</strong>?</p>", "options": [{"option": "WebPageTest", "correct": false}, {"option": "Firebug", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>YSlow</strong> for Mobile works as _________________________________.</p>", "options": [{"option": "Bookwise", "correct": false}, {"option": "Booklet", "correct": false}, {"option": "Bookmaklet", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods adds an <strong>arc</strong> to the current <strong>subpath</strong>?</p>", "options": [{"option": "bezierCurveTo()", "correct": false}, {"option": "arcTo()", "correct": false}, {"option": "arc()", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods adds and connects to the point in <strong>cubic bezier curve</strong>?</p>", "options": [{"option": "bezierConnect()", "correct": false}, {"option": "bezierCurveTo()", "correct": true}, {"option": "connectbezier()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following indicates the vulnerability of <strong>XHR communications</strong>?</p>", "options": [{"option": "Registration and Skewing the results", "correct": true}, {"option": "Skewing the results", "correct": false}, {"option": "There is no vulnerability", "correct": false}, {"option": "Registering the test results", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>advanced panel</strong> is used to ______________________________________.</p>", "options": [{"option": "Test, stop and run", "correct": true}, {"option": "Load the page", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>video tab</strong> is used to _____________________________________________.</p>", "options": [{"option": "Record a video of the page", "correct": false}, {"option": "Capture screenshots of the test only", "correct": false}, {"option": "Record a video of the test", "correct": false}, {"option": "Capture screenshots of the page", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>block tab</strong> is used to ______________________________________.</p>", "options": [{"option": "Block the request", "correct": true}, {"option": "Block the mouse pointer", "correct": false}, {"option": "Block the response", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which is the following commands is used to <strong>spoof</strong> the client user agent?</p>", "options": [{"option": "spoofAgent", "correct": false}, {"option": "setUserAgent", "correct": true}, {"option": "spoofClientUserAgent", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>script tab</strong> is used to ______________________________________.</p>", "options": [{"option": "Edit the code", "correct": false}, {"option": "Run more complex tests", "correct": true}, {"option": "Run on multiple servers", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>auth tab</strong> in the testing platform is used to _________________________________________.</p>", "options": [{"option": "Authorize a page", "correct": false}, {"option": "Run the test", "correct": false}, {"option": "Specify credentials", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>WebPageTest</strong> is used to ____________________________________.</p>", "options": [{"option": "Run any common website", "correct": false}, {"option": "Run private websites", "correct": true}, {"option": "Run QA testing", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, <strong>minifying</strong> is used to ___________________________________________.</p>", "options": [{"option": "Save the visits", "correct": false}, {"option": "Streamline the visits", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>minification</strong> concept originated from ______________________________________.</p>", "options": [{"option": "JavaScript code efficiency", "correct": false}, {"option": "JavaScript interpreter", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>minify</strong> is used for _________________________________.</p>", "options": [{"option": "Storing the data", "correct": false}, {"option": "Streamlining the data", "correct": false}, {"option": "Proxy the JavaScript file", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is in-built in <strong>minify</strong>?</p>", "options": [{"option": "Dynamic compression", "correct": false}, {"option": "Static compression", "correct": true}, {"option": "Static content", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following folders contains the <strong>minify</strong> control panel?</p>", "options": [{"option": "/builder/", "correct": false}, {"option": "/min/builder/", "correct": true}, {"option": "/minify/build", "correct": false}, {"option": "/minify/builder", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the correct order of sequences in a <strong>minify</strong> process?</p>", "options": [{"option": "Remove extraneous characters, gzip the response, read", "correct": false}, {"option": "Remove extraneous characters, read, gzip the response", "correct": false}, {"option": "Read, remove extraneous characters, gzip the response", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>YUI</strong> compressor is analogous to _________________________________.</p>", "options": [{"option": "Minify", "correct": true}, {"option": "JavaScript", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>YUI</strong> compressor is a _______________________________ file.</p>", "options": [{"option": "Binary", "correct": false}, {"option": "JAR", "correct": true}, {"option": "Text", "correct": false}, {"option": "Assembly", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following indicates the function of a <strong>closure</strong> compiler?</p>", "options": [{"option": "Originates the JavaScript", "correct": false}, {"option": "Compiles the JavaScript", "correct": false}, {"option": "Rewrites the JavaScript", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following defines the <strong>scorched-earth optimizations</strong>?</p>", "options": [{"option": "They optimize based on certain constraints", "correct": false}, {"option": "They strip out everything including best practices", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>closure compiler</strong> was introduced by ____________________________________.</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Apple", "correct": false}, {"option": "Google", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>minify</strong> returns _________________________ to the <strong>script</strong> tag.</p>", "options": [{"option": "File I/O", "correct": false}, {"option": "Minify JavaScript", "correct": false}, {"option": "HTTP Request", "correct": false}, {"option": "Gzip encoded", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>JS File</strong> returns ______________________________.</p>", "options": [{"option": "File I/O", "correct": false}, {"option": "Minified JavaScript", "correct": true}, {"option": "HTTP Request", "correct": false}, {"option": "Gzip encoded", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the result of using <strong>R</strong> along with <strong>minification</strong>?</p>", "options": [{"option": "Increase in efficiency", "correct": false}, {"option": "Sheer file size reduction", "correct": true}, {"option": "Increase in the file size", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is efficient in <strong>file</strong> size reduction?</p>", "options": [{"option": "YUI", "correct": false}, {"option": "Closure Compiler (advanced)", "correct": true}, {"option": "Minify", "correct": false}, {"option": "Closure Compiler(simple)", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>JavaScript optimizer</strong>?</p>", "options": [{"option": "JSMin", "correct": false}, {"option": "Packer", "correct": false}, {"option": "Minify", "correct": false}, {"option": "JSMin and Packer", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is used to <strong>compress</strong> HTML in web servers and modern web browsers?</p>", "options": [{"option": "Content decoding", "correct": false}, {"option": "Content encoding", "correct": true}, {"option": "Compression algorithm \u2013 DEFLATE", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a <strong>stateless protocol</strong>?</p>", "options": [{"option": "HTML", "correct": false}, {"option": "XHTML", "correct": false}, {"option": "HTTP", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the value 2 of the WebSocket attribute <strong>Socket.readyState</strong> indicates it is a  _______________________________ connection.</p>", "options": [{"option": "Closed", "correct": false}, {"option": "Unestablished", "correct": false}, {"option": "Handshake", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how many <strong>WebSocket</strong> events are available?</p>", "options": [{"option": "Two", "correct": false}, {"option": "Three", "correct": false}, {"option": "Four", "correct": true}, {"option": "Five", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to close the <strong>WebSocket</strong>?</p>", "options": [{"option": "Socket.flush()", "correct": false}, {"option": "Socket.close()", "correct": true}, {"option": "Socket.dispose()", "correct": false}, {"option": "Socket.Close()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is not a <strong>socket</strong> property?</p>", "options": [{"option": "ready", "correct": true}, {"option": "onopen", "correct": false}, {"option": "readyState", "correct": false}, {"option": "onmessage", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var httpserver = new http.Server();\n</code></pre>", "options": [{"option": "Create HTTP connection between the Client and the Server", "correct": false}, {"option": "Create an HTTP Server", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a <strong>WebSocket</strong> event?</p>", "options": [{"option": "open", "correct": false}, {"option": "close", "correct": false}, {"option": "deny", "correct": true}, {"option": "error", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a <strong>socket</strong> property?</p>", "options": [{"option": "ready", "correct": true}, {"option": "ready-state", "correct": false}, {"option": "on-message", "correct": false}, {"option": "on-open", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the history object contains ____________________.</p>", "options": [{"option": "Numbers", "correct": false}, {"option": "Attribute values", "correct": false}, {"option": "URL", "correct": true}, {"option": "Boolean", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScipt, the <strong>history object</strong> is a part of the __________________ object.</p>", "options": [{"option": "Window", "correct": true}, {"option": "Property", "correct": false}, {"option": "Location", "correct": false}, {"option": "Screen", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the number of methods present in the <strong>history object</strong> are _______________.</p>", "options": [{"option": "Four", "correct": false}, {"option": "Three", "correct": true}, {"option": "Two", "correct": false}, {"option": "One", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods belongs to the <strong>History object</strong>?</p>", "options": [{"option": "back()", "correct": false}, {"option": "forward()", "correct": false}, {"option": "go()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Javascript, what is the purpose of the History object's  <strong>forward()</strong> method?</p>", "options": [{"option": "Loads any random URL in the history list", "correct": false}, {"option": "Loads the previous URL in the history list", "correct": false}, {"option": "Loads a specific URL from the history list", "correct": false}, {"option": "Loads the next URL in the history list", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, how will you update the URL displayed in the location bar?</p>", "options": [{"option": "location", "correct": false}, {"option": "location.URL", "correct": false}, {"option": "location.hash", "correct": true}, {"option": "URL", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a particular state is added to a browser history by ______________.</p>", "options": [{"option": "State()", "correct": false}, {"option": "pushState()", "correct": true}, {"option": "replaceState()", "correct": false}, {"option": "state()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>pushState()</strong> method is used to __________________.</p>", "options": [{"option": "Remove a state", "correct": false}, {"option": "Replace a state", "correct": false}, {"option": "Add a new state", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, _____________ parameters are used by the <strong>replacestate()</strong> method?</p>", "options": [{"option": "One", "correct": false}, {"option": "Two", "correct": false}, {"option": "Zero", "correct": false}, {"option": "Three", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, when is the event <strong>window.onpopstate</strong> triggered?</p>", "options": [{"option": "When a state object is replaced", "correct": false}, {"option": "When a state object is added", "correct": false}, {"option": "When a state object is removed", "correct": false}, {"option": "When a state object is replaced or added", "correct": true}], "level": "Hard"}, {"question": "<p>What is the use of R?</p>", "options": [{"option": "Tightens and formats the chart", "correct": false}, {"option": "Ingests and processes the chart", "correct": true}, {"option": "Formats and Ingests the chart", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the purpose of  <strong>glue language</strong>?</p>", "options": [{"option": "Produce data", "correct": false}, {"option": "Collect data", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Format data", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following types of languages is used to <strong>collect</strong> data?</p>", "options": [{"option": "Statistical ", "correct": false}, {"option": "Glue ", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following includes compiled third-party packages?</p>", "options": [{"option": "Base", "correct": false}, {"option": "Contrib", "correct": true}, {"option": "Rtools", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of these keywords opens the help window?</p>", "options": [{"option": "()", "correct": false}, {"option": "#", "correct": false}, {"option": "?", "correct": true}, {"option": "=", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, which of the following symbols is used to start a <strong>singe line comment</strong>?</p>", "options": [{"option": " //", "correct": true}, {"option": "#", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "$", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the <strong>assignment operator</strong>?</p>", "options": [{"option": " ->", "correct": false}, {"option": "=", "correct": true}, {"option": "==", "correct": false}, {"option": "===", "correct": false}], "level": "Easy"}, {"question": "<p>What is the dimensional size limit of matrices in R?</p>", "options": [{"option": "One ", "correct": false}, {"option": "Two ", "correct": false}, {"option": "Three ", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>In R, which of the following initial functions is used to create a bubble chart?</p>", "options": [{"option": "chart(bubble)", "correct": false}, {"option": "init()", "correct": false}, {"option": "symbols()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In R, what is the <strong>symbols</strong> method used for?</p>", "options": [{"option": "To draw symbols", "correct": false}, {"option": "To draw other shapes", "correct": true}, {"option": "To draw graphics", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In R, which of the following methods is used to draw a <strong>bar plot</strong>?</p>", "options": [{"option": "bar_plot()", "correct": false}, {"option": "barplot()", "correct": true}, {"option": "plot(bar)", "correct": false}, {"option": "plotbar()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the number of parameters accepted by the <strong>WebPageTestAPI</strong> is ________________.</p>", "options": [{"option": "Five", "correct": false}, {"option": "Zero", "correct": false}, {"option": "Six", "correct": false}, {"option": "Eight", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of setting the parameter <strong>fvonly</strong> to one in the WebPageTest API is to  __________________.</p>", "options": [{"option": "Repeat the view test", "correct": false}, {"option": "Skip the repeat view list", "correct": true}, {"option": "Debug the code", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In PHP, how is the returned API converted into an XML object?</p>", "options": [{"option": "SimpleXMLElement()", "correct": true}, {"option": "SimpleElement()", "correct": false}, {"option": "XMLElement()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following tags can handle <strong>mouse events</strong> in <strong>Netscape</strong>?</p>", "options": [{"option": "a", "correct": false}, {"option": "img", "correct": true}, {"option": "br", "correct": false}, {"option": "hr", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the <strong>tainted property</strong> of a window object?</p>", "options": [{"option": "Pathname", "correct": false}, {"option": "Default status", "correct": true}, {"option": "Protocol", "correct": false}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the user has to set the ______________________ environment variable to enable <strong>data tainting</strong>.</p>", "options": [{"option": "NS_ENABLE_TAINT", "correct": true}, {"option": "ENABLE_TAINT", "correct": false}, {"option": "MS_ENABLE_TAINT", "correct": false}, {"option": "ENABLE_TAINT_NS", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of creating a separate file after having an API key is to hold the ______________________.</p>", "options": [{"option": "Key details", "correct": false}, {"option": "Configuration information", "correct": true}, {"option": "URL details", "correct": false}, {"option": "Speed of the process", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of the parameter <strong>location</strong> is to specify the _________________.</p>", "options": [{"option": "Agent location", "correct": false}, {"option": "Speed", "correct": false}, {"option": "Browser", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what happens when the parameter <strong>fvonly</strong> is set to 1?</p>", "options": [{"option": "Results for the first view will be retrieved", "correct": false}, {"option": "Disables the repeat view test", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the purpose of the <strong>window.location</strong> object is to get the _________________________.</p>", "options": [{"option": "Location of the cursor", "correct": false}, {"option": "URL and redirect", "correct": true}, {"option": "Path to the next page", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods loads a new document?</p>", "options": [{"option": "location.new()", "correct": false}, {"option": "loadnew()", "correct": false}, {"option": "location.load()", "correct": false}, {"option": "location.assign()", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to create a delay (in milliseconds) while executing a specific method?</p>", "options": [{"option": "setTimeout()", "correct": false}, {"option": "setmilli()", "correct": false}, {"option": "setseconds()", "correct": false}, {"option": "setInterval()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to stop the execution of an ongoing method?</p>", "options": [{"option": "clearInterval()", "correct": false}, {"option": "clearTimeout()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>What does <strong>JavaScript Hoisting</strong> mean?</p>", "options": [{"option": "Moving declarations to the top", "correct": true}, {"option": "Moving declarations to the bottom", "correct": false}, {"option": " Hosting variables by itself", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the function of the <strong>XML parser</strong> is to _______________________.</p>", "options": [{"option": "Convert an XML DOM object to an XML document", "correct": false}, {"option": "Convert an XML document to an XML DOM object", "correct": true}, {"option": " Convert an XML DOM object to a comment", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>ActiveXObject</strong> method is used to ____________________.</p>", "options": [{"option": "Call an automation object", "correct": false}, {"option": "Reference an automation object", "correct": false}, {"option": "Instantiate an automation object", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, why is the URL <strong>json</strong> used?</p>", "options": [{"option": "Belongs to JSON object", "correct": false}, {"option": "Reference JSON formatted data", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the parameter of the method <strong>Date.parse()</strong> is _________________.</p>", "options": [{"option": "Date string", "correct": true}, {"option": "Date", "correct": false}, {"option": "Number", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions prints the <strong>current page</strong>?</p>", "options": [{"option": "printcurrent()", "correct": false}, {"option": "print(now)", "correct": false}, {"option": "print()", "correct": true}, {"option": "print(this)", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>print()</strong> method belongs to the _____________ object.</p>", "options": [{"option": "Window", "correct": true}, {"option": "Document", "correct": false}, {"option": "Hash", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>If the <strong>radix</strong> parameter of the <strong>parseInt()</strong> method is omitted in a JavaScript program, the compiler ______________________________________.</p>", "options": [{"option": "Runs in assumption", "correct": true}, {"option": "Throws an exception", "correct": false}, {"option": "Aborts execution", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In a JavaScript program, when the <strong>parseInt()</strong> method is used on a string beginning with <strong>0x</strong>, which of the following is the <strong>radix</strong> value of the string?</p>", "options": [{"option": "13", "correct": false}, {"option": "14", "correct": false}, {"option": "10", "correct": false}, {"option": "16", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>parseInt()</strong> method is used to ______________________________________________.</p>", "options": [{"option": "Parse a datatype and store it in an integer", "correct": false}, {"option": "Parse a string and return an integer", "correct": true}, {"option": "Parse an integer and return a string", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, If the <strong>radix</strong> value of a string  is <strong>16</strong>, the string begins with ___________________.</p>", "options": [{"option": "0x", "correct": true}, {"option": "0", "correct": false}, {"option": "0P", "correct": false}, {"option": "FF", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>radix</strong> parameter in the <strong>parseInt()</strong> method is used to specify the ________________________________________.</p>", "options": [{"option": "Numeral system not to be used", "correct": false}, {"option": "Numeral system to be used", "correct": true}, {"option": "Conversion mode", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>When the <strong>parseInt()</strong> method is used on a string beginning with <strong>0</strong> in a JavaScript program, which of the following is the <strong>radix</strong> value of the string?</p>", "options": [{"option": "6", "correct": false}, {"option": "7", "correct": false}, {"option": "8", "correct": true}, {"option": "9", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>JSON.parse()</strong> method is used to _____________________________________________.</p>", "options": [{"option": "Parse a string to an integer", "correct": false}, {"option": "Parse a string to JSON", "correct": true}, {"option": "Parse a string from JSON to JSON2", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following types of variables is returned by the <strong>parseInt()</strong> method?</p>", "options": [{"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Integer", "correct": true}, {"option": "Date", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following parameters is included in the <strong>JSON.parse()</strong> method?</p>", "options": [{"option": "text", "correct": false}, {"option": "reviver", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following exceptions will be thrown if the string to be parsed is an invalid JSON?</p>", "options": [{"option": "SyntaxError", "correct": true}, {"option": "ArrayOutOfBoundException", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following <strong>compressors</strong> is used in JavaScript?</p>", "options": [{"option": "Esprima", "correct": false}, {"option": "UglifyJS", "correct": true}, {"option": "Acron", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following <strong>parsers</strong> is the fastest?</p>", "options": [{"option": "Acron", "correct": true}, {"option": "JSLint", "correct": false}, {"option": "Esprima", "correct": false}, {"option": "Traceur", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how many default methods are available in a <strong>Number</strong> object?</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following methods is valid?</p>", "options": [{"option": "constructor()", "correct": false}, {"option": "toExponential()", "correct": false}, {"option": "toLocaleString()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following expressions is used to calculate the <strong>runtime</strong> of a JavaScript code?</p>", "options": [{"option": "Start time \u2013 End time", "correct": false}, {"option": "Start time/ End time", "correct": false}, {"option": "Start time * End time", "correct": false}, {"option": "End time \u2013 Start time", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is used to send data to an external process?</p>", "options": [{"option": "XML", "correct": false}, {"option": "XBT", "correct": false}, {"option": "XHR", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is used to start time <strong>logging</strong>?</p>", "options": [{"option": "startTimeLogging()", "correct": true}, {"option": "start()", "correct": false}, {"option": "Loggingstart()", "correct": false}, {"option": "startLogging()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following attributes of the <code>&lt;form&gt;</code>tag is not set by the <strong>Document Object Model</strong>?</p>", "options": [{"option": "Target", "correct": false}, {"option": "Enctype", "correct": false}, {"option": "Action", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var name1 = \"Hacker\";\n    function DisplayName () \n    {\n    var name2 = \"Earth\"; \n    print(name2); \n    }\n    DisplayName();\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Prints dialog box", "correct": true}, {"option": "\"HackerEarth\"", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code> var name1 = \"Hacker\";\n    function DisplayName () \n    {\n    var name2 = \"Earth\"; \n    print(name2+name1); \n    }\n    DisplayName();\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "\"Earth\"", "correct": false}, {"option": "\"Hacker\"", "correct": false}, {"option": "Prints dialog box", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following types of <strong>scoping</strong> is used in JavaScript?</p>", "options": [{"option": "Literal", "correct": false}, {"option": "Lexical", "correct": true}, {"option": "Static", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following functions is used to stop time <strong>logging</strong>?</p>", "options": [{"option": "stopTimeLogging()", "correct": true}, {"option": "stop()", "correct": false}, {"option": "finish()", "correct": false}, {"option": "abort()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>lexical</strong> scoping is based on ____________________.</p>", "options": [{"option": "Segments", "correct": false}, {"option": "Blocks", "correct": false}, {"option": "Functions", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following data types is returned by the <strong>accept</strong> property?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "String", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>width</strong> property is used to return the ________________________.</p>", "options": [{"option": "Number of rows of data", "correct": false}, {"option": "Number of pixels", "correct": false}, {"option": "Number of pixels per row of data", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong><code>adoptNode()</code></strong> method is used for __________________________________.</p>", "options": [{"option": "Removing the original node", "correct": false}, {"option": "Making the original node ready for insertion", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>importNode()</code></strong> method is used for __________________________________________________.</p>", "options": [{"option": "Copying nodes from other documents without removing the original node", "correct": true}, {"option": "Copying nodes from other documents and removing the original node", "correct": false}, {"option": "Removing nodes from other documents", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to create a <strong>comment</strong> node?</p>", "options": [{"option": "comment()", "correct": false}, {"option": "createComment()", "correct": true}, {"option": "comm()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following methods is used to dispatch a <strong>SyntheticEvent</strong> object?</p>", "options": [{"option": "dispatch()", "correct": false}, {"option": "dispatchEvent()", "correct": true}, {"option": "dispatch(Event)", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to specifically execute a command?</p>", "options": [{"option": "execcommand()", "correct": false}, {"option": "execCommand()", "correct": true}, {"option": "exec(command)", "correct": false}, {"option": "exec(command id)", "correct": false}], "level": "Hard"}, {"question": "<p>In Javascript, which of the following conditions is used if there were <strong>noscript</strong> tags in HTML?</p>", "options": [{"option": "Layout positioning of DOM element", "correct": false}, {"option": "Paint the DOM elements", "correct": false}, {"option": "Execute the script", "correct": false}, {"option": "Build DOM nodes in render tree", "correct": true}], "level": "Hard"}, {"question": "<p>After the contents of a JavaScript file are retrieved in chunks, which of the following is done?</p>", "options": [{"option": "DOM elements are painted.", "correct": false}, {"option": "The content is parsed.", "correct": true}, {"option": "DOM nodes are built in a render tree.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following does not belong to the <strong>Render Engine</strong> workflow?</p>", "options": [{"option": "Parse Content", "correct": false}, {"option": "Build DOM nodes in render tree", "correct": false}, {"option": "Paint DOM elements", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following types of variables is converted to <strong>DOM</strong> elements by the rendering engine?</p>", "options": [{"option": "Strings", "correct": false}, {"option": "Tokens", "correct": true}, {"option": "Addresses", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>The _____________________ program is used to execute the codes in JavaScript.</p>", "options": [{"option": "Just In Time compiler", "correct": false}, {"option": "JavaScript interpreter", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What does the rendering engine do when it encounters JavaScript?</p>", "options": [{"option": "Skips the code", "correct": false}, {"option": "Continues painting", "correct": false}, {"option": "Switches to JavaScript Interpreter", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In a web browser in JavaScript, which of the following is used to paint the content on to the screen?</p>", "options": [{"option": "UI Layer", "correct": true}, {"option": "JavaScript Interpreter", "correct": false}, {"option": "Network Layer", "correct": false}, {"option": "Rendering engine", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, when does the browser stop rendering HTML?</p>", "options": [{"option": "Inline JavaScript block", "correct": false}, {"option": "External JavaScript file", "correct": false}, {"option": "Inline JavaScript block and external JavaScript file", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, <strong>script loading</strong> is used to ________________________________________.</p>", "options": [{"option": "Load scripts programmatically", "correct": false}, {"option": "Load JavaScript files manually", "correct": false}, {"option": "Load JavaScript files programmatically", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what happens when the browser encounters a script tag without a  <strong>src</strong> attribute?</p>", "options": [{"option": "An error is thrown", "correct": false}, {"option": "An exception is thrown", "correct": false}, {"option": "Sent to the compiler", "correct": false}, {"option": "Sent to the interpreter", "correct": true}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following is the solution to the absence of a script tag with an <strong>src</strong> attribute?</p>", "options": [{"option": "Resend the scripts", "correct": false}, {"option": "Create an inline JavaScript", "correct": true}, {"option": "Resend the scripts and create an inline JavaScript", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to return a list of all the elements in a document with the specified <strong>tag name</strong>?</p>", "options": [{"option": "getElementbyID()", "correct": false}, {"option": "getElementsbyName()", "correct": false}, {"option": "getTagName()", "correct": false}, {"option": "getElementsbyTagName()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is the object type of the <strong>script_url</strong>?</p>", "options": [{"option": "Object", "correct": false}, {"option": "String", "correct": false}, {"option": "Array", "correct": false}, {"option": "Any of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the use of a <strong>async</strong> attribute in JavaScript?</p>", "options": [{"option": "Loads the script asynchronously", "correct": true}, {"option": "Loads the script synchronously", "correct": false}, {"option": "Loads the page asynchronously", "correct": false}, {"option": "Loads the page synchronously", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, why do you use an <strong>onload</strong> event in the script tag after using the <strong>async</strong> attribute?</p>", "options": [{"option": "To invoke code while loading the page ", "correct": false}, {"option": "To invoke code while loading the script ", "correct": false}, {"option": "To invoke code while downloading", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>startTimeLogging()</code></strong> method is used to ________________________________.</p>", "options": [{"option": "Start the timer", "correct": false}, {"option": "Capture time logging", "correct": false}, {"option": "Capture timing data for referencing", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following data types is conditionally accepted by the <strong>async</strong> module?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "Decimal", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to create an element in the <strong>HTML DOM</strong>?</p>", "options": [{"option": "createDOMelement()", "correct": false}, {"option": "createElement()", "correct": true}, {"option": "DOMElement()", "correct": false}, {"option": "createDOMElement()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong><code>localeCompare()</code></strong> method is used to _________________________________________________.</p>", "options": [{"option": "Check if the reference string is validated", "correct": false}, {"option": "Check if the reference string comes before, after or is equal as the compareString in sort order", "correct": true}, {"option": "Check if the string is a local copy", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>client-side</strong> JavaScript object?</p>", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Easy"}, {"question": "<p>What does a <strong>JavaScript</strong> method do?</p>", "options": [{"option": "It returns the value of a selected option.", "correct": false}, {"option": "It returns document.URL of the window in focus.", "correct": false}, {"option": "It returns the value of a checked radio input.", "correct": false}, {"option": "It returns the value of a cursor-selected text.", "correct": true}], "level": "Medium"}, {"question": "<p>What does a <strong>data frame</strong> do in JavaScript?</p>", "options": [{"option": "It holds the page render time.", "correct": false}, {"option": "It holds the load time.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the default value of the <strong>asyc</strong> attribute?</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>lazy</strong> loading is done when __________________________________________.</p>", "options": [{"option": "Immediate loading is also necessary", "correct": false}, {"option": "Immediate loading is not necessary", "correct": true}, {"option": "Loading under command is necessary", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In cases of <strong>lazy</strong> loading in JavaScript, the external script is placed _________________________________________.</p>", "options": [{"option": "After window.onload event", "correct": true}, {"option": "Before window.onload event", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, what are the parameters of the <strong>attachEvent</strong> function?</p>", "options": [{"option": "Function", "correct": false}, {"option": "Function and Event", "correct": false}, {"option": "Event", "correct": false}, {"option": "Event and Function", "correct": true}], "level": "Medium"}, {"question": "<p>When the <strong><code>showPerformanceMetrics()</code></strong> method is called before loading the <strong>remote</strong> script in a JavaScript program, the compiler _____________________________________.</p>", "options": [{"option": "Throws an exception", "correct": false}, {"option": "Throws an error", "correct": true}, {"option": "Loads by itself", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In HTML DOM, which of the following is an attribute to the script object?</p>", "options": [{"option": " onclick", "correct": false}, {"option": "onload", "correct": true}, {"option": "onshow", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which method is used to add an event listener?</p>", "options": [{"option": "addListener()", "correct": false}, {"option": "addEvent(Listener)", "correct": false}, {"option": "addListener(Event)", "correct": false}, {"option": "addEventListener()", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>domLoading</strong> attribute is used to indicate that the ____________________________.</p>", "options": [{"option": "Document exists", "correct": false}, {"option": "Document is ready to load", "correct": false}, {"option": "Document has loaded", "correct": false}, {"option": "Document is beginning to load", "correct": true}], "level": "Easy"}, {"question": "<p>You can refresh a webpage in JavaScript by using _________ object.</p>", "options": [{"option": "window.reload", "correct": false}, {"option": "location.reload", "correct": true}, {"option": "page.refresh", "correct": false}, {"option": "window.refresh", "correct": false}], "level": "Medium"}, {"question": "<p>The initial step to set up a <strong>CSS Lazy Loading</strong> through JavaScript is ________________________________.</p>", "options": [{"option": "Loading the script", "correct": false}, {"option": "Fetching data", "correct": true}, {"option": "Loading the page", "correct": false}, {"option": "Adding the event listener", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>type</strong> attribute is used to ____________________________________ of a variable.</p>", "options": [{"option": "Get more information", "correct": false}, {"option": "Identify the scripting language", "correct": true}, {"option": "Both of the above", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, What is the use of the <strong>appendchild()</strong> method?</p>", "options": [{"option": "Appends a node in the middle ", "correct": false}, {"option": "Appends a node as the first child", "correct": false}, {"option": "Appends a node as the last child", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the parameter of the method <strong>getElementsbyTagName()</strong> so as to get an image?</p>", "options": [{"option": "image", "correct": false}, {"option": "src", "correct": false}, {"option": "\"img\"", "correct": true}, {"option": " imageurl", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is used to block <strong>perfLogger's</strong> loading and execution?</p>", "options": [{"option": "Remove the perfLogger", "correct": false}, {"option": "Inline the perfLogger", "correct": true}, {"option": "Remove and inline the perfLogger", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, an interpreter _________________________ when variables in other scopes are referenced.</p>", "options": [{"option": "Traverses the queue", "correct": false}, {"option": "Traverses the stack", "correct": true}, {"option": "Finds the bugs", "correct": false}, {"option": "All the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, to which of the following does the  <strong>location</strong> attribute belong?</p>", "options": [{"option": "document", "correct": true}, {"option": "html", "correct": false}, {"option": "image", "correct": false}, {"option": "pre", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript,  the <strong>document.location</strong> property is referenced from within an object to ___________________________.</p>", "options": [{"option": "Traverse the queue", "correct": false}, {"option": "Find bugs", "correct": false}, {"option": "Traverse the stack", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, Why is the <strong>local scope</strong> variables created to hold value?</p>", "options": [{"option": "To optimize the testing process", "correct": false}, {"option": "To increase the speed ", "correct": false}, {"option": "To minimize memory usage", "correct": false}, {"option": "To cache the reference document.location", "correct": true}], "level": "Hard"}, {"question": "<p>In Javascript, which of the following steps is the next step after calling the <strong>startTimeLogging()</strong> function?</p>", "options": [{"option": "Interpret the code", "correct": false}, {"option": "Compile the code", "correct": false}, {"option": "Run the code", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, while traversing through a stack, what comes after namespace?</p>", "options": [{"option": "Window", "correct": true}, {"option": "Function", "correct": false}, {"option": "Document", "correct": false}, {"option": "Location", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which function is used to stop capturing the <strong>ad hoc timing</strong>?</p>", "options": [{"option": "stopadhoc()", "correct": false}, {"option": "stopTimer()", "correct": false}, {"option": "stopTimeLogging()", "correct": true}, {"option": "All of the above", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how many modes can the <strong>Closure Compiler</strong> be run in?</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the simple mode of the <strong>Closure Compiler</strong> _____________________________________.</p>", "options": [{"option": "Removes white spaces", "correct": true}, {"option": "Removes unwanted words", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "Does not remove white spaces", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is used to access the <strong>closure</strong> compiler?</p>", "options": [{"option": "Runtime application", "correct": false}, {"option": "Web application", "correct": true}, {"option": "Standalone application", "correct": false}, {"option": "All these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how can the <strong>closure</strong> compiler be efficiently used?</p>", "options": [{"option": "By increasing the size of the JavaScript files", "correct": false}, {"option": "By reducing the size of the JavaScript files", "correct": false}, {"option": "By reducing the download time of the JavaScript files", "correct": false}, {"option": "By reducing the size and download time of the JavaScript files", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how can the <strong>closure</strong> compiler be used?</p>", "options": [{"option": "As an open source runtime application", "correct": false}, {"option": "As a runtime application", "correct": false}, {"option": "As a web application", "correct": false}, {"option": "As an open source web application ", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the purpose of the advanced mode of the <strong>closure</strong> compiler?</p>", "options": [{"option": "Renaming variables", "correct": false}, {"option": "Renaming function", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is the use of a closure template?</p>", "options": [{"option": "Statically updates in JavaScript", "correct": false}, {"option": "Dynamically generates HTML in Java and JavaScript", "correct": true}, {"option": "increases the efficiency and convenience", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how does the <strong>closure</strong> compiler helps in checking the code?</p>", "options": [{"option": "Warnings", "correct": true}, {"option": "Suddenly aborting", "correct": false}, {"option": "Rejecting malicious inputs", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is the use closure compile?</p>", "options": [{"option": "Downloads JavaScript faster", "correct": false}, {"option": "Runs JavaScript faster", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Javascript, which of the following is one of the fundamental features?</p>", "options": [{"option": "Single-threaded", "correct": true}, {"option": "Multi-threaded", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>in JavaScript, which of the following functions is synchronous?</p>", "options": [{"option": "load()", "correct": false}, {"option": "require()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Why are long JavaScript functions not preferred?</p>", "options": [{"option": "User friendliness", "correct": false}, {"option": "Tie up event loops", "correct": false}, {"option": "Browser becomes unresponsive", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is a global object for a new <strong>worker</strong>?</p>", "options": [{"option": "WorkerGlobalScope", "correct": true}, {"option": "Worker", "correct": false}, {"option": "WorkerScope", "correct": false}, {"option": "Window", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, if you specify an absolute URL in the <strong>Worker</strong> constructor, which of the following statements is correct?</p>", "options": [{"option": "It resolves itself.", "correct": false}, {"option": "It must have the same origin.", "correct": true}, {"option": "It cannot have the same origin.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to send data using <strong>worker</strong> objects?</p>", "options": [{"option": "postMessage()", "correct": true}, {"option": "sendMessage()", "correct": false}, {"option": "Message()", "correct": false}, {"option": "post()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to manage multiple event handlers?</p>", "options": [{"option": "onmessage()", "correct": false}, {"option": "onerror()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions allows a <strong>worker</strong> to terminate itself?</p>", "options": [{"option": "close()", "correct": true}, {"option": "exit()", "correct": false}, {"option": "terminate()", "correct": false}, {"option": "halt()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is an abbreviation of <strong>BLOB</strong> in JavaScript?</p>", "options": [{"option": "Binary Little Object", "correct": false}, {"option": "Binary Large Object", "correct": true}, {"option": "Broken Large Object", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how are the sizes of <strong>blobs</strong>  calculated?</p>", "options": [{"option": "Meters", "correct": false}, {"option": "Kilometers", "correct": false}, {"option": "Bytes", "correct": true}, {"option": "Pixels", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, <strong>blobs</strong> are stored in the ____________.</p>", "options": [{"option": "Memory", "correct": false}, {"option": "Disk", "correct": false}, {"option": "Memory and disk", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions is used to break <strong>blobs</strong> into smaller pieces?</p>", "options": [{"option": "partition()", "correct": false}, {"option": "cut()", "correct": false}, {"option": "sliceall()", "correct": false}, {"option": "slice()", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following algorithms supports <strong>blobs</strong>?</p>", "options": [{"option": "Structured clone algorithm", "correct": true}, {"option": "Double buffer algorithm", "correct": false}, {"option": "Chen\u2019s algorithm", "correct": false}, {"option": "Retrieval algorithm\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following databases is used to retrieve <strong>blobs</strong>?</p>", "options": [{"option": "Server-side databases", "correct": false}, {"option": "Client-side databases", "correct": true}, {"option": "Server-side databases and client-side databases", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following interfaces is used to create your own <strong>blobs</strong>?</p>", "options": [{"option": "Creator", "correct": false}, {"option": "BlobCreator", "correct": false}, {"option": "BlobBuilder", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following objects is a <strong>subtype</strong> of Blob in JavaScript?</p>", "options": [{"option": "Elemental", "correct": false}, {"option": "Create", "correct": false}, {"option": "Data", "correct": false}, {"option": "File ", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods facilitates to upload a <strong>Blob</strong> to a server?</p>", "options": [{"option": "send()", "correct": true}, {"option": "pass()", "correct": false}, {"option": "upload()", "correct": false}, {"option": "store()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following functions is used to create a <strong>Blob</strong> URL in JavaScript?</p>", "options": [{"option": "createURL()", "correct": false}, {"option": "createObjectURL()", "correct": true}, {"option": "designURL()", "correct": false}, {"option": "URLCreation()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, where are the memory leaks found?</p>", "options": [{"option": "Server-side objects", "correct": false}, {"option": "Client-side objects", "correct": true}, {"option": "Server-side objects and client-side objects", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the central concept of JavaScript memory management?</p>", "options": [{"option": "Reliability", "correct": false}, {"option": "Reachability", "correct": true}, {"option": "Efficiency", "correct": false}, {"option": "Transparency", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, when the data of the <strong>jQuery.cache</strong> is read from an element, ________________________________________.</p>", "options": [{"option": "Unique number is retrieved as elem[jQuery.expando]", "correct": false}, {"option": "Data is read from jQuery.cache[id]", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to import an <strong>external</strong> style sheet?</p>", "options": [{"option": "@insert", "correct": false}, {"option": "@import", "correct": true}, {"option": "#import", "correct": false}, {"option": "#insert", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is not a type of <strong>selector</strong> in CSS?</p>", "options": [{"option": "Type ", "correct": false}, {"option": "Universal ", "correct": false}, {"option": "Local ", "correct": true}, {"option": "Descendant", "correct": false}], "level": "Easy"}, {"question": "<p>Which property value Inherits the property from its parent element?</p>", "options": [{"option": "initial", "correct": false}, {"option": "inherit", "correct": true}, {"option": "number", "correct": false}, {"option": "auto", "correct": false}], "level": "Medium"}, {"question": "<p>What is the range of data type <strong>short</strong> in Java?</p>", "options": [{"option": "-128 to 127", "correct": false}, {"option": " -32768 to 32767", "correct": true}, {"option": "-2147483648 to 2147483647", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>How many bits of memory is occupied by <strong>short</strong> data type in Java?</p>", "options": [{"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "16", "correct": true}, {"option": "32", "correct": false}], "level": "Easy"}, {"question": "<p>What is the range of data type <strong>byte</strong> in Java?</p>", "options": [{"option": "-128 to 127", "correct": true}, {"option": " -32768 to 32767", "correct": false}, {"option": " -2147483648 to 2147483647", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class area {\n        public static void main(String args[]) \n        {    \n             double r, pi, a;\n             r = 9.8;\n             pi = 3.14;\n             a = pi * r * r;\n             System.out.println(a);\n        } \n    }\n</code></pre>", "options": [{"option": "254.3434", "correct": false}, {"option": "301.5656", "correct": true}, {"option": "254.3400", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class incr{\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(++g * 8);\n        } \n    }\n</code></pre>", "options": [{"option": "24", "correct": false}, {"option": "32", "correct": true}, {"option": "35", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class incr{\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(g++ * 8);\n        } \n    }\n</code></pre>", "options": [{"option": "32", "correct": false}, {"option": "24", "correct": true}, {"option": "35", "correct": false}, {"option": "16", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class incr{\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(--g * 8);\n        } \n    }\n</code></pre>", "options": [{"option": "24", "correct": false}, {"option": "32", "correct": false}, {"option": "16", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class incr{\n        public static void main(String args[]) \n        {        \n             int g = 3;\n             System.out.print(g-- * 8);\n        } \n    }\n</code></pre>", "options": [{"option": "16", "correct": false}, {"option": "32", "correct": false}, {"option": "24", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class con{\n        public static void main(String args[]) \n        {    \n             double a = 295.04;\n             int  b = 300;\n             byte c = (byte) a;\n             byte d = (byte) b;\n             System.out.println(c + \" \"  + d);\n        } \n    }\n</code></pre>", "options": [{"option": "38 43", "correct": false}, {"option": " 295 300", "correct": false}, {"option": "39 44", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class conversion {\n        public static void main(String args[]) \n        {    \n             double a = 295.04;\n             double b = 300;\n             int c = (int) a;\n             int d = (int) b;\n             System.out.println(c + \" \"  + d);\n        } \n    }\n</code></pre>", "options": [{"option": "295.00, 300", "correct": false}, {"option": "295.0, 300", "correct": false}, {"option": "295   300", "correct": true}, {"option": "Garbage value, 300", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class average {\n        public static void main(String args[])\n        {\n            double num[] = {5.5, 10.1};\n            double result;\n            result = 0;\n            for (int i = 0; i &lt; 1; ++i) \n                result = result + num[i];\n        System.out.print(result/4);\n\n        } \n    }\n</code></pre>", "options": [{"option": "1.000", "correct": false}, {"option": "1.375", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>Which data type value is returned by all transcendental math functions?</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "long", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these literals can be contained in a data type <strong>float</strong> variable?</p>", "options": [{"option": " 1.7e-308", "correct": false}, {"option": "3.4e-038", "correct": true}, {"option": "1.7e+308", "correct": false}, {"option": " 3.4e-050", "correct": false}], "level": "Medium"}, {"question": "<p>An expression involving byte, int, and literal numbers is promoted to which of these?</p>", "options": [{"option": "int", "correct": true}, {"option": "float", "correct": false}, {"option": "byte", "correct": false}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are legal lines of Java code?</p>\n<ol>\n<li>int w = (int)888.8;</li>\n<li>byte x = (byte)100L;</li>\n<li>long y = (byte)100;</li>\n<li>byte z = (byte)100L;</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the numerical range of a <strong>char</strong> data type in Java?</p>", "options": [{"option": " -128 to 127", "correct": false}, {"option": "0 to 256", "correct": false}, {"option": "0 to 32767", "correct": false}, {"option": "0 to 65535", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of these coding types is used for data type characters in Java?</p>", "options": [{"option": "ASCII", "correct": false}, {"option": "ISO-LATIN-1", "correct": false}, {"option": "UNICODE", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these values can a boolean variable contain?</p>", "options": [{"option": "True & False", "correct": true}, {"option": "0 & 1", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Which one is a valid declaration of a Boolean?</p>", "options": [{"option": " boolean b1 = 1;", "correct": false}, {"option": "boolean b2 = \u2018false\u2019;", "correct": false}, {"option": " boolean b3 = false;", "correct": true}, {"option": " boolean b4 = \u2018true\u2019", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these occupy first 0 to 127 in Unicode character set used for characters in Java?</p>", "options": [{"option": "ASCII", "correct": false}, {"option": "ISO-LATIN-1", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class array{\n        public static void main(String args[]) \n        {    \n            char a[] = new char[10];\n        for (int i = 0; i &lt; 10; ++i) {\n                a[i] = '1';\n                System.out.print(a[i] + \"\" );\n                i++;\n            }\n        } \n    }\n</code></pre>", "options": [{"option": "1111", "correct": false}, {"option": "11111", "correct": true}, {"option": "0 1 2 3 4", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class array{\n        public static void main(String args[]) \n        {    \n            char a[] = new char[10];\n        for (int i = 0; i &lt; 10; ++i) {\n                a[i] = '\\0';\n                System.out.print(a[i] + \"\" );\n                i++;\n            }\n        } \n    }\n</code></pre>", "options": [{"option": "0000", "correct": false}, {"option": "\\0\\0\\0\\0\\0", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class mainclass {\n        public static void main(String args[]) \n        {\n            char a = 'a';\n            a++;\n        System.out.print((int)a);\n        } \n    }\n</code></pre>", "options": [{"option": "97", "correct": false}, {"option": "98", "correct": true}, {"option": "65", "correct": false}, {"option": "66", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class mainclass {\n        public static void main(String args[]) \n        {\n            char a = 'E';\n           System.out.print((int)(a++));\n        } \n    }\n</code></pre>", "options": [{"option": "69", "correct": true}, {"option": "70", "correct": false}, {"option": "71", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class mainclass {\n        public static void main(String args[]) \n        {\n        boolean var1 =true;\n        boolean var2 =false;\n        if (var2)\n            System.out.println(var1);\n        else\n            System.out.println(var2);\n       } \n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code> class mainclass {\n    public static void main(String args[])\n    {\n        boolean var1 =true;\n        boolean var2 ='0';\n        if (var2)\n            System.out.println(var1);\n        else\n            System.out.println(var2);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class booloperators {\n    public static void main(String args[])\n    {\n        boolean var1 = true;\n        boolean var2 = false;\n        System.out.println((var2 &amp; var2));\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class booloperators {\n        public static void main(String args[])\n        {\n            boolean var1 = true;\n            boolean var2 = false;\n            System.out.println((var2||var2));\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class asciicodes {\n    public static void main(String args[])\n    {\n        char var1 = 'A';\n        char var2 = 'a';\n        System.out.println((int)var1 + \" \" + (int)var2);\n    }\n}\n</code></pre>", "options": [{"option": "67, 95", "correct": false}, {"option": "66, 96", "correct": false}, {"option": "65, 97", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class asciicodes {\n    public static void main(String args[])\n    {\n        char var1 = 'A';\n        char var2 = 'a';\n        System.out.println((int)var1 +(int)var2);\n    }\n}\n</code></pre>", "options": [{"option": "162", "correct": true}, {"option": "95 67", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is data type long literal?</p>", "options": [{"option": " 0x99fffL", "correct": true}, {"option": "ABCDEFG", "correct": false}, {"option": "0x99fffa", "correct": false}, {"option": " 99671246", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is returned by operators &amp; ?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "Float", "correct": false}], "level": "Medium"}, {"question": "<p>Literals in java must be appended by which of these?</p>", "options": [{"option": " L", "correct": false}, {"option": " l", "correct": false}, {"option": " D", "correct": false}, {"option": "L and I", "correct": true}], "level": "Easy"}, {"question": "<p>Literal can be of which of these data types?</p>", "options": [{"option": "integer", "correct": false}, {"option": " float", "correct": false}, {"option": "boolean", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these cannot be used for a variable name in Java?</p>", "options": [{"option": " identifier", "correct": false}, {"option": " keyword", "correct": true}, {"option": "identifier & keyword", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class dynamic{\n    public static void main(String args[])\n    {\n        double a, b;\n        a = 3.0;\n        b = 4.0;\n        double c = Math.sqrt(a * a + b * b);\n        System.out.println(c);\n    }\n}\n</code></pre>", "options": [{"option": "25.0", "correct": false}, {"option": "5.0", "correct": true}, {"option": "5.00", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class demo{\n    public static void main(String args[])\n    {\n        double a, b;\n        a = 5.0;\n        b = 12.0;\n        double c = Math.sqrt(a * a + b * b);\n        System.out.println(c);\n    }\n}\n</code></pre>", "options": [{"option": "13", "correct": false}, {"option": "13.0", "correct": true}, {"option": "13.00", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>Which one of these is incorrect string literal?</p>", "options": [{"option": "\"Hacker Earth\"", "correct": false}, {"option": "\"Hacker\\nEarth\"", "correct": false}, {"option": "\u201c\\\u201dHacker Earth\u201d\"", "correct": false}, {"option": "\"Hacker \r\n  Earth\"", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class variable{\n    public static void main(String args[])\n    {\n        int x;\n        x = -1;\n        {\n            int y = 4;\n            System.out.print(x + \" \" + y);\n        }\n        System.out.println(x + \" \" + y);\n    }\n}\n</code></pre>", "options": [{"option": "-1 4 -1 4", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "-1 4", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class array{\n    public static void main(String args[])\n    {\n        int a[] = new int[10];\n        for (int i = 0; i &lt; 10; ++i) {\n            a[i] = i/2;\n            a[i]++;\n            System.out.print(a[i] + \" \");\n            i++;\n        }\n\n    }\n}\n</code></pre>", "options": [{"option": " 0 2 4 6 8", "correct": false}, {"option": "1 2 3 4 5 ", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "1 2 3 4 5 6 7 8 9 10", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class example{\n    public static void main(String args[])\n    {\n        int a[] = {1,2,3,4,5};\n        int d[] = a;\n        int sum = 0;\n        for (int j = 0; j &lt; 3; ++j)\n            sum += (a[j] * d[j]) + (a[j + 1] * d[j]);\n        System.out.println(sum);\n    }\n}\n</code></pre>", "options": [{"option": "40", "correct": false}, {"option": "34", "correct": true}, {"option": "36", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these cannot be used for a variable name in Java?</p>", "options": [{"option": "identifier", "correct": false}, {"option": " keyword", "correct": true}, {"option": "identifier & keyword", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these operators is used to allocate memory to array variable in Java?</p>", "options": [{"option": "malloc", "correct": false}, {"option": " alloc", "correct": false}, {"option": "new", "correct": true}, {"option": "Both a and c", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is an incorrect array declaration?</p>", "options": [{"option": "int arr[] = new int[5]", "correct": false}, {"option": "int [] arr = new int[5]", "correct": false}, {"option": "int arr[] = int [5] new", "correct": true}, {"option": "Both a and c", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below code:</p>\n<pre class=\"prettyprint\"><code>int arr[] = new int [2];\nSystem.out.print(arr);\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "00", "correct": false}, {"option": "Garbage value ", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is an incorrect Statement?</p>", "options": [{"option": " It is necessary to use new operator to initialize an array.", "correct": true}, {"option": "Array can be initialized when they are declared.", "correct": false}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class array{\n    public static void main(String args[])\n    {\n        int array_variable[][] = {{ 1, 2, 3},{4,5,6}};\n        int sum = 0;\n        for (int i = 0; i &lt; 2; ++i)\n            for (int j = 0; j &lt;  2; ++j)\n                sum = sum + array_variable[i][j];\n            System.out.print(sum / 5);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class example {\n    public static void main(String args[])\n    {\n        int arr[] = new int[] {0,1,2,4,4,5};\n        int n = 4;\n        n = arr[arr[n] / 2];\n        System.out.println(arr[n] / 2);\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is necessary to specify at time of array initialization?</p>", "options": [{"option": "Column", "correct": false}, {"option": " Row", "correct": true}, {"option": "Both a and b", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following can be operands of arithmetic operators?</p>", "options": [{"option": " Numeric", "correct": false}, {"option": " Boolean", "correct": false}, {"option": " Characters", "correct": false}, {"option": "Both Numeric & Characters", "correct": true}], "level": "Medium"}, {"question": "<p>On which of the following below can we apply modulas operator, <strong>%</strong> ?</p>", "options": [{"option": "Integers", "correct": false}, {"option": " Floating \u2013 point numbers", "correct": false}, {"option": "Both a and b", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>With x = 0, which of the following are legal lines of Java code for changing the value of x to 1?</p>\n<ol>\n<li>x++;</li>\n<li>x = x + 1;</li>\n<li>x += 1;</li>\n<li>x =+ 1;</li>\n</ol>", "options": [{"option": " 1, 2, 3, 4", "correct": true}, {"option": "1 & 4", "correct": false}, {"option": "1 & 4", "correct": false}, {"option": "3 & 2", "correct": false}], "level": "Easy"}, {"question": "<p>Decrement operator, \u2013, decreases value of variable by what number?</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Very-Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class increment {\n    public static void main(String args[])\n    {\n        double var1 = 1 + 5;\n        double var2 = var1 / 4;\n        int var3 = 1 + 5;\n        int var4 = var3 / 4;\n        System.out.print(var2 + \" \" + var4);\n\n    }\n}\n</code></pre>", "options": [{"option": "1 2", "correct": false}, {"option": "0 1", "correct": false}, {"option": "1.5  1.0", "correct": false}, {"option": "1.5  1", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Modulus {\n        public static void main(String args[])\n        {\n            double a = 25.0000;\n            int  b = 25;\n            a = a % 10;\n            b = b % 10;\n            System.out.println(a + \" \"  + b);\n        }\n    }\n</code></pre>", "options": [{"option": "5.000 5", "correct": false}, {"option": "5 5", "correct": false}, {"option": "5.00 5", "correct": false}, {"option": "5.0 5", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            int x , y;\n            x = 10;\n            x++;\n            --x;\n            y = x++;\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "11 11", "correct": false}, {"option": "10 10", "correct": false}, {"option": "11 10", "correct": true}, {"option": "10 11", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            int x , y;\n            x = 10;\n            --x;\n            --x;\n            y = x--;\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "8 8", "correct": false}, {"option": "7 7", "correct": false}, {"option": "7 8", "correct": true}, {"option": "8 7", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        int a = 1;\n        int b = 2;\n        int c;\n        int d;\n        c = ++b;\n        d = a++;\n        c++;\n        b++;\n        System.out.println(a + \" \" + b + \" \" + c);\n    }\n}\n</code></pre>", "options": [{"option": "3, 3, 4", "correct": false}, {"option": "2, 4, 4", "correct": true}, {"option": "2, 4, 3", "correct": false}, {"option": "1, 2, 2", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>Which of these is not a bitwise operator?</p>", "options": [{"option": "&", "correct": false}, {"option": " &=", "correct": false}, {"option": "|=", "correct": false}, {"option": "<=", "correct": true}], "level": "Easy"}, {"question": "<p>Which operator is used to invert all the digits in binary representation of a number?</p>", "options": [{"option": " ~", "correct": true}, {"option": "<<<", "correct": false}, {"option": " >>>", "correct": false}, {"option": "^", "correct": false}], "level": "Easy"}, {"question": "<p>On applying Left shift operator, &lt;&lt;, on an integer bits are lost one they are shifted past which position bit?</p>", "options": [{"option": " 1", "correct": false}, {"option": "32", "correct": false}, {"option": "31", "correct": true}, {"option": "33", "correct": false}], "level": "Medium"}, {"question": "<p>Which right shift operator preserves the sign of the value?</p>", "options": [{"option": " <<", "correct": false}, {"option": " <<=", "correct": false}, {"option": ">>", "correct": true}, {"option": ">>=", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class bitwise{\n        public static void main(String args[])\n        {\n            int var1 = 2;\n            int var2 = ~var1;\n            System.out.print(var1 + \" \" + var2);\n        }\n    }\n</code></pre>", "options": [{"option": "2 -2", "correct": false}, {"option": "3 3", "correct": false}, {"option": "2 -3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class bitwise{\n    public static void main(String args[])\n    {\n        {\n            int a = 3;\n            int b = 6;\n            int c = a | b;\n            int d = a &amp; b;\n            System.out.println(c + \" \"  + d);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "7 3", "correct": false}, {"option": "6 2", "correct": false}, {"option": "6 4", "correct": false}, {"option": "7 2", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class bitwise{\n        public static void main(String args[])\n        {\n            {\n                int a = 3;\n                int b = 6;\n                int c = a | b;\n                int d = a &amp; b | c;\n                System.out.println(c + \" \"  + d);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "7 7", "correct": true}, {"option": "6 7", "correct": false}, {"option": "7 6", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[]) \n            {        \n                 byte x = 4;\n                 int i;\n                 byte y; \n                 i = x &lt;&lt; 2;\n                 y = (byte) (x &lt;&lt; 2);\n                 System.out.print(i + \" \" + y);\n            } \n        }\n</code></pre>", "options": [{"option": "16 0", "correct": false}, {"option": "16 16", "correct": true}, {"option": "0 16", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Demo{\n        public static void main(String args[])\n\n        {    \n             int x; \n             x = 15;\n             x = x &gt;&gt; 1;\n             System.out.println(x);\n        } \n    }\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "7", "correct": true}, {"option": "6", "correct": false}, {"option": "None of these.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            int a = 1;\n            int b = 2;\n            int c = 3;\n            a |= 4;\n            b &gt;&gt;= 1;\n            c &lt;&lt;= 1;\n            a ^= c;\n            System.out.println(a + \" \" + b + \" \" + c);\n        }\n    }\n</code></pre>", "options": [{"option": "2 2 3", "correct": false}, {"option": "2 3 4", "correct": false}, {"option": "3 1 6", "correct": true}, {"option": "3 3 6", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            int a = 1;\n            int b = 2;\n            int c = 3;\n            a |= 4;\n            a ^= c;\n            System.out.println(a + \" \" +c);\n        }\n    }\n</code></pre>", "options": [{"option": "4 6", "correct": false}, {"option": "6 4", "correct": false}, {"option": "6 3", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of relational operators?</p>", "options": [{"option": " Integer", "correct": false}, {"option": " Boolean", "correct": true}, {"option": "Characters", "correct": false}, {"option": "Double", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is returned by greater than, &lt;, and equal to, ==, operator?</p>", "options": [{"option": "Integers", "correct": false}, {"option": "Floating - point numbers", "correct": false}, {"option": " Boolean", "correct": true}, {"option": "All of these.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following operators can operate on a boolean variable?</p>", "options": [{"option": "&&", "correct": false}, {"option": "==", "correct": false}, {"option": "?:", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these operators can skip evaluating right hand operand?</p>", "options": [{"option": "!", "correct": false}, {"option": " |", "correct": false}, {"option": "&", "correct": false}, {"option": "&&", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these statement is correct?</p>", "options": [{"option": "True and false are numeric values 1 and 0.", "correct": false}, {"option": " True and false are numeric values 0 and 1.", "correct": false}, {"option": "True is any non zero value and false is 0.", "correct": false}, {"option": " True and false are non numeric values.", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Sample {\n    public static void main(String args[])\n    {\n        boolean a = true;\n        boolean b = false;\n        boolean c = a ^ b;\n        System.out.println(!c);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample {\n        public static void main(String args[])\n        {\n            int x , y = 1;\n            x = 10;\n            if (x != 10 &amp;&amp; x / 0 == 0)\n                System.out.println(y);\n            else\n                System.out.println(++y);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            int x = 3;\n            int y = ~ x;\n            int z;\n            z = x &gt; y ? x : y;\n            System.out.print(z);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "-1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n        boolean a = true;\n        boolean b = !true;\n        boolean c = a | b;\n        boolean d = a &amp; b;\n        boolean e = d ? b : c;\n        System.out.println(d + \" \" + e);\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "true, false", "correct": false}, {"option": "false, true\r\n", "correct": true}, {"option": "true, true", "correct": false}, {"option": "false, false", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n       int x = 3;\n             int y = ~ x;\n             int z;\n             z = x &gt; y ? x : y;\n             System.out.print(z);\n        } \n    }\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n        int var1 = 5;\n        int var2 = 6;\n        System.out.print(var1 &gt; var2);\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}, {"option": "1", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Which one of these have highest precedence?</p>", "options": [{"option": "()", "correct": true}, {"option": "++", "correct": false}, {"option": " *", "correct": false}, {"option": ">>", "correct": false}], "level": "Easy"}, {"question": "<p>What should expression1 evaluate to in using ternary operator as in this line?</p>\n<p><strong>expression1 ? expression2 : expression3</strong></p>", "options": [{"option": " Integer", "correct": false}, {"option": "Floating \u2013 point numbers", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "None of these.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value stored in <strong>x</strong> in following lines of code?</p>\n<pre class=\"prettyprint\"><code>int x, y, z;\nx = 0;\ny = 1;\nx = y = z = 8;\n</code></pre>", "options": [{"option": " 0", "correct": false}, {"option": "1", "correct": false}, {"option": "9", "correct": false}, {"option": "None of these.", "correct": true}], "level": "Easy"}, {"question": "<p>What is the order of precedence (highest to lowest) for the following operators?</p>\n<ol>\n<li>&amp;</li>\n<li>^</li>\n<li>?:</li>\n</ol>", "options": [{"option": "2 -> 1 -> 3", "correct": false}, {"option": "3 -> 2 -> 1", "correct": false}, {"option": "1 -> 2 -> 3", "correct": true}, {"option": "2 -> 3 -> 1", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n      int var1 = 5; \n            int var2 = 6;\n            System.out.print(var1&lt;=var2);\n        } \n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "true", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Bool{\n    public static void main(String args[])\n    {\n        int var1 = 5;\n        int var2 = 6;\n        int var3;\n        var3 = ++ var2 * var1 / var2 + var2;\n        System.out.print(var3);\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": false}, {"option": "12", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        int x = 8;\n        System.out.println(++x * 3 + \" \" + (x--));\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "24, 8", "correct": false}, {"option": "27, 8", "correct": false}, {"option": "24, 9", "correct": false}, {"option": "27, 9", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the below Java code:</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        int x = 8;\n        System.out.println(++x * 3 + \" \" + (--x));\n    }\n}\n</code></pre>", "options": [{"option": "24 8", "correct": false}, {"option": "24 9", "correct": false}, {"option": "27 8", "correct": true}, {"option": "27 9", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following improves performance:</p>\n<ol>\n<li>a | 4 + c &gt;&gt; b &amp; 7;</li>\n<li>(a | ((( 4 * c ) &gt;&gt; b ) &amp; 7 ))</li>\n</ol>", "options": [{"option": "First", "correct": false}, {"option": "Second ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Depends on the computer system", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is used to test equality?</p>", "options": [{"option": "if", "correct": false}, {"option": "switch", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>selection</strong> statement in Java?</p>", "options": [{"option": "if()", "correct": true}, {"option": "for()", "correct": false}, {"option": "continue", "correct": false}, {"option": "break", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following loops executes its body even though its control condition is false?</p>", "options": [{"option": "do-while", "correct": true}, {"option": "while", "correct": false}, {"option": "for", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        {\n            int var1 = 5;\n            int var2 = 6;\n            if ((var2 = 1) == var1)\n                System.out.print(var2);\n            else\n                System.out.print(++var2);\n        }\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "2", "correct": true}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            {\n                int var1 = 5;\n                int var2 = 5;\n                if ((var2 = 1) == var1)\n                    System.out.print(var2);\n                else\n                    System.out.print(++var2);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "True", "correct": false}, {"option": "2", "correct": true}, {"option": "False", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        {\n            int sum = 0;\n            for (int i = 0, j = 0; i &lt; 5 &amp; j &lt; 5; ++i, j = i + 1)\n                sum += i;\n            System.out.println(sum);\n        }\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            int x = 2;\n            int y = 0;\n            for ( ; y &lt; 10; ++y) {\n                if (y % x == 0)\n                    continue;\n                else if (y == 8)\n                    break;\n                else\n                    System.out.print(y + \" \");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "2 4 6 8", "correct": false}, {"option": "1 3 5 7", "correct": false}, {"option": "1 3 5 7 9 ", "correct": true}, {"option": "1 2 3 4 5 6 7 8 9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Sample{\n    public static void main(String args[])\n    {\n        int a = 5;\n        int b = 10;\n        first: {\n            second: {\n                if (a ==  b &gt;&gt; 1)\n                    break first;\n            }\n            System.out.println(a);\n        }\n        System.out.println(b);\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "5", "correct": false}, {"option": "5/n10", "correct": false}, {"option": "10", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<p>class Sample{\n  public static void main(String args[])\n  {\n  int a = 5;\n  int b = 10;\n  first: {\n  second: {\n  if (a == b &gt;&gt; 1)\n  break second;\n  }\n  System.out.println(a);\n  }\n  System.out.println(b);\n  }\n  }</p>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "5, 10", "correct": true}, {"option": "5", "correct": false}, {"option": "10", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to create a class?</p>", "options": [{"option": "struct", "correct": false}, {"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "class", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following is a valid declaration for an object of a <strong>Box</strong> class?</p>", "options": [{"option": "Box obj = new Box;", "correct": false}, {"option": "obj = new Box();", "correct": false}, {"option": "Box obj = new Box();", "correct": true}, {"option": "new Box obj;", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following operators is used to allocate the memory for an object?</p>", "options": [{"option": "malloc", "correct": false}, {"option": "alloc", "correct": false}, {"option": "new", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is incorrect?</p>", "options": [{"option": "Applets do not require a main() method.", "correct": false}, {"option": "Programs include only one main() method.", "correct": false}, {"option": "Classes must include a main() method.\r\n", "correct": true}, {"option": "The main() method must be made public.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            int x = 10;\n            if (x == 10) {\n                int x = 8;\n                System.out.println(x);\n            }\n        }\n    }\n\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "10", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>public method</strong> is correct?</p>", "options": [{"option": "It is accessible to all other classes in the hierarchy.", "correct": true}, {"option": "It is accessible only to subclasses of its parent class.", "correct": false}, {"option": "It can only be called by objects of its class.", "correct": false}, {"option": "It can be accessed by calling objects of the public class.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class box {\n    int width;\n    int height;\n    int length;\n}\nclass mainclass {\n    public static void main(String args[])\n    {\n        box obj = new box();\n        System.out.println(obj);\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "The address of the memory is printed", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the datatype of a method that does not return any value?</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "void", "correct": true}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is process of defining methods in a class differentiated by their method signature?</p>", "options": [{"option": "Function overriding", "correct": false}, {"option": "Function overloading", "correct": true}, {"option": "Function doubling", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods has the same name as the containing class?</p>", "options": [{"option": "finalize", "correct": false}, {"option": "delete", "correct": false}, {"option": "class", "correct": false}, {"option": "constructor", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following methods can only be defined once in a Java program?</p>", "options": [{"option": "main", "correct": true}, {"option": "finalize", "correct": false}, {"option": "static", "correct": false}, {"option": "private", "correct": false}], "level": "Easy"}, {"question": "<p>What is the return type of Constructors in Java?</p>", "options": [{"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "void", "correct": false}, {"option": "None of these ", "correct": true}], "level": "Easy"}, {"question": "<p>During the Java runtime, which of the following operators is used to free the memory of an object when it is no longer needed?</p>", "options": [{"option": "Delete", "correct": false}, {"option": "Free", "correct": false}, {"option": "New", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following functions is used when an object is destroyed?</p>", "options": [{"option": "delete()", "correct": false}, {"option": "finalize()", "correct": true}, {"option": "main()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, if methods within the same class have same name but different parameters declaration, what is the process called?</p>", "options": [{"option": "Method Overriding", "correct": false}, {"option": "Method Overloading", "correct": true}, {"option": "Method Hiding", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following can be overloaded?</p>", "options": [{"option": "Methods", "correct": false}, {"option": "Constructors", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following processes defines a method that calls itself in Java?</p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Recursion", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following access specifiers must be used for the <strong>main()</strong> method in Java?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Public", "correct": true}, {"option": "Protected", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to access the members of a class before an object of that class is created?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Private", "correct": false}, {"option": "Static", "correct": true}, {"option": "Protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, if no <strong>access specifier</strong> is used for a member of a class, which of the following is used as a default?</p>", "options": [{"option": "private", "correct": true}, {"option": "public", "correct": false}, {"option": "public within its package", "correct": false}, {"option": "protected", "correct": false}], "level": "Easy"}, {"question": "<p>How are arrays implemented in Java?</p>", "options": [{"option": "As classes", "correct": false}, {"option": "As objects", "correct": false}, {"option": "As variables", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent the content of a variable from being modified?</p>", "options": [{"option": "final", "correct": true}, {"option": "last", "correct": false}, {"option": "constant", "correct": false}, {"option": "static", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following can not be declared as <strong>static</strong> in Java?</p>", "options": [{"option": "Class", "correct": false}, {"option": "Object", "correct": true}, {"option": "Variable", "correct": false}, {"option": "Method", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>static</strong> methods is correct?</p>", "options": [{"option": "Static methods can call other static methods only.", "correct": false}, {"option": "Static methods can access static data only.", "correct": false}, {"option": "Static methods can not refer to 'this' or 'super' in any way.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about variables is incorrect?</p>", "options": [{"option": "The variables declared as 'final' occupy memory.", "correct": true}, {"option": "The final variable must be initialized at the time of declaration.", "correct": false}, {"option": "The first variable must be initialized at the time of declaration.", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods should be static in Java?</p>", "options": [{"option": "main()", "correct": true}, {"option": "delete()", "correct": false}, {"option": "run()", "correct": false}, {"option": "finalize()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class Output {\n    public static void main(String args[])\n    {\n        int arr[] = {1, 2, 3, 4, 5};\n        for ( int i = 0; i &lt; arr.length -3; ++i)\n            System.out.println(arr[i]);\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "1, 2 ,3", "correct": false}, {"option": "1, 2", "correct": true}, {"option": "1, 2, 3, 4", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[])\n        {\n            int a1[] = new int[10];\n            int a2[] = {1, 2, 3, 4, 5};\n            System.out.println(a1.length + \" \" + a2.length);\n        }\n    }\n\n</code></pre>", "options": [{"option": "11, 6", "correct": false}, {"option": "10, 6", "correct": false}, {"option": "10, 5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is <strong>String</strong> in Java?</p>", "options": [{"option": "A class", "correct": true}, {"option": "A character array", "correct": false}, {"option": "A variable", "correct": false}, {"option": "An object", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>String</strong> class is used at a specific index to obtain a character?</p>", "options": [{"option": "char()", "correct": false}, {"option": "charat()", "correct": false}, {"option": "charat()", "correct": false}, {"option": "charAt()", "correct": true}], "level": "Easy"}, {"question": "<p>Which keyword is used to refer to the base class from a sub class in Java?</p>", "options": [{"option": "upper", "correct": false}, {"option": "super", "correct": true}, {"option": "this", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>string</strong> class is used to test equality in strings?</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "isequals()", "correct": false}, {"option": "equal()", "correct": false}, {"option": "equals()", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statement(s) is/are incorrect?</p>", "options": [{"option": "String is a class.", "correct": false}, {"option": "Strings in java are mutable.", "correct": true}, {"option": "Every string is an object of class String.", "correct": false}, {"option": "Java defines a peer class of String, called StringBuffer, which allows string to be altered.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class string_class {\n    public static void main(String args[])\n    {\n        String obj = \"I LIKE coding\";\n        System.out.println(obj.charAt(6));\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "c", "correct": false}, {"option": "o", "correct": false}, {"option": "E", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<p>\u00b4\u00b4\u00b4</p>\n<pre class=\"prettyprint\"><code>class string_class {\n    public static void main(String args[])\n    {\n        String obj = \"I LIKE coding\";\n        System.out.println(obj.charAt(12));\n    }\n}\n</code></pre>\n<p>\u00b4\u00b4\u00b4</p>", "options": [{"option": "n", "correct": false}, {"option": "i", "correct": false}, {"option": "g", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class string_class {\n        public static void main(String args[])\n        {\n            String obj = \"I LIKE JAVA\";\n            System.out.println(obj.length());\n        }\n    }\n</code></pre>", "options": [{"option": "9", "correct": false}, {"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            {\n                String obj = \"hello\";\n                String obj1 = \"world\";\n                String obj2 = obj;\n                obj2 = \" world\";\n                System.out.println(obj + \" \" + obj2);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "hello hello", "correct": false}, {"option": "world world", "correct": false}, {"option": "hello world", "correct": true}, {"option": "world hello", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Sample{\n        public static void main(String args[])\n        {\n            {\n                String obj = \"hacker\";\n                String obj1 = \"earth\";\n                String obj2 = \"hello\";\n                System.out.println(obj.equals(obj1) + \" \" + obj.equals(obj2));\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "true true", "correct": false}, {"option": "false false", "correct": true}, {"option": "false  true", "correct": false}, {"option": "true false", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>\npublic class StringClass {\n    public static void main(String args[])\n    {\n        String s1=\"Welcome\";\n        String s2=\"Welcome\";\n        String s3=s1;\n        System.out.println(s1.equals(s2));\n        System.out.println(s3.equals(s1));\n        System.out.println(s3.equals(s2));\n    }\n\n}\n</code></pre>", "options": [{"option": "true, true, true", "correct": true}, {"option": "false, false, true", "correct": false}, {"option": "false, true, true", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to inherit a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "this", "correct": false}, {"option": "extent", "correct": false}, {"option": "extends", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, a class member declared as <strong>protected</strong> becomes a member of a subclass of _________.</p>", "options": [{"option": "public member", "correct": false}, {"option": "private member", "correct": true}, {"option": "protected member", "correct": false}, {"option": "static member", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following methods is used to inherit the class A from class B?</p>", "options": [{"option": "class B + class A {}", "correct": false}, {"option": "class B inherits class A {}", "correct": false}, {"option": "class B extends A {}", "correct": true}, {"option": "class B extends class A {}", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following keywords is used in a subclass to call the constructor of a superclass?</p>", "options": [{"option": "this", "correct": false}, {"option": "super", "correct": true}, {"option": "extend ", "correct": false}, {"option": "extends", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following processes is used to define a method in a subclass having the same name and type signature as a method in its superclass?</p>", "options": [{"option": "Method overloading", "correct": false}, {"option": "Method overriding", "correct": true}, {"option": "Method hiding", "correct": false}, {"option": "Method abstraction", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent <strong>Method overriding</strong>?</p>", "options": [{"option": "static", "correct": false}, {"option": "constant", "correct": false}, {"option": "protected", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to call a constructor having no parameters of superclass A by subclass B?</p>", "options": [{"option": "super(void);", "correct": false}, {"option": "super.A();", "correct": false}, {"option": "superclass.();", "correct": false}, {"option": "super();", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following is supported by <strong>method overriding</strong>?</p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Polymorphism", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a superclass of every class?</p>", "options": [{"option": "String class", "correct": false}, {"option": "Object class", "correct": true}, {"option": "Abstract class", "correct": false}, {"option": "ArrayList class", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following methods of an <strong>Object</strong> class is used to obtain a class of an object at runtime?</p>", "options": [{"option": "get()", "correct": false}, {"option": "void getclass()", "correct": false}, {"option": "Object.getClass()", "correct": true}, {"option": "class()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to prevent inheritance of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "constant", "correct": false}, {"option": "Class", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is not used for a class which is declared as final?</p>", "options": [{"option": "abstract", "correct": true}, {"option": "extends ", "correct": false}, {"option": "abstract and extends", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following classes depends on its subclasses for the complete implementation of its methods?</p>", "options": [{"option": "Object class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "Interface", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A {\n        int i;\n        int j;\n        A() {\n            i = 1;\n            j = 2;\n        }\n    }\n    class Output {\n        public static void main(String args[])\n        {\n            A obj1 = new A();\n            System.out.print(obj1.i);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is a superclass of a <strong>String</strong> and <strong>StringBuffer</strong> class?</p>", "options": [{"option": " java.util", "correct": false}, {"option": " java.lang", "correct": true}, {"option": "java.awt", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following operators is used to concatenate two or more String objects?</p>", "options": [{"option": "+=", "correct": false}, {"option": "+", "correct": true}, {"option": "&", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of a <strong>String</strong> class is used to obtain the length of String object?</p>", "options": [{"option": "get()", "correct": false}, {"option": "Sizeof()", "correct": false}, {"option": "lengthof()", "correct": false}, {"option": "length()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of a <strong>String</strong>  class is used to extract a single character from a String object?</p>", "options": [{"option": "CHAR()", "correct": false}, {"option": "extract()", "correct": false}, {"option": "charAt()", "correct": true}, {"option": "ChatAt()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following constructors is used to create an empty String object?</p>", "options": [{"option": "String(void)", "correct": false}, {"option": "String()", "correct": true}, {"option": "String(0)", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String_demo {\n        public static void main(String args[])\n        {\n            char chars[] = {'x', 'b', 'c'};\n            String s = new String(chars);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "b", "correct": false}, {"option": "x", "correct": false}, {"option": "c", "correct": false}, {"option": "xbc", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String_demo {\n        public static void main(String args[])\n        {\n            char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };\n            String helloString = new String(helloArray);\n            System.out.println(helloString);\n        }\n    }\n</code></pre>", "options": [{"option": "hello.", "correct": true}, {"option": "h", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "hello", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String_demo {\n        public static void main(String args[])\n        {\n\n            int ascii[] = { 65, 66, 67, 68};\n            String s = new String(ascii, 0, 2);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "ABCD", "correct": false}, {"option": "AB", "correct": true}, {"option": "ABC", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String_demo {\n        public static void main(String args[])\n        {\n\n            int ascii[] = { 69, 66, 74, 68};\n            String s = new String(ascii,1,2);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "BK", "correct": false}, {"option": "BJ", "correct": true}, {"option": "BJ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            char chars[] = {'a', 'b', 'c'};\n            String s = new String(chars);\n            String s1 = \"abcd\";\n            int len1 = s1.length();\n            int len2 = s.length();\n            System.out.println(len1 + \" \" + len2);\n        }\n    }\n</code></pre>", "options": [{"option": "3 3", "correct": false}, {"option": "4 3", "correct": true}, {"option": "4 4", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            char chars[] = {'a', 'b', 'c'};\n            String s = new String(chars);\n            String s1 = \"abcd\";\n            int len1 = s1.length();\n            int len2 = s.length();\n            System.out.println(len1 + len2);\n        }\n    }\n</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "8", "correct": false}, {"option": "7", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of a class <strong>String</strong> is used to extract more than one character at a time?</p>", "options": [{"option": "getchars()", "correct": false}, {"option": "getChars()", "correct": true}, {"option": "GetChars()", "correct": false}, {"option": "Getchars()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, __________ method is an alternative for <strong>getChars()</strong> which stores the characters in an array of bytes?</p>", "options": [{"option": "GetByte()", "correct": false}, {"option": "getBytes()", "correct": true}, {"option": "giveByte()", "correct": false}, {"option": "Give Bytes()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of a class <strong>String</strong> is used to obtain the length of the String object?</p>", "options": [{"option": "get()", "correct": false}, {"option": "Sizeof()", "correct": false}, {"option": "length()", "correct": true}, {"option": "lengthof()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to convert all the characters in a string into a character array?</p>", "options": [{"option": "charAt()", "correct": false}, {"option": "getChars()", "correct": false}, {"option": "toCharArray()", "correct": false}, {"option": "getChars() and toCharArray()", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String c = \"I am a programmer\";\n            int start = 2;\n            int end = 9;\n            char s[]=new char[end-start];\n            c.getChars(start,end,s,0);\n            System.out.println(s);\n        }\n    }\n</code></pre>", "options": [{"option": "am a p", "correct": false}, {"option": "m a pr", "correct": false}, {"option": "am a pr", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String a = \"hello i love java\";\n            System.out.println(a.indexOf('i')+\" \"+a.indexOf('o'));\n        }\n    }\n</code></pre>", "options": [{"option": "5  4", "correct": false}, {"option": "6  4", "correct": true}, {"option": "6  5", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[])\n            {\n                char ch;\n                ch = \"hello\".charAt(1);\n                System.out.println(ch);\n            }\n       }\n</code></pre>", "options": [{"option": "h", "correct": false}, {"option": "e", "correct": true}, {"option": "l", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[])\n            {\n                char ch;\n                ch = \"hello\".charAt(-1);\n                System.out.println(ch);\n            }\n       }\n</code></pre>", "options": [{"option": "h", "correct": false}, {"option": "e", "correct": false}, {"option": "l", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[])\n            {\n                char ch;\n                ch = \"hello\".charAt(0);\n                System.out.println(ch);\n            }\n       }\n</code></pre>", "options": [{"option": "h", "correct": true}, {"option": "e", "correct": false}, {"option": "l", "correct": false}, {"option": "o", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of a class <strong>String</strong> is used to compare two String objects?</p>", "options": [{"option": "equals()", "correct": true}, {"option": "Equals()", "correct": false}, {"option": "isequal()", "correct": false}, {"option": "Isequal()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java,  __________ method is used to compare a specific region inside a string with another specific region in another string.</p>", "options": [{"option": "regionMatch()", "correct": false}, {"option": "match()", "correct": false}, {"option": "RegionMatches()", "correct": false}, {"option": "regionMatches()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the class <strong>String</strong> is used to check if an object starts with a particular string literal?</p>", "options": [{"option": "endsWith()", "correct": false}, {"option": "Starts()", "correct": false}, {"option": "ends", "correct": false}, {"option": "startsWith()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following values is returned by a function <strong>compareTo()</strong> if the invoking string is less than the string compared?</p>", "options": [{"option": "Zero", "correct": false}, {"option": "Value less than zero", "correct": true}, {"option": "Value greater than zero", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following data type values is returned by <strong>equals()</strong> method of a <strong>String</strong> class?</p>", "options": [{"option": "char", "correct": false}, {"option": "int", "correct": false}, {"option": "boolean", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String c = \"Hello i love java\";\n            boolean var;\n            var = c.startsWith(\"hello\");\n            System.out.println(var);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String c = \"Hello i love java\";\n            boolean var;\n            var = c.endsWith(\"Hello\");\n            System.out.println(var);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n                public static void main(String args[])\n                {\n                   String s1 = \"Hello i love java\";\n                        String s2 = new String(s1);\n                        System.out.println((s1 == s2));\n                    }\n                }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "false", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>        class Demo{\n        public static void main(String args[])\n        {\n            String s1 = \"Hello i love java\";\n            String s2 = new String(s1);\n            System.out.println((s1.equals(s2)));\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n            public static void main(String args[])\n            {\n              String s1 = \"Hello\";\n                    String s2 = new String(s1);\n                    String s3 = \"HELLO\";\n                    System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n                }\n            }\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "true false", "correct": true}, {"option": "true true", "correct": false}, {"option": "false false", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String chars[] = {\"a\", \"b\", \"c\", \"a\", \"c\"};\n            for (int i = 0; i &lt; chars.length; ++i)\n                for (int j = i + 1; j &lt; chars.length; ++j)\n                    if(chars[i].compareTo(chars[j]) == 0)\n                System.out.print(chars[j]);\n            }\n        }\n</code></pre>", "options": [{"option": "bc", "correct": false}, {"option": "ab", "correct": false}, {"option": "ca", "correct": false}, {"option": "ac", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>In Java, __________ method of a class <strong>StringBuffer</strong> is used to extract a substring from a String object.</p>", "options": [{"option": "Substr()", "correct": false}, {"option": "substring()", "correct": true}, {"option": "SubString()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what will the <strong>s2</strong> contain after the following lines of code is executed?</p>\n<pre class=\"prettyprint\"><code>String s1 = \u201cone\u201d;\nString s2 = s1.concat(\u201ctwo\u201d)\n</code></pre>", "options": [{"option": "one", "correct": false}, {"option": "two", "correct": false}, {"option": "onetwo", "correct": true}, {"option": "twoone", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, __________ method of a class <strong>String</strong> is used to remove the leading and trailing whitespaces.</p>", "options": [{"option": "startsWith()", "correct": false}, {"option": "trim()", "correct": true}, {"option": "Trim()", "correct": false}, {"option": "doTrim()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n\n            String s1 = \"one\";\n            String s2 = s1 + \" two\";\n            System.out.println(s2);\n        }\n    }\n</code></pre>", "options": [{"option": "one", "correct": false}, {"option": "two ", "correct": false}, {"option": "one two", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String s1 = \"hello\";\n            String s2 = s1.replace('l','w');\n            System.out.println(s2);\n        }\n    }\n</code></pre>", "options": [{"option": "hello", "correct": false}, {"option": "helwo", "correct": false}, {"option": "hewlo", "correct": false}, {"option": "hewwo", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String s1 = \"Hello World\";\n            String s2 = s1.substring(0 , 3);\n            System.out.println(s2);\n        }\n    }\n</code></pre>", "options": [{"option": "Hello", "correct": false}, {"option": "Hell", "correct": false}, {"option": "Hel", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Demo{\n        public static void main(String args[])\n        {\n            String s = \"Hello World\";\n            int i = s.indexOf('o');\n            int j = s.lastIndexOf('l');\n            System.out.print(i + \" \" + j);\n\n        }\n    }\n</code></pre>", "options": [{"option": "4 8", "correct": true}, {"option": "4 9", "correct": false}, {"option": "5 9", "correct": false}, {"option": "5 8", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following classes is used to create an object whose character sequence is mutable?</p>", "options": [{"option": "String()", "correct": false}, {"option": "StringBuffer()", "correct": true}, {"option": "String() and StringBuffer()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the __________ method of a class <strong>StringBuffer</strong> is used to concatenate the string representation to the end of an invoking string.</p>", "options": [{"option": "concat()", "correct": false}, {"option": "append()", "correct": true}, {"option": "join()", "correct": false}, {"option": "concatenate()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the ________ method of the class <strong>StringBuffer</strong> is used to find the length of the current character sequence?</p>", "options": [{"option": "length()", "correct": true}, {"option": "Length()", "correct": false}, {"option": "capacity()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the approximate value of the double constant <strong><code>E</code></strong> defined in the <strong>Math</strong> class?</p>", "options": [{"option": "3", "correct": false}, {"option": "3.14", "correct": false}, {"option": "2.72", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is a <strong>rounding</strong> function of the <strong>Math</strong> class?</p>", "options": [{"option": "max()", "correct": false}, {"option": "abs()", "correct": false}, {"option": "min()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes contains only <strong>floating point</strong> functions?</p>", "options": [{"option": "Math", "correct": true}, {"option": "Process", "correct": false}, {"option": "System", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to encapsulate the runtime state of an object or an interface?</p>", "options": [{"option": "Class", "correct": true}, {"option": "Object", "correct": false}, {"option": "Runtime", "correct": false}, {"option": "System", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            double x = 3.14;\n            int y = (int) Math.abs(x);\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            int x = 3.14;\n            int y = (int) Math.abs(x);\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n            public static void main(String args[]) \n            {\n               double x = 3.1;  \n                double y = 4.5;\n                double z = Math.max( x, y );\n                System.out.print(z);\n            }\n        }\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "3.1", "correct": false}, {"option": "4.5", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n            public static void main(String args[]) \n            {\n               double x = 3.1;  \n                double y = 4.5;\n                double z = Math.min( x, y );\n                System.out.print(z);\n            }\n        }\n</code></pre>", "options": [{"option": "4.5", "correct": false}, {"option": "3.1", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[])\n        {\n            double x = 3.0;\n            double y = 4.0;\n            double z = Math.pow( x, y );\n            System.out.print(z);\n        }\n    }\n</code></pre>", "options": [{"option": "64.0", "correct": false}, {"option": "81.0", "correct": true}, {"option": "27.0", "correct": false}, {"option": "16.0", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following packages is used for input and output operations of a program?</p>", "options": [{"option": "java.io", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "java.util", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is not a member class of the <strong>java.io</strong> package?</p>", "options": [{"option": "StringReader", "correct": false}, {"option": "String", "correct": true}, {"option": "Writer", "correct": false}, {"option": "File", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is not a member of the <strong>java.io</strong> package?</p>", "options": [{"option": "DataInput", "correct": false}, {"option": "ObjectFilter", "correct": true}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is not related to an input and output stream in terms of functionality?</p>", "options": [{"option": "Writer", "correct": false}, {"option": "File", "correct": true}, {"option": "InputStream", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following entities is specified by a <strong>File</strong> object?</p>", "options": [{"option": "A file in a disk", "correct": false}, {"option": "A directory path", "correct": false}, {"option": "A directory in a disk", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods to test whether the specified element is a file or a directory?</p>", "options": [{"option": "IsFile()", "correct": false}, {"option": "Isfile()", "correct": false}, {"option": "isfile()", "correct": false}, {"option": "isFile()", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getName());\n        }\n    }\n</code></pre>", "options": [{"option": " java", "correct": false}, {"option": "java/system", "correct": false}, {"option": "system", "correct": true}, {"option": "/java/system", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getAbsolutePath());\n        }\n    }\n</code></pre>", "options": [{"option": "java", "correct": false}, {"option": "system", "correct": false}, {"option": "java/system", "correct": false}, {"option": "/java/system\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.canWrite());\n            System.out.print(\" \" + obj.canRead());\n        }\n    }\n</code></pre>", "options": [{"option": "true false", "correct": false}, {"option": "false true", "correct": false}, {"option": "false false", "correct": true}, {"option": "true true", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getParent());\n            System.out.print(\" \" + obj.isFile());\n        }\n    }\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "\\java true", "correct": false}, {"option": "false false", "correct": false}, {"option": "\\java false", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following Java streams contain the classes to operate on <strong>character</strong> stream?</p>", "options": [{"option": "InputStream", "correct": false}, {"option": "OutputStream", "correct": false}, {"option": "Character Stream", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is used to read characters in a file?</p>", "options": [{"option": "FileReader", "correct": true}, {"option": "FileWriter", "correct": false}, {"option": "FileInputStream", "correct": false}, {"option": "InputStreamReader", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of the <strong>FileReader</strong> class is used to read characters from a file?</p>", "options": [{"option": "scanf()", "correct": false}, {"option": "read()", "correct": true}, {"option": "get()", "correct": false}, {"option": "getInteger()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to implement the <strong>input</strong> stream that uses a <strong>character</strong> array as the source?</p>", "options": [{"option": "BufferedReader", "correct": false}, {"option": "FileReader", "correct": false}, {"option": "CharArrayReader", "correct": true}, {"option": "FileArrayReader", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to clear all the data present in the <strong>output</strong> buffers?</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": false}, {"option": "close()", "correct": false}, {"option": "fflush()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following processes is used to write the state of an object to a <strong>byte</strong> stream?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Externalization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following processes occur automatically by the Java runtime system?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Garbage collection", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is used to control the <strong>serialization</strong> and <strong>de-serialization</strong> processes?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Externalization", "correct": true}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is used to extend the <strong>DataOutput</strong> interface?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Externalization", "correct": false}, {"option": "ObjectOutput", "correct": true}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectOutput</strong> interface is used to finalize the output state to clear the buffers?</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": true}, {"option": "fflush()", "correct": false}, {"option": "close()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectOutput</strong> interface is used to write the object to the <strong>input</strong> or the <strong>output</strong> stream?</p>", "options": [{"option": "write()", "correct": false}, {"option": "Write()", "correct": false}, {"option": "writeObject()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following processes is used to extract the state of an object from a stream?</p>", "options": [{"option": "Serialization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "Deserialization", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectInput</strong> interface is used to deserialize an object from a stream?</p>", "options": [{"option": "int read()", "correct": false}, {"option": "void close()", "correct": false}, {"option": "Object readObject()", "correct": true}, {"option": "Object WriteObject()", "correct": false}], "level": "Hard"}, {"question": "<p>in Java, which of the following classes is used to extend the <strong>InputStream</strong> class?</p>", "options": [{"option": "ObjectStream", "correct": false}, {"option": "ObjectOutput", "correct": false}, {"option": "ObjectInputStream", "correct": true}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following packages contain classes and interfaces for networking?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.network", "correct": false}, {"option": "java.util", "correct": false}, {"option": "java.net", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following protocols is used to break and send the packets to an address across a network?</p>", "options": [{"option": "DNS", "correct": false}, {"option": "TCIP/IP", "correct": true}, {"option": "Socket", "correct": false}, {"option": "Proxy Server", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how many ports of <strong>TCP/IP</strong> is reserved for specific protocols?</p>", "options": [{"option": "104", "correct": false}, {"option": "1024", "correct": true}, {"option": "512", "correct": false}, {"option": "2048", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the size of the single <strong>IP</strong> address?</p>", "options": [{"option": "8 bits", "correct": false}, {"option": "16 bits", "correct": false}, {"option": "32 bits", "correct": true}, {"option": "64 bits", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a full form of <strong>DNS</strong>?</p>", "options": [{"option": "Data Network Service", "correct": false}, {"option": "Domain Name Service", "correct": true}, {"option": "Data Name Service", "correct": false}, {"option": "Domain Network Service", "correct": false}], "level": "Easy"}, {"question": "<p>In java, which of the following classes is used to encapsulate an <strong>IP address</strong> and a <strong>DNS</strong>?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following clauses is executed even if no exceptions are found?</p>", "options": [{"option": "throws", "correct": false}, {"option": "finally", "correct": true}, {"option": "throw", "correct": false}, {"option": "catch", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following clauses is used with a single <strong>try</strong> block?</p>", "options": [{"option": "finally", "correct": false}, {"option": "catch ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following packages contain all the Java\u2019s built-in exceptions?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.util", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.net", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following exceptions handle the <strong>divide by zero</strong> error?</p>", "options": [{"option": "MathException", "correct": true}, {"option": "ArithmeticException", "correct": false}, {"option": "IllegalAccessException", "correct": false}, {"option": "IllegalException", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following exceptions occur if the index of an array larger than its size is accessed?</p>", "options": [{"option": "ArithmeticException", "correct": false}, {"option": "ArrayIndexOutOfBoundsException", "correct": true}, {"option": "ArrayException", "correct": false}, {"option": "ArrayIndexException", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class exception{\n            public static void main(String args[])\n                {\n                try {\n                    int a = args.length;\n                    int b = 10 / a;\n                    System.out.print(a);\n                }\n                catch (ArithmeticException e) {\n                    System.out.println(\"1\");\n                }\n            }\n        }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime errror", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what does <strong>URL</strong> stands for?</p>", "options": [{"option": "Uniform Resource Latch", "correct": false}, {"option": "Uniform Resource Locator", "correct": true}, {"option": "Universal Resource Locator", "correct": false}, {"option": "Universal Resource Latch", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these exception is thrown by URL class\u2019s constructors?</p>", "options": [{"option": "URLNotFound", "correct": false}, {"option": "URLSourceNotFound", "correct": false}, {"option": "MalformedURLException", "correct": true}, {"option": "URLNotFoundException", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to return the host name of an URL?</p>", "options": [{"option": "host()", "correct": false}, {"option": "getHost()", "correct": true}, {"option": "GetHost()", "correct": false}, {"option": "gethost()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following standard collection classes implements a <strong>dynamic</strong> array?</p>", "options": [{"option": "AbstractList", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "ArrayList", "correct": true}, {"option": "AbstractSet", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is used to generate an array which increases and decreases the size automatically?</p>", "options": [{"option": "ArrayList()", "correct": true}, {"option": "DynamicList()", "correct": false}, {"option": "LinkedList()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to increase the capacity of <strong>ArrayList</strong> object manually?</p>", "options": [{"option": "Capacity()", "correct": false}, {"option": "increaseCapacity()", "correct": false}, {"option": "increasecapacity()", "correct": false}, {"option": "ensureCapacity()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ArrayList</strong> class is used to return the present size of an object?</p>", "options": [{"option": "size()", "correct": true}, {"option": "length()", "correct": false}, {"option": "index()", "correct": false}, {"option": "capacity()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to obtain a static array from an <strong>ArrayList</strong> object?</p>", "options": [{"option": "Array()", "correct": true}, {"option": "coverArray()", "correct": false}, {"option": "toArray()", "correct": false}, {"option": "covertoArray()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n    class Arraylist {\n        public static void main(String args[]) {\n            ArrayList obj = new ArrayList();\n            obj.add(\"Hacker\");\n            obj.add(1, \"D\");\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "[Hacker] ", "correct": false}, {"option": "[Hacker, D] ", "correct": true}, {"option": "[HDcker] ", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        class Arraylist {\n            public static void main(String args[]) {\n                ArrayList obj = new ArrayList();\n                obj.add(\"A\");\n                obj.add(0,\"B\");\n                System.out.println(obj.size());\n            }\n        }\n</code></pre>", "options": [{"option": "1 ", "correct": false}, {"option": "0 ", "correct": false}, {"option": "2 ", "correct": true}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            ArrayList obj = new ArrayList();\n            obj.add(\"A\");\n            obj.add(\"D\");\n            obj.ensureCapacity(3);\n            obj.trimToSize();\n            System.out.println(obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following standard collection classes implements a linked list data structure?</p>", "options": [{"option": "AbstractList", "correct": false}, {"option": "LinkedList", "correct": true}, {"option": "HashSet", "correct": false}, {"option": "AbstractSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes implements the <strong>Set</strong> interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashSet", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "DynamicList", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following methods is used to add an element to the start of a <strong>LinkedList</strong> object?</p>", "options": [{"option": "add()", "correct": false}, {"option": "first()", "correct": false}, {"option": "AddFirst()", "correct": false}, {"option": "addFirst()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of <strong>HashSet</strong> class is used to add elements to its object?</p>", "options": [{"option": "add()", "correct": true}, {"option": "Add()", "correct": false}, {"option": "addFirst()", "correct": false}, {"option": "insert()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to delete the last element in a <strong>LinkedList</strong> object?</p>", "options": [{"option": "remove()", "correct": false}, {"option": "delete()", "correct": false}, {"option": "removeLast()", "correct": true}, {"option": "deleteLast()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to change an element in a <strong>LinkedList</strong> object?</p>", "options": [{"option": "change()", "correct": false}, {"option": "set()", "correct": false}, {"option": "redo()", "correct": true}, {"option": "add()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Linkedlist {\n        public static void main(String args[]) {\n            LinkedList obj = new LinkedList();\n            obj.add(\"A\");\n            obj.add(\"B\");\n            obj.add(\"C\");\n            obj.addFirst(\"D\");\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "[A, B, C]", "correct": false}, {"option": "[D, A, B, C]", "correct": true}, {"option": "[A, B, C,D]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Linkedlist {\n        public static void main(String args[]) {\n            LinkedList obj = new LinkedList();\n            obj.add(\"A\");\n            obj.add(\"B\");\n            obj.add(\"C\");\n            obj.removeFirst();\n            obj.removeLast();\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "B", "correct": false}, {"option": "[B]", "correct": true}, {"option": "[A,B]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Output {\n        public static void main(String args[]) {\n            HashSet obj = new HashSet();\n            obj.add(\"A\");\n            obj.add(\"B\");\n            System.out.println(obj + \" \" + obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "AB  2", "correct": false}, {"option": "[A, B] 2", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following objects is used to store the association between keys and values?</p>", "options": [{"option": "Hash table", "correct": false}, {"option": "Array", "correct": false}, {"option": "Map", "correct": true}, {"option": "String", "correct": false}], "level": "Medium"}, {"question": "<p>in Java, which of the following classes provide an implementation of the map interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashMap", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to remove all keys and values pair from the invoking map?</p>", "options": [{"option": "delete()", "correct": false}, {"option": "remove()", "correct": true}, {"option": "clear()", "correct": false}, {"option": "removeAll()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of <strong>Map</strong> class is used to obtain an element in the map having specified key?</p>", "options": [{"option": "search()", "correct": true}, {"option": "get()", "correct": false}, {"option": "set()", "correct": false}, {"option": "get () and set()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to return the set of all keys in a map?</p>", "options": [{"option": "getAll()", "correct": false}, {"option": "getKeys()", "correct": false}, {"option": "keyall()", "correct": false}, {"option": "keySet()", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Maps {\n        public static void main(String args[]) {\n            HashMap obj = new HashMap();\n            obj.put(\"A\", new Integer(1));\n            obj.put(\"B\", new Integer(2));\n            obj.put(\"C\", new Integer(3));\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "{A-1, B-1, C-1}", "correct": false}, {"option": "{A, B, C}", "correct": false}, {"option": "{A=1, B=2, C=3}", "correct": true}, {"option": "{A 1, B 1, C 1}", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Maps {\n        public static void main(String args[]) {\n            HashMap obj = new HashMap();\n            obj.put(\"A\", new Integer(1));\n            obj.put(\"B\", new Integer(2));\n            obj.put(\"C\", new Integer(3));\n            System.out.println(obj.keySet());\n        }\n    }\n</code></pre>", "options": [{"option": "{1, 2, 3}", "correct": false}, {"option": "{A, B, C}", "correct": false}, {"option": "[A, B, C]", "correct": true}, {"option": "[1, 2, 3]", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Maps {\n        public static void main(String args[]) {\n            HashMap obj = new HashMap();\n            obj.put(\"A\", new Integer(1));\n            obj.put(\"B\", new Integer(2));\n            obj.put(\"C\", new Integer(3));\n            System.out.println(obj.get(\"B\"));\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Maps {\n        public static void main(String args[]) {\n            TreeMap obj = new TreeMap();\n            obj.put(\"A\", new Integer(1));\n            obj.put(\"B\", new Integer(2));\n            obj.put(\"C\", new Integer(3));\n            System.out.println(obj.entrySet());\n        }\n    }\n</code></pre>", "options": [{"option": "[A, B, C]", "correct": false}, {"option": "[1, 2, 3]", "correct": false}, {"option": "{A=1, B=2, C=3}", "correct": false}, {"option": "[A=1, B=2, C=3]", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following is not a return type?</p>", "options": [{"option": "Boolean", "correct": false}, {"option": "Void", "correct": false}, {"option": "Button", "correct": false}, {"option": "Public", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    String str = new String(\u201cJava\u201d);\n    char fourthChar = str.charAt(4);\n</code></pre>", "options": [{"option": "\u2018a\u2019", "correct": false}, {"option": "\u2018v\u2019", "correct": false}, {"option": "throws StringIndexOutofBoundsException", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, if <strong><code>result = 2 + 3 * 5</code></strong>, what is the value and type of the <strong>\u2018result\u2019</strong> variable respectively?</p>", "options": [{"option": "17 and byte", "correct": false}, {"option": "25 and byte", "correct": false}, {"option": "17 and int", "correct": true}, {"option": "25 and int", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the two parts of a value of type <strong>double</strong>?</p>", "options": [{"option": "Significant Digits and Exponent", "correct": true}, {"option": "Length and Denominator", "correct": false}, {"option": "Mode and Numerator", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following features is specified by the <strong>wrapper</strong> classes ?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Immutable", "correct": false}, {"option": "Final", "correct": false}, {"option": "Immutable and Final", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the data type for the number <strong>9.6352</strong>?</p>", "options": [{"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "long", "correct": false}, {"option": "int", "correct": false}], "level": "Easy"}, {"question": "<p>What is the value of the <strong>\u2018number\u2019</strong> when the following Java code is executed:</p>\n<pre class=\"prettyprint\"><code>    int number = 0;\n    int number2 = 12;\n    while (number &lt; number2)\n    {\n    number = number + 1;\n    }\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "12", "correct": true}, {"option": "13", "correct": false}, {"option": "21", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, the <strong>DataInputStream</strong> class is an example of the ___________________.</p>", "options": [{"option": "Output stream", "correct": false}, {"option": "I/O stream", "correct": false}, {"option": "Filtered stream", "correct": true}, {"option": "File stream", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the return data type <strong>void</strong> is correct?</p>", "options": [{"option": "The void returns no data type.", "correct": true}, {"option": "The void is not supported in Java.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>If <strong>3929.92</strong> is declared as of type <strong>float</strong>, which of the following Java statements is used to assign this value after declaring the variable <strong>\u2018interest\u2019</strong> of type float?</p>", "options": [{"option": "interest = 3929.92", "correct": false}, {"option": "interest = (Float)3929.92", "correct": false}, {"option": "interest = 3929.92 (float)", "correct": false}, {"option": "interest = 3929.92f", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "HashTable is a sub class of Dictionary", "correct": true}, {"option": "ArrayList is a sub class of Vector", "correct": false}, {"option": "LinkedList is a subclass of ArrayList", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is synchronized?</p>", "options": [{"option": "Set", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "Vector", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the public abstract classes is correct?</p>", "options": [{"option": "AbstractSet extends AbstractCollection", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": false}, {"option": "HashSet extends AbstractSet", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, if any class implements the <strong>Runnable</strong> interface, which of the following methods is implemented?</p>", "options": [{"option": "start()", "correct": false}, {"option": "run()", "correct": true}, {"option": "wait()", "correct": false}, {"option": "notify() and notifyAll()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is not a method of the <strong>Thread</strong> class?</p>", "options": [{"option": "public void run()", "correct": false}, {"option": "public void start()", "correct": false}, {"option": "public void exit()", "correct": true}, {"option": "public final int getPriority()", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is used to execute the threads consecutively?</p>", "options": [{"option": "The keyword synchronize", "correct": false}, {"option": "The keyword synchronizable", "correct": false}, {"option": "The keyword synchronized", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the object of the <strong>DataInputStream</strong> class is used to ___________________.</p>", "options": [{"option": "Convert the binary stream into the character stream", "correct": true}, {"option": "Convert the character stream into the binary stream", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following companies developed the Java?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Oracle", "correct": false}, {"option": "Sun", "correct": true}, {"option": "Google", "correct": false}], "level": "Easy"}, {"question": "<p>What is the extension of a Java program?</p>", "options": [{"option": ".doc", "correct": false}, {"option": ".java", "correct": true}, {"option": ".class", "correct": false}, {"option": ".txt", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JRE</strong>?</p>", "options": [{"option": "Java Runtime Environment", "correct": true}, {"option": "Java Runtime Exception", "correct": false}, {"option": "Java Runtime Execution", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JDK</strong>?</p>", "options": [{"option": "Java Deployment Kit", "correct": false}, {"option": "Java Demo Kit", "correct": false}, {"option": "Java Development Kit", "correct": true}, {"option": "Java Distributed Kit", "correct": false}], "level": "Easy"}, {"question": "<p>A Java program is firstly ___________ and then it is ___________.</p>\n<p>1.Compiled</p>\n<p>2.Interpreted</p>\n<p>3.Assembled</p>\n<p>4.Debuged</p>", "options": [{"option": "2 and 1", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following <strong>application</strong> programs is mandatory to run a Java program?</p>", "options": [{"option": "sdk", "correct": false}, {"option": "dbk", "correct": false}, {"option": "jdk", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following operations is required to convert the Java source code into the executable form?</p>", "options": [{"option": "Compilation", "correct": false}, {"option": "Interpretation", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Previously Java was known as the ________.</p>", "options": [{"option": "Java", "correct": false}, {"option": "Apple", "correct": false}, {"option": "Oak", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is primitive data types?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Byte", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the result of the <strong><code>111 % 13</code></strong>?</p>", "options": [{"option": "2", "correct": false}, {"option": "4", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the return type of a <strong>main( )</strong> method is a ______________.</p>", "options": [{"option": "string", "correct": false}, {"option": "integer", "correct": false}, {"option": "byte", "correct": false}, {"option": "void", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the argument type of a <strong>main( )</strong> method in a program is _________________.</p>", "options": [{"option": "Byte array", "correct": false}, {"option": "Integer array", "correct": false}, {"option": "Float array", "correct": false}, {"option": "String array", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>dot</strong> operator is correct?</p>", "options": [{"option": "It is used to call the object methods.", "correct": false}, {"option": "It is used to store values in the instance variables of an object.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the <strong>keywords</strong> in Java?</p>", "options": [{"option": "extends", "correct": false}, {"option": "synchronized", "correct": false}, {"option": "friend", "correct": false}, {"option": "extends and synchronized", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, an interface contains a ______________ methods.</p>", "options": [{"option": "Non-abstract", "correct": false}, {"option": "Implemented", "correct": false}, {"option": "Unimplemented", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces is defined by the <strong><code>java.lang</code></strong> package?</p>", "options": [{"option": "Cloneable", "correct": false}, {"option": "Comparable", "correct": false}, {"option": "Runnable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following is the highest class in the <strong>event-delegation</strong> model?</p>", "options": [{"option": "java.awt.AWTEvent", "correct": false}, {"option": "java.util.EventListener", "correct": false}, {"option": "java.awt.event.AWTEvent", "correct": false}, {"option": "java.util.EventObject", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following objects is passed as an argument to the paint( ) method?</p>", "options": [{"option": "A Graphics object", "correct": true}, {"option": "A Canvas object", "correct": false}, {"option": "A paint object", "correct": false}, {"option": "An Image object", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following statements is correct?</p>", "options": [{"option": "The Void class extends the Class class.", "correct": false}, {"option": "The Float class extends the Double class.", "correct": false}, {"option": "The System class extends the Runtime class.", "correct": false}, {"option": "The Integer class extends the Number class.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following tags is mandatory to create an HTML program to display an applet?</p>", "options": [{"option": "code and name", "correct": false}, {"option": "name, height, and width", "correct": false}, {"option": "code, height, and width", "correct": true}, {"option": "height, width, and codebase", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, the ________ method is used to clear the buffer.</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": true}, {"option": "clean()", "correct": false}, {"option": "gc()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages contain the <strong>thread</strong> class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.awt", "correct": false}, {"option": "java.util", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following activates the default thread available in a program?</p>", "options": [{"option": "System class", "correct": false}, {"option": "Main method", "correct": true}, {"option": "Static keyword", "correct": false}, {"option": "All of the", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to revive the <strong>suspend</strong> method?</p>", "options": [{"option": "start()", "correct": false}, {"option": "suspend()", "correct": false}, {"option": "resume", "correct": true}, {"option": "yield()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the <strong>Runnable</strong> is a __________.</p>", "options": [{"option": "Class", "correct": false}, {"option": "Method", "correct": false}, {"option": "Variable", "correct": false}, {"option": "Interface", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following condition causes the <strong>runtime</strong> error?</p>", "options": [{"option": "Error", "correct": false}, {"option": "Exception", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages contains the <strong>Exception</strong> class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.awt", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.util", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following packages contains the <strong>Applet</strong> class?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.applet", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "java.awt", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>Applet</strong> class displays the result of an applet code on the screen?</p>", "options": [{"option": "run()", "correct": false}, {"option": "paint()", "correct": true}, {"option": "drawString()", "correct": false}, {"option": "main()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following packages contains the <strong>drawString()</strong> method?</p>", "options": [{"option": "java.applet", "correct": false}, {"option": "java.io", "correct": false}, {"option": "javax.swing", "correct": false}, {"option": "java.awt", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, if an applet is dead it automatically invokes the ___________ method when the browser is closed.</p>", "options": [{"option": "paint()", "correct": false}, {"option": "stop()", "correct": false}, {"option": "destroy()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, an executable applet is the _________ file of the applet.</p>", "options": [{"option": ".java", "correct": false}, {"option": ".class", "correct": true}, {"option": ".html", "correct": false}, {"option": ".applet", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following applet tags is used to accept the user defined parameter?</p>", "options": [{"option": "center", "correct": false}, {"option": "applet", "correct": false}, {"option": "param", "correct": true}, {"option": "body", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is firstly called by the browser in an applet?</p>", "options": [{"option": "start()", "correct": false}, {"option": "init()", "correct": true}, {"option": "stop()", "correct": false}, {"option": "destroy()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is an open source <strong>SOAP</strong> client and server?</p>", "options": [{"option": "Apache ANT", "correct": false}, {"option": "Apache Tomcat", "correct": false}, {"option": "Jakarta Struts", "correct": false}, {"option": "Apache Axis", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is the possible pivot-handlers in the Java web service?</p>", "options": [{"option": "java:WSDL, java:UDDI", "correct": false}, {"option": "java:eb-xml, java:SOAP", "correct": false}, {"option": "java:RPC, java:EJB", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following standard collection classes implements all the standard functions of a list data structure?</p>", "options": [{"option": "Array", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "HashSet", "correct": false}, {"option": "AbstractSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of an <strong>Array</strong> class is used to sort an array?</p>", "options": [{"option": "binarysort()", "correct": false}, {"option": "sort()", "correct": true}, {"option": "insert()", "correct": false}, {"option": "bubblesort()", "correct": false}], "level": "Easy"}, {"question": "<p>In java, which of the following methods is used to search an element in a list?</p>", "options": [{"option": "find()", "correct": false}, {"option": "sort()", "correct": false}, {"option": "binarysearch()", "correct": true}, {"option": "get()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Arraylist {\n        public static void main(String args[]) {\n            ArrayList obj1 = new ArrayList();\n            ArrayList obj2 = new ArrayList();\n            obj1.add(\"A\");\n            obj1.add(\"B\");\n            obj2.add(\"A\");\n            obj2.add(1, \"B\");\n            System.out.println(obj1.equals(obj2));\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "true", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n        class Arraylist {\n            public static void main(String args[]) {\n                ArrayList obj1 = new ArrayList();\n                ArrayList obj2 = new ArrayList();\n                obj1.add(\"A\");\n                obj2.add(0,\"A\");\n                System.out.println(obj1.equals(obj2));\n            }\n        }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Output \n{\n        public static void main(String args[])\n        {\n            Integer i=0;\n            Integer j=0;\n            for(Short z=0;z&lt;5;z++)\n            if((++i&gt;3)|| (++j&gt;3))\n            i++;\n            System.out.println(i);\n        }\n}\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Array {\n        public static void main(String args[]) {\n            int array[] = new int [5];\n            for (int i = 5; i &gt; 0; i--)\n                array[5 - i] = i;\n            Arrays.sort(array);\n            for (int i = 0; i &lt; 5; ++i)\n                System.out.print(array[i]);;\n        }\n    }\n</code></pre>", "options": [{"option": "54321", "correct": false}, {"option": "12345", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Array {\n        public static void main(String args[]) {\n            int array[] = new int [6];\n            for (int i = 6; i &gt; 0; i--)\n                array[6-i] = i;\n            Arrays.fill(array, 1, 4, 5);\n            for (int i = 0; i &lt; 6 ; i++)\n                System.out.print(array[i]);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655521", "correct": true}, {"option": "555521", "correct": false}, {"option": "655551", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n            class Array {\n                public static void main(String args[]) {\n                    int array[] = new int [5];\n                    for (int i = 6; i &gt; 0; i--)\n                        array[6-i] = i;\n                    Arrays.fill(array, 1, 4, 5);\n                    for (int i = 0; i &lt; 6 ; i++)\n                        System.out.print(array[i]);\n                }\n            }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655551", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "655521", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following class objects is used to form a <strong>dynamic</strong> array?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "Map", "correct": false}, {"option": "Vector", "correct": false}, {"option": "ArrayList and Map", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following is <strong>legacy</strong> classes?</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Vector", "correct": false}, {"option": "Hashtable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following data members of <strong>Vector</strong> class is used to store the number of elements in a vector?</p>", "options": [{"option": "length", "correct": false}, {"option": "elements", "correct": false}, {"option": "elementCount", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Array {\n    public static void main(String args[]) {\n        Vector obj = new Vector(4,2);\n        obj.addElement(new Integer(3));\n        obj.addElement(new Integer(2));\n        obj.addElement(new Integer(5));\n        System.out.println(obj.elementAt(3));\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "2", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Array {\n        public static void main(String args[]) {\n            Vector obj = new Vector(4,2);\n            obj.addElement(new Integer(3));\n            obj.addElement(new Integer(2));\n            obj.addElement(new Integer(5));\n            System.out.println(obj.elementAt(0));\n        }\n    }\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is used to allocate memory to an object?</p>", "options": [{"option": "new", "correct": false}, {"option": "new()", "correct": true}, {"option": "allocate()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        void show()\n        {\n            System.out.println(\"Done\");\n        }\n    }\n    public class Main {\n        public static void main(String[] args) {\n            A t=new A();\n            t.show();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done ", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        void show()\n        {\n            System.out.println(\"Done\");\n        }\n    }\n    public class Main {\n        public static void main(String[] args) {\n            A t \n            t.show();\n        }\n    }\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n\n            final int x=100;\n            int x=30;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "30", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test1 {\n        int i = 20;\n    }\n    public class Test2 {\n        public static void main(String args[]) {\n            final Test1 t1 = new Test1();\n            t1.i = 30;\n            System.out.println(t1.i);\n        }\n    }\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "30", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            int x =-4;\n            System.out.println(x&gt;&gt;2);\n            int y =4;\n            System.out.println(y&gt;&gt;1);\n        }Predict  the output of below Java code:\n\n    }\n</code></pre>", "options": [{"option": "-1  1", "correct": false}, {"option": "-1   2", "correct": true}, {"option": "-2   2", "correct": false}, {"option": "1   1 ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            int x = -1;\n            System.out.println(x&gt;&gt;&gt;29);\n\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}, {"option": "16", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            int x = -1;\n            System.out.println(x&gt;&gt;&gt;30);\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "7", "correct": false}, {"option": "3", "correct": true}, {"option": "5", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            int x = -1;\n            System.out.println(x&gt;&gt;&gt;31);\n        }\n    }\n</code></pre>", "options": [{"option": "7", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            Integer x = 1000, y = 1000;\n            if (x == y)\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not Same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same ", "correct": false}, {"option": "Not Same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            Integer x = 100, y = 100;\n            if (x == y)\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not Same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same", "correct": true}, {"option": "Not Same", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main (String[] args)\n        {\n            int arr1[] = {10, 20, 30};\n            int arr2[] = {10, 20, 30};\n            if (arr1.equals(arr2))\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same ", "correct": false}, {"option": "Not Same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.Arrays;\n    class Test\n    {\n        public static void main (String[] args)\n        {\n            int arr1[] = {1, 2, 3};\n            int arr2[] = {1, 2, 3};\n            if (Arrays.equals(arr1, arr2))\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same", "correct": true}, {"option": "Not Same", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.Arrays;\n    class Test\n    {\n        public static void main (String[] args)\n        {\n            int inarr1[] = {10,20,3};\n            int inarr2[] = {10,20,3};\n            Object[] arr1 = {inarr1};\n            Object[] arr2 = {inarr2};\n            if (Arrays.equals(arr1, arr2))\n                System.out.println(\"Same\");\n            else\n                System.out.println(\"Not same\");\n        }\n    }\n</code></pre>", "options": [{"option": "Same", "correct": false}, {"option": "Not Same", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            final int arr1[] = {1, 2, 3, 4, 5};\n            int arr2[] = {10, 20, 30, 40, 50};\n            arr2 = arr1;\n            for (int i = 0; i &lt; arr2.length; i++)\n                System.out.println(arr2[i]);\n        }\n    }\n</code></pre>", "options": [{"option": "10, 20, 30, 40, 50", "correct": false}, {"option": "1, 2 ,3 , 4 ,5", "correct": true}, {"option": "10, 1, 20 ,2 ,30 ,3", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        static int count = 0;\n\n        Test() {\n            count++;\n        }\n        public static void main(String arr[]) {\n            Test t1 = new Test();\n            Test t2 = new Test();\n            Test t3 = new Test();\n            System.out.println(\"Total \" + count + \" objects created\");\n        }\n    }\n</code></pre>", "options": [{"option": "Total 1 objects created", "correct": false}, {"option": "Total 2 objects created", "correct": false}, {"option": " Total 3 objects created", "correct": true}, {"option": "Total 0 objects created", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        int fun() {\n            return 20;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "20", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun() {\n            return 20;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "20", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base\n    {\n        static int x =10;\n    }\n    class Derived extends Base\n    {\n        public static void fun()\n        {\n            System.out.println(super.x);\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun()  {\n            int x= 10;\n            return x--;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "10", "correct": true}, {"option": "9", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {Predict  the output of below Java code:\n\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun()  {\n            static int x= 10;\n            return x--;\n        }\n    }\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "10", "correct": false}, {"option": "9", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        static int i;\n        int j;\n        static {\n            i = 20;\n        }\n    }\n    class Main {\n        public static void main(String args[]) {\n            System.out.println(Test.i);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "20", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>   class Test {\n        static {\n            int i = 10;\n            System.out.println(\"Hi\");\n        }\n        Test(){\n            System.out.println(\"Hello\");\n        }}\n        class Main {\n            public static void main(String args[]) {\n                Test t1 = new Test();\n            }\n        }\n</code></pre>", "options": [{"option": "Hi ,Hello", "correct": true}, {"option": "Hi  ", "correct": false}, {"option": " Hello", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test {\n        public static void foo() {\n            System.out.println(\"Call A \");\n        }\n        public static void foo(int a) {\n            System.out.println(\"Call B\");\n        }\n        public static void main(String args[])\n        {\n            Test.foo();\n        }\n    }\n</code></pre>", "options": [{"option": "Call A ", "correct": true}, {"option": "Call A   Call B", "correct": false}, {"option": "Call B", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test {\n        public static void foo() {\n            System.out.println(\"Call A \");\n        }\n        public static void foo(int a) {\n            System.out.println(\"Call B\");\n        }\n        public static void main(String args[])\n        {\n            Test.foo();\n            Test.foo(1);\n        }\n    }\n</code></pre>", "options": [{"option": "Call A  ", "correct": false}, {"option": "Call B", "correct": false}, {"option": "Call A ,Call B", "correct": true}, {"option": "Call B, Call A", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    final class Base { }\n    class Derived extends Base {\n        System.out.println(\"C\");\n    }\n    public class Main {\n        public static void main(String args[]) {\n            Base b=new Base();\n\n        }\n    }\n</code></pre>", "options": [{"option": "C", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "A final variable can only be assigned once.", "correct": false}, {"option": " A final class cannot be extended (inherited).", "correct": false}, {"option": "A final method cannot be overridden by a subclasses.", "correct": false}, {"option": "All of these\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        private static int x;\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun() {\n            return ++x;\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun() {\n            static int x= 0;\n            return ++x;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "1", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        static int fun() {\n            return 30;\n        }\n    }\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "30", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            System.out.println(fun());\n        }\n        int fun() {\n            return 20;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "20", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String[] args) {\n            for(int i = 0; true; i++) {\n                System.out.println(\"Hackerearth\");\n                break;\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hackerearth", "correct": true}, {"option": "Garbage value ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A{\n        public static void main(String[] args) {\n            for(int i = 0; 1; i++) {\n                System.out.println(\"Hack\");\n                break;\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Hack", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public int x, y;\n    }\n    class Main {\n        public static void main(String args[]) {\n            Test t = new Test();\n            System.out.println(t.x + \" \" + t.y);\n        }\n    }\n</code></pre>", "options": [{"option": "Garbage values", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "0   0", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public int x, y;\n    }\n    class Main {\n        public static void main(String args[]) {\n            Test t = new Test();\n            System.out.println(t.x + \" \" + t.y);\n        }\n    }\n</code></pre>", "options": [{"option": "Garbage values", "correct": false}, {"option": "0   0", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        int x  = 10;\n        public static void main(String[] args) {\n            Test t = new Test();\n            System.out.println(t.x);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "10", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        int y = 0;\n        int x  = y+2;\n        public static void main(String[] args) {\n            Test t= new Test();\n            System.out.println(\"x = \" + t.x + \", y = \" + t.y);\n        }\n    }\n</code></pre>", "options": [{"option": "x = 0, y = 0", "correct": false}, {"option": "x = 2, y = 0", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test\n    {\n        int x =2;\n        Test(int i) { x = i; }\n        public static void main(String[] args) {\n            Test t = new Test(3);\n            System.out.println(\"x = \" + t.x);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test1 {\n        Test1(int x) {\n            System.out.println(x);\n        }\n    }\n    class Test2 {\n        Test1 t1 = new Test1(1);\n        Test2(int i) { t1 = new Test1(i); }\n        public static void main(String[] args) {\n            Test2 t2 = new Test2(-3);\n        }\n    }\n</code></pre>", "options": [{"option": "1   ", "correct": false}, {"option": "-3", "correct": false}, {"option": "1   -3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    void foo() {}}\n    class Derived extends Base {\n        void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    protected void foo() {}}\n    class Derived extends Base {\n        void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    void foo() {}}\n    class Derived extends Base {\n        public void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        protected void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done ", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            int x;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            System.out.println(10  +  20 + \"H\");\n        }\n    }\n</code></pre>", "options": [{"option": "1020H", "correct": false}, {"option": "30 H", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            System.out.println(\"H\"+10 +20);\n        }\n    }\n</code></pre>", "options": [{"option": "H30", "correct": false}, {"option": "H1020", "correct": true}, {"option": "H10", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public static void main(String args[])  {\n            System.out.println(\"H\"+10*20);\n        }\n    }\n</code></pre>", "options": [{"option": "H10", "correct": false}, {"option": "H200", "correct": true}, {"option": "H20", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of below Java code:</p>\n<pre class=\"prettyprint\"><code>class Test {\n    public static void main(String args[])  {\n        System.out.println(10*20+\"H\");\n    }\n}\n</code></pre>", "options": [{"option": "1020H", "correct": false}, {"option": "20H", "correct": false}, {"option": "200H", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not an <strong>operator</strong>?</p>", "options": [{"option": "instanceof", "correct": false}, {"option": "new", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class B{}\n    class D extends B{\n        public static void main(String args[]){\n            B a = new D();\n            System.out.println(a instanceof D);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, a value of type <strong>double</strong> consists of ____.</p>\n<pre class=\"prettyprint\"><code> 1. significant digits\n 2. length \n 3. exponent\n</code></pre>", "options": [{"option": "1  and  2", "correct": false}, {"option": "2   and 3", "correct": false}, {"option": "1  and 3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        public static void main(String args[]){\n            String s;\n            int a;\n            s = \"Foolish boy.\";\n            a = s.indexOf(\"fool\");\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "-1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        public static void main(String args[]){\n            String s;\n            int a;\n            s = \"Foolish boy.\";\n            a = s.indexOf(\"Fool\");\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": true}, {"option": "-1", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is an <strong>infinite</strong> loop?</p>", "options": [{"option": "A loop that will never function ", "correct": false}, {"option": "A loop that functions for a fixed period of time", "correct": false}, {"option": "A loop that runs forever ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>String s = \"hacker\";\nint i = s.length();\nSystem.out.println(i);\n\n</code></pre>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "7", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A\n    {\n        public static void main(String args[]){\n            int k =-1;\n            int n =0;\n            while (k &lt; n)\n            {\n                k = k + 1;\n            }\n            System.out.println(k);\n        }\n    }\n</code></pre>", "options": [{"option": "-1", "correct": false}, {"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is <strong>arr</strong> in the following Java code: </p>\n<pre class=\"prettyprint\"><code>    double arr[];\n</code></pre>", "options": [{"option": "arr is a variable that refers to a real number. ", "correct": false}, {"option": "arr is a variable that refers to two numbers. ", "correct": false}, {"option": "It is not a legal statement in Java.", "correct": false}, {"option": "arr is a variable that refers to an array. ", "correct": true}], "level": "Easy"}, {"question": "<p>What is the data type of <strong>h</strong> for the following Java code:</p>\n<pre class=\"prettyprint\"><code>h.setDouble(8.0*32.2+1.0);\n</code></pre>", "options": [{"option": "TextField ", "correct": false}, {"option": "DoubleField ", "correct": true}, {"option": "Intfield", "correct": false}, {"option": "double", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following data types is used to store <strong>3.141519</strong>?</p>", "options": [{"option": "int", "correct": false}, {"option": "double", "correct": true}, {"option": "real ", "correct": false}, {"option": "String", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, a function is ____.</p>", "options": [{"option": "Used to store values", "correct": false}, {"option": "An entity that receives the inputs and outputs ", "correct": true}, {"option": "A sequence of characters enclosed within quotes ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, byte, short, int and long are ____ data types.</p>", "options": [{"option": "Signed", "correct": true}, {"option": "Unsigned", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, there are ____ <strong>primitive</strong> data types.</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A{\n        public static void main(String args[]){\n            byte b;\n            int i = 25;\n            b = (byte) i;\n            System.out.print(b);\n        }\n    }\n</code></pre>", "options": [{"option": "1101", "correct": false}, {"option": "25", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A{\n        public static void main(String args[]){\n            int i = 25;\n            double d = 225.50;\n            i = (int) d;\n            System.out.print(i);\n        }\n    }\n</code></pre>", "options": [{"option": "225.00", "correct": false}, {"option": "225", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class NumberSystem{\n        public static void main(String[] args){\n            int val = 0b11011;\n            System.out.println(val);\n        }\n    }\n</code></pre>", "options": [{"option": "26", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "27", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is a <strong>reference</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "double ", "correct": false}, {"option": "short", "correct": false}, {"option": "array", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the default value of the <strong>boolean</strong>  data type is ____.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the ____ data type value is returned by all <strong>transcendental</strong> math functions.</p>", "options": [{"option": "int ", "correct": false}, {"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, an expression involving byte, int, and literal numbers is promoted to ____.</p>", "options": [{"option": "float", "correct": false}, {"option": "int ", "correct": true}, {"option": "double", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, ____  is the default value of the <strong>double</strong> data type.</p>", "options": [{"option": "0.0", "correct": false}, {"option": "0", "correct": false}, {"option": "null", "correct": false}, {"option": "0.0d", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the smallest form of the <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": true}, {"option": "long", "correct": false}, {"option": "short", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a <strong>primitive</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": false}, {"option": "enum", "correct": true}, {"option": "short", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following can store a character?</p>", "options": [{"option": "String", "correct": false}, {"option": "Digit", "correct": false}, {"option": "Special character", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the ____ data type is an extension of the <strong>floating</strong> data type.</p>", "options": [{"option": "byte", "correct": false}, {"option": "double", "correct": false}, {"option": "long", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ____ data type is used to fetch a stream of data from a network or a file.</p>", "options": [{"option": "double", "correct": false}, {"option": "int", "correct": false}, {"option": "char", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the ____ data type can store a 64-bit value.</p>", "options": [{"option": "double ", "correct": true}, {"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>mutable</strong> wrapper class?</p>", "options": [{"option": "Integer", "correct": true}, {"option": "Boolean\r\n", "correct": false}, {"option": "Character", "correct": false}, {"option": "BigInteger", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "boolean", "correct": false}, {"option": "double", "correct": false}, {"option": "public", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, <strong>valueof(String)</strong> returns a ____ value.</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, a thread enters the waiting state when ____.</p>", "options": [{"option": "Its sleep() method is invoked", "correct": false}, {"option": "Its suspend() method is invoked", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is associated with <strong>function overloading</strong>?</p>", "options": [{"option": "Methods with different names and different parameters", "correct": false}, {"option": "Methods with the same name but different parameters", "correct": true}, {"option": "Methods with the same name but different return types", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        public static void main(String args[] ){\n            System.out.println(010|2);\n        }\n    }\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "10", "correct": true}, {"option": "12", "correct": false}, {"option": "Compilation Error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, ____ is not considered a keyword.</p>", "options": [{"option": "double", "correct": false}, {"option": "switch", "correct": false}, {"option": "then", "correct": true}, {"option": "instanceof", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements will compile successfully?</p>", "options": [{"option": "char c = 7c;", "correct": false}, {"option": "short myshort = 100S;", "correct": false}, {"option": "String s='hi'", "correct": false}, {"option": "int  x = 015; ", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what can cause a thread to stop executing?</p>", "options": [{"option": "The program exits via a call to System.exit(0);.", "correct": false}, {"option": "Another thread is given a higher priority.", "correct": false}, {"option": "A call to the thread's stop method is made.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, what is the result of the following expression:</p>\n<p><code>6 - 2 + 10 % 4 + 7</code></p>", "options": [{"option": "10", "correct": false}, {"option": "8", "correct": false}, {"option": "6", "correct": false}, {"option": "13", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>assignment</strong> operators is not valid?</p>", "options": [{"option": ">>", "correct": false}, {"option": "%=", "correct": false}, {"option": ">>>", "correct": false}, {"option": "<<<", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following operators has the highest precedence?</p>", "options": [{"option": "( )", "correct": false}, {"option": "{ }", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the order of precedence from the highest to the lowest for the following operators?</p>", "options": [{"option": "&&, /, |,{}\r\n", "correct": false}, {"option": "%, <=, &&, =", "correct": true}, {"option": "<, !, ==, ++\r\n", "correct": false}, {"option": "+, -, [], !=\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        public static void main(String args[] ){\n            int x = 0, y = 0 , z = 0 ;\n            x = (++x + y-- ) * z++;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "0", "correct": true}, {"option": "8", "correct": false}, {"option": "1", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        public static void main(String args[] )\n        {\n            int ++a = 100 ;\n            System.out.println( ++a ) ;\n        }\n    }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "101", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class N{\n        public static void main(String args[]){\n            int a=20, b=12;\n            if((a &lt; b) &amp;&amp; (b++ &lt; 25)){\n                System.out.println(\"Hi\");\n            }\n            System.out.println(b);\n        }\n    }\n</code></pre>", "options": [{"option": "Hi   11", "correct": false}, {"option": "Hi   10", "correct": false}, {"option": "10", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class N{\n        public static void main(String args[]){\n            if(1 + 1 + 1 + 1 + 1 + 1+ 1 == 7){\n                System.out.print(\"TRUE\");\n            }\n            else{\n                System.out.print(\"FLASE\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "FALSE", "correct": false}, {"option": "TRUE", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n        public static void main(String args[])\n        {\n\n            System.out.print(\"\"==\"\");\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"V\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"v\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String args[]){\n            int a = 20;\n            double b = 20.25;\n            System.out.print((a%10)+\" \"+(b%10));\n        }\n    }\n</code></pre>", "options": [{"option": "0   0.0", "correct": false}, {"option": "0   0.25", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String args[]){\n\n            System.out.print(\"a=Hacker\");\n        }\n    }\n</code></pre>", "options": [{"option": "Hacker", "correct": false}, {"option": "a=Hacker", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String... args){\n            int a=1 , b=2, c=3;\n            System.out.println(b + c);\n            System.out.println(a + b + c);\n        }\n    }\n</code></pre>", "options": [{"option": "5   5 ", "correct": false}, {"option": "5  6", "correct": true}, {"option": "2   3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        static int i =6;\n        public static void main(String... args){\n            System.out.println(++i+i++);\n        }\n    }\n</code></pre>", "options": [{"option": "13", "correct": false}, {"option": "12", "correct": false}, {"option": "14", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Equals \n    {\n        public static void main(String [] args) \n        {\n            int x = 50;\n            double y = 50.00;\n            boolean b = (x = y);\n            System.out.println(b);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Equals\n    {\n        public static void main(String [] args)\n        {\n            int x = 50;\n            int y = 50;\n            boolean b = (x = y);\n            System.out.println(b);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "1", "correct": false}, {"option": "false", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String [] args)\n        {\n            int x=10;\n            String sup = (x &lt; 15) ? \"Hack\" : (x &lt;22)? \"Earth\" : \"Hi\";\n            System.out.println(sup);\n        }\n    }\n</code></pre>", "options": [{"option": "Earth", "correct": false}, {"option": "Hi", "correct": false}, {"option": "Hack", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test \n    {\n        public static void main(String [] args) \n        {\n            int x=25;\n            String sup = (x &lt; 15) ? \"Hack\" : (x &lt;22)? \"Earth\" : \"Hi\";\n            System.out.println(sup);\n        }\n    }\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Earth", "correct": false}, {"option": "Hi", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String [] args)\n        {\n            int x= 0;\n            int y= 0;\n            for (int z = 0; z &lt; 5; z++)\n            {\n                if ((x++ &gt; 2 ) &amp;&amp; (++y &gt; 2))\n                {\n                    x++;\n                }\n            }\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "4  2", "correct": false}, {"option": "5  3", "correct": false}, {"option": "5  2", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Bitwise\n    {\n        public static void main(String [] args)\n        {\n            int x = 10 &amp; 9;\n            int y = x ^ 3;\n            System.out.println( y | 12 );\n        }\n    }\n</code></pre>", "options": [{"option": "12", "correct": false}, {"option": "20", "correct": false}, {"option": "15", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class S\n    {\n        public static void main(String [] args) \n        {\n            boolean b1 = true;\n            boolean b2 = false;\n            boolean b3 = true;\n            if ( b1 &amp; b2 | b2 &amp; b3 | b2 | b1 ) \n                System.out.println(\"ok\");;\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "ok", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test\n    {\n        public static void l(int i, int j)\n        {\n            i &lt;&lt;= j;\n        }\n        public static void main(String args[])\n        {\n            int i = 3, j = 2;\n            l(i, j);\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": true}, {"option": "1", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            int x = 0, y = 1, z;\n            if(x)\n            z = 0;\n            else\n                z = 1;\n            System.out.println(z);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class test {\n        public static void main(String args[]) {\n            int i,j,k,l=2;\n            k = l++;\n            j = ++k;\n            i = j++;\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Short{\n        public static void main(String args[]) {\n            int i = 0;\n            boolean t = true;\n            boolean f = false, b;\n            b = (t &amp;&amp; ((++i) == 0));\n            b = (f &amp;&amp; ((i+=2) &gt; 0));\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Short{\n        public static void main(String args[]) {\n            int i = 2;\n            boolean t = true;\n            boolean f = false, b;\n            b = (t &amp;((++i) == 0));\n            b = (f &amp;((i+=2) &gt; 0));\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "5", "correct": true}, {"option": "4", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Short {\n        public static void main(String args[]) {\n            int i = 4;\n            boolean t = true;\n            boolean f = false, b;\n            b = (t | ((i++) == 0));\n            b = (f | ((i+=2) &gt; 0));\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "7", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the ____operator is used to perform <strong>bitwise inversion</strong>.</p>", "options": [{"option": "!", "correct": false}, {"option": "~", "correct": true}, {"option": "&", "correct": false}, {"option": "^", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            byte x = 3;\n            x = (byte)~x;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "12", "correct": false}, {"option": "11", "correct": false}, {"option": "-4", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(true|false);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false|false);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false||false);\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": true}, {"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            int x,y;\n            x = 3 &amp; 6;\n            y = 3 | 6;\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "2  6", "correct": false}, {"option": "2  7", "correct": true}, {"option": "4  7", "correct": false}, {"option": "4    8", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            int x,y;\n            x = 1 &amp; 7;\n            y = 3 ^ 6;\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "1, 6", "correct": false}, {"option": "2, 5", "correct": false}, {"option": "1, 5", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>bitwise exclusive OR</strong> operator?</p>", "options": [{"option": "&", "correct": false}, {"option": "^", "correct": true}, {"option": "!", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class test {\n    public static void main(String args[]) {\n        boolean x = true;\n        int a;\n        if(x)\n        a = x ? 1: 2;\n        else\n            a = x ? 3: 4;\n        System.out.println(a);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class test {\n    public static void main(String args[]) {\n        boolean x = false;\n        int a;\n        if(x)\n        a = x ? 1: 2;\n        else\n            a = x ? 3: 4;\n        System.out.println(a);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class test {\n    public static void main(String args[]) {\n        System.out.println(20 &amp; 10);\n    }\n}\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": false}, {"option": "19", "correct": false}, {"option": "0", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class test {\n    public static void main(String args[]) {\n        System.out.println(~true);\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "false", "correct": false}, {"option": "Compilation error: 'Bad operand type boolean for unary operator'", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class test {\n    public static void main(String args[]) {\n        System.out.println(~4);\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "-5", "correct": true}, {"option": "-3", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\n  public static void main(String[] args) {\n    int x = 25;\n    if(x &lt; 50 &amp;&amp; x &lt;0) {\n        System.out.println(\"OK\");\n    }\n    if(x &lt; 50 &amp; x &gt; 0) {\n        System.out.println(\"Yup\");\n    }\n}\n</code></pre>\n<p>}</p>", "options": [{"option": "Okay, yup", "correct": false}, {"option": "Okay", "correct": false}, {"option": "Yup", "correct": true}, {"option": "Yup, okay", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test{\n    public static void main(String[] args) {\n        int x=10,y=15;\n        if(++x&gt;10 &amp;&amp; ++y&gt;15)\n        {\n            System.out.println(x);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String[] args) {\n            int x=10,y=15;\n            if(++x&gt;10 ||++y&gt;15)\n            {\n                System.out.println(x++);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "11", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following does a <strong>class</strong> contain?</p>", "options": [{"option": "Methods", "correct": false}, {"option": "Variables", "correct": false}, {"option": "Static block", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Very-Easy"}, {"question": "<p>Which of the following types of variables is available in Java?</p>", "options": [{"option": "Local ", "correct": false}, {"option": "Instance", "correct": false}, {"option": "Static", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following is a primitive data type?</p>", "options": [{"option": "char ", "correct": false}, {"option": "String ", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Very-Easy"}, {"question": "<p>What do you call a variable that is declared inside a constructor or block?</p>", "options": [{"option": "Global", "correct": false}, {"option": "Local", "correct": true}, {"option": "Class", "correct": false}, {"option": "Constructor", "correct": false}], "level": "Easy"}, {"question": "<p>Variables that are declared inside a class and not a method are called \"___________\".</p>", "options": [{"option": "Static", "correct": false}, {"option": "Instance", "correct": true}, {"option": "Local", "correct": false}, {"option": "Global", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    int a =100;\n    public static void main(String args[] ) throws Exception {\n        int a=200;\n        TestClass t= new TestClass();\n        System.out.println(t.a);\n    }\n}\n</code></pre>", "options": [{"option": "200", "correct": false}, {"option": "100", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n    int a =100;\n    public static void main(String args[] )    \n    throws Exception {\n        int a=200;\n        TestClass t= new TestClass();\n        System.out.println(a);\n    }\n}\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "200", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            int x, y;\n            x = 5 &gt;&gt; 2;\n            y = x &gt;&gt;&gt; 2;\n            System.out.println(y);\n        }\n    }\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "0", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        int a =100;\n        public static void main(String args[] ) throws Exception {\n            int a=200;\n            TestClass t= new TestClass();\n            System.out.println(t.a);\n            t.m();\n\n        }\n        void m()\n        {\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "100  100", "correct": true}, {"option": "100  200", "correct": false}, {"option": "200  200", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>       class TestClass {\n            int a =100;\n            public static void main(String args[] ) throws Exception {\n                int a=200;\n                TestClass t= new TestClass();\n                System.out.println(a);\n            t.m();}\n            void m()\n            {\n                System.out.println(a);\n            }\n        }\n</code></pre>", "options": [{"option": "100  100", "correct": false}, {"option": "200  100", "correct": true}, {"option": "100 200", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        int a =100;\n        public static void main(String args[] ) throws Exception {\n            int a=200;\n            TestClass t= new TestClass();\n            t.m();\n            System.out.println(a);\n        }\n        void m()\n        {\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "200  100", "correct": false}, {"option": "100  100", "correct": false}, {"option": "100   200", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=32;\n            System.out.println(a&gt;&gt;2);\n        }\n    }\n</code></pre>", "options": [{"option": "16", "correct": false}, {"option": "4", "correct": false}, {"option": "8", "correct": true}, {"option": "2", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=4;\n            System.out.println(a&lt;&lt;4);\n        }\n    }\n</code></pre>", "options": [{"option": "32", "correct": false}, {"option": "64", "correct": true}, {"option": "8", "correct": false}, {"option": "128", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=-1;\n            System.out.println(a&gt;&gt;1);\n        }\n    }\n</code></pre>", "options": [{"option": "-2", "correct": false}, {"option": "-1", "correct": true}, {"option": "1", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>       class Test\n        {\n            static int a=100;\n            public static void main(String args[])\n            {\n                int a=10;\n                System.out.println(a);\n            }\n        }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, arrays are ____ .</p>", "options": [{"option": "objects", "correct": true}, {"option": "primitive data types", "correct": false}, {"option": "double data type", "correct": false}, {"option": "float data type", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n        public static void main(String args[]){\n            double[] myList = {1, 4, 4, 4,1};\n            double max = myList[0];\n            int indexOfMax = 0;\n            for(int i = 1; i &lt; myList.length; i++){\n                if(myList[i] &gt; max){\n                    max = myList[i];\n                    indexOfMax = i;\n                }\n            }\n            System.out.println(indexOfMax);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}, {"option": "1", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "It will compile successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        int a;\n        float b;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0, 0.00", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "0, 0.0", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        int a;\n        boolean b;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0  0", "correct": false}, {"option": "null  null", "correct": false}, {"option": "null 0", "correct": false}, {"option": "0  false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a;\n        static boolean b;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0  null ", "correct": false}, {"option": "0   false", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=20;\n        int b=10;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            t.a=30;\n            t.b=40;\n            System.out.println(t.a);\n            System.out.println(t.b);\n        }\n    }\n</code></pre>", "options": [{"option": "20  40", "correct": false}, {"option": "20  10", "correct": false}, {"option": "30  40", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, <strong>local</strong> variables are stored in the ____ memory.</p>", "options": [{"option": "stack", "correct": true}, {"option": "heap", "correct": false}, {"option": "non heap", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, <strong>instance</strong> variables are stored in the ____ memory.</p>", "options": [{"option": "stack", "correct": false}, {"option": "heap", "correct": true}, {"option": "non heap", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, <strong>static</strong>  variables are stored in the ____ memory.</p>", "options": [{"option": "stack", "correct": false}, {"option": "heap", "correct": false}, {"option": "non heap", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        int a=20;\n        int b=10;\n        static void m1()\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n        }\n        public static void main(String args[])\n        {\n            Test.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "20  10", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Test{\n    int a=20;\n    int b=10;\n    public static void m1()\n    {\n\n        System.out.println( a+ \" \" + b );\n    }\n    public static void main(String args[])\n    {\n        Test t= new Test();\n        t.m1();\n    }\n}\n</code></pre>", "options": [{"option": "20, 10", "correct": false}, {"option": "20", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "10", "correct": false}, {"option": "30", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        int a=20;\n        static int b=10;\n        void m1()\n        {\n            Test t= new Test();\n            System.out.println(t.b);\n        }\n        public static void main(String args[])\n        {\n            Test t1= new Test();\n            t1.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "10", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "The code will compile successfully without any output.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        int a=20;\n        static int b=10;\n        static void m1()\n        {\n            Test t= new Test();\n            System.out.println(t.a);\n        }\n        public static void main(String args[])\n        {\n\n            Test .m1();\n        }\n    }\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "20", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test {\n\n {\n  System.out.println(\"Non-Static\");\n }\n\n public Test() {\n  System.out.println(\"A\");\n }\n\n public static void main(String[] args) {\n  Test a = new Test();\n }\n}\n</code></pre>", "options": [{"option": "Non-Static, A", "correct": true}, {"option": "A, Non-Static", "correct": false}, {"option": "Non-Static", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, <strong>instance</strong> methods are always linked with a ____ .</p>", "options": [{"option": "Object", "correct": true}, {"option": "Class", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how can the <strong>static</strong> method be accessed?</p>", "options": [{"option": "Through the Object of the class", "correct": false}, {"option": "Through the Class only", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        void m1()\n        {\n            System.out.println(\"Hacker\");\n        }\n        void m1(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1();\n            t1.m1(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Hacker ", "correct": false}, {"option": "Hacker   20", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        m1()\n        {\n            System.out.println(\"Hacker\");\n        }\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "Hacker", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        void m1()\n        {\n            System.out.println(\"Hacker\");\n            void m2()\n            {\n                System.out.println(\"Earth\");\n            }\n        }\n\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Hacker Earth", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class A {\n int k;\n boolean istrue;\n static int p;\n\n public void printValue() {\n  System.out.print(k);\n  System.out.print(istrue);\n  System.out.print(p);\n }\n}\n\npublic class Test {\n public static void main(String argv[]) {\n  A a = new A();\n  a.printValue();\n }\n}\n</code></pre>", "options": [{"option": "1 false 0", "correct": false}, {"option": "0 false 0", "correct": true}, {"option": "0 true 0", "correct": false}, {"option": "1 true 1", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        void m1()\n        {\n            m2();\n            System.out.println(\"Hacker\");\n        }\n        void m2()\n        {\n            System.out.println(\"Earth\");\n        }\n\n\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Hacker Earth", "correct": false}, {"option": "Earth Hacker", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        int a=100,b=300;\n        void m1(int a,int b)\n        {\n            System.out.println(this.a+this.b);\n        }\n        public static void main(String args[])\n        {\n\n            Test t1=new Test();\n            t1.m1(100,200);\n        }\n    }\n</code></pre>", "options": [{"option": "300", "correct": false}, {"option": "400", "correct": true}, {"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n        {\n\n            System.out.println(\"Hacker\"+\"Earth\");\n        }\n    }\n</code></pre>", "options": [{"option": "\"Hacker Earth\"", "correct": false}, {"option": "\"Hacker\" \" Earth\"", "correct": false}, {"option": "HackerEarth", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n                {\n\n                System.out.println(10+00);\n            }\n            }\n</code></pre>", "options": [{"option": "10", "correct": true}, {"option": "00", "correct": false}, {"option": "1000", "correct": false}, {"option": "0001", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n        {\n\n            System.out.println(10+30+\"Hacker\"+40+50);\n        }\n    }\n</code></pre>", "options": [{"option": "40Hacker90", "correct": false}, {"option": "40Hacker4050", "correct": true}, {"option": "1030Hacker4050", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how many <strong>primitive integer</strong> data types exist?</p>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, ____ is used to create <strong>objects</strong>.</p>", "options": [{"option": "The 'new' keyword, instance factory method", "correct": false}, {"option": "The 'new' keyword, static factory method", "correct": false}, {"option": "The instance factory method, static factory method", "correct": false}, {"option": "The 'new' keyword, instance factory method, static factory method", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Python code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        Test()\n        {\n            System.out.println(\"Constuctor called\");\n        }\n        Test(int a)\n        {\n            System.out.println(\"Constuctor\");\n        }\n        public static void main(String args[])\n        {\n            Test t1=new Test(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Constructor called, Constructor ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Constructor", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Python code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        Test(int a)\n        {\n            System.out.println(\"Constuctor\");\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            Test t1=new Test(20);\n        }\n    }\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "20", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class A{\n        int eid;\n        A(int eid)\n        {\n            System.out.println(eid);\n        }\n        void display()\n        {\n            System.out.println(eid);\n        }\n        public static void main(String args[])\n        {\n            A a=new A(100);\n            a.display();\n        }\n    }\n</code></pre>", "options": [{"option": "0  100", "correct": false}, {"option": "100", "correct": false}, {"option": "100  0", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>       class A{\n            int eid=200;\n            A(int eid)\n            {\n                System.out.println(eid);\n            }\n            void display()\n            {\n                System.out.println(eid);\n            }\n            public static void main(String args[])\n            {\n                A a=new A(100);\n                a.display();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "100, 200", "correct": true}, {"option": "100, 100", "correct": false}, {"option": "200, 100", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": true}, {"option": "The code compiles successfully without any output.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        protected Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": true}, {"option": "It compiles successfully but does not produce an output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        protected static Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error: Modifier static not allowed here", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": false}, {"option": "The code compiles successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, ____ is the return type of method that does not return any value.</p>", "options": [{"option": "int ", "correct": false}, {"option": "float", "correct": false}, {"option": "void ", "correct": true}, {"option": "null", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, <strong>Math.floor(3.7)</strong> returns ____.</p>", "options": [{"option": "4.0", "correct": false}, {"option": "3", "correct": false}, {"option": "3.0", "correct": true}, {"option": "4", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following modifiers cannot be used for constructors?</p>", "options": [{"option": "public ", "correct": false}, {"option": "static ", "correct": true}, {"option": "private ", "correct": false}, {"option": "protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, ____ variables are declared for the use of all the methods in a class.</p>", "options": [{"option": "Local ", "correct": false}, {"option": "Object", "correct": false}, {"option": "Instance ", "correct": true}, {"option": "Class ", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        Test(float y){\n            System.out.println( y ) ;\n        }\n        public static void main(String[] args){\n            Test num = new Test( 2 ) ;\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "2", "correct": false}, {"option": "2.0", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Area {\n        int width;\n        int length;\n        public Area(int width, int length) {\n            this.width = width;\n            this.length = length;\n        }\n\n    }\n    class Output {\n        public static void main(String args[])\n        {\n            Area obj = new Area(1 , -1);\n            System.out.println(obj.length + \" \" + obj.width);\n        }\n    }\n</code></pre>", "options": [{"option": "1 , -1", "correct": false}, {"option": "-1,  1", "correct": true}, {"option": "1,  1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following methods has the same name as its class?</p>", "options": [{"option": "finalize", "correct": false}, {"option": "delete", "correct": false}, {"option": "constructor", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Python code:</p>\n<pre class=\"prettyprint\"><code>    class Equality {\n        int x;\n        int y;\n        boolean isequal() {\n            return(x == y);\n        }\n    }\n    class Output {\n        public static void main(String args[])\n        {\n            Equality obj = new Equality();\n            obj.x = 10;\n            obj.y = 10;\n        System.out.println(obj.isequal());        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following functions is not supported?</p>", "options": [{"option": "Multilevel Inheritence", "correct": false}, {"option": "Garbage Collection", "correct": false}, {"option": "Single Inheritance", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is an <strong>unchecked</strong> exception?</p>", "options": [{"option": "ClassNotFound Exception", "correct": false}, {"option": "FileNotFound Exception", "correct": false}, {"option": "NoClassDefFound Exception", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ____ command is used to compile a program.</p>", "options": [{"option": "javacompile", "correct": false}, {"option": "javac", "correct": true}, {"option": "java.c", "correct": false}, {"option": "java", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ____ method is used to start the execution of a thread.</p>", "options": [{"option": "begin()", "correct": false}, {"option": "start()", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "run()", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following statements always returns the object in a <strong>sorted</strong> manner?</p>", "options": [{"option": "HashMap", "correct": false}, {"option": "TreeSet", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "HashSet", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the return type of the <strong>hashCode()</strong> method of the object class is ____.</p>", "options": [{"option": "hash", "correct": false}, {"option": "String", "correct": false}, {"option": "Object", "correct": false}, {"option": "int", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class String {\n        public static void main(String args[])\n        {\n            int a=10;\n            System.out.println(a -= a+ = a -= a += a);\n        }}\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "5", "correct": false}, {"option": "-5", "correct": false}, {"option": "6", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        public static void main(String args[])\n        {\n            int a=10;\n            System.out.println(a++ + ++a);\n        }}\n</code></pre>", "options": [{"option": "20", "correct": false}, {"option": "21", "correct": false}, {"option": "22", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class stack {\n        public static void main(String args[]) {\n            Stack obj = new Stack();\n            obj.push(new Integer(0));\n            obj.push(new Integer(2));\n            obj.pop();\n            System.out.println(obj);\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": true}, {"option": "0, 2", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        public static void main(String args[])\n        {\n            char a=10;\n            System.out.println(a++ + --a);\n        }}\n</code></pre>", "options": [{"option": "21", "correct": false}, {"option": "19", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, if an interface <strong>salary</strong> has to be implemented by a class <strong>employee</strong>, which of the following statements is used?</p>", "options": [{"option": "class employee extends salary {}", "correct": false}, {"option": "class employee  implements salary {}", "correct": true}, {"option": "class employee imports salary {}", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>wrapper</strong> class?</p>", "options": [{"option": "Byte ", "correct": false}, {"option": "Integer", "correct": false}, {"option": "Double ", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to access the member of a class before the creation of an object of that class?</p>", "options": [{"option": "public", "correct": false}, {"option": "private", "correct": false}, {"option": "static", "correct": true}, {"option": "protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is not related to <strong>exception handling</strong>?</p>", "options": [{"option": "try", "correct": false}, {"option": "finally", "correct": false}, {"option": "catch", "correct": false}, {"option": "None of these", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, which of these methods is used to awaken the <strong>wait()</strong> thread?</p>", "options": [{"option": "wake()", "correct": false}, {"option": "notify()", "correct": true}, {"option": "notifyall()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ____ method of the <strong>String</strong> class is used to test the equality of two strings.</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "isequals()", "correct": false}, {"option": "equal()", "correct": false}, {"option": "equals()", "correct": true}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class output {\n        public static void main(String args[])\n        {\n            String s1 = \"Hacker\";\n            String s2 = new String(s1);\n            String s3 = \"Hacker\";\n            System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n        }\n    }\n</code></pre>", "options": [{"option": "true, false", "correct": false}, {"option": "false, false", "correct": false}, {"option": "true, true", "correct": true}, {"option": "false, true", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class output {\n           public static void main(String args[])\n           { \n              String s1 = \"Hacker\";\n              String s2 = new String(s1);\n              String s3 = \"HACKER\";\n              System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n           }\n       }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "true true", "correct": false}, {"option": "true false", "correct": true}, {"option": "false false", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class output {\n        public static void main(String args[])\n        {\n            int a=1,b=2;\n            float c=2.0F;\n            System.out.println((a==c)+\" \"+(c==b));\n        }\n    }\n</code></pre>", "options": [{"option": "false, false", "correct": false}, {"option": "true, true ", "correct": false}, {"option": "false, true", "correct": true}, {"option": "true, false", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following is an <strong>abstract</strong> class?</p>", "options": [{"option": "Runnable", "correct": false}, {"option": "Multithread", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "Thread", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to control the access to a <strong>class member</strong>?</p>", "options": [{"option": "protected", "correct": false}, {"option": "public", "correct": false}, {"option": "abstract", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium-Hard"}, {"question": "<p>In Java, the ____ operator is used to free the memory of an object when it is no longer needed.</p>", "options": [{"option": "delete", "correct": false}, {"option": "free", "correct": false}, {"option": "new", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class demo {\n    public static void main(String args[])\n    {\n        String o = \"I\" +' ' +\"like\"+ ' ' + \"Coding\";\n        System.out.println(o);\n    }\n}\n</code></pre>", "options": [{"option": "I like Coding", "correct": true}, {"option": "\" I like Coding\"", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "\"I\" \"like\" \"Coding\"", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class operator {\n        public static void main(String args[])\n        {\n            int x = 5;\n            int y = ~ x;\n            int z;\n            z = x &gt; y ? x : y;\n            System.out.print(z);\n        }\n    }\n</code></pre>", "options": [{"option": "-5", "correct": false}, {"option": "5", "correct": true}, {"option": "-7", "correct": false}, {"option": "10", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class newthread implements Runnable {\n        Thread t;\n        newthread() {\n            t = new Thread(this,\"Hello\");\n            t.start();\n        }\n        public void run() {\n            System.out.println(t.getName());\n        }\n    }\n    class multithreaded_programing {\n        public static void main(String args[]) {\n            new newthread();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Hello", "correct": true}, {"option": "The code will compile successfully without any output.", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, the ____ method is used to instruct a <strong>calling</strong> thread to go to sleep until another thread enters the same monitor.</p>", "options": [{"option": "notify()", "correct": false}, {"option": "wait()", "correct": true}, {"option": "notifyAll()", "correct": false}, {"option": "sleep()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following keywords is used to access the member of a <strong>base-class</strong> from a <strong>subclass</strong>?</p>", "options": [{"option": "upper", "correct": false}, {"option": "this", "correct": false}, {"option": "super", "correct": true}, {"option": "extern", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, the ____ method of the <strong>thread</strong> class is used to suspend a thread.</p>", "options": [{"option": "terminate()", "correct": false}, {"option": "suspend()", "correct": false}, {"option": "stop()", "correct": false}, {"option": "sleep()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, if a class member, which was declared as <strong>protected</strong> in the parent class, becomes the member of a subclass, it is now a ____ member.</p>", "options": [{"option": "private ", "correct": true}, {"option": "protected ", "correct": false}, {"option": "public ", "correct": false}, {"option": "default ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class vector {\n        public static void main(String args[]) {\n            Vector obj = new Vector(4,2);\n            obj.addElement(new Integer(0));\n            obj.addElement(new Integer(20));\n            obj.addElement(new Integer(0));\n            obj.removeAll(obj);\n            System.out.println(obj.isEmpty());\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class main {\n        public static void main(String args[])\n        {\n            int x = 90;\n            if (x == 90) {\n                int x =30;\n                System.out.println(x);\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "90", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the interface declares core method that all collections will have?</p>", "options": [{"option": "set", "correct": false}, {"option": "EventListner", "correct": false}, {"option": "Collection", "correct": true}, {"option": "Comparator", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[])\n        {\n            int x , y = 3;\n            x = 101;\n            if (x != 101 &amp;&amp; x / 0 == 2)\n                System.out.println(y);\n            else\n                System.out.println(++y);\n        }\n    }\n</code></pre>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following keywords is used to monitor the exceptions?</p>", "options": [{"option": "try", "correct": true}, {"option": "catch", "correct": false}, {"option": "finally", "correct": false}, {"option": "try and finally", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following keywords is used to handle the exception thrown by the <strong>try</strong> block?</p>", "options": [{"option": "try", "correct": false}, {"option": "catch", "correct": true}, {"option": "finally", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class operator {\n        public static void main(String args[])\n        {\n            boolean a = true;\n            boolean b = !true;\n            boolean d = a &amp; b;\n            System.out.println(d);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class operator {\n        public static void main(String args[])\n        {\n            boolean a = true;\n            boolean b = !true;\n            boolean c = a | b;\n            boolean d = a &amp; b;\n            boolean e = d ? b : c;\n            System.out.println(e);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": false}, {"option": "true", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to convert Array to the ArrayList?</p>", "options": [{"option": "Arrays.asList()", "correct": false}, {"option": "Collections.addAll()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Arrays.convert()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is correct?</p>", "options": [{"option": "If a class is declared without allocating a memory, then it only a template.", "correct": false}, {"option": "A memory is allocated when the object of a class is declared.", "correct": false}, {"option": "A class is a blueprint from which objects are created.", "correct": false}, {"option": "All of the above", "correct": true}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Test {\n    public static int myMethod()\n       {\n           try {\n                //try block\n                return 0;\n           }\n           finally {\n                //finally\n                return 1;\n           }\n\n      }\n\n    public static void main(String[] args) {\n        // TODO Auto-generated method stub\n\n         System.out.println(Test.myMethod());\n      }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        public class Code10 \n    {\n        {\n         final Vector v;\n        v=new Vector();\n        }\n        public Code10 ()\n     {\n     }\n        public void codeMethod() \n        {\n        System.out.println(v.isEmpty());\n        }\n        public static void main(String args[]) \n       { \n    new Code10().codeMethod(); \n    } \n    }\n</code></pre>", "options": [{"option": "Prints: false\r\n", "correct": false}, {"option": "Runtime error: NullPointerException\r\n", "correct": false}, {"option": "Compilation error: cannot find the symbol\r\n", "correct": true}, {"option": "Prints: true\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    public class FindSum \n    {\n        public static void main(String[] args) \n        {\n            int[] a = {12, 15, 11, 13, 9, 25};\n            int[] a2 = {12, 15, 11, 13, 9, 25};\n            int sum = 0;\n            for (int i = 1; i &lt; a.length; i++) \n            {\n                if (a[i] % 3 == a2[a.length - i] % 5) \n                {\n                    sum +=(a2[a.length - i] )+(i*i);\n                }\n            }\n            System.out.println(\"sum = \" + sum);\n        }\n    }\n</code></pre>", "options": [{"option": "sum = 1", "correct": false}, {"option": "sum = 26", "correct": true}, {"option": "sum = 25", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>In Java, which of the following is not an <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": true}, {"option": "short", "correct": false}, {"option": "long", "correct": false}, {"option": "float", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Test\n      {\n         Test(String s)\n         {\n            System.out.println(\"String\");\n         }\n         Test(Object o)\n         {\n          System.out.println(\"Object\");\n        }\n     }\n     class constructor\n     {\n        public static void main(String arg[])\n        {\n\n       Test s1=new Test(null);\n       Test s2=new Test(\"hacker\");\n        }\n     }\n</code></pre>", "options": [{"option": "Object  Object", "correct": false}, {"option": "String  String", "correct": true}, {"option": "String   Object", "correct": false}, {"option": "Object String", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    class Test\n    {\n        public static void main(String args[])\n        {\n          if(null==null)\n            System.out.println(\"Hacker\");\n            else\n            {\n                System.out.println(\"Hack\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hack", "correct": false}, {"option": "Hacker", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    class Test\n    {\n        public static void call(Exception e)\n        {\n            System.out.println(\"Exception\");\n        }\n        public static void call(NullPointerException e)\n        {\n            System.out.println(\"NullPointer\");\n        }\n        public static void call(Object e)\n        {\n            System.out.println(\"Object\");\n        }\n        public static void main(String args[])\n        {\n            call(null);\n        }\n\n    }\n</code></pre>", "options": [{"option": "Object", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "NullPointer", "correct": true}, {"option": "Exception", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test extends Thread {\n        public void run() {\n            System.out.println(\"Hack\");\n        }\n        public void run(String s) {\n            System.out.println(\"Build\");\n        }\n        public static void main(String[] args) {\n            new Test().start();\n        }\n    }\n</code></pre>", "options": [{"option": "Build", "correct": false}, {"option": "Hack", "correct": true}, {"option": "Build, Hack", "correct": false}, {"option": "Hack, Build", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    public class Test {\n\n                  public static void main(String[] args){\n                   Integer a = new Integer(1);\n                   Integer b = new Integer(2);\n                   Integer c = new Integer(3);\n                   Integer d = new Integer(3);\n                   HashSet hs = new HashSet();\n                   hs.add(a);\n                   hs.add(b);\n                   hs.add(d);\n                   System.out.println(hs);\n                  }\n             }\n</code></pre>", "options": [{"option": "[1, 2, 3, 1 ,2, 3, 3]", "correct": false}, {"option": "[1, 2, 3]", "correct": true}, {"option": "[1, 2, 3, 3]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code>class A\n        {\n                 void eat(A m){\n                 System.out.println(\"A printed\");\n                 }\n              }\n              class B extends A{\n                 void eat( B c){\n                 System.out.println(\"B printed\");\n                 }\n              }\n\n              class C extends B{\n                  void eat(C h){\n                  System.out.println(\"C printed\");\n                  }\n              }\n              public class Test{\n                public static void main(String[] args){\n                   A h = new C();\n                   B c = new C();\n                  c.eat(h);\n                }\n              }\n</code></pre>", "options": [{"option": "B printed", "correct": false}, {"option": "C printed", "correct": false}, {"option": "A printed", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> import java.util.*;\n    public class Test {\n\n        public static void main(String[] args){\n            Integer a = new Integer(4);\n            Integer b = new Integer(8);\n            Integer c = new Integer(4);\n            TreeSet ts = new TreeSet();\n            ts.add(a);\n            ts.add(b);\n            ts.add(c);\n            System.out.println(ts);\n        }\n    }\n</code></pre>", "options": [{"option": "[8,4]", "correct": false}, {"option": "[4, 8]", "correct": true}, {"option": "[4, 8, 4]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    public class Test {\n\n        public static void main(String[] args){\n            Integer a = new Integer(8);\n            Integer b = new Integer(4);\n            Integer c = new Integer(8);\n            Vector vec = new Vector();\n            Iterator itr;\n            vec.add(a);\n            vec.add(b);\n            vec.add(c);\n            itr = vec.iterator();\n            while (itr.hasNext()) {\n                System.out.println(\"\" + itr.next());\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "8 4 8", "correct": true}, {"option": "8  4", "correct": false}, {"option": "4  8", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    interface A{\n        public void method1();\n    }\n    class One implements A{\n        public void method1(){\n            System.out.println(\"Code\");\n        }\n    }\n    class Two extends One{}\n    public class Test extends Two{\n        public static void main(String[] args)\n        {\n            A a;\n            Two t = new Two();\n            a = t;\n            a.method1();\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Code", "correct": true}, {"option": "Code, Code", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to copy the data from one array to another:</p>\n<ol>\n<li>System.clone </li>\n<li>java.lang.toCopy</li>\n<li>System.arraycopy</li>\n<li>java.lang.clone</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n  public class X\n{\n    public static void main(String [] args)\n    {\n        try\n        {\n            badMethod();\n            System.out.print(\"A\");\n        }\n        catch (Exception ex)\n        {\n            System.out.print(\"B\");\n        }\n        finally\n        {\n            System.out.print(\"C\");\n        }\n        System.out.print(\"D\");\n    }\n    public static void badMethod()\n    {\n    }\n}\n</code></pre>", "options": [{"option": "AC", "correct": false}, {"option": "BC", "correct": false}, {"option": "ACD", "correct": true}, {"option": "ABCD", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n class SBool \n{\n    public static void main(String [] args) \n    {\n        boolean b1 = true;\n        boolean b2 = false;\n        boolean b3 = true;\n        if ( b1 &amp; b2 | b2 &amp; b3 | b2 ) /* Line 9 */\n            System.out.print(\"ok \");\n        if ( b1 &amp; b2 | b2 &amp; b3 | b2 | b1 ) /*Line 11*/\n            System.out.println(\"yes\");\n    }\n}\n</code></pre>", "options": [{"option": "ok", "correct": false}, {"option": "yes", "correct": true}, {"option": "Compilation fails at line 9", "correct": false}, {"option": "Compilation fails at line 11", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is true about a <strong>static nested class</strong>?</p>\n<ol>\n<li>You must have a reference to an instance of the enclosing class in order to instantiate it.</li>\n<li>It does not have access to nonstatic members of the enclosing class.</li>\n<li>The variables and methods must be static.</li>\n<li>It must extend the enclosing class.</li>\n</ol>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "4", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following classes in the library do not implement a design pattern:</p>\n<ol>\n<li>Singleton</li>\n<li>Proxy</li>\n<li>Iterator</li>\n<li>Observer</li>\n</ol>", "options": [{"option": "1, 2, and 3 ", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class Constructor\n{\n   static String str;\n   public void Constructor() \n   {\n      System.out.println(\"In constructor\");\n      str = \"Hello World\";\n   }\n   public static void main(String [] args)\n   {\n      Constructor c = new Constructor();\n      System.out.println(str);\n   }\n}\n</code></pre>", "options": [{"option": "In constructor", "correct": false}, {"option": "null", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following  Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Base{\n        int value = 0;\n        Base(){\n            addValue();\n        }\n        void addValue(){\n            value += 10;\n        }\n        int getValue(){\n            return value;\n        }\n    }\n    class Derived extends Base{\n        Derived(){\n            addValue();\n        }\n        void addValue(){\n            value +=  30;\n        }\n    }\n    public class Test {\n        public static void main(String[] args){\n            Derived b= new Derived();\n            System.out.println(b.getValue());\n        }\n    }\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "40", "correct": false}, {"option": "60", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    public class Test{\n        public static void main(String[] args){\n            int[] a = {1,2};\n            Test t = new Test();\n            t.increment(a);\n            System.out.println(a[a.length - 1]);\n        }\n        void increment(int[] i){\n            i[i.length - 1]++;\n        }\n    }\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "1", "correct": false}, {"option": "4", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "An instance field declared as public generates a compilation error.", "correct": false}, {"option": "int is the name of a class available in the package java.lang.", "correct": false}, {"option": "Instance variable names may only contain letters and digits.", "correct": false}, {"option": "A class has a constructor.", "correct": true}], "level": "Very-Easy"}, {"question": "<p>In Java, which of the following methods registers a <strong>thread</strong> in a thread scheduler:</p>\n<ol>\n<li>construct();</li>\n<li>run();</li>\n<li>start();</li>\n<li>register();</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used to stop the execution of a <strong>thread</strong>?</p>", "options": [{"option": "notify()", "correct": false}, {"option": "wait()", "correct": true}, {"option": "notifyall()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Exc01 extends Exception { } \nclass Exc1 extends Exc01 { } /* Line 3 */\npublic class Test \n{  \n    public static void main(String args[]) \n    { \n        try \n        {  \n            throw new Exc1(); /* Line 10 */\n        } \n        catch (Exc01 e0) /* Line 12 */\n        {\n            System.out.println(\"Ex01 caught\"); \n        } \n        catch (Exception e) \n        {\n            System.out.println(\"exception caught\");  \n        } \n    } \n}\n</code></pre>", "options": [{"option": "Ex01 caught", "correct": true}, {"option": "exception caught", "correct": false}, {"option": "Compilation fails because of an error at line 3.", "correct": false}, {"option": "Compilation fails because of an error at line 10.", "correct": false}, {"option": "Compilation fails because of an error at line 12.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass Puzzle {\n    public static void main(String[] args) {\n        int mask = 0x000F;\n        int value = 0x2222;\n        System.out.println(value &amp; mask);\n    }\n}\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In Java, which of the following is the root class of the exception hierarchy?</p>", "options": [{"option": "Exception", "correct": false}, {"option": "Throwable", "correct": true}, {"option": "Error", "correct": false}, {"option": "RuntimeException", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass A extends Thread{\nint count = 0;\npublic void run(){\nSystem.out.println(\"run\");\nsynchronized (this) {\nfor(int i =0; i &lt; 50 ; i++){\ncount = count + i;\n}\nnotify();\n}\n}\n}\n\n\npublic class Test{\n\npublic static void main(String argv[]) {\nA a = new A();\na.start();\nsynchronized (a) {\nSystem.out.println(\"waiting\");\ntry{\na.wait();\n}catch(InterruptedException e){\n\n}\nSystem.out.println(a.count);\n\n}\n}\n}\n</code></pre>", "options": [{"option": "waiting, run, 0", "correct": false}, {"option": "run, waiting, 1225", "correct": false}, {"option": "waiting, run, 1225", "correct": true}, {"option": "run, 1225, waiting", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>In Java, how does a <strong>thread</strong> own the lock of an object?</p>\n<ol>\n<li>When the thread executes a synchronized instance method of that object</li>\n<li>When the thread executes a synchronized statement block in the object</li>\n<li>When the thread calls <strong>wait()</strong> on the object</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "2 ", "correct": false}, {"option": "3", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Test implements Runnable {\n    Integer id = 1;\n    public static void main(String[] args) {\n        new Thread(new Test()).start();\n        new Thread(new Test()).start();\n        new Thread(new Test()).start();\n    }\n    public void run() {\n        press(id);\n    }\n    synchronized void press(Integer id) {\n        System.out.print(id.intValue());\n        System.out.print((++id).intValue());\n    }\n}\n</code></pre>", "options": [{"option": "212121", "correct": false}, {"option": "121212", "correct": true}, {"option": "111222", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is not a valid data type?</p>", "options": [{"option": "Number", "correct": false}, {"option": "Object", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "Integer", "correct": true}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>x = \"1\" + 2 + 3;\ny = 1 + 2 + \"3\"\n</code></pre>\nWhat are the values of x and y respectively?<p></p>", "options": [{"option": "123, 123", "correct": false}, {"option": "33, 33", "correct": false}, {"option": "\"123\", \"123\"", "correct": false}, {"option": "\"123\", \"33\"", "correct": true}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following JavaScript code snippet:</p>\n<pre class=\"prettyprint\"><code>a = ['red', 'blue', 'green'];\na[100] = 'black';\nconsole.log(a.length);\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "100", "correct": false}, {"option": "101", "correct": true}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is not a method of the array object?</p>", "options": [{"option": "toString", "correct": false}, {"option": "join", "correct": false}, {"option": "remove", "correct": true}, {"option": "shift", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the output of the following JavaScript code snippet:\n</p><pre class=\"prettyprint\"><code>function Person(first, last) {\n  return {\n    first: first,\n    last: last,\n    fullName: function() {\n      return this.first + ' ' + this.last;\n    },\n    fullNameReversed: function() {\n      return this.last + ', ' + this.first;\n    }\n  };\n}\n\np = Person(\"James\", \"Bond\");\nvar fullName = p.fullName;\nfullName();\n</code></pre><p></p>", "options": [{"option": "James Bond", "correct": false}, {"option": "undefined", "correct": false}, {"option": "undefined undefined", "correct": true}, {"option": "No output", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the correct way to add an element at the end of an array?</p>", "options": [{"option": "arr[arr.length+1] = value", "correct": false}, {"option": "arr[arr.length] = value", "correct": true}, {"option": "arr[arr.length-1] = value", "correct": false}, {"option": "arr = arr + value", "correct": false}], "level": "Easy"}, {"question": "<p>In the following JavaScript code snippet, what is the value of x?</p>\n<pre class=\"prettyprint\"><code>var x = 9 &lt;&lt; 2;\n</code></pre>", "options": [{"option": "18", "correct": false}, {"option": "36", "correct": true}, {"option": "72", "correct": false}, {"option": "18", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following JavaScript code:</p>\n<p></p><pre class=\"prettyprint\"><code>var x = 100;\n\nfunction test() {\n    if(false) {\n        var x = 199;\n    }\n    console.log(x); //What does this display?\n}\n\ntest();\n</code></pre>\nWhat will the line <strong>console.log(x)</strong> display?<p></p>", "options": [{"option": "100", "correct": false}, {"option": "199", "correct": false}, {"option": "undefined", "correct": true}, {"option": "null", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>When you are using Chrome or Firefox, if the following JavaScript code snippet is run, what alert message will appear on the screen?</p>\n<pre class=\"prettyprint\"><code>var xmlhttp = null;\nif (window.XMLHttpRequest) {\n\u00a0\u00a0 \u00a0xmlhttp = new XMLHttpRequest();\n\u00a0\u00a0 \u00a0\n\u00a0\u00a0 \u00a0if (typeof xmlhttp.overrideMimeType != 'undefined') {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('The Dark Knight');\n\u00a0\u00a0 \u00a0}\n} else if (window.ActiveXObject) {\n\u00a0\u00a0 \u00a0alert('The Dark Knight Rises');\n} else {\n\u00a0\u00a0 \u00a0alert('The Knight Down');\n}\n</code></pre>", "options": [{"option": "The Dark Knight", "correct": true}, {"option": "The Dark Knight Rises", "correct": false}, {"option": "The Knight Down", "correct": false}, {"option": "Can't be determined", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In JavaScript, to prepare an <strong>XMLHttpRequest</strong> object, which method should be called before <strong>send ()</strong>?</p>", "options": [{"option": "prepare ()", "correct": false}, {"option": "open ()", "correct": true}, {"option": "init ()", "correct": false}, {"option": "build ()", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the correct syntax for including an external script called \"myscript.js\"?</p>", "options": [{"option": "<script href=\"myScript.js\">", "correct": false}, {"option": "<script name=\"myScript.js\">", "correct": false}, {"option": "<script src=\"myScript.js\">", "correct": true}, {"option": "<script root=\"myScript.js\">", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, how do you call the <strong>checkState</strong> method after 10 seconds?</p>", "options": [{"option": "window.setTimeout(checkState, 10);", "correct": false}, {"option": "window.setTimeout(checkState, 10000);", "correct": true}, {"option": "window.setTimeout(checkState(), 10000);", "correct": false}, {"option": "window.setTimeout(checkState(), 10);", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the status code _______________ denotes a server error.</p>", "options": [{"option": "100", "correct": false}, {"option": "200", "correct": false}, {"option": "400", "correct": false}, {"option": "500", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, how do you add a comment?</p>", "options": [{"option": "//This is a comment.", "correct": true}, {"option": "REM This is a comment-->", "correct": false}, {"option": "This is a comment.", "correct": false}, {"option": "#This is a comment.", "correct": false}], "level": "Very-Easy"}, {"question": "<p>In HTML, what is the purpose of the &lt;<strong>noscript</strong>&gt; tag?</p>", "options": [{"option": "Prevents the page scripts from executing", "correct": false}, {"option": "Shields a part of a page from being modified by JavaScript so that a statement like aDiv.innerHTML = 'something' has no effect", "correct": false}, {"option": "Encloses the text to be displayed if the browser doesn't support JavaScript", "correct": true}, {"option": "No such tag exists", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is not a primitive data type?</p>", "options": [{"option": "Number", "correct": false}, {"option": "Array", "correct": true}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the difference between <strong>==</strong> and <strong>===</strong>?</p>", "options": [{"option": "== compares type and value\r\n=== compares only type", "correct": false}, {"option": "== compares value\r\n=== compares type", "correct": false}, {"option": "== compares value\r\n=== compares value and type", "correct": true}, {"option": "== and === are equivalent", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code snippet:</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\npublic class Test{\n    public static void main(String argv[]){\n    Test1 pm1 = new Test1(\"1\");\n    pm1.run();\n    Test1 pm2 = new Test1(\"2\");\n    pm2.run();\n    Test1 pm3 = new Test1(\"break\");\n    pm2.run();\n\n    }\n}\n\nclass Test1 extends Thread{\nprivate String sTname=\"\";\nTest1(String s){\n    sTname = s;\n\n}\npublic void run(){\n    for(int i =0; i &lt; 2 ; i++){\n        try{\n         sleep(1000);\n        }catch(InterruptedException e){}\n\n        yield();\n        System.out.println(sTname);\n        }\n\n    }\n}\n</code></pre>", "options": [{"option": "1,2,1,2", "correct": false}, {"option": "1,1,2,2", "correct": true}, {"option": "1,2,1,2,break,break", "correct": false}, {"option": "1,1,2,2,break,break", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following, if inserted in line 6, will compile and print <strong>test2</strong>?</p>\n<pre class=\"prettyprint\"><code>public class A { \npublic void test1(){\nSystem.out.println(\"test1\");\n}\n}\n\npublic class B extends A{ \npublic void test2(){\nSystem.out.println(\"test2\");\n}\n}\n\n1. public class Test{ \n2. public static void main (String[] args){\n3. A a = new A(); \n4. A b = new B(); \n5. B b1 = new B();\n6. // insert code here\n7. }\n8. }\n</code></pre>", "options": [{"option": "(B)b.test2();", "correct": false}, {"option": "((B)b).test2();", "correct": true}, {"option": "b.test2();", "correct": false}, {"option": "a.test2();", "correct": false}], "level": "Hard"}, {"question": "<p>In which of the following cases will you use the <strong>yield</strong> method of the <strong>thread</strong> class?</p>\n<ol>\n<li>To call from the thread, which is currently running, and allow another thread of the same or higher priority to run.</li>\n<li>To call on the waiting thread to allow it to run.</li>\n<li>To allow a thread of higher priority to run.</li>\n<li>To call from the thread, which is currently running, with a parameter that designates which thread should be allowed to run.</li>\n</ol>", "options": [{"option": "Only 1", "correct": true}, {"option": "Only 1 and 2", "correct": false}, {"option": "Only 2 and 3", "correct": false}, {"option": "Only 1, 2, and 3", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements is true?</p>\n<ol>\n<li>Assertion checking is typically enabled when a program is deployed.</li>\n<li>It is never appropriate to write code to handle the failure of an assert statement.</li>\n<li>Assertion checking is typically enabled during program development and testing.</li>\n<li>Assertion checking can be enabled or disabled selectively on a per-package basis. However, this cannot be done on a per-class basis.</li>\n<li>Assertion checking can be enabled or disabled selectively on both a per-package basis and a per-class basis.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "2, 3, and 5", "correct": true}, {"option": "3, 4, and 5", "correct": false}, {"option": "1, 2, and 5", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following interfaces accepts input parameters at runtime:</p>\n<ol>\n<li>\n<p>java.sql.Statement</p>\n</li>\n<li>\n<p>java.sql.CallableStatement</p>\n</li>\n<li>\n<p>java.sql.PreparedStatement</p>\n</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "1 and 3", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>In the following code, after executing line 15, how many objects will be eligible for garbage collection?</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Test\n{\n    public static void main(String args[])\n    {\n        Integer i1=new Integer(2000);\n        Integer i2=new Integer(3000);\n        Integer i3=new Integer(4000);\n\n        Object a = i1;\n        i1=i2;\n        i2=i3;\n        i3=null;// Line 15\n\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "0", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>In Java, which of the following methods is defined in the class Object:</p>\n<ol>\n<li>wait() </li>\n<li>notify()</li>\n<li>toString()</li>\n<li>finalize()</li>\n<li>sleep()</li>\n</ol>", "options": [{"option": "1 and 5", "correct": false}, {"option": "5", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, 3 and 4", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code snippet:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class ProfileTest {\n     private ProfileTest(int w) { // line 3\n        System.out.println(w);\n    }\n    public static ProfileTest() { // line 6\n        System.out.println(5);\n    }\n    public static void main(String args[]) {\n        ProfileTest obj = new ProfileTest(10);\n}\n}\n</code></pre>", "options": [{"option": "10", "correct": false}, {"option": "5", "correct": false}, {"option": "Will not compile because of line 3 (constructors cannot be private)", "correct": true}, {"option": "Will not compile because of line 6 (constructors cannot be static)", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Tester {\n    static void method(){\n        throw new Exception();\n    }\n    public static void main(String[] args) {\n        try {\n            method();\n        } catch (Throwable e) {\n            try {\n                throw new Exception() ;\n            } catch (Exception ex) {\n                System.out.print(\"exception\");\n            } finally {\n                System.out.print(\"finally\");\n            }\n        }\n    }\n}\n</code></pre>", "options": [{"option": "finally", "correct": false}, {"option": "finally, exception", "correct": false}, {"option": "exception, finally", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\ninterface Colorable {}\nclass Vehicle {}\nclass Car extends Vehicle implements Colorable {}\npublic class Tester {\n    public static void main(String[] args) {\n        Vehicle a = new Car();\n        Colorable i = (Colorable) a;//Line1\n        Vehicle b = new Vehicle(); \n       Colorable j = (Colorable) b; //Line 2\n    }\n}\n</code></pre>", "options": [{"option": "Runtime error (due to Line 1)", "correct": false}, {"option": "Runtime error (due to Line 2)", "correct": true}, {"option": "The code compiles fine without any output", "correct": false}, {"option": "The code will not compile", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following script?</p>\n<pre class=\"prettyprint\"><code>&lt;script&gt;\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.write(obj.prop.getFullname());\ndocument.write(' | ');\nvar test = obj.prop.getFullname;\ndocument.write(test());\n&lt;/script&gt;\n</code></pre>", "options": [{"option": "Bilbo Baggins | Gandalf", "correct": false}, {"option": "Bilbo Baggins | Frodo Baggins", "correct": true}, {"option": "Frodo Baggins | Bilbo Baggins", "correct": false}, {"option": "Frodo Baggins | Frodo Baggins", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Medium"}, {"question": "<p>What is closure in Javascript?</p>", "options": [{"option": "A. Is an inner function that has access to the outer (enclosing) function\u2019s variables", "correct": false}, {"option": "B. Is the primary mechanism used to enable data privacy", "correct": false}, {"option": "Both A & B", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What will be returned in this Javascript function?</p>\n<pre class=\"prettyprint\"><code>(function(x){\n    delete x;\n    return x;\n  })(1);\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How do you write a conditional statement that will <em>only</em> execute the contained code if variable x has a value 5 of type <em>number</em>?</p>", "options": [{"option": "if (x == 5) { \u2026 }", "correct": false}, {"option": "if x = 5 \u2026", "correct": false}, {"option": "if (x === 5) { \u2026 }", "correct": true}, {"option": "if x = 5 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following script?</p>\n<pre class=\"prettyprint\"><code>&lt;script&gt;\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.write(obj.prop.getFullname());\ndocument.write(' | ');\nvar test = obj.prop.getFullname;\ndocument.write(test());\n&lt;/script&gt;\n</code></pre>", "options": [{"option": "Bilbo Baggins | Gandalf", "correct": false}, {"option": "Bilbo Baggins | Frodo Baggins", "correct": true}, {"option": "Frodo Baggins | Bilbo Baggins", "correct": false}, {"option": "Frodo Baggins | Frodo Baggins", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Medium"}, {"question": "<p>What is closure in Javascript?</p>", "options": [{"option": "A. Is an inner function that has access to the outer (enclosing) function\u2019s variables", "correct": false}, {"option": "B. Is the primary mechanism used to enable data privacy", "correct": false}, {"option": "Both A & B", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What will be returned in this Javascript function?</p>\n<pre class=\"prettyprint\"><code>(function(x){\n    delete x;\n    return x;\n  })(1);\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How do you write a conditional statement that will <em>only</em> execute the contained code if variable x has a value 5 of type <em>number</em>?</p>", "options": [{"option": "if (x == 5) { \u2026 }", "correct": false}, {"option": "if x = 5 \u2026", "correct": false}, {"option": "if (x === 5) { \u2026 }", "correct": true}, {"option": "if x = 5 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy"}, {"question": "<p>avcd changed</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following script?</p>\n<pre class=\"prettyprint\"><code>&lt;script&gt;\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.write(obj.prop.getFullname());\ndocument.write(' | ');\nvar test = obj.prop.getFullname;\ndocument.write(test());\n&lt;/script&gt;\n</code></pre>", "options": [{"option": "Bilbo Baggins | Gandalf", "correct": false}, {"option": "Bilbo Baggins | Frodo Baggins", "correct": true}, {"option": "Frodo Baggins | Bilbo Baggins", "correct": false}, {"option": "Frodo Baggins | Frodo Baggins", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is closure in Javascript?</p>", "options": [{"option": "Is an inner function that has access to the outer (enclosing) function\u2019s variables", "correct": false}, {"option": "Is the primary mechanism used to enable data privacy", "correct": false}, {"option": "All the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What will be returned in this Javascript function?</p>\n<pre class=\"prettyprint\"><code>(function(x){\n    delete x;\n    return x;\n  })(1);\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How do you write a conditional statement that will <em>only</em> execute the contained code if variable x has a value 5 of type <em>number</em>?</p>", "options": [{"option": "if (x == 5) { \u2026 }", "correct": false}, {"option": "if x = 5 \u2026", "correct": false}, {"option": "if (x === 5) { \u2026 }", "correct": true}, {"option": "if x = 5 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following script?</p>\n<pre class=\"prettyprint\"><code>&lt;script&gt;\nvar fullname = 'Frodo Baggins';\nvar obj = {\n   fullname: 'Gandalf',\n   prop: {\n      fullname: 'Bilbo Baggins',\n      getFullname: function() {\n         return this.fullname;\n      }\n   }\n};\ndocument.write(obj.prop.getFullname());\ndocument.write(' | ');\nvar test = obj.prop.getFullname;\ndocument.write(test());\n&lt;/script&gt;\n</code></pre>", "options": [{"option": "Bilbo Baggins | Gandalf", "correct": false}, {"option": "Bilbo Baggins | Frodo Baggins", "correct": true}, {"option": "Frodo Baggins | Bilbo Baggins", "correct": false}, {"option": "Frodo Baggins | Frodo Baggins", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below answers is the equivalent of the following. if (a) { x = b; } else { x = c; }</p>", "options": [{"option": "x = a : b ? c;", "correct": false}, {"option": "x = a ? b : c;", "correct": true}, {"option": "x = a ? b , c;", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is closure in Javascript?</p>", "options": [{"option": "Is an inner function that has access to the outer (enclosing) function\u2019s variables", "correct": false}, {"option": "Is the primary mechanism used to enable data privacy", "correct": false}, {"option": "All the above", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What will be returned in this Javascript function?</p>\n<pre class=\"prettyprint\"><code>(function(x){\n    delete x;\n    return x;\n  })(1);\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium-Hard"}, {"question": "<p>How do you write a conditional statement that will <em>only</em> execute the contained code if variable x has a value 5 of type <em>number</em>?</p>", "options": [{"option": "if (x == 5) { \u2026 }", "correct": false}, {"option": "if x = 5 \u2026", "correct": false}, {"option": "if (x === 5) { \u2026 }", "correct": true}, {"option": "if x = 5 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Preferable method of iterating a List to transform a list of integers into a list of strings</p>", "options": [{"option": ".foreach", "correct": true}, {"option": "for(i=0;i<len(list);i++)", "correct": false}, {"option": ".map", "correct": false}, {"option": "for(x <- list)", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What will be the output of this code.</p>\n<pre class=\"prettyprint\"><code>class A {\n    public static String str = \u201ca\u201d;\n}\n\nclass B extends A {\n    public static String str = \u201cb\u201d;\n    public static void main(String[] args) {\n        A a = new B();\n        System.out.println(a.str);\n         }\n}\n\n</code></pre>", "options": [{"option": "Compilation Error\r\n", "correct": false}, {"option": "a", "correct": true}, {"option": "b", "correct": false}, {"option": "a followed by b", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What comparison would be true, after execution of following code:</p>\n<pre class=\"prettyprint\"><code>var Person = function(firstName, lastName, dateOfBirth, measurements) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.dateOfBirth = dateOfBirth;\n    this.measurements = measurements\n}\n\nperson = new Person('John', 'Doe', new Date(2000,1,10),{weightData: '100pounds'});\npersonClone = JSON.parse(JSON.stringify(person));\n</code></pre>", "options": [{"option": "person.dateOfBirth.toDateString() === personClone.dateOfBirth.toDateString() &&\r\nperson.firstName === personClone.firstName;", "correct": false}, {"option": "person.measurements['weightData'] === personClone.measurements['weightData'] &&\r\nperson === personClone;", "correct": false}, {"option": "All would be true", "correct": false}, {"option": "All would be false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>function dd() {\n  console.log(typeof a);\n  console.log(typeof b);\n  function a() {};\n  var b = function() {};\n};\n\ndd();\n</code></pre>", "options": [{"option": "function, undefined", "correct": true}, {"option": "undefined, undefined", "correct": false}, {"option": "function, function", "correct": false}, {"option": "undefined, function", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>((x, ...y)=&gt;y)(1,2,3)\n</code></pre>", "options": [{"option": "[1, 2, 3]", "correct": false}, {"option": "[2, 3]", "correct": true}, {"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<p>What comparison would be true, after execution of following code:</p>\n<pre class=\"prettyprint\"><code>var Person = function(firstName, lastName, dateOfBirth, measurements) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.dateOfBirth = dateOfBirth;\n    this.measurements = measurements\n}\n\nperson = new Person('John', 'Doe', new Date(2000,1,10),{weightData: '100pounds'});\npersonClone = JSON.parse(JSON.stringify(person));\n</code></pre>", "options": [{"option": "person.dateOfBirth.toDateString() === personClone.dateOfBirth.toDateString() &&\r\nperson.firstName === personClone.firstName;", "correct": false}, {"option": "person.measurements['weightData'] === personClone.measurements['weightData'] &&\r\nperson === personClone;", "correct": false}, {"option": "All would be true", "correct": false}, {"option": "All would be false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>function dd() {\n  console.log(typeof a);\n  console.log(typeof b);\n  function a() {};\n  var b = function() {};\n};\n\ndd();\n</code></pre>", "options": [{"option": "function, undefined", "correct": true}, {"option": "undefined, undefined", "correct": false}, {"option": "function, function", "correct": false}, {"option": "undefined, function", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>((x, ...y)=&gt;y)(1,2,3)\n</code></pre>", "options": [{"option": "[1, 2, 3]", "correct": false}, {"option": "[2, 3]", "correct": true}, {"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "Error", "correct": false}], "level": "Medium"}, {"question": "<h2>What will be the output of the below snippet:</h2>\n\n<pre class=\"prettyprint\"><code>import java.text.*;\n\npublic static void main(String[] args) throws ParseException {\n\nString[] sa = {\"111.234\", \"222.5647\"};\n\nNumberFormat nf = NumberFormat.getInstance();\n\nnf.setMaximumFractionDigits(3);\n\nfor (String s : sa) {\n\n  System.out.println(nf.format(nf.parse(s)));\n\n  }\n }\n\n</code></pre>", "options": [{"option": "111.234\r\n222.565", "correct": true}, {"option": "111.234\r\n222.5647", "correct": false}, {"option": "111.234\r\n222.564", "correct": false}, {"option": "An exception is thrown at runtime.\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following features are introduced in Java 8</p>\n\n<ol>\n\t<li>Concurrency package (java.util.concurrent)</li>\n\t<li>Lambda Expressions</li>\n\t<li>StringJoiner</li>\n\t<li>Functional Interfaces</li>\n</ol>", "options": [{"option": "1 only", "correct": false}, {"option": "2 & 3", "correct": false}, {"option": "3 & 4", "correct": false}, {"option": "2 & 4", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following are correct:</p>\n\n<ol>\n\t<li>\n\t<p>An interface can implement another interface</p>\n\t</li>\n\t<li>\n\t<p>An interface can extend many interfaces.</p>\n\t</li>\n\t<li>\n\t<p>An interface can extend only one interface.</p>\n\t</li>\n\t<li>\n\t<p>An Abstract class can implement multiple interfaces.</p>\n\t</li>\n</ol>", "options": [{"option": "1 only", "correct": false}, {"option": "2 only", "correct": false}, {"option": "2, 4 ", "correct": true}, {"option": "2, 3, 4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is/are not there in Object class:</p>\n\n<p>a) hasCode()</p>\n\n<p>b) getClass()</p>\n\n<p>c) wait()</p>\n\n<p>d) clone()</p>\n\n<p>e) finally()</p>\n\n<p>f) equals(Object obj)</p>\n\n<p>g) currentThread()</p>\n\n<p>(* you can ignore the case)</p>", "options": [{"option": "a,e", "correct": false}, {"option": "b,g", "correct": false}, {"option": "e,g", "correct": true}, {"option": "d,f", "correct": false}], "level": "Easy"}, {"question": "<p>Given the code fragment:</p>\n<pre class=\"prettyprint\"><code>try {\n// assume \"conn\" is a valid Connection object\n// assume a valid Statement object is created\n// assume rollback invocations will be valid\n// use SQL to add 15 to a checking account\nSavepoint s1 = conn.setSavePoint();\n// use SQL to add 120 to the same checking account\nSavepoint s2 = conn.setSavePoint();\n// use SQL to add 2000 to the same checking account\n// insert valid rollback method invocation here\n} catch (Exception e) { }\n</code></pre>\n<p>Which two statements are true?</p>\n<ol>\n<li>If conn.rollback(s1) is inserted, account will be incremented by 15.</li>\n<li>If conn.rollback(s1) is inserted, account will be incremented by 2135.</li>\n<li>If conn.rollback(s2) is inserted, account will be incremented by 120.</li>\n<li>If conn.rollback(s2) is inserted, account will be incremented by 135.</li>\n<li>If conn.rollback(s2) is inserted, account will be incremented by 2135.</li>\n</ol>", "options": [{"option": "1,4", "correct": true}, {"option": "1,3,4", "correct": false}, {"option": "2,3,5", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements is incorrect related HashMap class in Java</p>\n<ol>\n<li>get &amp; put operations in HashMap are thread safe</li>\n<li>get &amp; put operations in HashMap are not thread safe</li>\n<li>HashMap stores data into multiple singly linked lists </li>\n<li>Retrieval performance could range from O(1) to O(n)</li>\n</ol>", "options": [{"option": "3", "correct": false}, {"option": "1", "correct": false}, {"option": "4", "correct": false}, {"option": "2", "correct": true}], "level": "Easy"}, {"question": "<p>How can you <strong>serialize</strong> an object in Java?</p>", "options": [{"option": "You have to make the class of the object implement the interface Serializable.", "correct": true}, {"option": "You must call the method 'serializeObject()' (which is inherited from class Object) on the object.", "correct": false}, {"option": "You should call the static method 'serialize(Object obj)' from class 'Serializer'.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following interfaces is used to save unique elements in collections and to enable accessibility in the natural order?</p>", "options": [{"option": "java.util.Map ", "correct": true}, {"option": "java.util.Set ", "correct": false}, {"option": "java.util.List ", "correct": false}, {"option": "java.util.Collection ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following modules is synchronized in Java?</p>", "options": [{"option": "Set   ", "correct": false}, {"option": "LinkedList    ", "correct": false}, {"option": "Vector    ", "correct": true}, {"option": "WeakHashMap    ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following types of access is specified for a <strong>subclass</strong> in a package such that it can access the members of any <strong>superclass</strong>?</p>", "options": [{"option": "Public   ", "correct": false}, {"option": "Private   ", "correct": false}, {"option": "Protected  ", "correct": true}, {"option": "Transient   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the elements of the ____________________________ <strong>collection</strong> class are associated with key values and the objects of this class are retrieved in a FIFO sequence.</p>", "options": [{"option": "java.util.ArrayList\t", "correct": false}, {"option": "java.util.HashMap", "correct": false}, {"option": "java.util.LinkedHashMap  ", "correct": true}, {"option": "java.util.TreeMap  ", "correct": false}], "level": "Easy"}, {"question": "<p>What action will be performed by finally in the below code?</p>\n<p>try\n{</p>\n<p>//some code\nreturn();</p>\n<p>}</p>\n<p>finally{\n//some code\n}</p>", "options": [{"option": "No, as it exits the program", "correct": false}, {"option": "Finally always gets executed", "correct": true}, {"option": "Every try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the base class for errors and exceptions in Java?</p>", "options": [{"option": "Throwable", "correct": true}, {"option": "Runnable", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true regarding the passing of an argument using the <strong>call-by-value</strong> process?</p>", "options": [{"option": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument. ", "correct": false}, {"option": "Reference to original argument is passed to formal parameter of the subroutine.", "correct": false}, {"option": "Copy of argument is made into the formal parameter of the subroutine", "correct": true}, {"option": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these classes can never be a subclass in Java?</p>", "options": [{"option": "Abstract class", "correct": false}, {"option": "Parent class", "correct": false}, {"option": "Final class", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following processes is used to write the state of an object to a <strong>byte</strong> stream?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Externalization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following will directly stop the execution of a Thread?</p>\n<ol>\n<li>wait()</li>\n<li>notify()</li>\n<li>notifyall()</li>\n<li>exits synchronized code</li>\n</ol>", "options": [{"option": "4", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "3", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are true statements?</p>\n\n<ol>\n\t<li>The iterator interface declares only three methods: hasNext, next and remove.</li>\n\t<li>The ListIterator interface extends both the List and Iterator interfaces.</li>\n\t<li>The ListIterator interface provides forward and backward iteration capabilities.</li>\n\t<li>The ListIterator interface provides the ability to modify the List during iteration.</li>\n\t<li>The ListIterator interface provides the ability to determine its position in the List.</li>\n</ol>", "options": [{"option": "2,3,4 and 5", "correct": false}, {"option": "1,3,4 and 5", "correct": true}, {"option": "3,4 and 5", "correct": false}, {"option": "1,2 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>Q5 : Which of the following statements is true?</p>\n<p>A. If assertions are compiled into a source file, and if no flags are included at runtime, assertions will execute by default.</p>\n<p>B. As of Java version 1.4, assertion statements are compiled by default.</p>\n<p>C. With the proper use of runtime arguments, it is possible to instruct the VM to disable assertions for a certain class, and to enable assertions for a certain package, at the same time.</p>\n<p>D. When evaluating command-line arguments, the VM gives -ea flags precedence over -da flags.</p>", "options": [{"option": "A", "correct": false}, {"option": "C", "correct": true}, {"option": "B", "correct": false}, {"option": "D", "correct": false}], "level": "Medium"}, {"question": "<p>What is the size of a ratio of an Integer Object, to an Int value ?(32-bit platform)</p>\n<ol>\n<li>15:1</li>\n<li>2:1</li>\n<li>4:1</li>\n<li>3:1</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "4", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these are not collection type in Java:</p>\n<ol>\n<li>NavigableHashMap</li>\n<li>ConcurrentHashMap</li>\n<li>TreeMap</li>\n<li>LinkedHashMap</li>\n<li>SkipListHashMap</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}, {"option": "5", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the below snippet ?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.HashSet;\nimport java.util.Set;\n\npublic class A {\n private int i;\n\n public A(int i){\n  this.i = i;\n }\n\n public static void main(String [] args){\n  Set&lt;A&gt; set = new HashSet&lt;A&gt;();\n  set.add(new A(10));\n  set.add(new A(20));\n  set.add(new A(10));\n  System.out.println(set.size());\n }\n}\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following snippet ?</p>\n<pre class=\"prettyprint\"><code>public interface Interface1{\n void Display() throws IOException;\n}\n\npublic interface Interface2{\n void Display() throws ParseException;\n}\n\nConsider the implementing class implementing these interfaces as below\n\npublic class InterfaceImpl implements Interface1,Interface2{\n\n public static void main(String[] args) throws Exception{\n  InterfaceImpl t = new InterfaceImpl ();\n  t.Display();\n }\n\n public void Display() throws Exception {\n  System.out.println(\"I am in display of InterfaceImpl\");\n }\n} \n\n</code></pre>", "options": [{"option": "System prints \"I am in display of InterfaceImpl\"", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is most likely to be printed by this program ?</p>\n<pre class=\"prettyprint\"><code>\n     public static void main(String[] args) throws Exception { \n\n\n  double d = 3*.1;\n  if ( d == 0.3)\n  {\n   System.out.println(\"EQUAL\");\n  }\n  else if ( d &gt; 0.3)\n  {\n   System.out.println(\"GREATER\");\n  }\n  else if ( d &lt; 0.3)\n  {\n   System.out.println(\"SMALLER\");\n  }\n  else\n  {\n   System.out.println(\"NOT EQUAL\");\n  }\n\n     }\n\n</code></pre>", "options": [{"option": "EQUAL", "correct": false}, {"option": "GREATER or SMALLER", "correct": true}, {"option": "NOT EQUAL", "correct": false}, {"option": "Compilation/Runtime/Exception", "correct": false}], "level": "Easy"}, {"question": "<p>JMS Message Listeners are preferably used :</p>\n\n<ol>\n\t<li>To receive messages asynchronously</li>\n\t<li>To publish messages to different consumers</li>\n\t<li>To publish messages to JMS Server]</li>\n\t<li>To receive messages synchronously</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is NOT a type of Garbage Collector provided by JVM:</p>\n\n<ol>\n\t<li>Serial</li>\n\t<li>Parallel</li>\n\t<li>Concurrent Mark &amp; Sweep</li>\n\t<li>G1</li>\n\t<li>Bootstrap</li>\n</ol>", "options": [{"option": "2", "correct": false}, {"option": "5", "correct": true}, {"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<pre class=\"prettyprint\"><code>catch (IOException | SQLException | Exception ex) {\n      ex = new Exception();\n      System.out.println(ex.getMessage());\n}\ncatch (IOException | SQLException | Exception ex) {\n     throw new MyException(ex.getMessage());\n     System.out.println(ex);\n}\ncatch(IOException | SQLException | Exception ex){\n         System.out.println(ex);\n     throw new MyException(ex.getMessage());\n}\n</code></pre>\n<p>Out of the above three catch blocks, which ones are CORRECT:</p>\n<p>a. 1 and 2\nb. 2 and 3\nc. 1 and 3</p>", "options": [{"option": "c only", "correct": false}, {"option": "b,c", "correct": true}, {"option": "a only", "correct": false}, {"option": "b only", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the below statements are correct:</p>\n\n<ol>\n\t<li>All Java Collection classes are fail-fast</li>\n\t<li>Iterator returned by ConcurrentHashMap is a fail-safe</li>\n\t<li>Errors in the fail-fast systems are immediately exposed</li>\n\t<li>Iterators returned by ArrayList and HashMap are all fail-safe in nature</li>\n</ol>", "options": [{"option": "1 only", "correct": false}, {"option": "2,3", "correct": true}, {"option": "3,4", "correct": false}, {"option": "All ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements is correct:</p>\n\n<ol>\n\t<li>Queue, Connection, List, Set are all abstract classes</li>\n\t<li>Queue, Connection are abstract classes</li>\n\t<li>List, Set are interfaces</li>\n\t<li>Queue, Connection, List, Set are interfaces</li>\n</ol>", "options": [{"option": "4", "correct": false}, {"option": "1", "correct": false}, {"option": "3 & 4", "correct": true}, {"option": "2", "correct": false}], "level": "Easy"}, {"question": "<p>*<em>Statement 1: *</em>If o1.hashCode() == o2.hashCode is true, then o1.equals(o2) will always be true.</p>\n<p>*<em>Statement 2: *</em>If o1.equals(o2), then o1.hashCode() == o2.hashCode() should always be true.</p>", "options": [{"option": "Statement 1 and 2 are true", "correct": false}, {"option": "Statement 1 is true", "correct": false}, {"option": "Statement 2 is true", "correct": true}, {"option": "Statement 1 and 2 are false", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the below statements are not true about Spring Frameworks:</p>\n<ol>\n<li>Aspect-oriented programming: a rapid application development solution\nModel\u2013view\u2013controller: an HTTP- and servlet-based framework</li>\n<li>Spring Boot is for creating stand-alone, production-grade Applications that you can \"just run\".</li>\n<li>Model-view-controller: provides hooks for RESTful Web services.</li>\n<li>Model-view-controller: uses Struts for providing hooks for extension and customization for web application</li>\n</ol>", "options": [{"option": "2,3", "correct": false}, {"option": "1,2,3", "correct": false}, {"option": "1,4", "correct": true}, {"option": "4 ", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of the program?</p>\n<pre class=\"prettyprint\"><code>public class Foo \n{  \n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.out.println( \"Finally\" ); \n        } \n    } \n}\n</code></pre>", "options": [{"option": "Finally", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "The code runs with no output", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output?</p>\n<pre class=\"prettyprint\"><code>class test\n{\n public static void main(String[] args)\n{\nDate d = new Date(2011343412345L);\nDateFormat df = new DateFormat();\nSystem.out.println(df.format(d));\n}\n}\n</code></pre>", "options": [{"option": " An exception is running at runtime", "correct": false}, {"option": " 2011343412345L", "correct": false}, {"option": " 26 Sep, 2033", "correct": false}, {"option": " A compile time error", "correct": true}], "level": "Easy"}, {"question": "<p>Which code determines the int value data closer to, but not greater than, a double value b?</p>", "options": [{"option": "int data = (int) Math.floor(b);", "correct": true}, {"option": " int data = (int) Math.abs(b);", "correct": false}, {"option": "int data = (int) Math.ceil(b);", "correct": false}, {"option": "int data = (int) Math.min(b);", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of the given code? </p>\n<pre class=\"prettyprint\"><code>public class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\");  \n        } \n        catch (RuntimeException ex) /* Line 10 */\n        { \n            System.out.print(\"B\"); \n        } \n        catch (Exception ex1) \n        { \n            System.out.print(\"C\"); \n        } \n        finally \n        {\n            System.out.print(\"D\"); \n        } \n        System.out.print(\"E\"); \n    } \n    public static void badMethod() \n    { \n        throw new RuntimeException(); \n    } \n}\n\n</code></pre>", "options": [{"option": "BD", "correct": false}, {"option": "BCD", "correct": false}, {"option": "BDE", "correct": true}, {"option": "B", "correct": false}], "level": "Medium"}, {"question": "<p>What design pattern best describes the Publish/Subscribe messaging ?</p>\n<ol>\n<li>Proxy</li>\n<li>Bridge</li>\n<li>Observer</li>\n<li>Builder</li>\n</ol>", "options": [{"option": "4", "correct": false}, {"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is NOT considered a way in message acknowledgement?</p>\n<ol>\n<li>AUTO_ACKNOWLEDGE</li>\n<li>RECEIVER_ACKNOWLEDGE</li>\n<li>CLIENT_ACKNOWLEDGE</li>\n<li>DUPS_OK_ACKNOWLEDGE</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}, {"option": "2", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is NOT a JMS message valid body format? </p>\n<ol>\n<li>ByteMessage </li>\n<li>ObjectMessage </li>\n<li>CharMessage</li>\n<li>TextMessage</li>\n</ol>", "options": [{"option": "3", "correct": true}, {"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statement IS incorrect?</p>\n<ol>\n<li>\n<p>Java ThreadLocal is used to create thread-local variables.</p>\n</li>\n<li>\n<p>jStack is a tool to take Thread dump </p>\n</li>\n<li>\n<p>jConsole can be used to check Threads running in VM </p>\n</li>\n<li>\n<p>jVisualVM is used to check open JMX ports</p>\n</li>\n</ol>", "options": [{"option": "2", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output when you pass Congratulations to below method</p>\n<pre class=\"prettyprint\"><code>static String recursiveMethod(String str)\n    {\n         if ((null == str) || (str.length() &lt;= 1))\n         {\n                return str;\n         }\n\n         return recursiveMethod(str.substring(1)) + str.charAt(0);\n    }\n\n</code></pre>", "options": [{"option": "snoitalutargnoC", "correct": true}, {"option": "Congratulations", "correct": false}, {"option": "noitalutargnoC", "correct": false}, {"option": "Compile Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code ?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class FailFastIteratorExample \n{       \n    public static void main(String[] args) \n    {\n        ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n        list.add(14);         \n        list.add(28);         \n        Iterator&lt;Integer&gt; it = list.iterator();         \n        while (it.hasNext())\n        {\n            Integer integer = (Integer) it.next();             \n            list.add(42);    \n        }\n    }    \n}\n</code></pre>", "options": [{"option": "84", "correct": false}, {"option": "42", "correct": false}, {"option": "ConcurrentModificationException", "correct": true}, {"option": "Compilation Error", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the following code?</p>\n<pre class=\"prettyprint\"><code>public class Operations\n{\n    static int methodOne(int i)\n    {\n        return methodTwo(i *= 6);\n    }\n\n    static int methodTwo(int i)\n    {\n        return methodThree(i /= 6);\n    }\n\n    static int methodThree(int i)\n    {\n        return methodFour(i -= 6);\n    }\n\n    static int methodFour(int i)\n    {\n        return i += 66;\n    }\n\n    public static void main(String[] args)\n    {\n        System.out.println(methodOne(6));\n    }\n}\n\n</code></pre>", "options": [{"option": "6", "correct": false}, {"option": "0", "correct": false}, {"option": "60", "correct": false}, {"option": "66", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the output of the following program ?</p>\n<pre class=\"prettyprint\"><code>class A\n{\n    int r = 1;\n}\n\nclass B extends A\n{\n    int q = 20;\n}\n\nclass C extends B\n{\n    int r = 30;\n}\n\npublic class Test\n{\n    public static void main(String[] args)\n    {\n        A a = new B();   \n        B b = (B) a;     \n        C c = (C) b;    \n        System.out.println(c.r);\n    }\n}\n</code></pre>", "options": [{"option": "ClassCastException", "correct": true}, {"option": "20", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "30", "correct": false}], "level": "Medium"}, {"question": "<p>What will the following program output ?</p>\n<pre class=\"prettyprint\"><code>package com;\nclass Animal {\npublic void printName(){\nSystem.out.println(\"Animal\");\n}\n}\npackage exam;\nimport com.Animal;\npublic class Cat extends Animal {\npublic void printName(){\nSystem.out.println(\"Cat\");\n}\n}\npackage exam;\nimport com.Animal;\npublic class Test {\npublic static void main(String[] args){\nAnimal a = new Cat();\na.printName();\n}\n}\n\n</code></pre>", "options": [{"option": "Animal", "correct": false}, {"option": "Cat", "correct": false}, {"option": "Animal Cat", "correct": false}, {"option": "Compilation Error", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the output of the following code?</p>\n<pre class=\"prettyprint\"><code>public class A {\n int add(int i, int j){\n return i+j;\n}\n}\npublic class B extends A{\n public static void main(String argv[]){\n short s = 9;\n System.out.println(add(s,6));\n }\n}\n</code></pre>", "options": [{"option": "Compile fail due to error on line  no 2", "correct": false}, {"option": "Compile fail due to error on line  no 9", "correct": true}, {"option": "Compile fail due to error on line  no 8", "correct": false}, {"option": "15", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements below is INCORRECT related to Strings in Java ?</p>", "options": [{"option": "String objects can be stored in String Constant Pool", "correct": false}, {"option": "String objects can be stored in Heap", "correct": false}, {"option": " s1 and s2 are two strings; s1.intern() == s2.intern() can be faster than s1.equals(s2). ", "correct": false}, {"option": "intern() method is used to create an exact copy of string object from constant pool to Heap", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the below code ?</p>\n<pre class=\"prettyprint\"><code>public class Stringfied\n{\n    public static void main(String[] args)\n    {\n        String s1 = new String(\"Internationalization\");\n        String s2 = s1.intern();      \n        System.out.println(s1 == s2);       \n        System.out.println(s1.equals(s2));    \n    }\n}\n</code></pre>", "options": [{"option": "true true", "correct": false}, {"option": "false false", "correct": false}, {"option": "false true", "correct": true}, {"option": "true false", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following constructs are not allowed by JAVA language?</p>\n<p>A.  Nested Synchronized Blocks</p>\n<pre class=\"prettyprint\"><code>synchronized (this)\n{\n    synchronized (this)\n    {\n    }\n}\n</code></pre>\n<p>B. Multiple Synchronized Blocks</p>\n<pre class=\"prettyprint\"><code> void Method()\n    {\n        synchronized (this)\n        {\n        }\n        synchronized (this)\n        {         \n        }\n    }\n</code></pre>\n<p>C. Synchronized Block in Constructor</p>\n<pre class=\"prettyprint\"><code>class Demo\n{\n    public Demo()\n    {\n        synchronized (this)\n        {\n            //synchronized block inside a constructor\n        }\n    }\n}\n</code></pre>\n<p>D. Synchronized Instance initializer</p>\n<pre class=\"prettyprint\"><code>     synchronized int value;\n</code></pre>", "options": [{"option": "A only", "correct": false}, {"option": "C,D", "correct": false}, {"option": "A,B,C", "correct": false}, {"option": "D only", "correct": true}], "level": "Easy"}, {"question": "<p>Which statement is TRUE related to code snippet below:</p>\n<pre class=\"prettyprint\"><code>public static void main(String[] args)\n{\n        Random random = new Random();\n        random.ints().limit(7).forEach      (System.out::println);       \n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Prints seven random numbers", "correct": true}, {"option": "Prints a random number less than 7", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>Predict the output of the given code snippet :</p>\n<pre class=\"prettyprint\"><code>public static void main(String[] args)\n{        \n        List&lt;String&gt; strings = Arrays.asList(\"wors\", \"in\", \"a\", \"\", \"list\",\"empty\", \"\");\n        int count = (int) strings.parallelStream().filter(string -&gt; string.isEmpty()).count();\n        System.out.println(count);\n}\n</code></pre>", "options": [{"option": "Compilation Error because \"\"string\"\" after filter should be \"\"strings\"\"", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is INCORRECT related to RESTful webservices:</p>\n<ol>\n<li>Representational State Transitions (REST) is an architectural style</li>\n<li>JAX-RS is an API designed to develop applications that use the REST</li>\n<li>JERSEY is one of the implementation of REST</li>\n<li>. Every interaction with a resource is stateless</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>JAXRS Annotations provided are - </p>\n<ol>\n<li>@Path</li>\n<li>@GET</li>\n<li>@HEAD</li>\n<li>@PathParam</li>\n<li>@MatrixParam</li>\n<li>@HeaderParam, </li>\n<li>@CookieParam,  </li>\n<li>@FormParam, </li>\n<li>@QueryParam</li>\n</ol>", "options": [{"option": "All are valid", "correct": true}, {"option": "1,2,3,4,9", "correct": false}, {"option": "1,2,4,7,8,9", "correct": false}, {"option": "1,4,9", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the beans ARE thread safe ?</p>\n<ol>\n<li>Singleton</li>\n<li>Prototype</li>\n<li>Request</li>\n<li>Session</li>\n</ol>", "options": [{"option": "1,2,3", "correct": false}, {"option": "1,2", "correct": false}, {"option": "3,4", "correct": false}, {"option": "2,3,4", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following IS true about inheritance in Java?</p>\n\n<ol>\n\t<li>Private methods are final</li>\n\t<li>Protected members are accessible within a package</li>\n\t<li>Protected methods are final</li>\n\t<li>We cannot override private methods</li>\n</ol>", "options": [{"option": "1 ", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}], "level": "Medium"}, {"question": "<p>Predict the output of the following program :</p>\n<pre class=\"prettyprint\"><code>class Grandparent {\n    public void Print() {\n        System.out.println(\"Grandparent's Print()\");\n    }\n}\n\nclass Parent extends Grandparent {\n    public void Print() {\n        System.out.println(\"Parent's Print()\");\n    }\n}\n\nclass Child extends Parent {\n    public void Print() {\n        super.super.Print(); \n        System.out.println(\"Child's Print()\");\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Child c = new Child();\n        c.Print();\n    }\n}\n</code></pre>", "options": [{"option": " Compiler Error in super.super.Print()", "correct": true}, {"option": " Grandparent's Print() Parent's Print() Child's Print()", "correct": false}, {"option": " Runtime Error", "correct": false}, {"option": "Grandparents'Print()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is not a correct statement?</p>\n<ol>\n<li>A recursive method must have a base case.</li>\n<li>Recursion always uses stack.</li>\n<li>Recursive methods are faster that programmers written loop to call the function repeatedly using a stack.</li>\n<li>Recursion is managed by Java\u2019s Run \u2013 Time environment.</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the following code snippet:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n     class Collection_iterators {\n         public static void main(String args[]) {\n             ListIterator a = list.listIterator();\n                 if(a.previousIndex()! = -1)\n                     while(a.hasNext())\n                  System.out.print(a.next() + \" \");\n                 else\n                    System.out.print(\"EMPTY\");\n         }\n     }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "-1", "correct": false}, {"option": "EMPTY", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following program ?</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n     public class genericstack &lt;E&gt; {\n        Stack &lt;E&gt; stk = new Stack &lt;E&gt;();\n public void push(E obj) {\n            stk.push(obj);\n  }\n public E pop() {\n             E obj = stk.pop();\n      return obj;\n }\n     }\n     class Output {\n         public static void main(String args[]) {\n             genericstack &lt;String&gt; gs = new genericstack&lt;String&gt;();\n             gs.push(\"Hello\");\n             System.out.print(gs.pop() + \" \");\n             genericstack &lt;Integer&gt; gs = new genericstack&lt;Integer&gt;();\n             gs.push(36);\n             System.out.println(gs.pop());\n         }\n    }\n\n</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "Hello", "correct": false}, {"option": "36", "correct": false}, {"option": "Hello 36", "correct": true}], "level": "Easy"}, {"question": "<p>Predict the output of the following program:</p>\n<pre class=\"prettyprint\"><code> class exception_handling {\n         public static void main(String args[]) {\n            try {\n                 int i, sum;\n                 sum = 10;\n                for (i = -1; i &lt; 3 ;++i)\n                     sum = (sum / i);\n             }\n            catch(ArithmeticException e) {\n          System.out.print(\"0\");         \n             } \n             System.out.print(sum);\n         }\n     }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "05", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the following program ?</p>\n<pre class=\"prettyprint\"><code> class access{\n        public int x;\n  static int y;\n        void cal(int a, int b){\n             x +=  a ;\n            y +=  b;\n         }        \n     }    \n    class static_specifier {\n        public static void main(String args[])\n         {\n            access obj1 = new access();\n             access obj2 = new access();   \n             obj1.x = 0;\n            obj1.y = 0;\n             obj1.cal(1, 2);\n             obj2.x = 0;\n             obj2.cal(2, 3);\n             System.out.println(obj1.x + \" \" + obj2.y);     \n         }\n    }\n</code></pre>", "options": [{"option": "1 2", "correct": false}, {"option": "2 3", "correct": false}, {"option": "15", "correct": true}, {"option": "3 2", "correct": false}], "level": "Easy"}, {"question": "<p>What is the range of 'byte' data type?</p>", "options": [{"option": "-128 to +127", "correct": true}, {"option": "-128 to +128", "correct": false}, {"option": "-255 to +255", "correct": false}, {"option": "-256 to +255", "correct": false}], "level": "Very-Easy"}, {"question": "<p>What is the declaration hoisting in JS?</p>", "options": [{"option": "language feature which makes all the declared variables initialized to null", "correct": false}, {"option": "language feature which allows you to use function declared in another file without importing it", "correct": false}, {"option": "language feature which makes functions declared in the particular way usable before their actual declaration", "correct": true}, {"option": "language feature which allows you to use functions declared inside the body of another function outside of that body", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is not a keyword used to introduce a variable in JS</p>", "options": [{"option": "const", "correct": false}, {"option": "decl", "correct": true}, {"option": "let", "correct": false}, {"option": "var", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the result of the following expression: ('a' || 15) &amp;&amp; 'b' ?</p>", "options": [{"option": "true", "correct": false}, {"option": "'a'", "correct": false}, {"option": "'b'", "correct": true}, {"option": "false", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the result of the following expression: typeof((('a' &amp;&amp; 13) * 4) &amp;&amp; null) ?</p>", "options": [{"option": "'undefined'", "correct": false}, {"option": "'null'", "correct": false}, {"option": "'object'", "correct": true}, {"option": "'number'", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the result of the following expression: typeof(typeof(null)) ?</p>", "options": [{"option": "'string'", "correct": true}, {"option": "'object'", "correct": false}, {"option": "'null'", "correct": false}, {"option": "'undefined'", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the result of the following expression: ('1' == 1) &amp;&amp; ('1' === 1) ?</p>", "options": [{"option": "true", "correct": false}, {"option": "type error", "correct": false}, {"option": "'1'", "correct": false}, {"option": "false", "correct": true}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>Does JS support type inheritance?</p>", "options": [{"option": "Yes", "correct": true}, {"option": "Only when using Babel", "correct": false}, {"option": "Only since ES6", "correct": false}, {"option": "No", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What method do you use to chain promises?</p>", "options": [{"option": "Promise.all", "correct": false}, {"option": "then", "correct": true}, {"option": "chain", "correct": false}, {"option": "catch", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What does a function marked with async keyword return?</p>", "options": [{"option": "AsyncResult", "correct": false}, {"option": "Depending on function implementation", "correct": false}, {"option": "Promise", "correct": true}, {"option": "Resolution", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What keyword do you use to compose functions returning a Promise?</p>", "options": [{"option": "Promise.all", "correct": false}, {"option": "wait", "correct": false}, {"option": "await", "correct": true}, {"option": "comp", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What happens if you throw an uncaught exception inside of an async function?</p>", "options": [{"option": "The Promise returned by the function gets rejected", "correct": true}, {"option": "Depending on the implementation", "correct": false}, {"option": "Error is propagated to the caller so it can be caught by a catch block", "correct": false}, {"option": "Nothing, exception is ignored", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What value does \"this\" get when a function declared using the arrow operator is called?</p>", "options": [{"option": "Error is thrown when \"this\" is accessed", "correct": false}, {"option": "Value of \"this\" in the scope where the function was declared", "correct": true}, {"option": "Value of \"this\" of the caller", "correct": false}, {"option": "undefined", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>Can you store an arbitrary 64-bit integral number in the JS Number type?</p>", "options": [{"option": "No", "correct": true}, {"option": "In all browsers except Internet Explorer", "correct": false}, {"option": "Only in Chrome browser", "correct": false}, {"option": "Yes", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What happens when you access a property of undefined variable?</p>", "options": [{"option": "undefined is returned", "correct": false}, {"option": "null is returned", "correct": false}, {"option": "Error is thrown", "correct": true}, {"option": "Neither of these", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What function do you use to summarize an array of number?</p>", "options": [{"option": "reduce", "correct": true}, {"option": "map", "correct": false}, {"option": "filter", "correct": false}, {"option": "sum", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What function do you use to remove elements from the instance of an array?</p>", "options": [{"option": "slice", "correct": false}, {"option": "splice", "correct": true}, {"option": "remove", "correct": false}, {"option": "filter", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>Which of the following is immutable in JS?</p>", "options": [{"option": "Object declared in function marked with immutable keyword", "correct": false}, {"option": "Object prototype", "correct": false}, {"option": "string", "correct": true}, {"option": "Array", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is a generator function?</p>", "options": [{"option": "Function where you cannot use keyword yield", "correct": false}, {"option": "Function which generates dynamic code executed by virtual machine", "correct": false}, {"option": "There is no such thing in the JavaScript", "correct": false}, {"option": "Function which upon call returns an object with next and throw methods", "correct": true}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>Does JS support pass a function as an argument of another function?</p>", "options": [{"option": "Only if the argument name is callback", "correct": false}, {"option": "No", "correct": false}, {"option": "Yes", "correct": true}, {"option": "Only if the function is called using the apply function", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What does the function Object.keys return?</p>", "options": [{"option": "None of these", "correct": false}, {"option": "Array of strings that allows you to \"lock\" the object", "correct": false}, {"option": "Array of strings you can use later to decrypt the object's memory", "correct": false}, {"option": "Array of strings containing names of object's own enumerable properties", "correct": true}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the difference between variables declared using let and var?</p>", "options": [{"option": "variables declared using let can be used before declaration whilst var variables can't", "correct": false}, {"option": "var declares a variable in the global scope while let declares a variable in the function scope", "correct": false}, {"option": "let can be used to declare variables scoped in nearest enclosing block", "correct": true}, {"option": "var can be used to declare variables scoped in nearest enclosing block", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What happens if you assign value to an undeclared variable (e. g. a = 32)</p>", "options": [{"option": "The statement is ignored", "correct": false}, {"option": "An error is thrown", "correct": false}, {"option": "A new property is created on the global object", "correct": true}, {"option": "A new variable is declared like if var a = 32; was used", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>You have an object instance called myObject with a property myValue. What happens if you assign a value to MyValue (e.g. myObject.MyValue = 32)?</p>", "options": [{"option": "An error is thrown because MyValue is not declared", "correct": false}, {"option": "A new property called MyValue is added to the prototype from which the object is derived", "correct": false}, {"option": "A new property called MyValue is added just to this instance of the object, other instances derived from the same class are not affected", "correct": true}, {"option": "JS is case-insensitive so the value is correctly stored to myObject.myValue", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>You have a function accepting a number as a parameter and you want to check whether it is defined and not null before processing it. What is problematic on the following test if (!param) { \u2026 }?</p>", "options": [{"option": "An error will be thrown because param is not a boolean value", "correct": false}, {"option": "A number cannot be null or undefined, the test is meaningless", "correct": false}, {"option": "Nothing, the test is correct", "correct": false}, {"option": "If 0 is a valid value of param, it will be captured by the condition as invalid", "correct": true}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is the result of a following statement a = +'32'; ?</p>", "options": [{"option": "An error is thrown, because + is a numeric operator and cannot be used on strings", "correct": false}, {"option": "An error is thrown, because left-hand side of the + operator is not specified", "correct": false}, {"option": "A number with value 32", "correct": true}, {"option": "A new copy of the string with a value '32'", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What is TypeScript?</p>", "options": [{"option": "A library adding runtime type checking to JavaScript code", "correct": false}, {"option": "A subset of JavaScript language that allows runtime type checking", "correct": false}, {"option": "A superset of JavaScript language adding static type checking compiled to plain JavaScript", "correct": true}, {"option": "A new typed language with its own execution engine similar to JavaScript", "correct": false}, {"option": "", "correct": false}], "level": ""}, {"question": "<p>What should be the output of the following code?</p>\n<pre class=\"prettyprint\"><code>class AirPlane {\n    public AirPlane() throws IOException {\n        System.out.print(\"AirPlane\");\n        throw new IOException();\n    }\n}\nclass AirJet extends AirPlane {\n    public AirJet() throws IOException {\n     try {\n        super();\n     } catch (IOException e) {\n        System.out.print(\"IOException is thrown in AirJet\");\n        }\n    }\n}\npublic class Tester {\n    public static void main(String args[]) {\n        try {\n         new AirJet();\n        } catch (IOException e) {\n            System.out.print(\"IOException is thrown in Tester\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "\"AirPlaneIOException is thrown in AirJet\" will be printed.", "correct": false}, {"option": " \"AirPlaneIOException is thrown in AirJetIOException is thrown in Tester\" will be printed.", "correct": false}, {"option": "\"AirPlaneIOException is thrown in Tester\" will be printed. ", "correct": false}, {"option": "Compile error. ", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What should be the output of the following code?</p>\n<pre class=\"prettyprint\"><code>class AirPlane {\n    public AirPlane() throws IOException {\n        System.out.print(\"AirPlane\");\n        throw new IOException();\n    }\n}\nclass AirJet extends AirPlane {\n    public AirJet() throws IOException {\n     try {\n        super();\n     } catch (IOException e) {\n        System.out.print(\"IOException is thrown in AirJet\");\n        }\n    }\n}\npublic class Tester {\n    public static void main(String args[]) {\n        try {\n         new AirJet();\n        } catch (IOException e) {\n            System.out.print(\"IOException is thrown in Tester\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "\"AirPlaneIOException is thrown in AirJet\" will be printed.", "correct": false}, {"option": " \"AirPlaneIOException is thrown in AirJetIOException is thrown in Tester\" will be printed.", "correct": false}, {"option": "\"AirPlaneIOException is thrown in Tester\" will be printed. ", "correct": false}, {"option": "Compile error. ", "correct": true}], "level": "Easy-Medium"}, {"question": "<p>What is NaN, what is its type?</p>", "options": [{"option": "NaN", "correct": false}, {"option": "string", "correct": false}, {"option": "null", "correct": false}, {"option": "number", "correct": true}], "level": "Medium"}, {"question": "<p>Which phases of event workflow are affected by following code</p>\n<p><code>\nevent.stopPropagation();\n</code></p>", "options": [{"option": "Capture", "correct": false}, {"option": "Target", "correct": false}, {"option": "Bubbling", "correct": true}], "level": "Easy"}, {"question": "<p>What is a potential problem with this code?</p>\n<p><code></code></p><code>\n<p>var list = readList();</p>\n<p>var nextListItem = function() {\n    var item = list.pop();</p>\n<pre></pre></code><code>if (item) {\n    // process the list item...\n    nextListItem();\n}\n</code>\n<p>};</p>\n<p><code></code></p>", "options": [{"option": "The code is incorrect", "correct": false}, {"option": "The code would newer stop working", "correct": false}, {"option": "The code could produce stack overflow on large list size", "correct": true}, {"option": "The code would process only the last element", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JS (ES6) code?</p>\n<p><code>\n(typeof (new (class { class () {} })))\n</code></p>", "options": [{"option": "undefined", "correct": false}, {"option": "Error", "correct": false}, {"option": "function", "correct": false}, {"option": "object", "correct": true}], "level": "Medium"}, {"question": "<p>What is NaN, what is its type?</p>", "options": [{"option": "NaN", "correct": false}, {"option": "string", "correct": false}, {"option": "null", "correct": false}, {"option": "number", "correct": true}], "level": "Medium"}, {"question": "<p>Which phases of event workflow are affected by following code</p>\n<p><code>\nevent.stopPropagation();\n</code></p>", "options": [{"option": "Capture", "correct": false}, {"option": "Target", "correct": false}, {"option": "Bubbling", "correct": true}], "level": "Easy"}, {"question": "<p>What is a potential problem with this code?</p>\n<p><code></code></p><code>\n<p>var list = readList();</p>\n<p>var nextListItem = function() {\n    var item = list.pop();</p>\n<pre></pre></code><code>if (item) {\n    // process the list item...\n    nextListItem();\n}\n</code>\n<p>};</p>\n<p><code></code></p>", "options": [{"option": "The code is incorrect", "correct": false}, {"option": "The code would newer stop working", "correct": false}, {"option": "The code could produce stack overflow on large list size", "correct": true}, {"option": "The code would process only the last element", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output of the following JS (ES6) code?</p>\n<p><code>\n(typeof (new (class { class () {} })))\n</code></p>", "options": [{"option": "undefined", "correct": false}, {"option": "Error", "correct": false}, {"option": "function", "correct": false}, {"option": "object", "correct": true}], "level": "Medium"}, {"question": "<p>Lol Question</p>", "options": [{"option": "a", "correct": true}, {"option": "b", "correct": false}, {"option": "c", "correct": false}], "level": "Easy"}, {"question": "<p>waah waah</p>", "options": [{"option": "a", "correct": true}, {"option": "b", "correct": false}], "level": "Easy"}, {"question": "<p>take me awayyyyyyyyyyyyyyyyyyy</p>", "options": [{"option": "a", "correct": true}, {"option": "b", "correct": false}, {"option": "c", "correct": false}, {"option": "d", "correct": false}], "level": "Easy"}, {"question": "<p>Identify the True\u00a0statement?</p>", "options": [{"option": "a. Sun rises in the East.", "correct": true}, {"option": "b. Sun rises in the West.", "correct": false}, {"option": "c. Sun rises in the South", "correct": false}, {"option": "d. Sun rises in the North", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var result = [[0, 1], [2, 3], [4, 5]].reduce(function(a, b) \n{\n     return a.concat(b);\n});\n\n</code></pre>", "options": [{"option": "[0, 1, 2, 3, 4, 5]", "correct": true}, {"option": "[0, 2, 4, 1, 3, 5]", "correct": false}, {"option": "[5, 4, 3, 2, 1, 0]", "correct": false}, {"option": "[3, 2, 1, 0, 4, 5]", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var funcs = []\n\nfor (let i = 0; i &lt; 2; i += 1) {\n  funcs[i] = function () {\n    console.log(i)\n  }\n}\n\nfor (var k = 0; k &lt; 2; k += 1) {\n  funcs[k]()\n}\n\n</code></pre>", "options": [{"option": "01", "correct": true}, {"option": "10", "correct": false}, {"option": "11", "correct": false}, {"option": "00", "correct": false}], "level": "Medium"}, {"question": "<p>What would be type of variable \u2018result\u2019 if we execute the below code .</p>\n<pre class=\"prettyprint\"><code>&lt;div id=\u201d'container'\u201d&gt;&lt;/div&gt;\nvar result =  typeof document.getElementById('container') on console.\n</code></pre>", "options": [{"option": "Array", "correct": false}, {"option": "String", "correct": false}, {"option": "DOM", "correct": false}, {"option": "Object", "correct": true}], "level": "Hard"}, {"question": "<p>Which one of the following is suitable for the below statement: </p>\n<pre class=\"prettyprint\"><code>document.getElementById('elementId').innerHTML = \"New Value\"\n</code></pre>", "options": [{"option": "The browser has to parse the HTML", "correct": false}, {"option": "It removes the child element of elementId", "correct": false}, {"option": "Updates the DOM with the value \u201cNew Value\u201d", "correct": true}, {"option": "Updates the DOM with the value \u201cExisting Value\u201d", "correct": false}], "level": "Easy"}, {"question": "<p>What is wrong with the following Java 8 code?</p>\n<pre class=\"prettyprint\"><code>List&lt;Foo&gt; removeInactiveFoos(List&lt;Foo&gt; allFoos) {\n    return allFoos.stream().parallel()\n        .filter(foo -&gt; foo.isActive)\n        .collect(Collectors.toList());\n}</code></pre>", "options": [{"option": "It will not compile.", "correct": false}, {"option": "The method's name does not reflect its behavior.", "correct": false}, {"option": "Using a parallel stream on the list is wasteful.", "correct": true}, {"option": "Using a parallel stream on the list will result in race conditions and indeterminate behavior.", "correct": false}, {"option": "Nothing.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>Why will the following Java code not compile?</p>\n<pre class=\"prettyprint\"><code>Integer first = 1;\nint second = new Integer(2);\nInteger third = new Integer(3);\nInteger fourth = Integer.valueOf(4);\n\nList&lt;int&gt; numbers = new ArrayList&lt;&gt;(3);\nnumbers.add(3);\nnumbers.add(0,1);\nnumbers.add(1,2);\nnumbers.add(4);\n\nnumbers.forEach(num -&gt; System.out.println(num));\n</code></pre>", "options": [{"option": "It attempts to use a primitive as a type parameter in a generic class.", "correct": true}, {"option": "It attempts to add more values  than there is space in the list.", "correct": false}, {"option": "It attempts to assign a primitive to an object variable.", "correct": false}, {"option": "It attempts to assign an object to a primitive variable.", "correct": false}, {"option": "Nothing is wrong. The code will compile fine.", "correct": false}], "level": "Easy-Medium"}, {"question": "<p>What is the output for the following JS code:</p>\n<p><code>\nvar textData = '1';\n(function testLog(){\n    console.log(textData)\n    var textData = '2'\n})();\n</code></p>", "options": [{"option": "SyntaxError", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "No output", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output for the following JS code</p>\n<p><code>\nvar x = 0;\nvar test = function () {\n    console.log(\"Test!\");\n    test = function () {\n        console.log(\"Test\" + x + \"!\"); x++;\n    };\n};</code></p><code>\n</code><p><code>for(var i = 0; i &lt; 3; i++) {\n    test();\n} \n</code></p>", "options": [{"option": "Test!\r\nTest!\r\nTest!", "correct": false}, {"option": "Test!\r\nTest1!\r\nTest2!", "correct": false}, {"option": "Test1!\r\nTest2!\r\nTest3!", "correct": false}, {"option": "Test!\r\nTest0!\r\nTest1!", "correct": true}, {"option": "SyntaxError", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JS (ES6) code?</p>\n<p><code>\nlet array = [ ];\nfor (let { a = 2, b } of [{ a: 1 }, 2, { b }]) { \n  array.push(a, b);\n}\narray;\n</code></p>", "options": [{"option": "[2, { a: 1 }, 2, 2, 2, { b }]", "correct": false}, {"option": "[1, undefined, 2]", "correct": false}, {"option": "[{ a: 1 }, 2, { b }]", "correct": false}, {"option": "Error", "correct": true}], "level": "Hard"}, {"question": "<p><strong>Junit</strong> belongs to which one of the following testing frameworks ?</p>", "options": [{"option": "Acceptance Testing", "correct": false}, {"option": "Functional Testing", "correct": false}, {"option": "Regression Testing", "correct": true}, {"option": "Integration Testing", "correct": false}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>class Rectangle\n{\n    int length, width;\n    Rectangle(int length, int width)\n    {\n        this.length =length;\n        this.width = width;\n    }\n    void print()\n    {\n        System.out.println(\"length of rectangle = \" + length +\n                           \", width of rectangle = \" + width);\n    }\n}\nclass Main\n{\n    public static void swap(Rectangle r1, Rectangle r2)\n    {\n        Rectangle temp = r1;\n        r1 = r2;\n        r2 = temp;\n    }\n    public static void main(String[] args)\n    {\n        Rectangle r1 = new Rectangle(101, 1);\n        Rectangle r2 = new Rectangle(202,2);\n        swap(r1, r2);\n        r1.print();\n        r2.print();\n    }\n}\n</code></pre>\n\u200bWhat\u200b \u200bis\u200b \u200bthe\u200b \u200boutput\u200b \u200bof\u200b \u200bthe\u200b \u200babove\u200b \u200bprogram\u200b \u200b?<p></p>", "options": [{"option": "length of rectangle = 101, width of rectangle = 1\r\nlength of rectangle = 202, width of rectangle = 2", "correct": true}, {"option": "length of rectangle = 201, width of rectangle = 1\r\nlength of rectangle = 101, width of rectangle = 2", "correct": false}, {"option": "length of rectangle = 202, width of rectangle = 2\r\nlength of rectangle = 202, width of rectangle = 2", "correct": false}, {"option": "length of rectangle = 101, width of rectangle = 1\r\nlength of rectangle = 101, width of rectangle = 1", "correct": false}], "level": "Medium"}, {"question": "<p></p><pre class=\"prettyprint\"><code>public class Sample\n{\npublic static void main(String args[])\n{\nString s=\" Hacker earth \";\nSystem.out.println(s);\ns.trim();\nSystem.out.println(s.length());\n}\n}\n</code></pre>\nWhat is the output of the above program?<p></p>", "options": [{"option": "15", "correct": false}, {"option": "11", "correct": false}, {"option": "14", "correct": true}, {"option": "13", "correct": false}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>public class Example{\npublic static void main(String[] args){\nfor(int p=0,q=0;p+q&lt;5;p++,++q){\nSystem.out.print(p^q);\n}\n}}\n</code></pre>\nWhat will be the output of the above program?<p></p>", "options": [{"option": "100", "correct": false}, {"option": "000", "correct": true}, {"option": "111", "correct": false}, {"option": "001", "correct": false}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>public class Loop {\npublic static void main(String[] args){\nint i=1;\nint j=5;\nfor(;;){\nSystem.out.println(j&gt;&gt;&gt;i);\n}\n}\n}\n</code></pre>\nPredict the output of the above program?<p></p>", "options": [{"option": "Infinite loop", "correct": true}, {"option": "Exception- limit reached", "correct": false}, {"option": "Stackoverflow", "correct": false}, {"option": "231231", "correct": false}], "level": "Medium"}, {"question": "<p>Identify the example for the syntax used to import a class to JSP ?</p>", "options": [{"option": "<%@ page import=\"java.util.List\" @%>", "correct": false}, {"option": "<% page import=\"java.util.List\" %>", "correct": false}, {"option": "<% page import=\"java.util.List\" @%>", "correct": false}, {"option": "<%@ page import=\"java.util.List\" %>", "correct": true}], "level": "Easy"}, {"question": "<p>Which among the following is true about <strong>garbage collection</strong>among the below statements?</p>", "options": [{"option": "All the eligible objects will be cleared by using the Runtime.gc command.", "correct": false}, {"option": "Mark and Sweep algorithm is used by Garbage collector", "correct": false}, {"option": "If object q refers to object p then p can\u2019t be garbage collected until q is cleared", "correct": true}, {"option": "Object in a living thread cannot garbage collected.", "correct": false}], "level": "Easy"}, {"question": "<p>In RESTFUL programming standpoint ,\n\u201cADD to CART\u201d in E-commerce is not an Idempotent\nfunction .  what does this mean?</p>", "options": [{"option": "Clicking on \u201cAdd to Cart\u201d more than once does not make any difference than\r\nclicking once", "correct": false}, {"option": "Multiple clicks adds multiple elements into cart", "correct": true}, {"option": "\u201cAdd to cart \u201c stops working after one item per IT is added", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which\u200b \u200bof\u200b \u200bthe\u200b \u200bbelow\u200b \u200bfollowing\u200b \u200bstatements\u200b \u200bis\u200b \u200bfalse\u200b \u200bregarding\u200b \u200bthe\u200b \u200bInterfaces concept\u200b \u200bin\u200b \u200bJava\u200b \u200b?</p>", "options": [{"option": "Same interface can be implemented by multiple classes.", "correct": false}, {"option": "Single class can also implement multiple interfaces", "correct": false}, {"option": "methods declared in interface are by default abstract.", "correct": false}, {"option": "We can create instance of interface but we can\u2019t make reference of it that refers to\r\nthe Object of its implementing class.", "correct": true}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>public class Test\n{\nstatic void method1(int arr[], int d, int n)\n{\nint i;\nfor (i = 0; i &lt; d; i++)\nmethod2(arr, n);\n}\nstatic void method2(int arr[], int n)\n{\nint i, temp;\ntemp = arr[0];\nfor (i = 0; i &lt; n - 1; i++)\narr[i] = arr[i + 1];\narr[i] = temp;\n}\npublic static void main(String args[])\n{\n    int a[]={1,2,3,4,5} ; int d=2; int n=5;\n    method1(a,d,n);\n    for(int i=0;i&lt;n;i++)\n    {\n        System.out.print(a[i]+\" \");\n    }\n}\n}\n</code></pre>\nWhat will be the output of the above program?<p></p>", "options": [{"option": "3 4 5 1 2 ", "correct": true}, {"option": "3 4 5 2 1", "correct": false}, {"option": "2 1 5 4 3", "correct": false}, {"option": "2 1 5 3 4", "correct": false}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>import java.util.*;\npublic class GFG\n{\npublic static void main(String[] args)\n{\nArrayList&lt;String&gt; mylist =new ArrayList&lt;String&gt;();\nmylist.add(\"red\");\nmylist.add(\"green\");\nmylist.add(\"blue\");\nmylist.add(\"yellow\");\nfor(int i=0;i&lt;mylist.size()-1;i++)\n{\nCollections.swap(mylist,i, i+1);\n}\nSystem.out.println(\"\"+ mylist);\n}\n}\n</code></pre>\nWhat is the output of the above program after execution?<p></p>", "options": [{"option": "Yellow blue green red", "correct": false}, {"option": "Red yellow green blue", "correct": false}, {"option": "Yellow red blue green", "correct": false}, {"option": "Green blue yellow red", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is not a function of Reflection API in Java?</p>", "options": [{"option": "It gives the information about the class to which the method belongs", "correct": false}, {"option": "We can invoke methods during the runtime of the program", "correct": false}, {"option": "We can get information about the public constructors of the class to which an\r\nobject belongs.", "correct": false}, {"option": "It provides abstraction and increases the performance of the program", "correct": true}], "level": "Easy"}, {"question": "<p></p><pre class=\"prettyprint\"><code>class Sample {\npublic static void main(String args[]) {\nSystem.out.println(foo());\n}\nstatic int foo()\n{\nstatic int x= 10;\nreturn x--;\n}\n}\n</code></pre>\nWhat is the output of the above Java program?<p></p>", "options": [{"option": "9", "correct": false}, {"option": "10", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation Error - Static Local variables not allowed in Java", "correct": true}], "level": "Easy"}, {"question": "<p>The methods or data members declared as <strong>__________</strong> are accessible\u200b \u200bwithin\u200b \u200bsame\npackage\u200b \u200bor\u200b \u200bsubclasses\u200b \u200bin\u200b \u200bdifferent\u200b \u200bpackage.</p>", "options": [{"option": "Private", "correct": true}, {"option": "Public ", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Default", "correct": false}], "level": "Easy"}, {"question": "<p>Identify the code which will return a valid JSON object ?</p>", "options": [{"option": "JSON.parse(\u2018({\u201cName\u201d: \u2018kavitha\u2019, \u201cage\u201d:\u201934\u2019})\u2019);", "correct": false}, {"option": "JSON.parse(\u2018({\u201cName\u201d: \u2018Escobar\u2019, \u201cage\u201d:\u201d12\u201d})\u2019);", "correct": false}, {"option": "JSON.parse(\u2018({\u201cName\u201d: \u201cDon\u201d, \u201cage\u201d:\u201950\u2019})\u2019);", "correct": false}, {"option": "JSON.parse(\u2018({\u201cName\u201d: \u201cJohn\u201d, \u201cage\u201d:17})\u2019);", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is <strong>Not</strong> a property of Daemon Thread?</p>", "options": [{"option": "They have the ability to make the JVM run even if all the threads stopped\r\nexecuting", "correct": true}, {"option": "The priority of daemon thread is least among all the threads", "correct": false}, {"option": "JVM does not stop even if all threads stops executing", "correct": false}, {"option": "It is useful for running tasks in the background", "correct": false}], "level": "Easy"}, {"question": "<p>Can we call the run() method instead of start() in Java (Threads)?</p>", "options": [{"option": "Yes, it will work as a thread.", "correct": false}, {"option": "Yes, but it will not work as a thread rather it will work as a normal object so there will not be context-switching between the threads.", "correct": true}, {"option": "No", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>The JDBC-ODBC bridge is ________________.</p>", "options": [{"option": "Three tiered  ", "correct": false}, {"option": "Multithreaded  ", "correct": true}, {"option": "Two tiered", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is <strong>Servlet Chaining</strong> in Java?</p>", "options": [{"option": "It is the last servlet in the chain that provides the output to the web browser.", "correct": false}, {"option": "It is a method in which the output of one servlet is piped into the next servlet.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "It is a method in which the output of one servlet is not piped into the next servlet.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following calls can be used to set the value \u201c123\u201d to the \u201cdata-object\u201d data attribute value in jQuery?</p>", "options": [{"option": "$elem.prop(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.attr(\u201cobject\u201d, \u201c123\u201d);", "correct": false}, {"option": "$elem.data(\u201cobject\u201d, \u201c123\u201d);", "correct": true}, {"option": "$elem.set(\u201cdata-object\u201d, \u201c123\u201d);", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is INCORRECT related to RESTful webservices:</p>\n<ol>\n<li>Representational State Transitions (REST) is an architectural style</li>\n<li>JAX-RS is an API designed to develop applications that use the REST</li>\n<li>JERSEY is one of the implementation of REST</li>\n<li>. Every interaction with a resource is stateless</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes in the library do not implement a design pattern:</p>\n<ol>\n<li>Singleton</li>\n<li>Proxy</li>\n<li>Iterator</li>\n<li>Observer</li>\n</ol>", "options": [{"option": "1, 2, and 3 ", "correct": false}, {"option": "2", "correct": false}, {"option": "1", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What happens if a class does not have name in Java?</p>", "options": [{"option": "It will have a destructor.  ", "correct": false}, {"option": "It will have a constructor.  ", "correct": false}, {"option": "It can not have a constructor or a destructor.", "correct": false}, {"option": "An error occurs.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following lists contains keywords related to Java?</p>", "options": [{"option": "class, if, void, long, Int, continue  ", "correct": false}, {"option": "goto, instanceof, native, finally, default, throws  ", "correct": false}, {"option": "try, virtual, throw, final, volatile, transient  ", "correct": true}, {"option": "strictfp, constant, super, implements, do  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration of a string in Java?</p>", "options": [{"option": "String s1 = null;  ", "correct": true}, {"option": "String s2 = 'null';  ", "correct": false}, {"option": "String s3 = (String) 'abc';  ", "correct": false}, {"option": "String s4 = (String) '\\ufeed';  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to retain the <strong>t</strong> thread in the <strong>run</strong> state?</p>", "options": [{"option": "t.start()    ", "correct": true}, {"option": "t.run()    ", "correct": false}, {"option": "t.setRun( )    ", "correct": false}, {"option": "t.yield()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following collection classes is used to link values with keys, and to order the keys according to their natural order?</p>", "options": [{"option": "java.util.HashSet   ", "correct": false}, {"option": "java.util.LinkedList   ", "correct": false}, {"option": "java.util.TreeMap   ", "correct": true}, {"option": "java.util.SortedSet   ", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Super\n    { \n        public int i = 0; \n\n        public Super(String text) /* Line 4 */\n        {\n            i = 1; \n        } \n    } \n\n    class Sub extends Super\n    {\n        public Sub(String text)\n        {\n            i = 2; \n        } \n\n        public static void main(String args[])\n        {\n            Sub sub = new Sub(\"Hello\"); \n            System.out.println(sub.i); \n        } \n    }\n</code></pre>", "options": [{"option": "0  ", "correct": false}, {"option": "1  ", "correct": false}, {"option": "2   ", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements are true for any concrete class implementing the java.lang.Runnable interface?</p>\n<ol>\n<li>We can extend the Runnable interface as long as you override the public run() method.</li>\n<li>The class must contain a method called run() from which all code for that thread will be initiated.</li>\n<li>The class must contain an empty public void method named run().</li>\n<li>The class must contain a public void method named runnable().</li>\n<li>The class definition must include the words implements Threads and contain a method called run().</li>\n<li>The mandatory method must be public, with a return type of void, must be called run(), and cannot take any arguments.</li>\n</ol>", "options": [{"option": "1 and 3 ", "correct": false}, {"option": "2 and 4 ", "correct": false}, {"option": "1 and 5 ", "correct": false}, {"option": "2 and 6 ", "correct": true}], "level": "Medium"}, {"question": "<p>Consider the following information about Java:</p>\n<ul>\n<li><strong>File</strong> is an abstract class and the <strong>toFile()</strong> method is defined in this class. </li>\n<li><strong>ImageFile</strong> and <strong>BinaryFile</strong> are concrete classes of the abstract class <strong>File</strong>.</li>\n<li><strong>toFile()</strong> is implemented in both the <strong>ImageFile</strong> and <strong>BinaryFile</strong> classes.</li>\n</ul>\n<p>If the <strong>File</strong> class references an <strong>ImageFile</strong> object in the memory and the <strong>toFile</strong> method is called, then which of the following methods will be invoked?</p>", "options": [{"option": "Binary File ", "correct": false}, {"option": "Image File ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is a correct representation of a method in the abstract class ?</p>", "options": [{"option": "  abstract double area() { }  ", "correct": false}, {"option": "  abstract double area()  ", "correct": false}, {"option": "  abstract double area();  ", "correct": true}, {"option": "  abstract double area(); { }  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following modules is synchronized in Java?</p>", "options": [{"option": "Set    ", "correct": false}, {"option": "LinkedList    ", "correct": false}, {"option": "Vector    ", "correct": true}, {"option": "WeakHashMap    ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements regarding a <strong>static</strong> nested class is false?</p>", "options": [{"option": "It does not have access to nonstatic members of the enclosing class.", "correct": false}, {"option": "One must not have a reference to an instance of the enclosing class in order to instantiate it.", "correct": true}, {"option": "It's variables and methods must be static.", "correct": false}, {"option": "None of these\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not supported by Java?</p>", "options": [{"option": "Signed numbers ", "correct": false}, {"option": "Unsigned numbers ", "correct": true}, {"option": "Signed right shifts ", "correct": false}, {"option": "Unsigned right shifts ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of these is used to create an instance of an array?</p>", "options": [{"option": "int[ ] i = new int[15];", "correct": true}, {"option": "float f = new float[20];", "correct": false}, {"option": "char[ ] c = \"Some String\";", "correct": false}, {"option": "int i[ ] [ ] = { 4, 5, 6 }, { 1,2,3 };", "correct": false}], "level": "Easy"}, {"question": "<p>The following Java code does not compile successfully because ___________________________________.</p>\n<pre class=\"prettyprint\"><code>        class cube {\n            int w;\n            int h;\n            int l;\n        } \n        class example {\n            public static void main(String args[]) \n            {        \n                cube ob = new cube();\n                System.out.println(ob);\n            } \n        }\n</code></pre>", "options": [{"option": "No constructors to default initialized the values in the class", "correct": false}, {"option": "No methods exits in the class to initialize values", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The default priority number of the thread in the following Java code is ____________________.</p>\n<pre class=\"prettyprint\"><code>            class example {\n            public static void main(String args[]) {\n                Thread t = Thread.currentThread();\n                System.out.println(t);        \n            }\n        }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the following loop is valid:</p>\n<pre class=\"prettyprint\"><code>while(1)\n{\n\n//some code\n\n}\n</code></pre>", "options": [{"option": "False", "correct": true}, {"option": "True", "correct": false}], "level": "Easy"}, {"question": "<p>What action will be performed by finally in the below code?</p>\n<p>try\n{</p>\n<p>//some code\nreturn();</p>\n<p>}</p>\n<p>finally{\n//some code\n}</p>", "options": [{"option": "No, as it exits the program", "correct": false}, {"option": "Finally always gets executed", "correct": true}, {"option": "Every try block must have a catch block", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, statements _____________ and _______________ are equivalent.</p>\n<ol>\n<li>3/2</li>\n<li>3&lt;&lt;2</li>\n<li>3*4</li>\n<li>3&lt;&lt;&lt;2</li>\n</ol>", "options": [{"option": "1, 2", "correct": false}, {"option": "2, 3", "correct": true}, {"option": "3, 4", "correct": false}, {"option": "1, 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the base class for errors and exceptions in Java?</p>", "options": [{"option": "Throwable", "correct": true}, {"option": "Runnable", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The priority number of the thread in the following Java code is __________________.</p>\n<pre class=\"prettyprint\"><code>            class example {\n            public static void main(String args[]) {\n                Thread t = Thread.currentThread();\n                System.out.println(t);        \n            }\n        }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "0", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these classes can never be a subclass in Java?</p>", "options": [{"option": "Abstract class", "correct": false}, {"option": "Parent class", "correct": false}, {"option": "Final class", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes relies on its <strong>subclasses</strong> for the implementation of its methods?</p>", "options": [{"option": "TreeSet class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following interfaces defines the <strong><code>itemStateChanged()</code></strong> method in Java?</p>", "options": [{"option": "WindowClosingListener", "correct": false}, {"option": "ContainerListener", "correct": false}, {"option": "ActionListener", "correct": false}, {"option": "ItemListener", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "The term thread safety means each method in a multi threaded environment can access data by multiple threads at the same time. Synchronization is the way to provide a resources between threads and thus ensure thread Safety. ", "correct": false}, {"option": "The term thread safety means each method in a multi threaded environment doesn't access data by multiple threads at the same time. Synchronization is the way to provide a secured environment and thus ensure thread Safety ", "correct": true}, {"option": "A piece of code is thread-safe if it functions correctly during simultaneous execution by multiple threads. Java enables you to coordinate the actions of multiple threads without using synchronized methods and synchronized statements.", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>How do Java applets communicate with each other?</p>", "options": [{"option": "If the applets belong to the same class, they can communicate via shared static variables.", "correct": false}, {"option": "If the applets belong to different classes, then each of them will need a reference to the same class with static variables. ", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements is not true?</p>", "options": [{"option": "Java deallocates memory automatically.", "correct": false}, {"option": "The 'finalize' method is called before garbage collection.", "correct": false}, {"option": "Garbage collection runs when there is reference to an object. It runs periodically.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What value is returned when the invoking string is less than the string compared by the function compareTo()?</p>", "options": [{"option": " Value always greater than zero. ", "correct": false}, {"option": " Value less than zero. ", "correct": true}, {"option": " Zero. ", "correct": false}, {"option": " None of these. ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        public class Code10 \n    {\n        {\n         final Vector v;\n        v=new Vector();\n        }\n        public Code10 ()\n     {\n     }\n        public void codeMethod() \n        {\n        System.out.println(v.isEmpty());\n        }\n        public static void main(String args[]) \n       { \n    new Code10().codeMethod(); \n    } \n    }\n</code></pre>", "options": [{"option": "Prints 'False'", "correct": false}, {"option": "Runtime error: NullPointerException", "correct": false}, {"option": "Compilation error: Cannot find the symbol", "correct": true}, {"option": "Prints 'True'", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> public class TestHack{\n        public static void main(String [] args) {\n            String s1 = args[1];\n            String s2 = args[2];\n            String s3 = args[3];\n            System.out.print(\" args[2] = \" + s2);\n        }\n    }\n\nand the command-line invocation,\njava TestHack 1 2 3 \n\nWhat is the result of the  above Java Code:\n</code></pre>", "options": [{"option": "args[2]=1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class TestClass {\n\n    public static void main(String args[] ) throws Exception {\n        String d = \"java \";\n        d += d;\n        d += \"world of \";\n        String c = d.concat(\"programming \");\n        System.out.println(c.toUpperCase());\n    }\n}\n</code></pre>", "options": [{"option": "java java world of \r\n", "correct": false}, {"option": "JAVA JAVA WORLD OF PROGRAMMING ", "correct": true}, {"option": "java java world of programming \r\n", "correct": false}, {"option": "Compilation Error", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following below behaves like a <strong>template</strong> in Java?</p>", "options": [{"option": "class", "correct": true}, {"option": "method ", "correct": false}, {"option": "object", "correct": false}, {"option": "variables", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass A{\n\n}\n\nclass B extends A{\n\n}\n\nclass C extends B{\n\n    public static void main(String[] args){\n        A b = new B();\n    }\n\n}\n</code></pre>", "options": [{"option": "The above code will return a runtime error.", "correct": false}, {"option": "The above code will run successfully.", "correct": true}, {"option": "The above code has compilation error.", "correct": false}, {"option": "The above code will compile but will not run.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.io.Serializable;\n\nclass TestClass {\n\n    public static void main(String args[]) {\n\n        ArrayList al = new ArrayList();\n        LinkedList ll = new LinkedList();\n        System.out.println(al instanceof Serializable);\n        System.out.println(ll instanceof RandomAccess);\n    }\n}\n</code></pre>", "options": [{"option": "true\r\ntrue", "correct": false}, {"option": "false\r\nfalse", "correct": false}, {"option": "true\r\nfalse", "correct": true}, {"option": "false\r\ntrue", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following exceptions is caught when a heterogeneous object is added to a <strong>TreeSet</strong> in Java?</p>", "options": [{"option": "NullPointerException", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "IllegalArgumentException", "correct": false}, {"option": "SecurityException", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes implements the <strong>Set</strong> interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashSet", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "DynamicList", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following data types will you use to store <strong>3.141519</strong>?</p>", "options": [{"option": "int", "correct": false}, {"option": "double", "correct": true}, {"option": "real ", "correct": false}, {"option": "String", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class TestClass {\n        public static void main(String args[] ){\n            int x = 0, y = 0 , z = 0 ;\n            x = (++x + y-- ) * z++;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "4", "correct": false}, {"option": "0", "correct": true}, {"option": "8", "correct": false}, {"option": "1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Short{\n        public static void main(String args[]) {\n            int i = 2;\n            boolean t = true;\n            boolean f = false, b;\n            b = (t &amp;((++i) == 0));\n            b = (f &amp;((i+=2) &gt; 0));\n            System.out.println(i);\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "5", "correct": true}, {"option": "4", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Test\n      {\n         Test(String s)\n         {\n            System.out.println(\"String\");\n         }\n         Test(Object o)\n         {\n          System.out.println(\"Object\");\n        }\n     }\n     class constructor\n     {\n        public static void main(String arg[])\n        {\n\n       Test s1=new Test(null);\n       Test s2=new Test(\"hacker\");\n        }\n     }\n</code></pre>", "options": [{"option": "Object  Object", "correct": false}, {"option": "String  String", "correct": true}, {"option": "String   Object", "correct": false}, {"option": "Object String", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code: </p>\n<pre class=\"prettyprint\"><code>class A{\n\n    void eat(A a){\n        System.out.println(\"A printed\");\n    }\n}\n\nclass B extends A{\n\n    void eat( B b){\n        System.out.println(\"B printed\");\n    }\n}\n\n\nclass C extends B{\n\n    void eat(C c){\n        System.out.println(\"C printed\");\n    }\n}\n\npublic class TestClass{\n\n    public static void main(String[] args){\n        A h = new C();\n        B c = new C();\n        c.eat(h);\n    }\n}\n</code></pre>", "options": [{"option": "B printed", "correct": false}, {"option": "C printed", "correct": false}, {"option": "A printed", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\nclass A extends Thread{\nint count = 0;\npublic void run(){\nSystem.out.println(\"run\");\nsynchronized (this) {\nfor(int i =0; i &lt; 50 ; i++){\ncount = count + i;\n}\nnotify();\n}\n}\n}\n\n\npublic class Test{\n\npublic static void main(String argv[]) {\nA a = new A();\na.start();\nsynchronized (a) {\nSystem.out.println(\"waiting\");\ntry{\na.wait();\n}catch(InterruptedException e){\n\n}\nSystem.out.println(a.count);\n\n}\n}\n}\n</code></pre>", "options": [{"option": "waiting, run, 0", "correct": false}, {"option": "run, waiting, 1225", "correct": false}, {"option": "waiting, run, 1225", "correct": true}, {"option": "run, 1225, waiting", "correct": false}], "level": "Hard"}, {"question": "<p>In the following code, after executing line 15, how many objects will be eligible for garbage collection?</p>\n<pre class=\"prettyprint\"><code>import java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nclass Test\n{\n    public static void main(String args[])\n    {\n        Integer i1=new Integer(2000);\n        Integer i2=new Integer(3000);\n        Integer i3=new Integer(4000);\n\n        Object a = i1;\n        i1=i2;\n        i2=i3;\n        i3=null;// Line 15\n\n    }\n}\n</code></pre>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "0", "correct": false}], "level": "Hard"}, {"question": "<p></p><pre class=\"prettyprint\"><code>class Rectangle\n{\n    int length, width;\n    Rectangle(int length, int width)\n    {\n        this.length =length;\n        this.width = width;\n    }\n    void print()\n    {\n        System.out.println(\"length of rectangle = \" + length +\n                           \", width of rectangle = \" + width);\n    }\n}\nclass Main\n{\n    public static void swap(Rectangle r1, Rectangle r2)\n    {\n        Rectangle temp = r1;\n        r1 = r2;\n        r2 = temp;\n    }\n    public static void main(String[] args)\n    {\n        Rectangle r1 = new Rectangle(101, 1);\n        Rectangle r2 = new Rectangle(202,2);\n        swap(r1, r2);\n        r1.print();\n        r2.print();\n    }\n}\n</code></pre>\n\u200bWhat\u200b \u200bis\u200b \u200bthe\u200b \u200boutput\u200b \u200bof\u200b \u200bthe\u200b \u200babove\u200b \u200bprogram\u200b \u200b?<p></p>", "options": [{"option": "length of rectangle = 101, width of rectangle = 1\r\nlength of rectangle = 202, width of rectangle = 2", "correct": true}, {"option": "length of rectangle = 201, width of rectangle = 1\r\nlength of rectangle = 101, width of rectangle = 2", "correct": false}, {"option": "length of rectangle = 202, width of rectangle = 2\r\nlength of rectangle = 202, width of rectangle = 2", "correct": false}, {"option": "length of rectangle = 101, width of rectangle = 1\r\nlength of rectangle = 101, width of rectangle = 1", "correct": false}], "level": "Medium"}, {"question": "<p></p>\n<pre class=\"prettyprint\"><code>public class Example{\npublic static void main(String[] args){\nfor(int p=0,q=0;p+q&lt;5;p++,++q){\nSystem.out.print(p^q);\n}\n}}\n</code></pre>\n<p>What will be the output of the above program?</p><p></p><p></p>", "options": [{"option": "100", "correct": false}, {"option": "000", "correct": true}, {"option": "111", "correct": false}, {"option": "001", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java program:\n</p><pre class=\"prettyprint\"><code>        public class X \n        {  \n            public static void main(String [] args) \n            {\n                try \n                {\n                    badMethod();  \n                    System.out.print(\"A\");  \n                } \n                catch (RuntimeException ex) /* Line 10 */\n                { \n                    System.out.print(\"B\"); \n                } \n                catch (Exception ex1) \n                { \n                    System.out.print(\"C\"); \n                } \n                finally \n                {\n                    System.out.print(\"D\"); \n                } \n                System.out.print(\"E\"); \n            } \n            public static void badMethod() \n            { \n                throw new RuntimeException(); \n            } \n        }\n</code></pre><p></p>", "options": [{"option": "    BD\r\n    ", "correct": false}, {"option": "    BDE\t    ", "correct": true}, {"option": "    BCDE    ", "correct": false}, {"option": "    BCD    ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:\n</p><pre class=\"prettyprint\"><code>    (1.22e-10).toFixed(2)\n</code></pre><p></p>", "options": [{"option": "0.00", "correct": true}, {"option": "122000000000000000000.00", "correct": false}, {"option": "0", "correct": false}, {"option": "0.0", "correct": false}], "level": "Hard"}, {"question": "<p>How can you <strong>serialize</strong> an object in Java?</p>", "options": [{"option": "You have to make the class of the object implement the interface Serializable.", "correct": true}, {"option": "You must call the method 'serializeObject()' (which is inherited from class Object) on\r\nthe object.\r\n  ", "correct": false}, {"option": "You should call the static method 'serialize(Object obj)' from class 'Serializer'.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>You can serialize a lambda expression</p>", "options": [{"option": "No", "correct": false}, {"option": "If its target type is serializable \r\n", "correct": false}, {"option": "If its captured arguments are serializable\r\n", "correct": false}, {"option": "If both its target type and captured arguments are serializable.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following will throw java.lang.NullPointerException?</p>", "options": [{"option": "System.out.println((Integer) null);", "correct": false}, {"option": "System.out.println((String) null);", "correct": false}, {"option": "System.out.println((Object) null);", "correct": false}, {"option": "System.out.println((char[]) null);", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is NOT true about the JVM has a heap ?</p>", "options": [{"option": "That is shared among all Java Virtual Machine threads", "correct": false}, {"option": "Heap storage for objects is reclaimed by an automatic storage management system (known as a garbage collector);", "correct": false}, {"option": "The memory for the heap does need to be contiguous", "correct": true}, {"option": "The heap is created on virtual machine start-up", "correct": false}], "level": "Hard"}, {"question": "<p>Which reference is eligible for garbage collection, but before removing them JVM put them in a queue called reference queue.</p>", "options": [{"option": "Strong References", "correct": false}, {"option": "Phantom References", "correct": true}, {"option": "Soft References", "correct": false}, {"option": "Weak References\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\npublic class Foo {\n    static Double m() {\n        return 1.0 / 0.0;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(m());\n    }\n}\n</code></pre>", "options": [{"option": "0.0", "correct": false}, {"option": "throw\u00a0ArithmeticException", "correct": false}, {"option": "NAN", "correct": false}, {"option": "Infinity", "correct": true}], "level": "Easy"}, {"question": "<p>What happens when we run below code:</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class Foo  {\n   public static void main(String[] args){   \n       final List&gt; intList = new ArrayList&gt;();\n\n       intList.add(Optional.empty());\n       intList.add(Optional.of(100));\n       intList.add(Optional.of(200));\n       intList.add(Optional.of(300));\n\n       System.out.println(intList.get((Integer)null));\n    }\n}\n</code></pre>", "options": [{"option": "Runtime Error", "correct": false}, {"option": "Compile time Error", "correct": false}, {"option": "NullPointerException\r\n", "correct": true}, {"option": "Code never throw a NullPointerException", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\npublic class Foo\n{\n    public static void main(String[] args)\n    {\n        Stream stream1 = Stream.of(1,2,3,4);\n        Stream stream2 = Stream.of(new Integer[]{1,2,3,4}); \n        Stream stream3 = Stream.of(new int[]{1,2,3,4});    }\n}\n</code></pre>", "options": [{"option": "Runtime Error", "correct": false}, {"option": "Compile time Error", "correct": true}, {"option": "Compiles fine without any output", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\ninterface DefaultMethodInterface1 {\n    default public void defaultMethod(){\n       System.out.println(\"DefaultMethodInterface1\");        \n    }\n}\n\ninterface DefaultMethodInterface2 {          \n        default public void defaultMethod(){\n               System.out.println(\"DefaultMethodInterface2\");        \n        }\n}\n\npublic class Foo implements DefaultMethodInterface1, DefaultMethodInterface2 {\n   public static void main(String[] args){   \n           DefaultMethodInterface1 defMethIn = new Foo ();\n           defMethIn.defaultMethod();\n    }\n}\n</code></pre>", "options": [{"option": "Runtime Error", "correct": false}, {"option": "DefaultMethodInterface1", "correct": false}, {"option": "To run, We need to make the method as abstract in another Interface", "correct": false}, {"option": "Compile time Error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Foo {\n    public static void main(String args[]) {\n        final List listOfNames = new ArrayList();\n        listOfNames.add(\"Amitabh\");\n        listOfNames.add(\"Salman\");\n        listOfNames.add(\"Amir\");\n        listOfNames.add(\"AJay\");\n        listOfNames.add(\"Shahrukh\");\n\n        boolean matchedResult = listOfNames.stream().allMatch((s) -&gt; ((String) s).startsWith(\"A\"));\n\n        System.out.println(matchedResult);\n    }\n}\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "Compile time Error", "correct": false}, {"option": "True and False", "correct": false}, {"option": "false", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\ninterface StaticInterface {\n\n    static boolean isNull(String str) {\n        System.out.println(\"Interface Null Check\");\n        return str == null ? true : \"\".equals(str) ? true : false;\n    }\n}\n\npublic class Foo implements StaticInterface {\n\n    @Override\n    public boolean isNull(String str) {\n        System.out.println(\"Impl Null Check\");\n        return str == null ? true : false;\n    }\n\n    public static void main(String args[]) {\n        StaticInterface obj = new Foo();\n        obj.isNull(\"foo\");\n    }\n}\n</code></pre>", "options": [{"option": "Foo Null Check", "correct": false}, {"option": "Compile time Error", "correct": true}, {"option": "StaticInterface Null Check", "correct": false}, {"option": "Runtime Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.*;\n\npublic class Foo {\n    public static void main(String[] args) {\n        final StringJoiner strJoiner = new StringJoiner(\".\");\n        strJoiner.add(\"Foo\").add(\"Hoo\");\n        System.out.println(strJoiner);\n    }\n}\n</code></pre>", "options": [{"option": "Foo.Hoo", "correct": true}, {"option": "Compile time Error", "correct": false}, {"option": "Runtime Error", "correct": false}, {"option": "Hoo.Foo", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\n    public class Foo\n\n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.exit(0);\n            System.out.println( \"\"Finally\"\" ); \n        } \n    } \n}\n</code></pre>", "options": [{"option": "Finally", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "The code runs fine and exit without printing \"Finally\"", "correct": true}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.*;\n\npublic class Foo {\n    public static void main(String[] args) {\n        List listOfLong = new ArrayList();\n        listOfLong.add(Long.valueOf(100));\n        List listNumbers = listOfLong;\n        listNumbers.add(Double.valueOf(1.2345));\n        listNumbers.add(Float.valueOf(1.23f));\n    }\n}\n</code></pre>", "options": [{"option": "No Output", "correct": false}, {"option": "NullPointerException", "correct": false}, {"option": "Compile time Error", "correct": true}, {"option": "Run time Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.*;\n\npublic class Foo {\n    public static void main(String[] args) {\n\n        final LinkedList obj = new LinkedList();\n        obj.add(\"A\");\n        obj.add(\"B\");\n        obj.add(\"C\");\n        obj.addFirst(\"D\");\n        obj.remove();\n        obj.peek();\n        System.out.println(obj);\n    }\n}\n</code></pre>", "options": [{"option": "[A, B, C] ", "correct": true}, {"option": "[D, B, C] ", "correct": false}, {"option": "[A, B, C, D] ", "correct": false}, {"option": "[D, A, B, C]", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statement is correct related to HashMap class in Java</p>", "options": [{"option": "get & put operations in HashMap are thread safe", "correct": false}, {"option": "get & put operations in HashMap are not thread safe", "correct": true}, {"option": "HashMap stores data into multiple singly linked lists", "correct": false}, {"option": "Retrieval performance could range from O(1) to O(n)", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program ?</p>\n\n<pre class=\"prettyprint\"><code>\npublic class Foo  {\n\n public static void main(String args[]) {\n  final String[] myArray = { \"\"I\"\", \"\"Know\"\", \"\"Java8\"\" };\n  String result = Arrays.stream(myArray)\n                  .reduce(\"\"\"\", (a,b) -&gt; a + b);\n  System.out.println(result);\n\n }\n}\n</code></pre>", "options": [{"option": "I Know Java8", "correct": false}, {"option": "I Do not Know Java8", "correct": false}, {"option": "IKnowJava8", "correct": true}, {"option": "Compile time Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program</p>\n\n<pre class=\"prettyprint\"><code>\nimport java.util.Arrays;\n\npublic class Foo {\n    public static void main(String[] args) {\n        final char[] chars = new char[] {'\\u0099'};\n        final String str = new String(chars);\n        final byte[] bytes = str.getBytes();\n        System.out.println(Arrays.toString(bytes));\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[-61, -102]", "correct": false}, {"option": "[-62, -103]", "correct": true}, {"option": "[-63, -104]", "correct": false}, {"option": "[-64, -105]", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class PassS \n    {\n        public static void main(String [] args) \n        {\n            PassS p = new PassS();\n            p.start();\n        }\n\n        void start() \n        {\n            String s1 = \"step\";\n            String s2 = fix(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String fix(String s1) \n        {\n            s1 = s1 + \"steem\";\n            System.out.print(s1 + \" \");\n            return \"steem\";\n        }\n    }\n</code></pre>", "options": [{"option": "step steem  ", "correct": false}, {"option": "stepsteem steem   ", "correct": false}, {"option": "steem step steem\t   ", "correct": false}, {"option": "stepsteem step steem   ", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class PassS \n    {\n        public static void main(String [] args) \n        {\n            PassS p = new PassS();\n            p.start();\n        }\n\n        void start() \n        {\n            String s1 = \"step\";\n            String s2 = fix(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String fix(String s1) \n        {\n            s1 = s1 + \"steem\";\n            System.out.print(s1 + \" \");\n            return \"steem\";\n        }\n    }\n</code></pre>", "options": [{"option": "step steem  ", "correct": false}, {"option": "stepsteem steem   ", "correct": false}, {"option": "steem step steem\t   ", "correct": false}, {"option": "stepsteem step steem   ", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following are valid constructors for <strong>Thread</strong>:</p>\n<ol>\n<li>Thread(Runnable r, String name)</li>\n<li>Thread()</li>\n<li>Thread(int priority)</li>\n<li>Thread(Runnable r, ThreadGroup g)</li>\n<li>Thread(Runnable r, int priority)</li>\n</ol>", "options": [{"option": "1 and 3  ", "correct": false}, {"option": "2 and 4  ", "correct": false}, {"option": "1 and 2  ", "correct": true}, {"option": "2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following are valid constructors for <strong>Thread</strong>:</p>\n<ol>\n<li>Thread(Runnable r, String name)</li>\n<li>Thread()</li>\n<li>Thread(int priority)</li>\n<li>Thread(Runnable r, ThreadGroup g)</li>\n<li>Thread(Runnable r, int priority)</li>\n</ol>", "options": [{"option": "1 and 3  ", "correct": false}, {"option": "2 and 4  ", "correct": false}, {"option": "1 and 2  ", "correct": true}, {"option": "2 and 5  ", "correct": false}], "level": "Medium"}, {"question": "<p>JavaScript is designed to _______________________.</p>", "options": [{"option": "Style HTML pages\r\n\t\t", "correct": false}, {"option": "Add interactivity to HTML pages\r\n\t\t", "correct": true}, {"option": "Perform server side scripting operation\r\n\t\t", "correct": false}, {"option": "Execute Query Related to DB on a server", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statement is not true about abstract classes?</p>", "options": [{"option": " The child class of an abstract class must implement the inherited abstract method or be marked as \"abstract\".", "correct": false}, {"option": " Abstract classes can have constructors.", "correct": false}, {"option": "A class can be made abstract without any abstract method.", "correct": false}, {"option": "A class can inherit multiple abstract classes. ", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements is <strong>true</strong> for Javascript programs?</p>", "options": [{"option": "Every class must be inside a package. ", "correct": true}, {"option": "All classes in a single file are a part of different packages. ", "correct": false}, {"option": " If a package name is not specified, the classes in the file go into an named package.", "correct": false}, {"option": "If a package name is not specified, the classes will not be compiled.", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>\n            import static java.lang.System.*;\n\n            class StaticImportDemo\n            {\n               public static void main(String args[])\n               {      \n                    out.println(\"Hello World\");\n               }\n            }\n\n</code></pre>", "options": [{"option": "Compiler Error\r\n\t\t\t", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Hello World", "correct": true}, {"option": "None of the outputs mentioned are true", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>class Main {   \n               public static void main(String args[]) {      \n                     int t;      \n                     System.out.println(t); \n                }   \n           }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": " Garbage Value\r\n\t\t   \r\n\t\t", "correct": false}, {"option": "Compiler Error \r\n\t\t   ", "correct": true}, {"option": "Runtime Error", "correct": false}], "level": "Medium"}, {"question": "<p> What will be the output of the program? \nclass Test \n{\n    public static void main(String [] args) \n    {\n        int x= 0;\n        int y= 0;\n        for (int z = 0; z &lt; 5; z++) \n        {\n            if (( ++x &gt; 2 ) &amp;&amp; (++y &gt; 2)) \n            {\n                x++;\n            }\n        }\n        System.out.println(x + \" \" + y);\n    }\n}\n</p>", "options": [{"option": "5 2", "correct": false}, {"option": "5 3", "correct": false}, {"option": "6 3", "correct": true}, {"option": "6 4", "correct": false}], "level": "Hard"}, {"question": "<p>What is odd statement in below. </p>", "options": [{"option": "Exception and Error is sub classes of Throwable class.", "correct": false}, {"option": "The Error class defines exceptions that are not expected to be caught by the user program", "correct": false}, {"option": "Throwable is top most class for all exception.", "correct": false}, {"option": "Throw clause is used to declare an exception. ", "correct": true}], "level": "Medium"}, {"question": "<p>Interface can only have ...</p>", "options": [{"option": "Member elements and Methods.", "correct": false}, {"option": "Static Variables and Static Methods.", "correct": false}, {"option": "Static Final Variables and Instance Method Declarations.", "correct": true}, {"option": "Member Elements, Instance Methods, Static variables and Static Methods. ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following collections stores its elements in insertion Order?</p>", "options": [{"option": "HashMap", "correct": false}, {"option": "TreeMap", "correct": true}, {"option": "LinkedHashMap", "correct": false}, {"option": "LinkedMap", "correct": false}], "level": "Medium"}, {"question": "<p> Which of the following is possible? </p>", "options": [{"option": "try block followed by catch", "correct": false}, {"option": "try block followed by finally", "correct": false}, {"option": "try block followed by catch block and then finally", "correct": false}, {"option": "All of the above. ", "correct": true}], "level": "Medium"}, {"question": "<p>After resizing, size of ArrayList is increased by:</p>", "options": [{"option": "200%", "correct": false}, {"option": "50%", "correct": true}, {"option": "100%", "correct": false}, {"option": "None of these. ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the following an example of:</p>\n<pre class=\"prettyprint\"><code>let add = (x,y) =&gt; x + y;\nadd(2,3); //=&gt; 5\n</code></pre>", "options": [{"option": "Anonymous function\r\n", "correct": true}, {"option": "Curried function\r\n", "correct": false}, {"option": "Normal function", "correct": false}, {"option": "Discrete function", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following ReactJS code:\n</p><pre class=\"prettyprint\"><code>&lt;div&gt;\n  Hellow {String(false)}.\n&lt;/div&gt;\n</code></pre><p></p>", "options": [{"option": "<div>\r\n  Hellow .\r\n</div>\r\n", "correct": false}, {"option": "<div>\r\n  Hellow null.\r\n</div>\r\n", "correct": false}, {"option": "<div>\r\n  Hellow false.\r\n</div>\r\n", "correct": true}, {"option": "A warning is raised", "correct": false}], "level": "Medium"}, {"question": "<p>In automation testing, if a code is developed by using selenium-java, which of the following packages is imported by default?</p>", "options": [{"option": "java.lang", "correct": true}, {"option": "java.utils", "correct": false}, {"option": "java.io ", "correct": false}, {"option": "java.*", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code>Interface MyInterface\n{\nInt value=100;\n}\nPublic class Interfaces implements MyInterface\n{\nPublic static void main(String[] args)\n{\nSystem.out.println(value);\n}\n}\n</code></pre>", "options": [{"option": "100", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "10", "correct": false}, {"option": "1000", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code>Public class Constructors\n{\nPublic Constructors() {\n    System.out.println(\u201cThis is About Constructors\u201d);}\npublic static void main(String[] args)\n{}\n}\n</code></pre>", "options": [{"option": "No output", "correct": true}, {"option": "Runtime error ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "0", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code>Class superClass{\nPublic void Display(){\nSystem.out.println(\u201cSuper class-Display\u201d)\n}\n}\nClass subclass extends superClass{\nPublic static void main(String[] args)\n{\nsuperClass obj=new superClass();\nobj.Display();\n}\n}\n</code></pre>", "options": [{"option": "Super class-Display", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code>Public abstract class AbstractClass{\nAbstract void show();\nVoid display()\n{\nSystem.out.println(\u201cAbstract Display\u201d);\n}\nPublic static void main(String[] args)\n{\n   System.out.println(\u201cAbstract Class\u201d);\n}\n}\n</code></pre>", "options": [{"option": "Abstract Class", "correct": true}, {"option": "Abstract class cannot have the main method", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Abstract method is not allowed", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java program:</p>\n<pre class=\"prettyprint\"><code>Public abstract class AbstractClass{\nAbstract void show();\nVoid display()\n{\nSystem.out.println(\u201cAbstract Display\u201d);\n}\nPublic static void main(String[] args)\n{\n   System.out.println(\u201cAbstract Class\u201d);\nAbstractClass  Obj = new AbstractClass();\n}\n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Abstract Display \r\nAbstract Class", "correct": false}, {"option": "Abstract Class", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of below Program ?                                          public class Test {\n public static void main(String[] args) {\n  Bird af = new Crow();\n  af.m2();\n }\n}</p>\n<p>class Bird {\n public static void m2() {\n  System.out.println(\"Parent m2\");\n }</p>\n<p>public void m1() {\n  System.out.println(\"Parent m1\");</p>\n<p>}\n}</p>\n<p>class Crow extends Bird {\n public static void m2() {\n  System.out.println(\"Child m2\");\n }\n}</p>", "options": [{"option": "program fails during compilation", "correct": false}, {"option": "Program fails at runtime", "correct": false}, {"option": "Output prints : Child m1", "correct": false}, {"option": "Output prints : Parent m1", "correct": true}], "level": "Easy"}, {"question": "<ol>\n<li>public class A {</li>\n<li>public String doit(int x, int y){</li>\n<li>return \"a\";</li>\n<li>}\n5.</li>\n<li>public String doit(int... vals){</li>\n<li>return \"b\";</li>\n<li>}</li>\n<li>}\nGiven:</li>\n<li>A a = new A();</li>\n<li>System.out.println(a.doit(4, 5)); println(a.doit(4, 5));\nWhat is the result?</li>\n</ol>", "options": [{"option": "Line 26 prints \"a\" to System.out", "correct": true}, {"option": "Line 26 prints \"b\" to System.out", "correct": false}, {"option": "An exception is thrown at line 26 at runtime", "correct": false}, {"option": "Compilation of class A will fail due to an error in line 6", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\nclass A {\n    public int i;\n    private int j;\n}\n\nclass B extends A {\n    void display() {\n        super.j = super.i + 1;\n        System.out.println(super.i + \" \" + super.j);\n    }\n}\n\npublic class inheritance {\n    public static void main(String args[]) {\n        B obj = new B();\n        obj.i = 1;\n        obj.j = 2;\n        obj.display();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of above program? </strong></p>", "options": [{"option": "2 2", "correct": false}, {"option": "3 3  ", "correct": false}, {"option": "Runtime Error", "correct": false}, {"option": "Compilation Error", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these is correct about passing an argument by call-by-value process?</p>", "options": [{"option": "Copy of argument is made into the formal parameter of the subroutine", "correct": true}, {"option": "Reference to original argument is passed to formal parameter of the subroutine", "correct": false}, {"option": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument", "correct": false}, {"option": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\n    public static void main(String args[]) {\n        String s1 = \"Hello\";\n        String s2 = new String(s1);\n        String s3 = \"Hello\";\n        System.out.println((s1 == s2) + \" \" + s2.equals(s3)+ \" \" + (s1==s3));\n    }\n}\n</code></pre>\n<p><strong>What is the Output of below program </strong></p>", "options": [{"option": "true true true", "correct": false}, {"option": "false false true", "correct": false}, {"option": "false true true", "correct": true}, {"option": "false true false", "correct": false}], "level": "Easy"}, {"question": "<p>In the below code, which code fragment should be inserted at line 3 so that the output will be: \u201c123abc 123abc\u201d? <br />\n 1 StringBuilder sb1 = new StringBuilder(\"123\");\n 2 String s1 = \"123\";\n 3  // insert code here\n 4 System.out.println(sb1 + \" \" + s1);</p>", "options": [{"option": "sb1.append(\u201cabc\u201d); s1.append(\u201cabc\u201d);", "correct": false}, {"option": "sb1.append(\u201cabc\u201d); s1.concat(\u201cabc\u201d);", "correct": false}, {"option": "sb1.concat(\u201cabc\u201d); s1.append(\u201cabc\u201d);", "correct": false}, {"option": "sb1.append(\u201cabc\u201d); s1 = s1.concat(\u201cabc\u201d);", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\nclass Base1 {\n    int i;\n\n    public void display() {\n        System.out.println(i);\n    }\n}\n\nclass Child1 extends Base1 {\n    int j;\n\n    public void display() {\n        System.out.println(j);\n    }\n}\n\npublic class Dynamic_dispatch {\n    public static void main(String args[]) {\n        Child1 obj2 = new Child1();\n        obj2.i = 1;\n        obj2.j = 2;\n        Base1 r;\n        r = obj2;\n        r.display();\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of below program ? </strong></p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Given</strong>\n</p>\n<ol>\n<li>class Dog {</li>\n<li>public void bark() { System.out.print(\"\"woof \"\"); }</li>\n<li>}</li>\n<li>class Hound extends Dog</li>\n<li>public void sniff() { System.out.print(\"\"sniff \"\"); }</li>\n<li>public void bark() { System.out.print(\"\"howl \"\"); }</li>\n<li>}</li>\n<li>public class DogShow {</li>\n<li>public static void main(String[] args) { new DogShow().go(); }public static void main(String[] args) { new DogShow().go(); }</li>\n<li>void go() {</li>\n<li>new Hound().bark();</li>\n<li>((Dog) new Hound()).bark();</li>\n<li>((Dog) new Hound()).sniff();</li>\n<li>}</li>\n<li>}</li>\n</ol>\n<p><strong>What is the result?</strong></p>\n<p></p>\n<p></p>", "options": [{"option": "howl howl sniff", "correct": false}, {"option": "howl woof sniff", "correct": false}, {"option": "Compilation fails with an error at line 13", "correct": true}, {"option": "howl woof followed by an exception", "correct": false}], "level": "Medium"}, {"question": "<p><strong>Given the following:</strong>\n</p>\n<ol>\n<li>class X { void do1() { } }</li>\n<li>class Y extends X { void do2() { } }</li>\n<li>class Chrome {</li>\n<li>public static void main(String [] args) {</li>\n<li>X x1 = new X();</li>\n<li>X x2 = new Y();</li>\n<li>Y y1 = new Y();</li>\n<li>// insert code here</li>\n<li> } }</li>\n</ol>\n<p><strong>Which of the following, inserted at line 8, will compile?</strong></p>\n<p></p>\n<p></p>", "options": [{"option": "x2.do2();", "correct": false}, {"option": "(Y)x2.do2();", "correct": false}, {"option": "((Y)x2).do2();", "correct": true}, {"option": "None of the above statements will compile", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What is the output of below program :</strong></p>\n<pre class=\"prettyprint\"><code>\nimport java.util.HashSet; \nimport java.util.Set; \nclass Node { \n    private int i;  \n    public Node(int i) {  \n\u2003    this.i = i;  \n    }  \n}  <br />\npublic class Q1 {  <br />\n        public static void main(String[] args) \n            Set nodeSet = new HashSet();\n            nodeSet.add(new Node(10));\n            nodeSet.add(new Node(20));\n            nodeSet.add(new Node(30));\n            nodeSet.add(new Node(10));\n            nodeSet.add(new Node(20));\n            System.out.println(nodeSet.size());\n    }\n}<br /></code></pre>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": false}, {"option": "5", "correct": true}, {"option": "Compilation Error as hashCode() and equals() method not defined for Node class.", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What is the output of below program :</strong></p>\n<pre class=\"prettyprint\"><code>\nimport java.util.*;\n\npublic class Q2\n{\n   public static void main(String[] args)\n   {\n       TreeSet treeSet = new TreeSet&lt;&gt;();\n\n       treeSet.add(\"Wells\");\n       treeSet.add(\"Test\");\n       treeSet.add(\"Wells\");\n       treeSet.add(\"WellsFargo\");\n\n       for (String temp : treeSet)\n           System.out.printf(temp + \" \");\n\n       System.out.println(\"\\n\");\n   }\n}\n</code></pre>", "options": [{"option": "Test Wells WellsFargo ", "correct": true}, {"option": "Wells Test Wells WellsFargo ", "correct": false}, {"option": "Wells Test WellsFargo ", "correct": false}, {"option": "Order of addition will be random", "correct": false}], "level": "Medium"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class Person {\n    private String name;\n\n    Person(String name) {\n        this.name = name;\n    }\n\n    public int hashCode() {\n        return 420;\n    }\n}\n</code></pre>\n<p><strong>Which statement is true? </strong></p>", "options": [{"option": "The time to find the value from HashMap with a Person key depends on the size of the map.", "correct": true}, {"option": "Deleting a Person key from a HashMap will delete all map entries for all keys of type Person.", "correct": false}, {"option": "Deleting a Person key from a HashMap will delete all map entries for all keys of type Person.", "correct": false}, {"option": "The time to determine whether a Person object is contained in a HashSet is constant and does NOT depend on the size of the map.", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Which statement is false about enum ? </strong></p>", "options": [{"option": "Variables and methods can be added to enum.", "correct": false}, {"option": "enum is used to define our own datatypes.", "correct": false}, {"option": "enum is thread safe but method inside it may not.", "correct": false}, {"option": "enum constructor can not be created.", "correct": true}], "level": "Medium"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class Q1 {\n    public static void main(String[] args) {\n        List&lt;String&gt; list1 = new ArrayList&lt;&gt;();//line 1\n        List&lt;Object&gt; list2 = list1;// line 2\n        list2.add(new Integer(12)); // line 3\n        System.out.println(list2.size()); \n    }\n}\n</code></pre>\n<p><strong>Choose the right answer from below  </strong></p>", "options": [{"option": "code compiles fine.", "correct": false}, {"option": "compilation error at line1", "correct": false}, {"option": "compilation error at line2", "correct": true}, {"option": "compilation error at line3", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is an interface for control over serialization and deserialization? </p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Externalization", "correct": true}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class serialization {\n    public static void main(String[] args) {\n        try {\n            Myclass object1 = new Myclass(\"Hello\", -7, 2.1e10);\n            FileOutputStream fos = new FileOutputStream(\"serial\");\n            ObjectOutputStream oos = new ObjectOutputStream(fos);\n            oos.writeObject(object1);\n            oos.flush();\n            oos.close();\n        } catch (Exception e) {\n            System.out.println(\"Serialization\" + e);\n            System.exit(0);\n        }\n        try {\n            int x;\n            FileInputStream fis = new FileInputStream(\"serial\");\n            ObjectInputStream ois = new ObjectInputStream(fis);\n            x = ois.readInt();\n            ois.close();\n            System.out.println(x);\n        } catch (Exception e) {\n            System.out.print(\"deserialization\");\n            System.exit(0);\n        }\n    }\n}\n\nclass Myclass implements Serializable {\n    String s;\n    int i;\n    double d;\n\n    Myclass(String s, int i, double d) {\n        this.d = d;\n        this.i = i;\n        this.s = s;\n    }\n}\n\n</code></pre>\n<p><strong>What is the output of above program ? </strong></p>", "options": [{"option": "-7", "correct": false}, {"option": "Hello", "correct": false}, {"option": "2.1E10", "correct": false}, {"option": "deserialization", "correct": true}], "level": "Hard"}, {"question": "<p>What is true about serialVersionUID in serialization and deserialization in java?</p>", "options": [{"option": "serialVersionUID is used for version control of object", "correct": false}, {"option": "If we don\u2019t define serialVersionUID in the class, and any modification is made in class, then we won\u2019t be able to deSerialize our class", "correct": false}, {"option": "The serialization at runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. ", "correct": false}, {"option": "All", "correct": true}], "level": "Medium"}, {"question": "<p>How can subclass avoid Serialization if its superClass has implemented Serialization interface in java</p>", "options": [{"option": "Not possible, as subclass always inherits all features from its parent class", "correct": false}, {"option": "define writeObject() method and you are done", "correct": false}, {"option": "define writeObject() method and throw NotSerException()", "correct": false}, {"option": "define writeObject() method and throw NotSerializableException()", "correct": true}], "level": "Medium"}, {"question": "<p> Is constructor of super class called during DeSerialization process of subclass in java? </p>", "options": [{"option": "If superclass has implemented Serializable - constructor is not called during DeSerialization process.", "correct": false}, {"option": "If superclass has not implemented Serializable - constructor is called during DeSerialization process", "correct": false}, {"option": "All", "correct": true}, {"option": "None", "correct": false}], "level": "Medium"}, {"question": "<p> What is true about acquiring object lock before calling wait(), notify() and notifyAll()? </p>", "options": [{"option": "it\u2019s mandatory to acquire object lock before calling wait(), notify() and notifyAll() methods on object", "correct": false}, {"option": "If we call wait(), notify() and notifyAll() methods without acquiring object lock i.e. from outside synchronize block then java.lang.IllegalMonitorStateException is thrown at runtime.", "correct": false}, {"option": "wait(), notify() and notifyAll() methods are always called from Synchronized block only", "correct": false}, {"option": "All", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Given:</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class ThreadExtended extends Thread {\n\n    public void run() {\n        System.out.println(\"\\nThread is running now\\n\");\n    }\n\n    public static void main(String[] args) {\n\n        ThreadExtended threadE = new ThreadExtended();\n\n        threadE.start();\n    }\n}\n</code></pre>\n<p><strong>How many number of threads created in above program ? </strong></p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What could be the output of the following program?</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class TestThread implements Runnable {\n    public void run() {\n        System.out.printf(\"Stage \");\n        System.out.printf(\"Coach \");\n    }\n\n    public static void main(String[] args) {\n        TestThread obj = new TestThread();\n        Thread thread = new Thread(obj);\n\n        thread.start();\n        System.out.printf(\"Wells \");\n        try {\n            thread.join();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"Fargo \");\n    }\n}\n</code></pre>", "options": [{"option": "Wells Stage Coach Fargo", "correct": true}, {"option": "Stage Coach Wells Fargo", "correct": false}, {"option": "Either one from first two options", "correct": false}, {"option": "Both option1 and option2  together", "correct": false}], "level": "Hard"}, {"question": "<p><strong>What is the output of the following program?</strong></p>\n<pre class=\"prettyprint\"><code>\npublic class StartTest implements Runnable {\n    public void run() {\n        System.out.printf(\"GFG \");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(new StartTest());\n        thread1.start();\n        thread1.start();\n        System.out.println(thread1.getState());\n    }\n}\n</code></pre>", "options": [{"option": "GFG GFG TERMINATED", "correct": false}, {"option": "GFG TERMINATED", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "Runtime Error", "correct": true}], "level": "Medium"}, {"question": "<p><strong>What could be the output of the following program?</strong></p>\n<pre class=\"prettyprint\"><code>\nclass myThread implements Runnable {\n    public void run() {\n        TestThreadProg.obj.notify();\n    }\n}\n\npublic class TestThreadProg implements Runnable {\n    public static TestThreadProg obj;\n    private int data;\n\n    public TestThreadProg() {\n        data = 10;\n    }\n\n    public void run() {\n        obj = new TestThreadProg();\n        obj.wait();\n        obj.data += 20;\n\n        System.out.println(obj.data);\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread1 = new Thread(new TestThreadProg());\n        Thread thread2 = new Thread(new myThread());\n\n        thread1.start();\n        thread2.start();\n\n        System.out.printf(\" GFG - \");\n    }\n}\n</code></pre>", "options": [{"option": "30 GFG \u2013", "correct": false}, {"option": "GFG \u2013 30", "correct": false}, {"option": "GFG \u2013", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p> What is valid about call method of Callable interface in thread concurrency in java? </p>", "options": [{"option": "call() method can only throw an exception if unable to calculate result.", "correct": false}, {"option": "call() method returns computed result or throws an exception if unable to do so", "correct": true}, {"option": "call() method returns computed result but cannot throw an exception if unable to do so", "correct": false}, {"option": "call() method cannot return result", "correct": false}], "level": "Medium"}, {"question": "<p> What is the default concurrency level of ConcurrentHashMap ? </p>", "options": [{"option": "10", "correct": false}, {"option": "16", "correct": true}, {"option": "14", "correct": false}, {"option": "12", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Given the following code:</strong></p>\n<pre class=\"prettyprint\"><code>\n@FunctionalInterface\ninterface AnInterface1 {\n    public String doMore(String s1, String s2);\n}\n\npublic class FunInterFaceTest {\n    public static void doThis(AnInterface1 obj) {\n        String result = obj.doMore(\"Hello \", \"World\");\n        System.out.println(result);\n\n    }\n\n    public static void main(String[] args) {\n        String text = \"This is fixed \";\n        doThis((s1, s2) -&gt; text + s1 + s2);\n    }\n}\n</code></pre>\n<p><strong>What is the output of above ? </strong></p>", "options": [{"option": "Compiles and runs to print This is fixed Hello World", "correct": true}, {"option": "Compilation fails because the lambda can not use the local variable 'text'", "correct": false}, {"option": "Compilation fails because the variable 'text' is not passed as parameter to the lambda", "correct": false}, {"option": "Compiles and runs to print Hello World because the variable 'text' would have gone out of", "correct": false}], "level": "Hard"}, {"question": "<p>What will  be the output of the below code snippet ?</p>\n<p>var a = 2;\nfoo();                                                                                                                                                                    <br />\nfunction foo(){\n    a=3;\n    console.log(a);\n    var a;\n};</p>\n<p>console.log(a);</p>", "options": [{"option": "2, 3", "correct": true}, {"option": "3, 2", "correct": false}, {"option": "2, 2", "correct": false}, {"option": "Will throw Error", "correct": false}, {"option": "3, 3", "correct": false}], "level": "Medium"}, {"question": "<p>function foo()  {   </p>\n<p>var a   =   1;\n    if  (a  &gt;=  1)  {                             <br />\n        let b   =   2;\n        while   (b  &lt;   5)  {                                             <br />\n            let c   =   b   *   2;                                            <br />\n            b++;\n            console.log(    a   +   c   );\n        }             <br />\n    } \n}\nfoo();</p>", "options": [{"option": "4, 5, 6", "correct": true}, {"option": "5, 7, 9", "correct": false}, {"option": "Will Give Error", "correct": false}, {"option": "5, 6, 7", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the below program ?</p>\n<p>class Test {\npublic static void main(String args[]) {\nSystem.out.println(fun());\n}\nstatic int fun() {\nstatic int x= 0;\nreturn ++x;\n}\n}</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation Error", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n<p>class First\n{\npublic First() { System.out.println(\"a\"); }\n}\nclass Second extends First\n{\npublic Second() { System.out.println(\"b\"); }\n}\nclass Third extends Second\n{\npublic Third() { System.out.println(\"c\"); }\n}\npublic class MainClass\n{\npublic static void main(String[] args)\n{\nThird c = new Third();\n}\n}</p>", "options": [{"option": "Compilation Error", "correct": false}, {"option": "Runtime Error", "correct": false}, {"option": "a b c", "correct": true}, {"option": "c b a", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n<p>class MyThread extends Thread\n{\npublic void run()\n{\nSystem.out.print(\"Run Thread... Run !\");\n}\npublic static void main(String args[])\n{\nMyThread BarryAllen = new MyThread();\nBarryAllen.start();\nBarryAllen.stop();\nBarryAllen.start();\n}\n}</p>", "options": [{"option": "RunTime Exception", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run Thread... Run !\r\nRun Thread... Run !", "correct": false}, {"option": "Run Thread... Run !", "correct": false}], "level": "Easy"}, {"question": "<p>Constructors cannot be declared as </p>", "options": [{"option": "final, abstract", "correct": true}, {"option": "static", "correct": false}], "level": "Easy"}, {"question": "<p>How can a protected element be accessed?</p>", "options": [{"option": "accessible only within the class", "correct": false}, {"option": "accessible only within package", "correct": false}, {"option": "accessible within package and outside the package but through inheritance only", "correct": true}, {"option": "accessible by all", "correct": false}], "level": "Easy"}, {"question": "<p>Which exception is thrown when java is out of memory?</p>", "options": [{"option": "MemoryFullException", "correct": false}, {"option": "MemoryOutOfBoundsException", "correct": false}, {"option": "OutOfMemoryError", "correct": true}, {"option": "MemoryError", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these method of Object class can clone an object?</p>", "options": [{"option": "Objectcopy()", "correct": false}, {"option": "copy()", "correct": false}, {"option": "Object clone()", "correct": true}, {"option": "clone()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements is incorrect?</p>", "options": [{"option": "By multithreading CPU\u2019s idle time is minimized, and we can take maximum use of it", "correct": false}, {"option": "By multitasking CPU\u2019s idle time is minimized, and we can take maximum use of it", "correct": false}, {"option": "Two thread in Java can have same priority", "correct": false}, {"option": "A thread can exist only in two states, running and blocked", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of below program?</p>\n<p>class Main {\npublic static void main(String args[]) {\nSystem.out.println(fun());\n}\nString fun() {\nreturn \"This test is such fun\";\n}\n}</p>", "options": [{"option": "This test is such fun", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "compilation error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the below program.\nclass Employee {\nprotected String name;\nprotected long eId;\npublic Employee(String name, long eId) {\nthis.name = name;\nthis.eId = eId;\n}\npublic static void main(String args[]) {\nEmployee e = new Employee();\nSystem.out.println(\"name = \" + e.name + \", eId = \" + e.eId);\n}\n}</p>", "options": [{"option": "name=null, eId=null", "correct": false}, {"option": "name=\"\", eId=0", "correct": false}, {"option": "name=null, eId=0.0", "correct": false}, {"option": "Compilation Error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the below program ?\npublic class Main\n{\npublic static void function(String s)\n{\nSystem.out.println(\"String\");\n}\npublic static void function(Object o)\n{\nSystem.out.println(\"Object\");\n}\npublic static void main(String args[])\n{\nfunction(null);\n}\n}</p>", "options": [{"option": "String", "correct": true}, {"option": "Object", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "Runtime Error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below program\npublic class Main\n{\npublic static void main(String args[])\n{\nString s1 = \"abc\";\nString s2 = s1;\ns1 += \"d\";\nSystem.out.println(s1 + \" \" + s2 + \" \" + (s1 == s2));\nStringBuffer sb1 = new StringBuffer(\"abc\");\nStringBuffer sb2 = sb1;\nsb1.append(\"d\");\nSystem.out.println(sb1 + \" \" + sb2 + \" \" + (sb1 == sb2));\n}\n}</p>", "options": [{"option": "abcd abc false\r\nabcd abcd true", "correct": true}, {"option": "abcd abcd true\r\nabcd abc false", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below program\npublic class Test\n{\npublic static void main(String[] args)\n{\nint numOfDefects = 40;\nif(numOfDefects &gt; 50 &amp;&amp; numOfDefects/0 == 4)\n{\nSystem.out.println(\"There are huge number of defects in the product\");\n}\nelse\n{\nSystem.out.println(\"Reduce the number of Defects\");\n}\n}\n}</p>", "options": [{"option": "There are huge number of defects in the product", "correct": false}, {"option": "Reduce the number of Defects", "correct": true}, {"option": "Runtime error due to divisibility by 0", "correct": false}, {"option": "Compilation error due to divisibility by 0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below program\npublic class Test\n{\n{\nSystem.out.print(\"1\");\n}\npublic Test(){\nSystem.out.print(\"2\");\n}\n{\nSystem.out.print(\"3\");\n}\npublic static void main(String[] args)\n{\nSystem.out.print(\"4\");\nTest t = new Test();\n}</p>\n<p>static{\nSystem.out.print(\"5\");\n}\n}</p>", "options": [{"option": "54132", "correct": true}, {"option": "54123", "correct": false}, {"option": "45132", "correct": false}, {"option": "45123", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below code snippet.\nint a = 5;\nint b = 6;\nString s = \"Hello\";\nSystem.out.println(a + b + s);</p>", "options": [{"option": "Hello56", "correct": false}, {"option": "11Hello", "correct": true}, {"option": "compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the below code snippet\nbyte sum, op1, op2;\nop1 = 2;\nop2 = 3;\nsum = op1 + op2;\nSystem.out.print(sum);</p>", "options": [{"option": "runtime error", "correct": false}, {"option": "compile time error", "correct": true}, {"option": "5", "correct": false}, {"option": "Arithmetic exception", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of below program.\nclass Main {\npublic static void main(String args[]) {\nSystem.out.println(\" Program starting \");\ntry{\nSystem.out.println(\" Inside try block\");\nreturn 0;\n}finally{\nSystem.out.println(\" Inside finally block\");\n}\n}\n}</p>", "options": [{"option": "Program starting\r\nInside try block", "correct": false}, {"option": "Program starting\r\nInside try block\r\nInside finally block", "correct": false}, {"option": "compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What will be the .class file name of the Inner class?\nclass Outer {\nclass Inner {\npublic\nvoid m1()\n{\nSystem.out.println(\"Hello Geeks\");\n}\n}\n}</p>", "options": [{"option": "Inner.class", "correct": false}, {"option": "Outer.Inner.class", "correct": false}, {"option": "Outer$Inner.class", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the below are correct statements.</p>\n<ol>\n<li>Two object with equal hashcodes must be equal as per the equals() method.</li>\n<li>Two object that are equal as per the equals() method must have same hashcodes.</li>\n<li>If we return a constant number from hashCode() method it slows down the object search\nin hash based datastructure.</li>\n<li>If we return a constant number from hashCode() method it makes the object search in\nhash based data structure very fast.</li>\n</ol>", "options": [{"option": "1,3", "correct": false}, {"option": "1,4", "correct": false}, {"option": "2,3", "correct": true}, {"option": "2,4", "correct": false}], "level": "Hard"}, {"question": "<p>What will be the output of the below program</p>\n<p>class Test {\npublic static void main(String[] args)\n{\nint arr[] = { 11, 22, 33 };\nfor (int i = 0; i &lt; arr.length; i++)\nSystem.out.print(arr[i] + \" \");\nSystem.out.println();\nint arr2[] = new int[3];\narr2[] = { 11, 22, 33 };\nfor (int i = 0; i &lt; arr2.length; i++)\nSystem.out.print(arr2[i] + \" \");\n}\n}</p>", "options": [{"option": "11 22 33\r\n11 22 33", "correct": false}, {"option": "Error", "correct": true}, {"option": "Exception", "correct": false}, {"option": "None", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java program?</p>\n<pre class=\"prettyprint\"><code>class Color {\n    public void Print() {\n        System.out.println(\"Color\");\n    }      \n}\nclass Red extends Color { \n    public void Print() {\n        System.out.println(\"Red\");\n    }\n}\nclass Main{\n    public static void DoPrint( Color c ) {\n        c.Print(); \n    }\n    public static void main(String[] args) {\n        Color x = new Color();\n        Color y = new Red();\n        Red z = new Red();\n        DoPrint(x);\n        DoPrint(y);\n        DoPrint(z);\n    }\n}\n</code></pre>", "options": [{"option": "Red\r\nRed\r\nRed", "correct": false}, {"option": "Color\r\nRed\r\nRed", "correct": true}, {"option": "Color\r\nColor\r\nRed", "correct": false}], "level": "Easy"}, {"question": "Which of the following iterators can be used to modify a collection while iterating through it in Java? \r\n\r\na. fail-fast b. fail-safe c. fail-lock d. fail-free", "options": [{"option": "B and C", "correct": false}, {"option": "only A", "correct": false}, {"option": "only B ", "correct": false}, {"option": "only C ", "correct": true}], "level": "Easy"}, {"question": "Which is the way to provide configuration metadata to spring?", "options": [{"option": "XML Based configuration file", "correct": false}, {"option": "Annotation Based Configuration ", "correct": false}, {"option": "Java Based Configuration ", "correct": false}, {"option": "All of the Above ", "correct": true}], "level": "Easy"}, {"question": "Where do you define DispatcherServlet in your Spring web project", "options": [{"option": "In Beans configuration file", "correct": false}, {"option": "Web.xml file", "correct": true}, {"option": "Meta-inf/dispatcher.xml", "correct": false}, {"option": "Web-inf/ dispatcher.xml", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following iterators can be used to modify a collection while iterating through it in Java?</p>\r\n\r\n<p>a. fail-fast b. fail-safe c. fail-lock d. fail-free</p>", "options": [{"option": "B and C", "correct": false}, {"option": "only A", "correct": false}, {"option": "only B ", "correct": false}, {"option": "only C ", "correct": true}], "level": "Easy"}, {"question": "<p>Which is the way to provide configuration metadata to spring?</p>", "options": [{"option": "XML Based configuration file", "correct": false}, {"option": "Annotation Based Configuration ", "correct": false}, {"option": "Java Based Configuration ", "correct": false}, {"option": "All of the Above ", "correct": true}], "level": "Easy"}, {"question": "<p>Where do you define DispatcherServlet in your Spring web project</p>", "options": [{"option": "In Beans configuration file", "correct": false}, {"option": "Web.xml file", "correct": true}, {"option": "Meta-inf/dispatcher.xml", "correct": false}, {"option": "Web-inf/ dispatcher.xml", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is true about an <strong>anonymous inner</strong> class?</p>", "options": [{"option": " It can extend exactly one class and implement exactly one interface. ", "correct": false}, {"option": " It can extend exactly one class and implement multiple interfaces. ", "correct": false}, {"option": " It can extend exactly one class or implement exactly one interface. ", "correct": true}, {"option": " It can implement multiple interfaces regardless of whether it also extends a class. ", "correct": false}], "level": "Medium"}, {"question": "<p>JavaScript is designed to _______________________.</p>", "options": [{"option": "Style HTML pages\r\n\t\t", "correct": false}, {"option": "Add interactivity to HTML pages\r\n\t\t", "correct": true}, {"option": "Perform server side scripting operation\r\n\t\t", "correct": false}, {"option": "Execute Query Related to DB on a server", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements is <strong>true</strong> for Javascript programs?</p>", "options": [{"option": "Every class must be inside a package. ", "correct": true}, {"option": "All classes in a single file are a part of different packages. ", "correct": false}, {"option": " If a package name is not specified, the classes in the file go into an named package.", "correct": false}, {"option": "If a package name is not specified, the classes will not be compiled.", "correct": false}], "level": "Medium"}, {"question": "<p>Consider the following information:</p>\n<ul>\n<li><strong>File</strong> is an abstract class and the <strong>toFile()</strong> method is defined in this class. </li>\n<li><strong>ImageFile</strong> and <strong>BinaryFile</strong> are concrete classes of the abstract class <strong>File</strong>.</li>\n<li><strong>toFile()</strong> is implemented in both the <strong>ImageFile</strong> and <strong>BinaryFile</strong> classes.</li>\n</ul>\n<p>If the <strong>File</strong> class references an <strong>ImageFile</strong> object in the memory and invokes the <strong>toFile</strong> method, then the method of which of the following classes will be invoked?</p>", "options": [{"option": "Binary File ", "correct": false}, {"option": "Image File ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Consider the following Java code:</p>\n<p></p><pre class=\"prettyprint\"><code>class Foo \n    {\n        class Bar{ }\n    }\n    class Pack \n    {\n        public static void main (String [] args) \n        {\n            Foo f = new Foo();\n            /* Line 10: Missing statement ? */\n        }\n    }\n</code></pre>\nWhich statement, inserted at line 10, creates an instance of Bar?<p></p>", "options": [{"option": "   Foo.Bar b = new Foo.Bar();   ", "correct": false}, {"option": "   Foo.Bar b = f.new Bar();   ", "correct": true}, {"option": "   Bar b = new f.Bar();   ", "correct": false}, {"option": "   Bar b = f.new Bar();   ", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statement is not true about abstract classes?</p>", "options": [{"option": " The child class of an abstract class must implement the inherited abstract method or be marked as \"abstract\".", "correct": false}, {"option": " Abstract classes can have constructors.", "correct": false}, {"option": "A class can be made abstract without any abstract method.", "correct": false}, {"option": "A class can inherit multiple abstract classes. ", "correct": true}], "level": "Hard"}, {"question": "<p>Consider the below code:\n</p><pre class=\"prettyprint\"><code>public class Person{\n    public void talk(){\n        System.out.print(\"I am a Person \");\n    }\n}\n\npublic class Student extends Person {\n    public void talk(){\n        System.out.print(\"I am a Student \");\n    }\n}\n</code></pre>\nWhat is the result of the piece of code below?<p></p>\n<pre class=\"prettyprint\"><code>public class Test{\n    public static void main(String args[]){\n        Person p = new Student();\n        p.talk();\n    }\n}\n</code></pre>", "options": [{"option": "I am a Person", "correct": false}, {"option": "I am a Student", "correct": true}, {"option": "I am a Person I am a Student", "correct": false}, {"option": "I am a Student I am a Person", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>static nested class</strong> is correct?</p>", "options": [{"option": "You must have a reference to an instance of the enclosing class in order to instantiate it.  ", "correct": false}, {"option": "It does not have access to non-static members of the enclosing class.  ", "correct": true}, {"option": "Its variables and methods must be static.  ", "correct": false}, {"option": "It must extend the enclosing class.  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct representation of a method in the <strong>abstract</strong> class?</p>", "options": [{"option": "  abstract double area() { }  ", "correct": false}, {"option": "  abstract double area()  ", "correct": false}, {"option": "  abstract double area();  ", "correct": true}, {"option": "  abstract double area(); { }  ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:\n</p><pre class=\"prettyprint\"><code>public class X {\n    public static void badMethod() {\n\n    } \n    public static void main(String [] args){\n        try{\n            badMethod();\n            System.out.print(\"A\");\n        }catch (Exception ex) {\n            System.out.print(\"B\");\n        } finally {\n            System.out.print(\"C\");\n        }\n        System.out.print(\"D\");\n    }\n}\n</code></pre><p></p>", "options": [{"option": " AC\t\r\n    ", "correct": false}, {"option": " ACD    ", "correct": true}, {"option": " BC    ", "correct": false}, {"option": " ABCD    ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:\n</p><pre class=\"prettyprint\"><code>public class MyProgram {\n\n    public static void main(String args[]){\n        try {\n            System.out.print(\"Hello world \");\n        }finally {\n            System.out.println(\"Finally executing \");\n        }\n    }\n\n}\n</code></pre><p></p>", "options": [{"option": "Nothing. The program will not compile because no exceptions are specified. ", "correct": false}, {"option": "Nothing. The program will not compile because no catch clauses are specified.", "correct": false}, {"option": "Hello world ", "correct": false}, {"option": "Hello world Finally executing ", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used by the <strong>Object</strong> class to obtain run time class of its instances?</p>", "options": [{"option": "get()", "correct": false}, {"option": "void getclass()", "correct": false}, {"option": "Class getclass()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes relies on its <strong>subclasses</strong> for the implementation of its methods?</p>", "options": [{"option": "TreeSet class", "correct": false}, {"option": "Abstract class", "correct": true}, {"option": "ArrayList class", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass A1{\n\n    A1(){\n\n    }\n}\n\nclass B1 extends A1 {\n\n    B1(){\n\n    }\n\n    B1(int b){\n\n    }\n}\n\nclass TestClass extends B1{\n\n    public static void main(String[] args){\n\n        TestClass obj = new TestClass();\n    }\n\n}\n</code></pre>", "options": [{"option": "The above code will run successfully without giving any output.", "correct": true}, {"option": "The above code will throw a run time error.", "correct": false}, {"option": "The above code has a compile time error.", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods of an <strong>Object</strong> class clones an object?</p>", "options": [{"option": "Objectcopy()", "correct": false}, {"option": "copy()", "correct": false}, {"option": "Objectclone()", "correct": false}, {"option": "clone()", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>access modifiers</strong> is used to control the access to a class member?</p>", "options": [{"option": "protected", "correct": false}, {"option": "public", "correct": false}, {"option": "abstract", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    class Test\n      {\n         Test(String s)\n         {\n            System.out.println(\"String\");\n         }\n         Test(Object o)\n         {\n          System.out.println(\"Object\");\n        }\n     }\n     class constructor\n     {\n        public static void main(String arg[])\n        {\n\n       Test s1=new Test(null);\n       Test s2=new Test(\"hacker\");\n        }\n     }\n</code></pre>", "options": [{"option": "Object  Object", "correct": false}, {"option": "String  String", "correct": true}, {"option": "String   Object", "correct": false}, {"option": "Object String", "correct": false}], "level": "Easy"}, {"question": "<p>In automation testing, if a code is developed by using selenium-java, which of the following packages is imported by default?</p>", "options": [{"option": "java.lang", "correct": true}, {"option": "java.utils", "correct": false}, {"option": "java.io ", "correct": false}, {"option": "java.*", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Super\n    { \n        public int i = 0; \n\n        public Super(String text) /* Line 4 */\n        {\n            i = 1; \n        } \n    } \n\n    class Sub extends Super\n    {\n        public Sub(String text)\n        {\n            i = 2; \n        } \n\n        public static void main(String args[])\n        {\n            Sub sub = new Sub(\"Hello\"); \n            System.out.println(sub.i); \n        } \n    }\n</code></pre>", "options": [{"option": "0  ", "correct": false}, {"option": "1  ", "correct": false}, {"option": "2   ", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to access the member of a <strong>base-class</strong> from a <strong>subclass</strong>?</p>", "options": [{"option": "upper", "correct": false}, {"option": "this", "correct": false}, {"option": "super", "correct": true}, {"option": "extern", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements regarding a <strong>static</strong> nested class is false?</p>", "options": [{"option": "It does not have access to nonstatic members of the enclosing class.", "correct": false}, {"option": "One must not have a reference to an instance of the enclosing class in order to instantiate it.", "correct": true}, {"option": "It's variables and methods must be static.", "correct": false}, {"option": "None of these\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is an <strong>unchecked</strong> exception?</p>", "options": [{"option": "Class ParseException", "correct": false}, {"option": "Class ClassNotFoundException", "correct": false}, {"option": "Class CloneNotSupportedException", "correct": false}, {"option": "Class StackOverflowError", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following methods is inherited from the <strong>AbstractMap</strong> class?</p>", "options": [{"option": "equals()", "correct": false}, {"option": "hashcode()", "correct": false}, {"option": "toString()", "correct": false}, {"option": "All of these.", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code> class TestClass {\n        public static void main(String args[] ) throws Exception {\n\n            try\n            {\n                int a=5;\n                int b=0;\n                int c=a/b;\n                System.out.println(c);\n            }\n            catch(Exception e)\n            {\n                System.out.print(\"There is an error\");\n            }\n            finally\n            {\n                System.out.println(\"There is no error\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "0\r\nThere is no error", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "There is an error\r\nThere is no error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following keywords is used to inherit the properties of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "this", "correct": false}, {"option": "extent", "correct": false}, {"option": "extends", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class A{\n\n    void show(){\n        System.out.println(\"Done\");\n    }\n}\n\n\npublic class Main {\n\n    public static void main(String[] args) {\n        A t \n        t.show();\n    }\n}\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the about of the following java code:</p>\n<pre class=\"prettyprint\"><code>public class Test implements Runnable\n{\n    public void run()\n    {\n        System.out.printf(\"Hacker \");\n        System.out.printf(\"Earth \");\n    }\n    public static void main(String[] args)\n    {\n        Test obj = new Test();\n        Thread thread = new Thread(obj);\n\n        thread.start();\n        System.out.printf(\"Hackers \");\n        try\n        {\n            thread.join();\n        } \n        catch (InterruptedException e) \n        {\n            e.printStackTrace();\n        }\n        System.out.println(\"End \");\n    }\n}\n</code></pre>", "options": [{"option": "Hackers Hacker Earth End", "correct": true}, {"option": "Hacker Earth Hackers End", "correct": false}, {"option": "Hacker Hackers Earth End", "correct": false}, {"option": "Either A or B", "correct": false}], "level": "Medium"}, {"question": "<p>What is the about of the following java code:</p>\n<pre class=\"prettyprint\"><code>public class Test extends Thread implements Runnable\n{\n    public void run()\n    {\n        System.out.printf(\"HackerEarth \");\n    }\n    public static void main(String[] args) throws InterruptedException\n    {\n        Test obj = new Test();\n        obj.run();\n        obj.start();\n    }\n}\n</code></pre>", "options": [{"option": "Runtime Error", "correct": true}, {"option": "Compilation Error", "correct": false}, {"option": "HackerEarth HackerEarth ", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the about of the following java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\npublic class linkedHashSetEx\n{\n    public static void main(String[] args)\n    {\n        List&lt;String&gt; list = new ArrayList&lt;&gt;();\n        list.add(\"One\");\n        list.add(\"Two\");\n        list.add(\"Three\");\n        list.add(\"Four\");\n\n\n        Set&lt;String&gt; set = new LinkedHashSet&lt;&gt;(list);\n\n        System.out.println(set);\n\n    }\n}\n</code></pre>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "[One, Two, Three, Four]", "correct": false}, {"option": "Can't guarantee the order of variable \"set\"", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following program?</p>\n<p>public class Test\n{\n    public static void main(String[] args)\n    {\n        double data = 444.324;\n        int value = data;\n        System.out.println(data);\n    }\n}</p>", "options": [{"option": "444.324", "correct": false}, {"option": "444", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following program?</p>\n<p>abstract class Vibrate \n{\n    static String s = \"-\";\n    Vibrate() \n    {\n        s += \"v\";\n    }\n}\npublic class Echo extends Vibrate \n{\n    Echo()<br />\n    {\n        this(7);\n        s += \"e\";\n    }\n    Echo(int x) \n    {\n        s += \"e2\";\n    }\n    public static void main(String[] args) \n    {\n        System.out.print(\"made \" + s + \" \");\n    }\n    static\n    {\n        Echo e = new Echo();\n        System.out.print(\"block \" + s + \" \");\n    }\n}</p>", "options": [{"option": "block -ve2e made -ve2e", "correct": true}, {"option": "block -ve made -ve", "correct": false}, {"option": "block -2e made -2e", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>class Grandparent \n{\n    public void Print() \n    {\n        System.out.println(\"Grandparent's Print()\"); \n    } \n}</p>\n<p>class Parent extends Grandparent \n{\n    public void Print() \n    {\n        System.out.println(\"Parent's Print()\"); \n    } \n}</p>\n<p>class Child extends Parent \n{\n    public void Print() <br />\n    {\n        super.super.Print();\n        System.out.println(\"Child's Print()\"); \n    } \n}</p>\n<p>public class Main \n{\n    public static void main(String[] args) \n    {\n        Child c = new Child();\n        c.Print(); \n    }\n}</p>", "options": [{"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}, {"option": "Child's Print()", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>To pass an online test, a candidate has to score a minimum of <strong>30</strong> points The maximum that he can score is <strong>100</strong> points. </p>\n<p>What are the valid equivalence values if the student passes the test?</p>", "options": [{"option": "30, 58, 75", "correct": false}, {"option": "32, 60, 99", "correct": true}, {"option": "29, 50, 101", "correct": false}, {"option": "0, 50, 100", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following program?</p>\n<p>public class Test\n{\n    public static void main(String[] args)\n    {\n        double data = 444.324;\n        int value = data;\n        System.out.println(data);\n    }\n}</p>", "options": [{"option": "444.324", "correct": false}, {"option": "444", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following program?</p>\n<p>abstract class Vibrate \n{\n    static String s = \"-\";\n    Vibrate() \n    {\n        s += \"v\";\n    }\n}\npublic class Echo extends Vibrate \n{\n    Echo()<br />\n    {\n        this(7);\n        s += \"e\";\n    }\n    Echo(int x) \n    {\n        s += \"e2\";\n    }\n    public static void main(String[] args) \n    {\n        System.out.print(\"made \" + s + \" \");\n    }\n    static\n    {\n        Echo e = new Echo();\n        System.out.print(\"block \" + s + \" \");\n    }\n}</p>", "options": [{"option": "block -ve2e made -ve2e", "correct": true}, {"option": "block -ve made -ve", "correct": false}, {"option": "block -2e made -2e", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>class Grandparent \n{\n    public void Print() \n    {\n        System.out.println(\"Grandparent's Print()\"); \n    } \n}</p>\n<p>class Parent extends Grandparent \n{\n    public void Print() \n    {\n        System.out.println(\"Parent's Print()\"); \n    } \n}</p>\n<p>class Child extends Parent \n{\n    public void Print() <br />\n    {\n        super.super.Print();\n        System.out.println(\"Child's Print()\"); \n    } \n}</p>\n<p>public class Main \n{\n    public static void main(String[] args) \n    {\n        Child c = new Child();\n        c.Print(); \n    }\n}</p>", "options": [{"option": "Compilation Error", "correct": true}, {"option": "Runtime Error", "correct": false}, {"option": "Child's Print()", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>To pass an online test, a candidate has to score a minimum of <strong>30</strong> points The maximum that he can score is <strong>100</strong> points. </p>\n<p>What are the valid equivalence values if the student passes the test?</p>", "options": [{"option": "30, 58, 75", "correct": false}, {"option": "32, 60, 99", "correct": true}, {"option": "29, 50, 101", "correct": false}, {"option": "0, 50, 100", "correct": false}], "level": "Easy"}, {"question": "<p>What is the definition of JRE (Java Runtime Environment)?</p>", "options": [{"option": "JRE is the Java Virtual Machine and the standard Java APIs coming with Java Standard Edition. ", "correct": true}, {"option": "JRE is the Java Virtual Machine and the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JRE is the Java Virtual Machine and java compiler.", "correct": false}, {"option": "JRE is the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JRE is the Java Virtual Machine, java compiler and classes and interfaces needed to develop Java files.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the definition of JDK (Java Development Kit)?</p>", "options": [{"option": "JDK is the Java Virtual Machine and the standard Java APIs coming with Java Standard Edition.", "correct": false}, {"option": "JDK is the Java Virtual Machine and the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JDK is the Java Virtual Machine and java compiler.", "correct": false}, {"option": "JDK is the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JDK is the Java Virtual Machine, java compiler and classes and interfaces needed to develop Java files.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of following sentences about java language are true?</p>\n<ol>\n<li>A language in which types are fixed at compile time. Most statically typed languages enforce this by requiring you to declare all variables with their datatypes before using them.</li>\n<li>A language in which types are discovered at execution time, it figures out what type a variable is when you first assign it a value.</li>\n<li>A language in which types are always enforced. E.g. If you have an integer, you can't treat it like a string without explicitly converting it.</li>\n<li>A language in which types may be ignored; e.g. you can concatenate the string '12' and the integer 3 to get the string '123', then treat that as the integer 123, all without any explicit conversion.</li>\n</ol>", "options": [{"option": "1, 3", "correct": true}, {"option": "1, 2", "correct": false}, {"option": "2, 3", "correct": false}, {"option": "3, 4", "correct": false}, {"option": "2, 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n    private static int[] a = { 1, 2, 3, 4, 5 };\n\n    public static void main(String args[]) {\n        for(int i = 1; i &lt;= 5; ++i) {\n            System.out.print(a[i]);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "12345", "correct": false}, {"option": "1234 and then exception is thrown", "correct": false}, {"option": "nothing, exception is thrown", "correct": false}, {"option": "2345 and then exception is thrown", "correct": true}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n    public static void main(String args[]) {\n        A a = new A();\n        a.foo();\n\n        B b = new B();\n        b.foo();\n        b.bar();\n\n        A ab = new B();\n        ab.foo();\n    }\n}\n\nclass A {\n    public void foo() {\n        System.out.print(\"Foo\");\n    }\n}\n\nclass B extends A {\n    public void foo() {\n        System.out.print(\"Bar\");\n    }\n    public void bar() {\n        System.out.print(\"Surprise\");\n    }\n}\n</code></pre>", "options": [{"option": "FooBarSurpriseBar", "correct": true}, {"option": "FooFooBarSurpriseBar ", "correct": false}, {"option": "FooFooBarSurpriseFoo", "correct": false}, {"option": "FooBarSurpriseFoo", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int i = 3;\n        if(i) {\n            System.out.println(\"if\");\n        } else {\n            System.out.println(\"else\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "if", "correct": false}, {"option": "else", "correct": false}, {"option": "nothing", "correct": false}, {"option": "won\u2019t compile", "correct": true}, {"option": "exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following code:</p>\n<pre class=\"prettyprint\"><code>public class A{\n    String a = \"1\";\n    String b = \"2\";\n\n    public static void main (String args[]){\n        A aObject = new A();\n\n        aObject.testMethod();\n        System.out.print(c);\n    }\n\n    public void testMethod(){\n        String c = \"3\";\n        System.out.print(a + \", \");\n    }\n}\n</code></pre>", "options": [{"option": "won\u2019t compile", "correct": true}, {"option": "\u201c1, 2 \u201d", "correct": false}, {"option": "\u201c3\u201d", "correct": false}, {"option": "\u201c1, 3\u201d", "correct": false}, {"option": "\u201d1\u201d", "correct": false}], "level": "Easy"}, {"question": "<p>Which value should be passed to super constructor, if you want to have access to each possible interface in following code?</p>\n<pre class=\"prettyprint\"><code>public class Tp_example extends TpWmCommonAbstract {\n\n    private WmDevice dut;\n    private WmDevice rem1;\n    private WmDevice rem2;\n\n    private final String CMD_OK = \".*OK.*\";\n    private final int CMD_TIMEOUT = 20;\n    private final String tpName = \"SendReceivePermanent\";\n\n    private String dutNumber;\n    private String remNumber;\n\n    public Tp_example() throws Exception { \n        super(x)\n\n        //...(some code)\n    }\n    //...(some code)\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following code?</p>\n<pre class=\"prettyprint\"><code>List &lt;String&gt; list = new ArrayList &lt;String&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}\n</code></pre>", "options": [{"option": "onetwo", "correct": false}, {"option": "onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "compiler error on line list.add(7);  ", "correct": true}, {"option": "compiler error on line for(String s : list) {", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class A {\n    public A(){\n        System.out.print(\"A_\");\n    }\n    public void showValue(){\n        System.out.print(\"A_\");\n    }\n}\n\nclass B extends A{\n    String val = \"B_\"; \n    public B(){\n        System.out.print(\"B_\");\n    }\n}\n\nclass C extends B{\n    public C(){\n        System.out.print(\"C_\");\n    }\n    public void showValue(){\n        System.out.print(val);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        C c = new C();\n        c.showValue();\n\n        A a = new A();\n        a.showValue();\n    }\n}\n</code></pre>", "options": [{"option": "C_C_B_B_A_A_", "correct": false}, {"option": "A_B_C_B_A_A_", "correct": true}, {"option": "A_C_C_B_A_B_", "correct": false}, {"option": "A_A_C_C_A_A_", "correct": false}, {"option": "A_B_C_B_B_A_", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        Person p1 = new Person(\"Jack\");\n        foo(p1);\n        System.out.println(p1.getName());\n\n        bar(p1);\n        System.out.println(p1.getName());\n    }\n\n    public static void foo(Person p){\n        p = new Person(\"Max\");\n        p.setName(\"John\");\n    }\n\n    public static void bar(Person p){\n        p.setName(\"Anna\");\n    }\n}\n</code></pre>", "options": [{"option": "Anna\\r\\nJack", "correct": false}, {"option": "Max\\r\\nAnna", "correct": false}, {"option": "Jack\\r\\nMax\r\n", "correct": false}, {"option": "Jack\\r\\nAnna\r\n", "correct": true}, {"option": "John\\r\\nAnna\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>abstract class A{\n    String name;\n    public void setUpDevice(){\n    System.out.print( TurnOn() + \" \" + setVoltage() + \" \" + setCurrent() \n+ \" \" + TurnOff());\n}\n\n    public String TurnOn(){\n        return \"Turned on\";\n    }\n\n    public String setVoltage(){\n        return \"5 Volts\";\n    }\n\n    public String setCurrent(){\n        return \"6 Amperes\";\n    }\n\n    public String TurnOff(){\n        return \"Turned off\";\n    }\n}\n\nclass B extends A{\n    public String setCurrent(){\n        return \"12 Amperes\";\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        A a = new B();\n        a.setUpDevice();\n    }\n}\n</code></pre>", "options": [{"option": "Turned on 5 Volts 12 Amperes Turned off", "correct": true}, {"option": "Turned on 5 Volts 6 Amperes Turned off", "correct": false}, {"option": "Turned on 5 Volts and then exception is thrown", "correct": false}, {"option": "class A won\u2019t compile", "correct": false}, {"option": "class B won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class A{\n    public static int x;\n\n    public void setNumber(int x){\n        this.x = x;\n    }\n\n}\n\n\npublic class Test {\n\n    public static void main (String[] args){\n        A a = new A();\n        a.setNumber(5);\n\n        A b = new A();\n        b.setNumber(10);\n\n        System.out.println(a.x + \" \" + b.x);\n    }\n\n}\n</code></pre>", "options": [{"option": "5 10 5 10", "correct": false}, {"option": "510 5 10", "correct": false}, {"option": "5 10", "correct": false}, {"option": "5 5", "correct": false}, {"option": "10 10", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>public class Test {\n        public static void main(String args[]){\n            try {\n                System.out.print(\"Hello world \");\n            }\n            finally {\n                System.out.print(\"Finally executing\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hello world", "correct": false}, {"option": "Finally executing", "correct": false}, {"option": "Hello world Finally executing ", "correct": true}, {"option": "Hello worldFinally executing", "correct": false}, {"option": "Hello world\\r\\nFinally executing\r\n\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Part of collection API (also called collection framework) contains: List, Map interfaces. Pick each correct statement from following:</p>\n<ol>\n<li>List uses a key-value pairs.</li>\n<li>Map uses a key-value pairs.</li>\n<li>List cannot have duplicate keys.</li>\n<li>Map cannot have duplicate keys.</li></ol>", "options": [{"option": "1, 2, 3", "correct": false}, {"option": "1, 2, 4", "correct": false}, {"option": "1, 3, 4", "correct": false}, {"option": "2, 3, 4", "correct": true}], "level": "Easy"}, {"question": "<p>There are following string values:</p>\n<p></p><pre class=\"prettyprint\"><code>^SLCC: 1,0,1,0,2,1,\"+0123456789\",145,\"Voice.mail_box\"\n^SLCC: 0,2,2,1,0,1,\"+0123456789\",129,\"Voice.mail_box\"\n^SLCC: 2,1,0,2,1,0,\"+0123456789\",161,\"Voice.mail_box\"\n</code></pre>\nevery containing 5 sections numbered like e.g.: <p></p>\n<pre class=\"prettyprint\"><code> 1. ^SLCC:\n 2. 1,0,1,0,2,1\n 3. \"+0123456789\"\n 4. 145\n 5. \"Voice.mail_box\"\n</code></pre>\n<p>Having in mind that </p>\n<ul>\n<li>every element in the 2.  section can be any digit in range <code>0-2</code> and </li>\n<li>the value of the 4. section must be one of following: 129, 145 ,161, </li>\n</ul>\n<p>choose the best Regular Expression stated as Java string matching all three string values.</p>", "options": [{"option": "\"^SLCC: [012]{6},\"+48601222222\",(145|129|161),\"Voice.mail_box\"\"", "correct": false}, {"option": "\"\\^SLCC:\\s([012],){6}\\\"\\+48601222222\\\",(145|129|161),\\\"Voice\\.mail_box\\\"\"", "correct": false}, {"option": "\"\\\\^SLCC:\\\\s([012],){6}\\\"\\\\+48601222222\\\",(145|129|161),\\\"Voice\\\\.mail_box\\\"\"", "correct": true}, {"option": "\"\\\\^SLCC:\\\\s([012],){6}\\\"\\\\+486012{6}\\\",(145|129|161),\\\"Voice\\\\.mail\\\\_box\\\"\"", "correct": false}], "level": "Easy"}, {"question": "<p>What is the definition of JRE (Java Runtime Environment)?</p>", "options": [{"option": "JRE is the Java Virtual Machine and the standard Java APIs coming with Java Standard Edition. ", "correct": true}, {"option": "JRE is the Java Virtual Machine and the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JRE is the Java Virtual Machine and java compiler.", "correct": false}, {"option": "JRE is the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JRE is the Java Virtual Machine, java compiler and classes and interfaces needed to develop Java files.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the definition of JDK (Java Development Kit)?</p>", "options": [{"option": "JDK is the Java Virtual Machine and the standard Java APIs coming with Java Standard Edition.", "correct": false}, {"option": "JDK is the Java Virtual Machine and the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JDK is the Java Virtual Machine and java compiler.", "correct": false}, {"option": "JDK is the set of Java packages, classes and interfaces needed to develop Java files.", "correct": false}, {"option": "JDK is the Java Virtual Machine, java compiler and classes and interfaces needed to develop Java files.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of following sentences about Java language are true?</p>\n<ol>\n<li>A language in which types are fixed at compile time. Most statically typed languages enforce this by requiring you to declare all variables with their datatypes before using them.</li>\n<li>A language in which types are discovered at execution time, it figures out what type a variable is when you first assign it a value.</li>\n<li>A language in which types are always enforced; e.g. if you have an integer, you can't treat it like a string without explicitly converting it.</li>\n<li>A language in which types may be ignored; e.g. you can concatenate the string '12' and the integer 3 to get the string '123', then treat that as the integer 123, all without any explicit conversion.</li>\n</ol>", "options": [{"option": "1, 3", "correct": true}, {"option": "1, 2", "correct": false}, {"option": "2, 3", "correct": false}, {"option": "3, 4", "correct": false}, {"option": "2, 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n    private static int[] a = { 1, 2, 3, 4, 5 };\n\n    public static void main(String args[]) {\n        for(int i = 1; i &lt;= 5; ++i) {\n            System.out.print(a[i]);\n        }\n    }\n}\n</code></pre>", "options": [{"option": "12345", "correct": false}, {"option": "1234 and then exception is thrown", "correct": false}, {"option": "nothing, exception is thrown", "correct": false}, {"option": "2345 and then exception is thrown", "correct": true}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n    public static void main(String args[]) {\n        A a = new A();\n        a.foo();\n\n        B b = new B();\n        b.foo();\n        b.bar();\n\n        A ab = new B();\n        ab.foo();\n    }\n}\n\nclass A {\n    public void foo() {\n        System.out.print(\"Foo\");\n    }\n}\n\nclass B extends A {\n    public void foo() {\n        System.out.print(\"Bar\");\n    }\n    public void bar() {\n        System.out.print(\"Surprise\");\n    }\n}\n</code></pre>", "options": [{"option": "FooBarSurpriseBar", "correct": true}, {"option": "FooFooBarSurpriseBar ", "correct": false}, {"option": "FooFooBarSurpriseFoo", "correct": false}, {"option": "FooBarSurpriseFoo", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of following code:</p>\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n    public static void main(String args[]) {\n        int i = 3;\n        if(i) {\n            System.out.println(\"if\");\n        } else {\n            System.out.println(\"else\");\n        }\n    }\n}\n</code></pre>", "options": [{"option": "if", "correct": false}, {"option": "else", "correct": false}, {"option": "nothing", "correct": false}, {"option": "won\u2019t compile", "correct": true}, {"option": "exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following code:</p>\n<pre class=\"prettyprint\"><code>public class A{\n    String a = \"1\";\n    String b = \"2\";\n\n    public static void main (String args[]){\n        A aObject = new A();\n\n        aObject.testMethod();\n        System.out.print(c);\n    }\n\n    public void testMethod(){\n        String c = \"3\";\n        System.out.print(a + \", \");\n    }\n}\n</code></pre>", "options": [{"option": "won\u2019t compile", "correct": true}, {"option": "\u201c1, 2 \u201d", "correct": false}, {"option": "\u201c3\u201d", "correct": false}, {"option": "\u201c1, 3\u201d", "correct": false}, {"option": "\u201d1\u201d", "correct": false}], "level": "Easy"}, {"question": "<p>Which value should be passed to super constructor, if you want to have access to each possible interface in following code?</p>\n<pre class=\"prettyprint\"><code>public class Tp_example extends TpWmCommonAbstract {\n\n    private WmDevice dut;\n    private WmDevice rem1;\n    private WmDevice rem2;\n\n    private final String CMD_OK = \".*OK.*\";\n    private final int CMD_TIMEOUT = 20;\n    private final String tpName = \"SendReceivePermanent\";\n\n    private String dutNumber;\n    private String remNumber;\n\n    public Tp_example() throws Exception { \n        super(x)\n\n        //...(some code)\n    }\n    //...(some code)\n}\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following code?</p>\n<pre class=\"prettyprint\"><code>List &lt;String&gt; list = new ArrayList &lt;String&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}\n</code></pre>", "options": [{"option": "onetwo", "correct": false}, {"option": "onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "compiler error on line list.add(7);  ", "correct": true}, {"option": "compiler error on line for(String s : list) {", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class A {\n    public A(){\n        System.out.print(\"A_\");\n    }\n    public void showValue(){\n        System.out.print(\"A_\");\n    }\n}\n\nclass B extends A{\n    String val = \"B_\"; \n    public B(){\n        System.out.print(\"B_\");\n    }\n}\n\nclass C extends B{\n    public C(){\n        System.out.print(\"C_\");\n    }\n    public void showValue(){\n        System.out.print(val);\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        C c = new C();\n        c.showValue();\n\n        A a = new A();\n        a.showValue();\n    }\n}\n</code></pre>", "options": [{"option": "C_C_B_B_A_A_", "correct": false}, {"option": "A_B_C_B_A_A_", "correct": true}, {"option": "A_C_C_B_A_B_", "correct": false}, {"option": "A_A_C_C_A_A_", "correct": false}, {"option": "A_B_C_B_B_A_", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class Person {\n    private String name;\n\n    public Person(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        Person p1 = new Person(\"Jack\");\n        foo(p1);\n        System.out.println(p1.getName());\n\n        bar(p1);\n        System.out.println(p1.getName());\n    }\n\n    public static void foo(Person p){\n        p = new Person(\"Max\");\n        p.setName(\"John\");\n    }\n\n    public static void bar(Person p){\n        p.setName(\"Anna\");\n    }\n}\n</code></pre>", "options": [{"option": "Anna\\r\\nJack", "correct": false}, {"option": "Max\\r\\nAnna", "correct": false}, {"option": "Jack\\r\\nMax\r\n", "correct": false}, {"option": "Jack\\r\\nAnna\r\n", "correct": true}, {"option": "John\\r\\nAnna\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>abstract class A{\n    String name;\n    public void setUpDevice(){\n    System.out.print( TurnOn() + \" \" + setVoltage() + \" \" + setCurrent() \n+ \" \" + TurnOff());\n}\n\n    public String TurnOn(){\n        return \"Turned on\";\n    }\n\n    public String setVoltage(){\n        return \"5 Volts\";\n    }\n\n    public String setCurrent(){\n        return \"6 Amperes\";\n    }\n\n    public String TurnOff(){\n        return \"Turned off\";\n    }\n}\n\nclass B extends A{\n    public String setCurrent(){\n        return \"12 Amperes\";\n    }\n}\n\npublic class Test {\n    public static void main(String[] args){\n        A a = new B();\n        a.setUpDevice();\n    }\n}\n</code></pre>", "options": [{"option": "Turned on 5 Volts 12 Amperes Turned off", "correct": true}, {"option": "Turned on 5 Volts 6 Amperes Turned off", "correct": false}, {"option": "Turned on 5 Volts and then exception is thrown", "correct": false}, {"option": "class A won\u2019t compile", "correct": false}, {"option": "class B won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>class A{\n    public static int x;\n\n    public void setNumber(int x){\n        this.x = x;\n    }\n\n}\n\n\npublic class Test {\n\n    public static void main (String[] args){\n        A a = new A();\n        a.setNumber(5);\n\n        A b = new A();\n        b.setNumber(10);\n\n        System.out.println(a.x + \" \" + b.x);\n    }\n\n}\n</code></pre>", "options": [{"option": "5 10 5 10", "correct": false}, {"option": "510 5 10", "correct": false}, {"option": "5 10", "correct": false}, {"option": "5 5", "correct": false}, {"option": "10 10", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code:</p>\n<pre class=\"prettyprint\"><code>public class Test {\n        public static void main(String args[]){\n            try {\n                System.out.print(\"Hello world \");\n            }\n            finally {\n                System.out.print(\"Finally executing\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "Hello world", "correct": false}, {"option": "Finally executing", "correct": false}, {"option": "Hello world Finally executing ", "correct": true}, {"option": "Hello worldFinally executing", "correct": false}, {"option": "Hello world\\r\\nFinally executing\r\n\r\n", "correct": false}], "level": "Easy"}, {"question": "<p>Part of collection API (also called collection framework) contains: List, Map interfaces. Pick each correct statement from following:</p>\n<ol>\n<li>List uses a key-value pairs.</li>\n<li>Map uses a key-value pairs.</li>\n<li>List cannot have duplicate keys.</li>\n<li>Map cannot have duplicate keys.</li></ol>", "options": [{"option": "1, 2, 3", "correct": false}, {"option": "1, 2, 4", "correct": false}, {"option": "1, 3, 4", "correct": false}, {"option": "2, 3, 4", "correct": true}], "level": "Easy"}, {"question": "<p>There are following string values:</p>\n<p></p><pre class=\"prettyprint\"><code>^SLCC: 1,0,1,0,2,1,\"+0123456789\",145,\"Voice.mail_box\"\n^SLCC: 0,2,2,1,0,1,\"+0123456789\",129,\"Voice.mail_box\"\n^SLCC: 2,1,0,2,1,0,\"+0123456789\",161,\"Voice.mail_box\"\n</code></pre>\nevery containing 5 sections numbered like e.g.: <p></p>\n<pre class=\"prettyprint\"><code> 1. ^SLCC:\n 2. 1,0,1,0,2,1\n 3. \"+0123456789\"\n 4. 145\n 5. \"Voice.mail_box\"\n</code></pre>\n<p>Having in mind that </p>\n<ul>\n<li>every element in the 2.  section can be any digit in range <code>0-2</code> and </li>\n<li>the value of the 4. section must be one of following: 129, 145 ,161, </li>\n</ul>\n<p>choose the best Regular Expression stated as Java string matching all three string values.</p>", "options": [{"option": "\"^SLCC: [012]{6},\"+48601222222\",(145|129|161),\"Voice.mail_box\"\"", "correct": false}, {"option": "\"\\^SLCC:\\s([012],){6}\\\"\\+48601222222\\\",(145|129|161),\\\"Voice\\.mail_box\\\"\"", "correct": false}, {"option": "\"\\\\^SLCC:\\\\s([012],){6}\\\"\\\\+48601222222\\\",(145|129|161),\\\"Voice\\\\.mail_box\\\"\"", "correct": true}, {"option": "\"\\\\^SLCC:\\\\s([012],){6}\\\"\\\\+486012{6}\\\",(145|129|161),\\\"Voice\\\\.mail\\\\_box\\\"\"", "correct": false}], "level": "Easy"}, {"question": "<p>What happens if a class does not have name in Java?</p>", "options": [{"option": "It will have a destructor.  ", "correct": false}, {"option": "It will have a constructor.  ", "correct": false}, {"option": "It can not have a constructor or a destructor.", "correct": false}, {"option": "An error occurs.", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following lists contains keywords related to Java?</p>", "options": [{"option": "class, if, void, long, Int, continue  ", "correct": false}, {"option": "goto, instanceof, native, finally, default, throws  ", "correct": false}, {"option": "try, virtual, throw, final, volatile, transient  ", "correct": true}, {"option": "strictfp, constant, super, implements, do  ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a reserved keyword in Java?</p>", "options": [{"option": "Method  ", "correct": false}, {"option": "Native  ", "correct": true}, {"option": "Subclasses  ", "correct": false}, {"option": "Reference  ", "correct": false}], "level": "Easy"}, {"question": "<p>In C++, which of the following statements compiles without an error?</p>", "options": [{"option": "int a = Math.abs(-5); ", "correct": true}, {"option": "int b = Math.abs(5.0); ", "correct": false}, {"option": "int c = Math.abs(5.5F); ", "correct": false}, {"option": "int d = Math.abs(5L); ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a valid declaration of a string in Java?</p>", "options": [{"option": "String s1 = null;  ", "correct": true}, {"option": "String s2 = 'null';  ", "correct": false}, {"option": "String s3 = (String) 'abc';  ", "correct": false}, {"option": "String s4 = (String) '\\ufeed';  ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to throw an error, when the <strong>param</strong> given to the thread\u2019s <strong>setPriority( )</strong> method is not in the 1 to 10 range?</p>", "options": [{"option": "ArithmeticException   ", "correct": false}, {"option": "IllegalArgumentException   ", "correct": true}, {"option": "IllegalValueException    ", "correct": false}, {"option": "NullPointerException", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the <strong>GUI</strong> components is incorrect?</p>", "options": [{"option": "Swing exists from version 1.2 of the jdk. ", "correct": false}, {"option": "AWT stands for Abstract Window Toolkit. ", "correct": false}, {"option": "AWT components can not be placed on Swing containers. ", "correct": false}, {"option": "The AWT classes are deprecated. ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements is true for this Java code:</p>\n<pre class=\"prettyprint\"><code>\nclass MyThread extends Thread{\n\n    public String hel;\n\n    public void run(){\n        System.out.print(hel);\n    }\n\n}\n\npublic class TestClass{\n\n    public static void main(String args[]){\n\n        MyThread t1 = new MyThread();\n        MyThread t2 = new MyThread();\n        t1.start();\n        t2.start();\n        System.out.print(\"3 \");\n    }\n}\n\n</code></pre>", "options": [{"option": "If you execute this program, the result is always one two three.\r\n  ", "correct": false}, {"option": "If you execute this program, the result is always three one two.\r\n  ", "correct": false}, {"option": "The result of this program is undetermined.  ", "correct": true}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\n</p><pre class=\"prettyprint\"><code>    package foo; \n    import java.util.Vector; /* Line 2 */\n    private class MyWord extends Word \n    {\n        int i = 4; /* Line 5 */\n        public MyWord() \n        { \n            i = 2; \n        } \n    } \n    public class MyNewWord extends MyWord \n    {\n        public MyNewVector () \n        { \n            i = 4; /* Line 15 */\n        } \n        public static void main (String args []) \n        { \n            MyWord v = new MyNewWord(); /* Line 19 */\n        } \n    }\n</code></pre><p></p>", "options": [{"option": "  Compilation will succeed.  ", "correct": false}, {"option": "  Compilation will fail at line 3  ", "correct": true}, {"option": "  Compilation will fail at line 5.  ", "correct": false}, {"option": "  Compilation will fail at line 15.  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these fragments when inserted is used to compile the following Java code:\n</p><pre class=\"prettyprint\"><code>public class Vat \n    { \n        public void someOuterMethod() \n        {\n            //Line 5 \n        } \n        public class Var { } \n\n        public static void main(String[] argv) \n        {\n            Vat ot = new Vat(); \n            //Line 10\n        } \n    }\n\n</code></pre><p></p>", "options": [{"option": "  new Inner(); //At line 5  ", "correct": true}, {"option": "  new Inner(); //At line 10  ", "correct": false}, {"option": "  new ot.Inner(); //At line 10  ", "correct": false}, {"option": "  new Outer.Inner(); //At line 10  ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements, when added to the beginning of the following Java code, will allow it to compile:</p>\n<pre class=\"prettyprint\"><code>    public class NewSet extends java.util.TreeSet\n    {\n        public static void main(String [] args) \n        {\n            java.util.Set t = new java.util.Set();\n            t.clear();\n        }\n        public void clear() \n        {\n            TreeMap m = new TreeMap();\n            m.clear();\n        }\n    }\n\n</code></pre>", "options": [{"option": "No statement required", "correct": false}, {"option": "import java.util.*; and import java.util.TreeMap;", "correct": true}, {"option": "import.java.util.Tree*; and import java.util.TreeSet;", "correct": false}, {"option": "import.java.util.Tree*; and import java.util.TreeMap;", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class PassS \n    {\n        public static void main(String [] args) \n        {\n            PassS p = new PassS();\n            p.start();\n        }\n\n        void start() \n        {\n            String s1 = \"step\";\n            String s2 = fix(s1);\n            System.out.println(s1 + \" \" + s2);\n        }\n\n        String fix(String s1) \n        {\n            s1 = s1 + \"steem\";\n            System.out.print(s1 + \" \");\n            return \"steem\";\n        }\n    }\n</code></pre>", "options": [{"option": "step steem  ", "correct": false}, {"option": "stepsteem steem   ", "correct": false}, {"option": "steem step steem\t   ", "correct": false}, {"option": "stepsteem step steem   ", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following is a <strong>reserved word</strong> in the Java?</p>", "options": [{"option": "   method   ", "correct": false}, {"option": "   native   ", "correct": true}, {"option": "   subclasses   ", "correct": false}, {"option": "   reference   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about the <strong>method-local inner class</strong> is correct?</p>", "options": [{"option": "  It must be marked 'final'  ", "correct": false}, {"option": "  It can be marked 'abstract'  ", "correct": true}, {"option": "  It can be marked 'public'  ", "correct": false}, {"option": "  It can be marked 'static'  ", "correct": false}], "level": "Easy"}, {"question": "<p>The JDBC-ODBC bridge is ________________.</p>", "options": [{"option": "Three tiered  ", "correct": false}, {"option": "Multithreaded  ", "correct": true}, {"option": "Two tiered", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following modules is synchronized in Java?</p>", "options": [{"option": "Set    ", "correct": false}, {"option": "LinkedList    ", "correct": false}, {"option": "Vector    ", "correct": true}, {"option": "WeakHashMap    ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following can be thrown by using the <strong>throw</strong> keyword in Java?</p>\n<ol>\n<li>Error</li>\n<li>Event</li>\n<li>Object</li>\n<li>Throwable</li>\n<li>Exception</li>\n<li>RuntimeException</li>\n</ol>", "options": [{"option": " 1, 2, 3 and 4 ", "correct": false}, {"option": " 2, 3, 4 and 5 ", "correct": false}, {"option": " 1, 4, 5 and 6 ", "correct": true}, {"option": " 2, 4, 5 and 6 ", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>window</strong> property is used _____________________________.</p>", "options": [{"option": "As an extension of other objects", "correct": false}, {"option": "To refer to window object itself", "correct": false}, {"option": "As an extension of other window objects", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to represent the content that is displayed in the window?</p>", "options": [{"option": "Document", "correct": true}, {"option": "Content", "correct": false}, {"option": "Window", "correct": false}, {"option": "Frame", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to access the first child of a node?</p>", "options": [{"option": "timestamp.Child1", "correct": false}, {"option": "timestamp.Child(1)", "correct": false}, {"option": "timestamp.Child(0)", "correct": false}, {"option": "timestamp.firstChild", "correct": true}], "level": "Medium"}, {"question": "<p>What is the significance of the event handlers in the JavaScript?</p>", "options": [{"option": "The event handlers add inner-HTML pages to the code.", "correct": false}, {"option": "The event handlers performs the handling of exceptions and occurrences.", "correct": false}, {"option": "The event handlers allow the JavaScript code to alter the behavior of windows.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following functions is necessary for programs that extensively use event handlers?</p>", "options": [{"option": "Modular ", "correct": false}, {"option": "Split up ", "correct": false}, {"option": "Nested ", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is not an object in JavaScript?</p>", "options": [{"option": "Element", "correct": false}, {"option": "Location", "correct": false}, {"option": "Position", "correct": true}, {"option": "Window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following statements is used to change the class and let the stylesheet specify the details?</p>", "options": [{"option": "timestamp.className = \"change\";", "correct": false}, {"option": "timestamp.className = \"specify\";", "correct": false}, {"option": "timestamp.className = \"move\";", "correct": false}, {"option": "timestamp.className = \"highlight\"", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that can only be invoked once?</p>", "options": [{"option": "setTotaltime()", "correct": false}, {"option": "setTimeout()", "correct": true}, {"option": "setInterval()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to register a function that is to be invoked repeatedly after a specified period?</p>", "options": [{"option": "setTimeout()", "correct": false}, {"option": "setTotaltime()", "correct": false}, {"option": "setInterval()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following handler methods is invoked at the occurrence of uncaught exceptions?</p>", "options": [{"option": "onhalt", "correct": false}, {"option": "onerror", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects includes the <strong>location</strong> property?</p>", "options": [{"option": "Position", "correct": false}, {"option": "Window", "correct": true}, {"option": "Element", "correct": false}, {"option": "Location", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following frameworks is used to focus on the <strong>DOM</strong> and <strong>Ajax</strong> utilities?</p>", "options": [{"option": "jQuery", "correct": false}, {"option": "Prototype", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the significance of the <strong>Dojo</strong> framework in JavaScript?</p>", "options": [{"option": "It focuses on the 'DOM' and the 'Ajax' utilities.", "correct": false}, {"option": "It advertises incredible depth.", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What of the following versions of the <strong>YUI</strong> framework is incompatible in JavaScript?</p>", "options": [{"option": "YUI2 ", "correct": false}, {"option": "YUI1 ", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web applications is included in the API framework?</p>", "options": [{"option": "Dojo", "correct": false}, {"option": "YUI", "correct": false}, {"option": "GWT", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is represented by the <strong>location</strong> property?</p>", "options": [{"option": "DOM", "correct": true}, {"option": "URL", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is not included by the <strong>window.location</strong> object?</p>", "options": [{"option": "protocol", "correct": false}, {"option": "host", "correct": false}, {"option": "hostname", "correct": false}, {"option": "hostee", "correct": true}], "level": "Medium"}, {"question": "<p>What is the return type of the <strong>hash</strong> property in JavaScript?</p>", "options": [{"option": "Query string", "correct": false}, {"option": "Packets", "correct": false}, {"option": "String", "correct": false}, {"option": "Fragment identifier", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following frameworks is used to define the <strong>decodeURIComponent()</strong> method?</p>", "options": [{"option": "Server-side", "correct": false}, {"option": "Client-side", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following methods is used to remove the current document from the browsing history before loading the new one?</p>", "options": [{"option": "modify()", "correct": false}, {"option": "assign()", "correct": false}, {"option": "replace()", "correct": true}, {"option": "remove()", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how is <strong>browser history</strong> affected if a window has a child window?</p>", "options": [{"option": "Numerically interleaved", "correct": false}, {"option": "Chronologically interleaved", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the <strong>length</strong> property belongs to ___________________________ object.</p>", "options": [{"option": "Window", "correct": false}, {"option": "Element", "correct": false}, {"option": "History", "correct": true}, {"option": "Document", "correct": false}], "level": "Hard"}, {"question": "<p>What is the datatype of the <strong>go()</strong> method\u2019s parameter in JavaScript?</p>", "options": [{"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Integer", "correct": true}, {"option": "Double", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the special feature of the modern web applications?</p>", "options": [{"option": "Must load the document to manipulate", "correct": false}, {"option": "Can alter contents without loading document", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is preferred in JavaScripting?</p>", "options": [{"option": "Software testing", "correct": false}, {"option": "Blackbox testing", "correct": false}, {"option": "Feature testing", "correct": true}, {"option": "Whitebox testing", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following properties is used for <strong>browser sniffing</strong>?</p>", "options": [{"option": "Platform", "correct": false}, {"option": "AppVersion", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, where is the information of the <strong>userAgent</strong> property located?</p>", "options": [{"option": "App Id", "correct": false}, {"option": "App Version", "correct": true}, {"option": "Platform", "correct": false}, {"option": "App Name", "correct": false}], "level": "Medium"}, {"question": "<p>In HTML, a document is nested by using ____________________.</p>", "options": [{"option": "frame", "correct": false}, {"option": "nest", "correct": false}, {"option": "iframe", "correct": true}, {"option": "into", "correct": false}], "level": "Medium"}, {"question": "<p>The client-side JavaScript considers windows, tabs, iframes, and frames to be _________________________.</p>", "options": [{"option": "Browsing information", "correct": false}, {"option": "Browsing contexts", "correct": true}, {"option": "Window contexts", "correct": false}, {"option": "Window objects", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which object serves as the <strong>global</strong> object at the top of the scope chain?</p>", "options": [{"option": "Hash", "correct": false}, {"option": "Property", "correct": false}, {"option": "Element ", "correct": false}, {"option": "Window", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following statements about the usage of the fourth argument in <strong>open()</strong> is true?</p>", "options": [{"option": "Second argument is a name of a retired window", "correct": false}, {"option": "First argument is a name of an existing window", "correct": false}, {"option": "Second argument is a name of an existing window", "correct": true}, {"option": "First argument is a name of a retired window", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is the <strong>inner</strong> frame within a top-level window?</p>", "options": [{"option": "parent(parent)", "correct": false}, {"option": "parent.parent", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these is used to query a document for an element?</p>", "options": [{"option": "A specified id attribute", "correct": false}, {"option": "By matching the specified CSS selector", "correct": false}, {"option": "A specified tag name", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the syntax used to describe elements in CSS?</p>", "options": [{"option": "Protectors", "correct": false}, {"option": "Selectors", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following web applications is equivalent to the <strong>querySelectorAll()</strong> method?</p>", "options": [{"option": "#()", "correct": false}, {"option": "&()", "correct": false}, {"option": "$()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is an example of the <strong>shortcut property</strong>?</p>", "options": [{"option": "Border", "correct": false}, {"option": "Font", "correct": false}, {"option": "Text", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is associated with an event?</p>", "options": [{"option": "Event type", "correct": false}, {"option": "Event target", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, a browser invokes the <strong>handler</strong> when _____________________________________.</p>", "options": [{"option": "The program begins", "correct": false}, {"option": "Any event occurs", "correct": false}, {"option": "Specified event occurs", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, the process by which a browser decides the objects on which it triggers event handlers is called ___________________________.</p>", "options": [{"option": "Event triggering", "correct": false}, {"option": "Event propagation", "correct": true}, {"option": "Event listening", "correct": false}, {"option": "Event handling", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is directly connected to a specific input device?</p>", "options": [{"option": "Device-independent input", "correct": false}, {"option": "Device-dependent input", "correct": true}, {"option": "User interface", "correct": false}, {"option": "State change", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following events is a high-level event?</p>", "options": [{"option": "User interface ", "correct": true}, {"option": "Device-independent ", "correct": false}, {"option": "Device-dependent ", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following events is not directly connected to a specific input device?</p>", "options": [{"option": "User interface", "correct": false}, {"option": "Device-independent", "correct": true}, {"option": "Device-dependent", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties specifies the position and the button state of the mouse?</p>", "options": [{"option": "ClientY and ClientX", "correct": false}, {"option": "AltKey and CtrlKey", "correct": false}, {"option": "ClientX and ClientY", "correct": true}, {"option": "MetaKey and ShiftKey", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how to detect and respond to mouse drags?</p>", "options": [{"option": "Registering a mouseover handler", "correct": false}, {"option": "Releasing a mousedown handler", "correct": false}, {"option": "Registering a mousedown handler", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, <strong>mouse out</strong> event is fired when the _______________________________________.</p>", "options": [{"option": "Mouse is no longer over an element", "correct": true}, {"option": "Mouse is over an element", "correct": false}, {"option": "Mouse is hovered", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following events is currently unnecessary?</p>", "options": [{"option": "DOM Activate", "correct": false}, {"option": "DOM FocusIn", "correct": false}, {"option": "DOM Node Inserted", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following objects is passed as an argument to the handler for <strong>keydown</strong>, <strong>keyup</strong>, and <strong>keypress</strong> events?</p>", "options": [{"option": "Keyboard event", "correct": true}, {"option": "Key event", "correct": false}, {"option": "Mouse event", "correct": false}, {"option": "Alphabet event", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following reports <strong>rotation</strong> around three different mouse wheel axes?</p>", "options": [{"option": "ctrlKey", "correct": false}, {"option": "alterX", "correct": false}, {"option": "alterY", "correct": false}, {"option": "deltaX", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following properties specifies the string of text entered?</p>", "options": [{"option": "Message", "correct": false}, {"option": "Data", "correct": true}, {"option": "String", "correct": false}, {"option": "Text", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is defined by the <strong>specification</strong>?</p>", "options": [{"option": "Data Method", "correct": false}, {"option": "Input", "correct": false}, {"option": "Input Method", "correct": true}, {"option": "Input Data Method", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following properties holds a <strong>data transfer object</strong>  that contains information about the data being transferred and the formats in which it is available?</p>", "options": [{"option": "DataTransfer", "correct": true}, {"option": "TransferData", "correct": false}, {"option": "DataExchange", "correct": false}, {"option": "ExchangeData", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following APIs allows scripts in a document from one server to exchange messages with scripts in a document from another server?</p>", "options": [{"option": "Cross-Document Messaging API", "correct": true}, {"option": "Web application API", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to specify the key type when pressed?</p>", "options": [{"option": "KeyName", "correct": false}, {"option": "KeyCode", "correct": true}, {"option": "KeyType", "correct": false}, {"option": "KeyProperty", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, when the shift key is pressed for adding punctuation character, the value of the <strong>keyCode</strong> property is _______________________________________.</p>", "options": [{"option": "Special characters", "correct": false}, {"option": "Alphabets", "correct": false}, {"option": "Alphanumeric", "correct": false}, {"option": "Digits", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following values will not be held by the key property if the key is a function key?</p>", "options": [{"option": "F8", "correct": true}, {"option": "F2", "correct": false}, {"option": "Home", "correct": false}, {"option": "Left", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to add <strong>binding</strong> in JavaScript?</p>", "options": [{"option": "Binding()", "correct": false}, {"option": "Add_bind()", "correct": false}, {"option": "Bind()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is used to remove <strong>binding</strong> in JavaScript?</p>", "options": [{"option": "Unbind()", "correct": false}, {"option": "Removebind()", "correct": false}, {"option": "Remove(Bind b)", "correct": false}, {"option": "Unbind()", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following parameters is passed to the <strong>keymap</strong> after installation?</p>", "options": [{"option": "Key property", "correct": false}, {"option": "Key name", "correct": false}, {"option": "Keydown event\u2019s object", "correct": true}, {"option": "Key stroke", "correct": false}], "level": "Hard"}, {"question": "<p>How many number of <strong>node object methods</strong> is available in JavaScript?</p>", "options": [{"option": "Nineteen", "correct": false}, {"option": "Eighteen", "correct": true}, {"option": "Twenty", "correct": false}, {"option": "Twenty one", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to associate an <strong>object</strong> to a <strong>key</strong> on a node?</p>", "options": [{"option": "getUserData()", "correct": false}, {"option": "cloneNode()", "correct": false}, {"option": "setUserData (key, data, handler)", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to compare the placement of two <strong>document</strong> nodes in the <strong>DOM</strong> hierarchy?</p>", "options": [{"option": "compareDocumentPosition()", "correct": true}, {"option": "cloneNode()", "correct": false}, {"option": "getUserData()", "correct": false}, {"option": "getFeature()", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following explains the nature of a <strong>cookie</strong>?</p>", "options": [{"option": "Non-Volatile", "correct": false}, {"option": "Volatile", "correct": false}, {"option": "Intransient", "correct": false}, {"option": "Transient", "correct": true}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following properties is used to skip or seek to the desired location in an audio or video?</p>", "options": [{"option": "audioSkip", "correct": false}, {"option": "currentTime", "correct": true}, {"option": "videoSkip", "correct": false}, {"option": "SkiptoTime", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following shows a better <strong>runtime</strong> performance in coalescing functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": false}, {"option": "Firefox UsingFunct", "correct": true}, {"option": "Firefox UsingObject", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following has a poor <strong>runtime</strong> performance in coalescing functions and objects?</p>", "options": [{"option": "Firefox unwoundfun", "correct": true}, {"option": "Firefox UsingFunct", "correct": false}, {"option": "Firefox UsingObject", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following properties has <strong>false</strong> as default value?</p>", "options": [{"option": "disableWhenFirebugActive", "correct": false}, {"option": "disableXHRListener", "correct": true}, {"option": "showIconWhenHidden", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the two output formats of <strong>YSlow</strong> are ________________________________________.</p>", "options": [{"option": "JIT, TRD", "correct": false}, {"option": "TAP, JUnit", "correct": true}, {"option": "JKP, RFD", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to analyze the performance of a web page?</p>", "options": [{"option": "WebPageTest", "correct": false}, {"option": "YSlow", "correct": true}, {"option": "Firebug", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>YSlow</strong> for Mobile works as _________________________________.</p>", "options": [{"option": "Bookwise", "correct": false}, {"option": "Booklet", "correct": false}, {"option": "Bookmaklet", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>WebPageTest</strong> is used to ____________________________________.</p>", "options": [{"option": "Run any common website", "correct": false}, {"option": "Run private websites", "correct": true}, {"option": "Run QA testing", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following folders contains the <strong>minify</strong> control panel?</p>", "options": [{"option": "/builder/", "correct": false}, {"option": "/min/builder/", "correct": true}, {"option": "/minify/build", "correct": false}, {"option": "/minify/builder", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following indicates the function of a <strong>closure</strong> compiler?</p>", "options": [{"option": "Originates the JavaScript", "correct": false}, {"option": "Compiles the JavaScript", "correct": false}, {"option": "Rewrites the JavaScript", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong>minify</strong> returns _________________________ to the <strong>script</strong> tag.</p>", "options": [{"option": "File I/O", "correct": false}, {"option": "Minify JavaScript", "correct": false}, {"option": "HTTP Request", "correct": false}, {"option": "Gzip encoded", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>    var httpserver = new http.Server();\n</code></pre>", "options": [{"option": "Create HTTP connection between the Client and the Server", "correct": false}, {"option": "Create an HTTP Server", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>pushState()</strong> method is used to __________________.</p>", "options": [{"option": "Remove a state", "correct": false}, {"option": "Replace a state", "correct": false}, {"option": "Add a new state", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>par()</strong> method is used to make the text___________________________________.</p>", "options": [{"option": "Vertical", "correct": false}, {"option": "Horizontal", "correct": true}, {"option": "Diagonal", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Javascript, which of the following methods is valid?</p>", "options": [{"option": "constructor()", "correct": false}, {"option": "toExponential()", "correct": false}, {"option": "toLocaleString()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong><code>importNode()</code></strong> method is used for __________________________________________________.</p>", "options": [{"option": "Copying nodes from other documents without removing the original node", "correct": true}, {"option": "Copying nodes from other documents and removing the original node", "correct": false}, {"option": "Removing nodes from other documents", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following methods is used to dispatch a <strong>SyntheticEvent</strong> object?</p>", "options": [{"option": "dispatch()", "correct": false}, {"option": "dispatchEvent()", "correct": true}, {"option": "dispatch(Event)", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following methods is used to specifically execute a command?</p>", "options": [{"option": "execcommand()", "correct": false}, {"option": "execCommand()", "correct": true}, {"option": "exec(command)", "correct": false}, {"option": "exec(command id)", "correct": false}], "level": "Hard"}, {"question": "<p>In Javascript, if there are <strong>noscript</strong> tags in HTML __________________________.</p>", "options": [{"option": "The DOM elements should be positioned", "correct": false}, {"option": "The DOM elements should be painted", "correct": false}, {"option": "The script is executed", "correct": false}, {"option": "DOM nodes are built in the render tree", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following actions is not included to the <strong>Render Engine</strong> workflow?</p>", "options": [{"option": "Parse Content", "correct": false}, {"option": "Build DOM nodes in render tree", "correct": false}, {"option": "Paint DOM elements", "correct": false}, {"option": "None of these", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following types of variables is converted to <strong>DOM</strong> elements by the rendering engine?</p>", "options": [{"option": "Strings", "correct": false}, {"option": "Tokens", "correct": true}, {"option": "Addresses", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, which of the following is the solution to the absence of a script tag with an <strong>src</strong> attribute?</p>", "options": [{"option": "Resend the scripts", "correct": false}, {"option": "Create an inline JavaScript", "correct": true}, {"option": "Resend the scripts and create an inline JavaScript", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, the <strong><code>startTimeLogging()</code></strong> method is used to ________________________________.</p>", "options": [{"option": "Start the timer", "correct": false}, {"option": "Capture time logging", "correct": false}, {"option": "Capture timing data for referencing", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following datatypes is optionally accepted by the <strong>async</strong> attribute?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Boolean", "correct": true}, {"option": "Decimal", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong><code>localeCompare()</code></strong> method is used to _________________________________________________.</p>", "options": [{"option": "Check if the reference string is validated", "correct": false}, {"option": "Check if the reference string comes before, after or is equal as the compareString in sort order", "correct": true}, {"option": "Check if the string is a local copy", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>When the <strong><code>showPerformanceMetrics()</code></strong> method is called before loading the <strong>remote</strong> script in a JavaScript program, the compiler _____________________________________.</p>", "options": [{"option": "Throws an exception", "correct": false}, {"option": "Throws an error", "correct": true}, {"option": "Loads by itself", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>domLoading</strong> attribute is used to indicate that the ____________________________.</p>", "options": [{"option": "Document exists", "correct": false}, {"option": "Document is ready to load", "correct": false}, {"option": "Document has loaded", "correct": false}, {"option": "Document is beginning to load", "correct": true}], "level": "Easy"}, {"question": "<p>The initial step to set up a CSS <strong>lazy</strong> loading through JavaScript is ________________________________.</p>", "options": [{"option": "Loading the script", "correct": false}, {"option": "Fetching data", "correct": true}, {"option": "Loading the page", "correct": false}, {"option": "Adding the event listener", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript,  the <strong>document.location</strong> property is referenced from within an object to ___________________________.</p>", "options": [{"option": "Traverse the queue", "correct": false}, {"option": "Find bugs", "correct": false}, {"option": "Traverse the stack", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, why are the <strong>local scope</strong> variables created to hold value?</p>", "options": [{"option": "To optimize the testing process", "correct": false}, {"option": "To increase the speed ", "correct": false}, {"option": "To minimize memory usage", "correct": false}, {"option": "To cache the reference document.location", "correct": true}], "level": "Hard"}, {"question": "<p>In JavaScript, which of the following is used to access the <strong>closure</strong> compiler?</p>", "options": [{"option": "Runtime application", "correct": false}, {"option": "Web application", "correct": true}, {"option": "Standalone application", "correct": false}, {"option": "All these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following functions allows a <strong>worker</strong> to terminate itself?</p>", "options": [{"option": "close()", "correct": true}, {"option": "exit()", "correct": false}, {"option": "terminate()", "correct": false}, {"option": "halt()", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following methods is used to upload a <strong>Blob</strong> to a server?</p>", "options": [{"option": "send()", "correct": true}, {"option": "pass()", "correct": false}, {"option": "upload()", "correct": false}, {"option": "store()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the central concept of JavaScript memory management?</p>", "options": [{"option": "Reliability", "correct": false}, {"option": "Reachability", "correct": true}, {"option": "Efficiency", "correct": false}, {"option": "Transparency", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes contains only <strong>floating point</strong> functions?</p>", "options": [{"option": "Math", "correct": true}, {"option": "Process", "correct": false}, {"option": "System", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            int x = 3.14;\n            int y = (int) Math.abs(x);\n            System.out.print(y);\n        }\n    }\n</code></pre>", "options": [{"option": "3.14", "correct": false}, {"option": "3.0", "correct": false}, {"option": "3", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n            public static void main(String args[]) \n            {\n               double x = 3.1;  \n                double y = 4.5;\n                double z = Math.max( x, y );\n                System.out.print(z);\n            }\n        }\n</code></pre>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "3.1", "correct": false}, {"option": "4.5", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is not a member of the <strong>java.io</strong> package?</p>", "options": [{"option": "StringReader", "correct": false}, {"option": "String", "correct": true}, {"option": "Writer", "correct": false}, {"option": "File", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following interfaces is not a member of the <strong>java.io</strong> package?</p>", "options": [{"option": "DataInput", "correct": false}, {"option": "ObjectFilter", "correct": true}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following classes is not related to an <strong>I/O</strong> stream in terms of functionality?</p>", "options": [{"option": "Writer", "correct": false}, {"option": "File", "correct": true}, {"option": "InputStream", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to test whether the specified element is a file or a directory?</p>", "options": [{"option": "IsFile()", "correct": false}, {"option": "Isfile()", "correct": false}, {"option": "isfile()", "correct": false}, {"option": "isFile()", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getName());\n        }\n    }\n</code></pre>", "options": [{"option": " java", "correct": false}, {"option": "java/system", "correct": false}, {"option": "system", "correct": true}, {"option": "/java/system", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getAbsolutePath());\n        }\n    }\n</code></pre>", "options": [{"option": "java", "correct": false}, {"option": "system", "correct": false}, {"option": "java/system", "correct": false}, {"option": "/java/system\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.canWrite());\n            System.out.print(\" \" + obj.canRead());\n        }\n    }\n</code></pre>", "options": [{"option": "true false", "correct": false}, {"option": "false true", "correct": false}, {"option": "false false", "correct": true}, {"option": "true true", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.io.*;\n    class files {\n        public static void main(String args[]) {\n            File obj = new File(\"/java/system\");\n            System.out.print(obj.getParent());\n            System.out.print(\" \" + obj.isFile());\n        }\n    }\n</code></pre>", "options": [{"option": "false true", "correct": false}, {"option": "\\java true", "correct": false}, {"option": "false false", "correct": false}, {"option": "\\java false", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following interfaces is used to extend the <strong>DataOutput</strong> interface?</p>", "options": [{"option": "Serializable", "correct": false}, {"option": "Externalization", "correct": false}, {"option": "ObjectOutput", "correct": true}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectOutput</strong> interface is used to finalize the output state by clearing the buffer?</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": true}, {"option": "fflush()", "correct": false}, {"option": "close()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectOutput</strong> interface is used to write an object to the <strong>input</strong> or the <strong>output</strong> stream?</p>", "options": [{"option": "write()", "correct": false}, {"option": "Write()", "correct": false}, {"option": "writeObject()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>ObjectInput</strong> interface is used to deserialize an object from a stream?</p>", "options": [{"option": "int read()", "correct": false}, {"option": "void close()", "correct": false}, {"option": "Object readObject()", "correct": true}, {"option": "Object WriteObject()", "correct": false}], "level": "Hard"}, {"question": "<p>in Java, which of the following classes is used to extend the <strong>InputStream</strong> class?</p>", "options": [{"option": "ObjectStream", "correct": false}, {"option": "ObjectOutput", "correct": false}, {"option": "ObjectInputStream", "correct": true}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, how many ports of <strong>TCP/IP</strong> is reserved for specific protocols?</p>", "options": [{"option": "104", "correct": false}, {"option": "1024", "correct": true}, {"option": "512", "correct": false}, {"option": "2048", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the size of the single <strong>IP</strong> address?</p>", "options": [{"option": "8 bits", "correct": false}, {"option": "16 bits", "correct": false}, {"option": "32 bits", "correct": true}, {"option": "64 bits", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a full form of <strong>DNS</strong>?</p>", "options": [{"option": "Data Network Service", "correct": false}, {"option": "Domain Name Service", "correct": true}, {"option": "Data Name Service", "correct": false}, {"option": "Domain Network Service", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following classes is used to encapsulate an <strong>IP address</strong> and a <strong>DNS</strong>?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following packages contains Java\u2019s built-in exceptions?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.util", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.net", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the <strong>URL</strong> stands for _____________________________________.</p>", "options": [{"option": "Uniform Resource Latch", "correct": false}, {"option": "Uniform Resource Locator", "correct": true}, {"option": "Universal Resource Locator", "correct": false}, {"option": "Universal Resource Latch", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following exceptions is thrown by the class <strong>URL</strong> constructors?</p>", "options": [{"option": "URLNotFound", "correct": false}, {"option": "URLSourceNotFound", "correct": false}, {"option": "MalformedURLException", "correct": true}, {"option": "URLNotFoundException", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to return the host name of a URL?</p>", "options": [{"option": "host()", "correct": false}, {"option": "getHost()", "correct": true}, {"option": "GetHost()", "correct": false}, {"option": "gethost()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to return the URL of a <strong>URL</strong> object?</p>", "options": [{"option": "fullHost()", "correct": false}, {"option": "getHost()", "correct": false}, {"option": "ExternalForm()", "correct": false}, {"option": "toExternalForm()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of these class is used to encapsulate an IP address and a DNS?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to increase the capacity of an <strong>ArrayList</strong> object manually?</p>", "options": [{"option": "Capacity()", "correct": false}, {"option": "increaseCapacity()", "correct": false}, {"option": "increasecapacity()", "correct": false}, {"option": "ensureCapacity()", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Output {\n        public static void main(String args[]) {\n            ArrayList obj = new ArrayList();\n            obj.add(\"A\");\n            obj.add(\"D\");\n            obj.ensureCapacity(3);\n            obj.trimToSize();\n            System.out.println(obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following classes implements the <strong>Set</strong> interface?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "HashSet", "correct": true}, {"option": "LinkedList", "correct": false}, {"option": "DynamicList", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to add an element to the start of a <strong>LinkedList</strong> object?</p>", "options": [{"option": "add()", "correct": false}, {"option": "first()", "correct": false}, {"option": "AddFirst()", "correct": false}, {"option": "addFirst()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to delete the last element of a <strong>LinkedList</strong> object?</p>", "options": [{"option": "remove()", "correct": false}, {"option": "delete()", "correct": false}, {"option": "removeLast()", "correct": true}, {"option": "deleteLast()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to change an element of a <strong>LinkedList</strong> object?</p>", "options": [{"option": "change()", "correct": false}, {"option": "set()", "correct": false}, {"option": "redo()", "correct": true}, {"option": "add()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Output {\n        public static void main(String args[]) {\n            HashSet obj = new HashSet();\n            obj.add(\"A\");\n            obj.add(\"B\");\n            System.out.println(obj + \" \" + obj.size());\n        }\n    }\n</code></pre>", "options": [{"option": "AB  2", "correct": false}, {"option": "[A, B] 2", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to remove all the key-value pairs from the invoking map?</p>", "options": [{"option": "delete()", "correct": false}, {"option": "remove()", "correct": true}, {"option": "clear()", "correct": false}, {"option": "removeAll()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to return the set of all keys in a map?</p>", "options": [{"option": "getAll()", "correct": false}, {"option": "getKeys()", "correct": false}, {"option": "keyall()", "correct": false}, {"option": "keySet()", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the class <strong>DataInputStream</strong> is an example of the ___________________.</p>", "options": [{"option": "Output stream", "correct": false}, {"option": "I/O stream", "correct": false}, {"option": "Filtered stream", "correct": true}, {"option": "File stream", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the public abstract classes is correct?</p>", "options": [{"option": "AbstractSet extends AbstractCollection", "correct": false}, {"option": "AbstractList extends AbstractCollection", "correct": false}, {"option": "HashSet extends AbstractSet", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following is not a method of the <strong>Thread</strong> class?</p>", "options": [{"option": "public void run()", "correct": false}, {"option": "public void start()", "correct": false}, {"option": "public void exit()", "correct": true}, {"option": "public final int getPriority()", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following companies developed the Java?</p>", "options": [{"option": "Microsoft", "correct": false}, {"option": "Oracle", "correct": false}, {"option": "Sun", "correct": true}, {"option": "Google", "correct": false}], "level": "Easy"}, {"question": "<p>What is the extension of a Java program?</p>", "options": [{"option": ".doc", "correct": false}, {"option": ".java", "correct": true}, {"option": ".class", "correct": false}, {"option": ".txt", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JRE</strong>?</p>", "options": [{"option": "Java Runtime Environment", "correct": true}, {"option": "Java Runtime Exception", "correct": false}, {"option": "Java Runtime Execution", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the correct full form of the <strong>JDK</strong>?</p>", "options": [{"option": "Java Deployment Kit", "correct": false}, {"option": "Java Demo Kit", "correct": false}, {"option": "Java Development Kit", "correct": true}, {"option": "Java Distributed Kit", "correct": false}], "level": "Easy"}, {"question": "<p>A Java program is firstly ___________ and then it is ___________.</p>\n<p>1.Compiled</p>\n<p>2.Interpreted</p>\n<p>3.Assembled</p>\n<p>4.Debuged</p>", "options": [{"option": "2 and 1", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following <strong>application</strong> programs is mandatory to run a Java program?</p>", "options": [{"option": "sdk", "correct": false}, {"option": "dbk", "correct": false}, {"option": "jdk", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>The Java program was originally called ____________________.</p>", "options": [{"option": "Java", "correct": false}, {"option": "Apple", "correct": false}, {"option": "Oak", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>primitive</strong> data type?</p>", "options": [{"option": "Integer", "correct": false}, {"option": "String", "correct": false}, {"option": "Float", "correct": false}, {"option": "Byte", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following statement in Java:</p>\n<pre class=\"prettyprint\"><code>111 % 13\n</code></pre>", "options": [{"option": "2", "correct": false}, {"option": "4", "correct": false}, {"option": "7", "correct": true}, {"option": "8", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is the <strong>keywords</strong> in Java?</p>", "options": [{"option": "extends", "correct": false}, {"option": "synchronized", "correct": false}, {"option": "friend", "correct": false}, {"option": "extends and synchronized", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following interfaces is defined by the <strong><code>java.lang</code></strong> package?</p>", "options": [{"option": "Cloneable", "correct": false}, {"option": "Comparable", "correct": false}, {"option": "Runnable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following objects is passed as an argument to the <strong>paint()</strong> method?</p>", "options": [{"option": "A Graphics object", "correct": true}, {"option": "A Canvas object", "correct": false}, {"option": "A paint object", "correct": false}, {"option": "An Image object", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ________ method is used to clear the buffer.</p>", "options": [{"option": "clear()", "correct": false}, {"option": "flush()", "correct": true}, {"option": "clean()", "correct": false}, {"option": "gc()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following packages contains the class <strong>Exception</strong> ?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.awt", "correct": false}, {"option": "java.lang", "correct": true}, {"option": "java.util", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following packages contains the class <strong>Applet</strong>?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.applet", "correct": true}, {"option": "java.lang", "correct": false}, {"option": "java.awt", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods of the <strong>Applet</strong> class displays the result of an applet code on the screen?</p>", "options": [{"option": "run()", "correct": false}, {"option": "paint()", "correct": true}, {"option": "drawString()", "correct": false}, {"option": "main()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, an executable applet is the _________ file of the applet.</p>", "options": [{"option": ".java", "correct": false}, {"option": ".class", "correct": true}, {"option": ".html", "correct": false}, {"option": ".applet", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following applet tags is used to accept the user defined parameter?</p>", "options": [{"option": "center", "correct": false}, {"option": "applet", "correct": false}, {"option": "param", "correct": true}, {"option": "body", "correct": false}], "level": "Easy"}, {"question": "<p>In java, which of the following methods is used to search for an element in a list?</p>", "options": [{"option": "find()", "correct": false}, {"option": "sort()", "correct": false}, {"option": "binarysearch()", "correct": true}, {"option": "get()", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Arraylist {\n        public static void main(String args[]) {\n            ArrayList obj1 = new ArrayList();\n            ArrayList obj2 = new ArrayList();\n            obj1.add(\"A\");\n            obj1.add(\"B\");\n            obj2.add(\"A\");\n            obj2.add(1, \"B\");\n            System.out.println(obj1.equals(obj2));\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "true", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class Array {\n        public static void main(String args[]) {\n            int array[] = new int [6];\n            for (int i = 6; i &gt; 0; i--)\n                array[6-i] = i;\n            Arrays.fill(array, 1, 4, 5);\n            for (int i = 0; i &lt; 6 ; i++)\n                System.out.print(array[i]);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655521", "correct": true}, {"option": "555521", "correct": false}, {"option": "655551", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>     import java.util.*;\n            class Array {\n                public static void main(String args[]) {\n                    int array[] = new int [5];\n                    for (int i = 6; i &gt; 0; i--)\n                        array[6-i] = i;\n                    Arrays.fill(array, 1, 4, 5);\n                    for (int i = 0; i &lt; 6 ; i++)\n                        System.out.print(array[i]);\n                }\n            }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "655551", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "655521", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following data members of the <strong>Vector</strong> class is used to store the number of elements in a vector?</p>", "options": [{"option": "length", "correct": false}, {"option": "elements", "correct": false}, {"option": "elementCount", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass X863 {\n\n    public static void main(String args[]) {\n\n        Vector obj = new Vector(4,2);\n        obj.addElement(new Integer(3));\n        obj.addElement(new Integer(2));\n        obj.addElement(new Integer(5));\n        System.out.println(obj.elementAt(0));\n    }\n}\n</code></pre>", "options": [{"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test {\n        public int x, y;\n    }\n    class Main {\n        public static void main(String args[]) {\n            Test t = new Test();\n            System.out.println(t.x + \" \" + t.y);\n        }\n    }\n</code></pre>", "options": [{"option": "Garbage values", "correct": false}, {"option": "0   0", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    void foo() {}}\n    class Derived extends Base {\n        public void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Done ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Base {\n    public void foo() {}}\n    class Derived extends Base {\n        protected void foo() {\n            System.out.println(\"Done\");\n        }}\n        public class Main {\n            public static void main(String args[]) {\n                Derived d = new Derived();\n                d.foo();\n            }\n        }\n</code></pre>", "options": [{"option": "Done ", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Main {\n        public static void main(String args[]) {\n            int x;\n            System.out.println(x);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is not an <strong>operator</strong>?</p>", "options": [{"option": "instanceof", "correct": false}, {"option": "new", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is an <strong>infinite</strong> loop?</p>", "options": [{"option": "A loop that will never function ", "correct": false}, {"option": "A loop that functions for a fixed period of time", "correct": false}, {"option": "A loop that runs forever ", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, a function is _________________________________.</p>", "options": [{"option": "Used to store values", "correct": false}, {"option": "An entity that receives the inputs and outputs ", "correct": true}, {"option": "A sequence of characters enclosed within quotes ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, int is a type of ___________________ data type.</p>", "options": [{"option": "Signed", "correct": true}, {"option": "Unsigned", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the ________________ data type value is returned by all <strong>transcendental</strong> math functions.</p>", "options": [{"option": "int ", "correct": false}, {"option": "float", "correct": false}, {"option": "double", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the smallest form of the <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "byte", "correct": true}, {"option": "long", "correct": false}, {"option": "short", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following can store a character?</p>", "options": [{"option": "String", "correct": false}, {"option": "Digit", "correct": false}, {"option": "Special character", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the __________________ data type is an extension of the <strong>float</strong> data type.</p>", "options": [{"option": "byte", "correct": false}, {"option": "double", "correct": false}, {"option": "long", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following data types is used to fetch a stream of data from a network or a file?</p>", "options": [{"option": "double", "correct": false}, {"option": "int", "correct": false}, {"option": "char", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, the <strong>byte</strong> data type uses __________________ bytes.</p>", "options": [{"option": "2", "correct": false}, {"option": "0", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ________________ data type can store a 64-bit value.</p>", "options": [{"option": "double ", "correct": true}, {"option": "int", "correct": false}, {"option": "float", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is not a data type?</p>", "options": [{"option": "int", "correct": false}, {"option": "boolean", "correct": false}, {"option": "double", "correct": false}, {"option": "public", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, <strong>valueof(String)</strong> returns a ___________________ value.</p>", "options": [{"option": "Integer", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Float", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, __________________ is not a keyword.</p>", "options": [{"option": "double", "correct": false}, {"option": "switch", "correct": false}, {"option": "then", "correct": true}, {"option": "instanceof", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following <strong>assignment</strong> operators is not valid?</p>", "options": [{"option": ">>", "correct": false}, {"option": "%=", "correct": false}, {"option": ">>>", "correct": false}, {"option": "<<<", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following operators has the highest precedence?</p>", "options": [{"option": "( )", "correct": false}, {"option": "{ }", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class N{\n        public static void main(String args[]){\n            if(1 + 1 + 1 + 1 + 1 + 1+ 1 == 7){\n                System.out.print(\"TRUE\");\n            }\n            else{\n                System.out.print(\"FLASE\");\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "FALSE", "correct": false}, {"option": "TRUE", "correct": true}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"V\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class Test{\n\n          public static void main(String args[])\n          {\n\n               System.out.print(\"V\"==\"v\");\n          }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String [] args)\n        {\n            int x= 0;\n            int y= 0;\n            for (int z = 0; z &lt; 5; z++)\n            {\n                if ((x++ &gt; 2 ) &amp;&amp; (++y &gt; 2))\n                {\n                    x++;\n                }\n            }\n            System.out.println(x + \" \" + y);\n        }\n    }\n</code></pre>", "options": [{"option": "4  2", "correct": false}, {"option": "5  3", "correct": false}, {"option": "5  2", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class S\n    {\n        public static void main(String [] args) \n        {\n            boolean b1 = true;\n            boolean b2 = false;\n            boolean b3 = true;\n            if ( b1 &amp; b2 | b2 &amp; b3 | b2 | b1 ) \n                System.out.println(\"ok\");;\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "ok", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false|false);\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    public class test {\n        public static void main(String args[]) {\n            System.out.println(false||false);\n        }\n    }\n</code></pre>", "options": [{"option": "false", "correct": true}, {"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=4;\n            System.out.println(a&lt;&lt;4);\n        }\n    }\n</code></pre>", "options": [{"option": "32", "correct": false}, {"option": "64", "correct": true}, {"option": "8", "correct": false}, {"option": "128", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        public static void main(String args[])\n        {\n            int a=-1;\n            System.out.println(a&gt;&gt;1);\n        }\n    }\n</code></pre>", "options": [{"option": "-2", "correct": false}, {"option": "-1", "correct": true}, {"option": "1", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            System.out.println(a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "Garbage value", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>       class Test\n        {\n            static int a=100;\n            public static void main(String args[])\n            {\n                int a=10;\n                System.out.println(a);\n            }\n        }\n</code></pre>", "options": [{"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        static int a=100;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "100", "correct": true}, {"option": "It will compile successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        int a;\n        boolean b;\n        public static void main(String args[])\n        {\n            Test t=new Test();\n            System.out.println(t.a);\n            System.out.println(t.b);\n\n        }\n    }\n</code></pre>", "options": [{"option": "0  0", "correct": false}, {"option": "null  null", "correct": false}, {"option": "null 0", "correct": false}, {"option": "0  false", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, <strong>instance</strong> variables are stored in the __________________ memory.</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Heap", "correct": true}, {"option": "Non Heap", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how can the <strong>static</strong> method be accessed?</p>", "options": [{"option": "Through the Object of the class", "correct": false}, {"option": "Through the Class only", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n        {\n\n            System.out.println(\"Hacker\"+\"Earth\");\n        }\n    }\n</code></pre>", "options": [{"option": "\"Hacker Earth\"", "correct": false}, {"option": "\"Hacker\" \" Earth\"", "correct": false}, {"option": "HackerEarth", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n\n        public static void main(String args[])\n                {\n\n                System.out.println(10+00);\n            }\n            }\n</code></pre>", "options": [{"option": "10", "correct": true}, {"option": "00", "correct": false}, {"option": "1000", "correct": false}, {"option": "0001", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how many <strong>primitive integer</strong> data types exist?</p>", "options": [{"option": "3", "correct": false}, {"option": "4", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, _________________________ is used to create <strong>objects</strong>.</p>", "options": [{"option": "The 'new' keyword, instance factory method", "correct": false}, {"option": "The 'new' keyword, static factory method", "correct": false}, {"option": "The instance factory method, static factory method", "correct": false}, {"option": "The 'new' keyword, instance factory method, static factory method", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test\n    {\n        protected static Test(int a)\n        {\n            System.out.println(a);\n        }\n        public static void main(String args[])\n        {\n            Test t=new Test(40);\n        }\n    }\n</code></pre>", "options": [{"option": "Compilation error: Modifier static not allowed here", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "40", "correct": false}, {"option": "The code compiles successfully without any output.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Area {\n        int width;\n        int length;\n        public Area(int width, int length) {\n            this.width = width;\n            this.length = length;\n        }\n\n    }\n    class Output {\n        public static void main(String args[])\n        {\n            Area obj = new Area(1 , -1);\n            System.out.println(obj.length + \" \" + obj.width);\n        }\n    }\n</code></pre>", "options": [{"option": "1 , -1", "correct": false}, {"option": "-1,  1", "correct": true}, {"option": "1,  1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following functions is not supported?</p>", "options": [{"option": "Multilevel Inheritence", "correct": false}, {"option": "Garbage Collection", "correct": false}, {"option": "Single Inheritance", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the ___________________ command is used to compile a program.</p>", "options": [{"option": "javacompile", "correct": false}, {"option": "javac", "correct": true}, {"option": "java.c", "correct": false}, {"option": "java", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class Test{\n        public static void main(String args[])\n        {\n            char a=10;\n            System.out.println(a++ + --a);\n        }}\n</code></pre>", "options": [{"option": "21", "correct": false}, {"option": "19", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is a <strong>wrapper</strong> class?</p>", "options": [{"option": "Byte ", "correct": false}, {"option": "Integer", "correct": false}, {"option": "Double ", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, the _____________________ method of the <strong>String</strong> class is used to test the equality of two strings.</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "isequals()", "correct": false}, {"option": "equal()", "correct": false}, {"option": "equals()", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class output {\n           public static void main(String args[])\n           { \n              String s1 = \"Hacker\";\n              String s2 = new String(s1);\n              String s3 = \"HACKER\";\n              System.out.println(s1.equals(s2) + \" \" + s2.equals(s3));\n           }\n       }\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "true true", "correct": false}, {"option": "true false", "correct": true}, {"option": "false false", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class output {\n        public static void main(String args[])\n        {\n            int a=1,b=2;\n            float c=2.0F;\n            System.out.println((a==c)+\", \"+(c==b));\n        }\n    }\n</code></pre>", "options": [{"option": "false, false", "correct": false}, {"option": "true, true ", "correct": false}, {"option": "false, true", "correct": true}, {"option": "true, false", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>class demo {\n    public static void main(String args[])\n    {\n        String o = \"I\" +' ' +\"like\"+ ' ' + \"Coding\";\n        System.out.println(o);\n    }\n}\n</code></pre>", "options": [{"option": "I like Coding", "correct": true}, {"option": "\" I like Coding\"", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "\"I\" \"like\" \"Coding\"", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    class vector {\n        public static void main(String args[]) {\n            Vector obj = new Vector(4,2);\n            obj.addElement(new Integer(0));\n            obj.addElement(new Integer(20));\n            obj.addElement(new Integer(0));\n            obj.removeAll(obj);\n            System.out.println(obj.isEmpty());\n        }\n    }\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to monitor the exceptions?</p>", "options": [{"option": "try", "correct": true}, {"option": "catch", "correct": false}, {"option": "finally", "correct": false}, {"option": "try and finally", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    class operator {\n        public static void main(String args[])\n        {\n            boolean a = true;\n            boolean b = !true;\n            boolean d = a &amp; b;\n            System.out.println(d);\n        }\n    }\n</code></pre>", "options": [{"option": "true", "correct": false}, {"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to convert Array to the ArrayList?</p>", "options": [{"option": "Arrays.asList()", "correct": false}, {"option": "Collections.addAll()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "Arrays.convert()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n        public class Code10 \n    {\n        {\n         final Vector v;\n        v=new Vector();\n        }\n        public Code10 ()\n     {\n     }\n        public void codeMethod() \n        {\n        System.out.println(v.isEmpty());\n        }\n        public static void main(String args[]) \n       { \n    new Code10().codeMethod(); \n    } \n    }\n</code></pre>", "options": [{"option": "Prints: false\r\n", "correct": false}, {"option": "Runtime error: NullPointerException\r\n", "correct": false}, {"option": "Compilation error: cannot find the symbol\r\n", "correct": true}, {"option": "Prints: true\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements is true for the following Java code:</p>\n<pre class=\"prettyprint\"><code>public class Main {\n\n    private String instanceField = \"Joe\";\n\n    private void instanceMethod() {\n        System.out.println(\"Instance name=\" + instanceField);\n    }\n\n    public static void main(String[] args) {\n\n              instanceField = \"Indy\";  // Line 1\n              instanceMethod();    //Line 2\n               Main instance = new Main();\n\n\n        instance.instanceField = \"Sydney\";\n\n\n        instance.instanceMethod();  \n    }\n}\n</code></pre>\n<ol>\n<li>\n<p>Line 1- Cannot change an instance field without an instance, compilation failure.</p>\n</li>\n<li>\n<p>Line 2- Cannot call an instance method without an instance, compilation failure.</p>\n</li>\n<li>\n<p>Line 1- Cannot change an instance field without an instance, compiles file but will throw runtime error.</p>\n</li>\n<li>\n<p>Line 2- Cannot call an instance method without an instance,\ncompiles file but will throw a runtime error</p>\n</li>\n</ol>", "options": [{"option": "1 and 2", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>  import java.util.*;\n    public class FindSum \n    {\n        public static void main(String[] args) \n        {\n            int[] a = {12, 15, 11, 13, 9, 25};\n            int[] a2 = {12, 15, 11, 13, 9, 25};\n            int sum = 0;\n            for (int i = 1; i &lt; a.length; i++) \n            {\n                if (a[i] % 3 == a2[a.length - i] % 5) \n                {\n                    sum +=(a2[a.length - i] )+(i*i);\n                }\n            }\n            System.out.println(\"sum = \" + sum);\n        }\n    }\n</code></pre>", "options": [{"option": "sum = 1", "correct": false}, {"option": "sum = 26", "correct": true}, {"option": "sum = 25", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is not an <strong>integer</strong> data type?</p>", "options": [{"option": "int", "correct": true}, {"option": "short", "correct": false}, {"option": "long", "correct": false}, {"option": "float", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\n    public class Test {\n\n                  public static void main(String[] args){\n                   Integer a = new Integer(1);\n                   Integer b = new Integer(2);\n                   Integer c = new Integer(3);\n                   Integer d = new Integer(3);\n                   HashSet hs = new HashSet();\n                   hs.add(a);\n                   hs.add(b);\n                   hs.add(d);\n                   System.out.println(hs);\n                  }\n             }\n</code></pre>", "options": [{"option": "[1, 2, 3, 1 ,2, 3, 3]", "correct": false}, {"option": "[1, 2, 3]", "correct": true}, {"option": "[1, 2, 3, 3]", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>    import java.util.*;\n    public class Test {\n\n        public static void main(String[] args){\n            Integer a = new Integer(8);\n            Integer b = new Integer(4);\n            Integer c = new Integer(8);\n            Vector vec = new Vector();\n            Iterator itr;\n            vec.add(a);\n            vec.add(b);\n            vec.add(c);\n            itr = vec.iterator();\n            while (itr.hasNext()) {\n                System.out.println(\"\" + itr.next());\n            }\n        }\n    }\n</code></pre>", "options": [{"option": "8 4 8", "correct": true}, {"option": "8  4", "correct": false}, {"option": "4  8", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is used to copy the data from one array to another:</p>\n<ol>\n<li>System.clone </li>\n<li>java.lang.toCopy</li>\n<li>System.arraycopy</li>\n<li>java.lang.clone</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1", "correct": false}, {"option": "3", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true about a <strong>static nested class</strong>?</p>\n<ol>\n<li>You must have a reference to an instance of the enclosing class in order to instantiate it.</li>\n<li>It does not have access to nonstatic members of the enclosing class.</li>\n<li>The variables and methods must be static.</li>\n<li>It must extend the enclosing class.</li>\n</ol>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements is true?</p>", "options": [{"option": "An instance field declared as public generates a compilation error.", "correct": false}, {"option": "int is the name of a class available in the package java.lang.", "correct": false}, {"option": "Instance variable names may only contain letters and digits.", "correct": false}, {"option": "A class has a constructor.", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following is the root class of the exception hierarchy?</p>", "options": [{"option": "Exception", "correct": false}, {"option": "Throwable", "correct": true}, {"option": "Error", "correct": false}, {"option": "RuntimeException", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is inserted at line 6, is compiled and prints test2 in the following code:</p>\n<pre class=\"prettyprint\"><code>public class A { \npublic void test1(){\nSystem.out.println(\"test1\");\n}\n}\n\npublic class B extends A{ \npublic void test2(){\nSystem.out.println(\"test2\");\n}\n}\n\n1. public class Test{ \n2. public static void main (String[] args){\n3. A a = new A(); \n4. A b = new B(); \n5. B b1 = new B();\n6. // insert code here\n7. }\n8. }\n</code></pre>", "options": [{"option": "(B)b.test2();", "correct": false}, {"option": "((B)b).test2();", "correct": true}, {"option": "b.test2();", "correct": false}, {"option": "a.test2();", "correct": false}], "level": "Hard"}, {"question": "<p>In Javascript, which of the following is not a method of the array object?</p>", "options": [{"option": "toString", "correct": false}, {"option": "join", "correct": false}, {"option": "remove", "correct": true}, {"option": "shift", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n<pre class=\"prettyprint\"><code>var xmlhttp = null;\nif (window.XMLHttpRequest) {\n\u00a0\u00a0 \u00a0xmlhttp = new XMLHttpRequest();\n\u00a0\u00a0 \u00a0\n\u00a0\u00a0 \u00a0if (typeof xmlhttp.overrideMimeType != 'undefined') {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0alert('The Dark Knight');\n\u00a0\u00a0 \u00a0}\n} else if (window.ActiveXObject) {\n\u00a0\u00a0 \u00a0alert('The Dark Knight Rises');\n} else {\n\u00a0\u00a0 \u00a0alert('The Knight Down');\n}\n</code></pre>", "options": [{"option": "The Dark Knight", "correct": true}, {"option": "The Dark Knight Rises", "correct": false}, {"option": "The Knight Down", "correct": false}, {"option": "Can't be determined", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, how do you add a comment?</p>", "options": [{"option": "//This is a comment.", "correct": true}, {"option": "REM This is a comment-->", "correct": false}, {"option": "This is a comment.", "correct": false}, {"option": "#This is a comment.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following, if inserted in line 6, will compile and print <strong>test2</strong>?</p>\n<pre class=\"prettyprint\"><code>public class A { \npublic void test1(){\nSystem.out.println(\"test1\");\n}\n}\n\npublic class B extends A{ \npublic void test2(){\nSystem.out.println(\"test2\");\n}\n}\n\n1. public class Test{ \n2. public static void main (String[] args){\n3. A a = new A(); \n4. A b = new B(); \n5. B b1 = new B();\n6. // insert code here\n7. }\n8. }\n</code></pre>", "options": [{"option": "(B)b.test2();", "correct": false}, {"option": "((B)b).test2();", "correct": true}, {"option": "b.test2();", "correct": false}, {"option": "a.test2();", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these statements is true?</p>\n<ol>\n<li>Assertion checking is typically enabled when a program is deployed.</li>\n<li>It is never appropriate to write code to handle the failure of an assert statement.</li>\n<li>Assertion checking is typically enabled during program development and testing.</li>\n<li>Assertion checking can be enabled or disabled selectively on a per-package basis. However, this cannot be done on a per-class basis.</li>\n<li>Assertion checking can be enabled or disabled selectively on both a per-package basis and a per-class basis.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "2, 3, and 5", "correct": true}, {"option": "3, 4, and 5", "correct": false}, {"option": "1, 2, and 5", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following interfaces accepts input parameters at runtime:</p>\n<ol>\n<li>\n<p>java.sql.Statement</p>\n</li>\n<li>\n<p>java.sql.CallableStatement</p>\n</li>\n<li>\n<p>java.sql.PreparedStatement</p>\n</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "1 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is defined in the class Object:</p>\n<ol>\n<li>wait() </li>\n<li>notify()</li>\n<li>toString()</li>\n<li>finalize()</li>\n<li>sleep()</li>\n</ol>", "options": [{"option": "1 and 5", "correct": false}, {"option": "5", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, 3 and 4", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Tester {\n    static void method(){\n        throw new Exception();\n    }\n    public static void main(String[] args) {\n        try {\n            method();\n        } catch (Throwable e) {\n            try {\n                throw new Exception() ;\n            } catch (Exception ex) {\n                System.out.print(\"exception\");\n            } finally {\n                System.out.print(\"finally\");\n            }\n        }\n    }\n}\n</code></pre>", "options": [{"option": "finally", "correct": false}, {"option": "finally, exception", "correct": false}, {"option": "exception, finally", "correct": false}, {"option": "Compilation fails", "correct": true}], "level": "Medium"}, {"question": "<p>In Java 8, HashMap replaces linked list with which data structure when the number of elements in a bucket reaches certain threshold(i.e there are a large number of colliding keys)</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Binary Tree", "correct": true}, {"option": "Tree Set", "correct": false}, {"option": "ArrayList", "correct": false}, {"option": "Array", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>In Java 8, HashMap replaces linked list with which data structure when the number of elements in a bucket reaches certain threshold(i.e there are a large number of colliding keys)</p>", "options": [{"option": "Stack", "correct": false}, {"option": "Binary Tree", "correct": true}, {"option": "Tree Set", "correct": false}, {"option": "ArrayList", "correct": false}, {"option": "Array", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of <code>null</code> == <code>false</code> in JavaScript?</p>", "options": [{"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Medium"}, {"question": "<p>You have a project's source code but you are unable to install the dependencies, so your colleague copies his <code>node_modules</code> directory and passes it to you to plug into your project. When you run the project, it fails to run with: <code>invalid ELF header...</code>, which of the following is a likely cause?</p>", "options": [{"option": "You use Windows, your colleague uses Ubuntu", "correct": true}, {"option": "The file transfer was incomplete so the file corrupt", "correct": false}, {"option": "Your project dependency specifications are out of date", "correct": false}, {"option": "Your computer needs a restart after updating the dependencies", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following would be a correct way to call a pre-defined function <code>iSay</code> with 3 arguments, <code>\"hello\"</code>, <code>2</code>, <code>\"you\"</code>?</p>", "options": [{"option": "iSay.bind(\"hello\", 2, \"you\")();", "correct": false}, {"option": "iSay.call(null, [\"hello\", 2, \"you\"]);", "correct": false}, {"option": "iSay.apply(null, [\"hello\", 2, \"you\"]);", "correct": true}, {"option": "iSay.apply([\"hello\", 2, \"you\"]", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">At what point is the\u00a0Bar\u00a0object, created on line 6, eligible for garbage collection?</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">class Bar { }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">class Test</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">{\u00a0</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 Bar doBar()</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 {</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Bar b = new Bar(); /* Line 6 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return b; /* Line 7 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 public static void main (String args[])</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 {</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Test t = new Test();\u00a0 /* Line 11 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Bar newBar = t.doBar();\u00a0 /* Line 12 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"newBar\");</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 newBar = new Bar(); /* Line 14 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 System.out.println(\"finishing\"); /* Line 15 */</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">\u00a0\u00a0\u00a0 }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">}</p>", "options": [{"option": "after line 12", "correct": false}, {"option": "after line 14", "correct": true}, {"option": "after line 7, when doBar() completes", "correct": false}, {"option": "after line 15, when main() completes", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the <code>my_func(2)</code> function in the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    function my_func(a) { \r\n        var temp = 2; \r\n        function self(b) { \r\n            alert(a + b + (++temp)); \r\n        } \r\n        self(9); \r\n    } \r\n    my_func(2);\r\n</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "16", "correct": false}, {"option": "13", "correct": false}, {"option": "14", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>\"i'm a lasagna hog\".split(\"\").reverse().join(\"\");\r\n</code></pre>", "options": [{"option": "\"i'm a lasagna hog\"", "correct": false}, {"option": "\"goh angasal a m'i\"", "correct": true}, {"option": "\"m'i a angasal goh\"", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the <code>my_func(2)</code> function in the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    function my_func(a) { \r\n        var temp = 2; \r\n        function self(b) { \r\n            alert(a + b + (++temp)); \r\n        } \r\n        self(9); \r\n    } \r\n    my_func(2);\r\n</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "16", "correct": false}, {"option": "13", "correct": false}, {"option": "14", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>\"i'm a lasagna hog\".split(\"\").reverse().join(\"\");\r\n</code></pre>", "options": [{"option": "\"i'm a lasagna hog\"", "correct": false}, {"option": "\"goh angasal a m'i\"", "correct": true}, {"option": "\"m'i a angasal goh\"", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which statement would combine the following two arrays into a single new array?<br />\r\n&nbsp;var a = [\"a\", \"b\", \"c\"];<br />\r\n&nbsp;var b = [\"d\", \"e\", \"f\"];</p>", "options": [{"option": "var c = b.join(a);", "correct": false}, {"option": "var c = a.concat(b);", "correct": true}, {"option": "var c = a.join(b);\r\n", "correct": false}, {"option": "var c = a.push() + b.push();", "correct": false}], "level": "Easy"}, {"question": "<p>How would you iterate over the following object?<br />\r\nvar my_data = {a: 'Ape', b: 'Banana', c: 'Citrus'};</p>", "options": [{"option": " foreach (my_data as key => value) {}", "correct": false}, {"option": " for (var key in my_data) {}", "correct": true}, {"option": " for (var i = 0; i < my_data.length; i++) {}", "correct": false}, {"option": "None of these because you can only iterate over arrays, not objects", "correct": false}], "level": "Medium"}, {"question": "<p>What is the difference between the following two class implementations?&nbsp;<br />\r\n<strong>First:</strong><br />\r\nfunction Animal() {<br />\r\n&nbsp; this.feed = function () {<br />\r\n&nbsp; }<br />\r\n}</p>\r\n\r\n<p><br />\r\n<strong>Second:</strong><br />\r\nfunction Animal () {<br />\r\n}<br />\r\nAnimal.prototype.feed = function () {<br />\r\n};</p>", "options": [{"option": "The second class creates a copy of the feed function for every instance; the first shares a single implementation", "correct": false}, {"option": "They are the same", "correct": false}, {"option": "The first class creates a copy of the feed function for every instance; the second shares a single implementation", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is a closure?</p>", "options": [{"option": "A variable in the global scope", "correct": false}, {"option": "A variable in a local scope", "correct": false}, {"option": "A way to define the lifetime of a variable", "correct": false}, {"option": "A function that uses variables from the outer scope", "correct": true}], "level": "Medium"}, {"question": "<p>What is the value of&nbsp;<code>x</code>&nbsp;after the following code runs?</p>\r\n\r\n<pre>\r\nvar x;\r\nx++;</pre>", "options": [{"option": "1", "correct": false}, {"option": "undefined", "correct": false}, {"option": "0", "correct": false}, {"option": "NaN", "correct": true}], "level": "Easy"}, {"question": "<p>What is the result of running the following code?</p>\r\n\r\n<pre>\r\na = 'abc';\r\nfunction f() {\r\n  'use strict';\r\n  a = 'xyz';\r\n  foo = 'bar';\r\n}\r\n\r\nf();</pre>", "options": [{"option": "It throws an error because foo is not defined.", "correct": true}, {"option": "It causes a syntax error on the 'use strict' line.", "correct": false}, {"option": "It enables the JavaScript strict mode and creates a variable named foo in the global object (window).", "correct": false}, {"option": "It creates a variable named foo in the global object (window).", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of below program?</p>\r\n\r\n<p>class Student implements Comparable&lt;Student&gt;{ &nbsp;<br />\r\nint rollno; &nbsp;<br />\r\nString name; &nbsp;<br />\r\nint age; &nbsp;<br />\r\nStudent(int rollno,String name,int age){ &nbsp;<br />\r\nthis.rollno=rollno; &nbsp;<br />\r\nthis.name=name; &nbsp;<br />\r\nthis.age=age; &nbsp;<br />\r\n} &nbsp;<br />\r\n&nbsp;<br />\r\npublic int compareTo(Student st){ &nbsp;<br />\r\nif(age==st.age) &nbsp;<br />\r\nreturn 0; &nbsp;<br />\r\nelse if(age&gt;st.age) &nbsp;<br />\r\nreturn -1; &nbsp;<br />\r\nelse &nbsp;<br />\r\nreturn 1; &nbsp;<br />\r\n} &nbsp;<br />\r\n}</p>\r\n\r\n<p>import java.util.ArrayList;<br />\r\nimport java.util.Collections;</p>\r\n\r\n<p>public class TestExample {<br />\r\npublic static void main(String[] args) {<br />\r\n&nbsp; ArrayList&lt;Student&gt; al=new ArrayList&lt;Student&gt;(); &nbsp;<br />\r\n&nbsp; al.add(new Student(101,\"Vijay\",23)); &nbsp;<br />\r\n&nbsp; al.add(new Student(106,\"Ajay\",27)); &nbsp;<br />\r\n&nbsp; al.add(new Student(105,\"Jai\",21)); &nbsp;<br />\r\n&nbsp;&nbsp; &nbsp;<br />\r\n&nbsp; Collections.sort(al); &nbsp;<br />\r\n&nbsp; for(Student st:al){ &nbsp;<br />\r\n&nbsp; System.out.println(st.rollno+\" \"+st.name+\" \"+st.age); &nbsp;<br />\r\n&nbsp; } &nbsp;<br />\r\n&nbsp;}<br />\r\n}</p>", "options": [{"option": "105 Jai 21\r\n101 Vijay 23\r\n106 Ajay 27", "correct": false}, {"option": "106 Ajay 27\r\n101 Vijay 23\r\n105 Jai 21", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What type of error will you find in this code:<br />\r\n<br />\r\nvar message= \"Welcome to our site\"<br />\r\ndocument.write(Message)</p>", "options": [{"option": "Wrong number of brackets", "correct": false}, {"option": " Missing quotes", "correct": false}, {"option": "Bad logic", "correct": false}, {"option": "Case sensitivty", "correct": true}], "level": "Hard"}, {"question": "<p>What type of error will you find in this code:<br />\r\n<br />\r\nvar message= \"Welcome to our site\"<br />\r\ndocument.write(Message)</p>", "options": [{"option": "Wrong number of brackets", "correct": false}, {"option": " Missing quotes", "correct": false}, {"option": "Bad logic", "correct": false}, {"option": "Case sensitivty", "correct": true}], "level": "Hard"}, {"question": "<p>What is the purpose of the `async` keyword before a function is declared?&nbsp;&nbsp;&nbsp;&nbsp;</p>", "options": [{"option": "To perform an XHR request.", "correct": false}, {"option": "To instruct the javascript event loop to run the function in a new thread.", "correct": true}, {"option": "To indicate that the function will `yield` in the future.", "correct": false}, {"option": "To declare the function as an Observable.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the purpose of the `await` keyword?</p>", "options": [{"option": "To instruct the javascript event loop that an `async` thread is ready to resume.", "correct": true}, {"option": "Syntactic sugar to avoid using .then().", "correct": false}, {"option": "To allow method chaining.", "correct": false}, {"option": "To instruct the javascript event loop that an `async` thread is ready to resume in the main thread.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the purpose of the `async` keyword before a function is declared?&nbsp;&nbsp;&nbsp;&nbsp;</p>", "options": [{"option": "To perform an XHR request.", "correct": false}, {"option": "To instruct the javascript event loop to run the function in a new thread.", "correct": true}, {"option": "To indicate that the function will `yield` in the future.", "correct": false}, {"option": "To declare the function as an Observable.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the purpose of the `await` keyword?</p>", "options": [{"option": "To instruct the javascript event loop that an `async` thread is ready to resume.", "correct": true}, {"option": "Syntactic sugar to avoid using .then().", "correct": false}, {"option": "To allow method chaining.", "correct": false}, {"option": "To instruct the javascript event loop that an `async` thread is ready to resume in the main thread.", "correct": false}], "level": "Hard"}, {"question": "<p>What is the value of <code>foo.length</code> in the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>var foo = [];\r\nfoo.push(1);\r\nfoo.push(2);\r\nfoo.push(3);\r\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>&nbsp;What is the output of the following JavaScript code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code> var func = function func() { \r\n    console.log(func === func); \r\n }; \r\n func();\r\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "ReferenceError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u200b</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    class operator {\r\n        public static void main(String args[])\r\n        {\r\n            boolean a = true;\r\n            boolean b = !true;\r\n            boolean c = a | b;\r\n            boolean d = a &amp; b;\r\n            boolean e = d ? b : c;\r\n            System.out.println(e);\r\n        }\r\n    }\r\n</code></pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "False", "correct": false}, {"option": "True", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    class Test {\r\n        public static void main(String args[]) {\r\n            System.out.println(fun());\r\n        }\r\n        static int fun()  {\r\n            int x= 10;\r\n            return x--;\r\n        }\r\n    }\r\n</code></pre>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "10", "correct": true}, {"option": "9", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    class Base {\r\n    protected void foo() {}}\r\n    class Derived extends Base {\r\n        void foo() {\r\n            System.out.println(\"Done\");\r\n        }}\r\n        public class Main {\r\n            public static void main(String args[]) {\r\n                Derived d = new Derived();\r\n                d.foo();\r\n            }\r\n        }\r\n</code></pre>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Done ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>public class TestClass { \r\n\r\n    static int j = 20; \r\n\r\n    public static void main(String argv[]) {\r\n\r\n        int i = 10; \r\n        TestClass p = new TestClass(); \r\n        p.doSomething(i); \r\n        System.out.print(i + \", \"); \r\n        System.out.println(j); \r\n    }\r\n\r\n    public void doSomething(int x) { \r\n        x = x*2; \r\n        j = j*2; \r\n    } \r\n}\r\n</code></pre>", "options": [{"option": "10, 40", "correct": true}, {"option": "20, 40 ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "10, 20", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code> public class TestHack{\r\n        public static void main(String [] args) {\r\n            String s1 = args[1];\r\n            String s2 = args[2];\r\n            String s3 = args[3];\r\n            System.out.print(\" args[2] = \" + s2);\r\n        }\r\n    }\r\n\r\nand the command-line invocation,\r\njava TestHack 1 2 3 \r\n</code></pre>", "options": [{"option": "args[2]=1", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}, {"option": "Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    public class test {\r\n        public static void main(String args[]) {\r\n            int x, y;\r\n            x = 5 &gt;&gt; 2;\r\n            y = x &gt;&gt;&gt; 2;\r\n            System.out.println(y);\r\n        }\r\n    }\r\n</code></pre>", "options": [{"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "0", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code> class TestClass {\r\n        public static void main(String args[] ) throws Exception {\r\n\r\n            try\r\n            {\r\n                int a=5;\r\n                int b=0;\r\n                int c=a/b;\r\n                System.out.println(c);\r\n            }\r\n            catch(Exception e)\r\n            {\r\n                System.out.print(\"There is an error\");\r\n            }\r\n            finally\r\n            {\r\n                System.out.println(\"There is no error\");\r\n            }\r\n        }\r\n    }\r\n</code></pre>", "options": [{"option": "0\r\nThere is no error", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "There is an error\r\nThere is no error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>class TestClass {\r\n\r\n    int a =100;\r\n\r\n    public static void main(String args[] ) throws Exception {\r\n\r\n        int a = 200;\r\n        TestClass t= new TestClass();\r\n        System.out.println(a);\r\n        t.m();\r\n\r\n    }\r\n\r\n    void m(){\r\n        System.out.println(a);\r\n    }\r\n}\r\n</code></pre>", "options": [{"option": "100  100", "correct": false}, {"option": "200  100", "correct": true}, {"option": "100 200", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    public class Short{\r\n        public static void main(String args[]) {\r\n            int i = 2;\r\n            boolean t = true;\r\n            boolean f = false, b;\r\n            b = (t &amp;((++i) == 0));\r\n            b = (f &amp;((i+=2) &gt; 0));\r\n            System.out.println(i);\r\n        }\r\n    }\r\n</code></pre>", "options": [{"option": "1", "correct": false}, {"option": "5", "correct": true}, {"option": "4", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In the following Java program, where will the <strong>garbage collector</strong> most likely be invoked:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>class HappyGarbage01 \r\n        { \r\n            public static void main(String args[]) \r\n            {\r\n                HappyGarbage01 h = new HappyGarbage01(); \r\n                h.methodA(); /* Line 6 */\r\n            } \r\n            Object methodA() \r\n            {\r\n                Object obj1 = new Object(); \r\n                Object [] obj2 = new Object[1]; \r\n                obj2[0] = obj1; \r\n                obj1 = null; \r\n                return obj2[0]; \r\n            } \r\n        }\r\n</code></pre>", "options": [{"option": "  After line 9", "correct": false}, {"option": " After line 10", "correct": false}, {"option": " After line 11", "correct": false}, {"option": "   Garbage collector never invoked in methodA()   ", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>    class Demo{\r\n        public static void main(String args[])\r\n        {\r\n            String chars[] = {\"a\", \"b\", \"c\", \"a\", \"c\"};\r\n            for (int i = 0; i &lt; chars.length; ++i)\r\n                for (int j = i + 1; j &lt; chars.length; ++j)\r\n                    if(chars[i].compareTo(chars[j]) == 0)\r\n                System.out.print(chars[j]);\r\n            }\r\n        }\r\n</code></pre>", "options": [{"option": "bc", "correct": false}, {"option": "ab", "correct": false}, {"option": "ca", "correct": false}, {"option": "ac", "correct": true}], "level": "Hard"}, {"question": "<p>Does the block <strong>finally</strong> get executed in the below code?</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>try {\r\n    //some code\r\n    System.exit();\r\n}\r\n\r\nfinally {\r\n    //some code\r\n}\r\n</code></pre>", "options": [{"option": "finally always gets executed", "correct": false}, {"option": "A try block must have a catch block", "correct": false}, {"option": "No, as it exits the program", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output :&nbsp;</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>class StaticMethods\u00a0{\r\n      static\u00a0\u00a0 { System.out.println(\"only static no method\");}\r\n        public static void main(String args[])\u00a0\u00a0\u00a0\u00a0{\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}\r\n}\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code></pre>\r\n\r\n<p>&nbsp;</p>", "options": [{"option": "compiles but no output as no instance is created", "correct": false}, {"option": "only static no method", "correct": true}, {"option": "does not compile as static keyword is not followed by any method name", "correct": false}, {"option": "none", "correct": false}], "level": "Medium"}, {"question": "<p>Predict the output of following Java program</p>\r\n\r\n<pre class=\"prettyprint\">\r\n<code>class T {\r\n   int t = 20;\r\n   T() { t = 40; }\r\n}\r\n\r\nclass Main {\r\n   public static void main(String args[]) {\r\n       T t1 = new T(); System.out.println(t1.t);\r\n       }\r\n}</code></pre>\r\n\r\n<p>&nbsp;</p>", "options": [{"option": "20", "correct": true}, {"option": "40", "correct": false}, {"option": "Compiler Error", "correct": false}, {"option": "RunTime error", "correct": false}], "level": "Medium"}, {"question": "<p>Defines an interface for creating an object, but let the subclasses decide which class to instantiate.It let the instantiation differ to subclasses.</p>\r\n\r\n<p>A.&nbsp;&nbsp; &nbsp;Factory Method</p>\r\n\r\n<p>B.&nbsp;&nbsp; &nbsp;Abstract Factory</p>\r\n\r\n<p>C.&nbsp;&nbsp; &nbsp;Builder</p>\r\n\r\n<p>D.&nbsp;&nbsp; &nbsp;Prototype</p>", "options": [{"option": "B", "correct": false}, {"option": "D", "correct": false}, {"option": "C", "correct": false}, {"option": "A", "correct": true}], "level": "Easy"}, {"question": "<p>Ensure a class has only one instance, and provide a global access point to it.<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;A.&nbsp;&nbsp; &nbsp;Single Class Factory &nbsp;<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;B.&nbsp;&nbsp; &nbsp;Proxy<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;C.&nbsp;&nbsp; &nbsp;Singleton<br />\r\n&nbsp;&nbsp;&nbsp; &nbsp;D.&nbsp;&nbsp; &nbsp;Flyweight</p>", "options": [{"option": "C", "correct": true}, {"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "D", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following describes the Intercepting pattern correctly?</p>\r\n\r\n<p>A - This pattern is used to separate low level data accessing API or operations from high level business services.</p>\r\n\r\n<p>B - This pattern is used to provide a centralized request handling mechanism so that all requests will be handled by a single handler.</p>\r\n\r\n<p>C - This pattern is used when we want to do some pre-processing / post-processing with request or response of the application.</p>\r\n\r\n<p>D - This pattern is used when we want to locate various services using JNDI lookup.</p>", "options": [{"option": "B", "correct": false}, {"option": "C", "correct": true}, {"option": "D", "correct": false}, {"option": "A", "correct": false}], "level": "Medium"}, {"question": "<p>java.lang.StringBuilder#append() .&nbsp;</p>\r\n\r\n<p>A. Factory&nbsp;<br />\r\nB. Builder&nbsp;<br />\r\nC. Prototype&nbsp;<br />\r\nD. Singleton&nbsp;</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "C", "correct": false}, {"option": "D", "correct": false}], "level": "Medium"}, {"question": "<p>java.lang.Object#clone() .&nbsp;</p>\r\n\r\n<p>A.Factory&nbsp;<br />\r\nB.Builder&nbsp;<br />\r\nC.Prototype&nbsp;<br />\r\nD.Singleton&nbsp;</p>", "options": [{"option": "D", "correct": false}, {"option": "C", "correct": true}, {"option": "B", "correct": false}, {"option": "A", "correct": false}], "level": "Medium"}, {"question": "<p>For running java programs on client machine we need</p>", "options": [{"option": "JRE only", "correct": true}, {"option": "JDK only", "correct": false}, {"option": "JRE and JDK both", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>What is expected in Console?</p>\n\n<pre class=\"prettyprint\">\n<code>var foo = 'outside';\nfunction logIt(){\n   console.log(foo); \n   var foo = 'inside';\n} \nlogIt();</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "'outside'", "correct": false}, {"option": "'inside'", "correct": false}, {"option": "'null'", "correct": false}, {"option": "None of these", "correct": true}], "level": "Medium"}, {"question": "<p>What you will in console?</p>\n\n<pre class=\"prettyprint\">\n<code>function Car(make){\n    this.make = make\n}\nvar abcCar = new Car(\"ABC\");\nCar.prototype.getMfdYear = function(){\n   return this.year;\n}\nvar xyzCar = new Car(\"XYZ\");\n\nabcCar.year = 2001;\nxyzCar.year = 2002;\nconsole.log(abcCar.getMfdYear());\nconsole.log(xyzCar.getMfdYear());</code></pre>", "options": [{"option": "Error", "correct": false}, {"option": "2001, 2002", "correct": true}, {"option": "undefined, undefined", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What are different ways you can convert a number to string?</p>\n\n<pre class=\"prettyprint\">\n<code>1. 55.toString();\n2. 55..toString();\n3. 55 . toString();</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "#1", "correct": false}, {"option": "#2", "correct": false}, {"option": "#3", "correct": false}, {"option": "#1 and #2", "correct": false}, {"option": "#2 and #3", "correct": true}, {"option": "#1 and #3", "correct": false}, {"option": "None of these", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Given the CSS and HTML below, which is the BEST method to set the background color of a div element to red using JavaScript?</p>\n\n<p><img alt=\"\" height=\"193\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/90d9b4fe-c4a2-46d7-ba92-d34faddf3b4a.png\" width=\"357\"/></p>", "options": [{"option": "$('#errorContainer').toggleClass('errorIndicator');", "correct": false}, {"option": "$('#errorContainer').attr('class', 'errorIndicator');", "correct": false}, {"option": "document.getElementById('errorContainer').className = 'errorIndicator';", "correct": false}, {"option": "document.getElementById('errorContainer').classList.add = 'errorIndicator';", "correct": true}], "level": "Easy"}, {"question": "<p>What will be returned by the following JavaScript function?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\n(function () {\n    var ramonesArray = ['Tommy'];\n\n    ramonesArray.push('Joey');\n    ramonesArray.push('Johnny');\n    ramonesArray.push('Dee Dee');\n    ramonesArray.push('CJ');\n    ramonesArray.push('Marky');\n\n    return ramonesArray.length;\n}());</code></pre>\n\n<pre class=\"prettyprint\">\n<code><div>Where are the div tags?!</div></code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "1", "correct": false}, {"option": "null", "correct": false}], "level": "Easy"}, {"question": "<p>Given the JavaScript below, what will be returned by calling ix(4)?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\nfunction ix(a) {\n\u00a0 \u00a0 arguments[0] = 3;\n\u00a0 \u00a0 arguments[1] = 5;\n\u00a0 \u00a0 return a;\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "3", "correct": true}, {"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "undefined", "correct": false}], "level": "Medium"}, {"question": "<p>How would you access the value of the \"publish date\" property from the following object?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\nvar bookObj = {\n\u00a0 \u00a0 \"ISBN\": 9783641173081,\n\u00a0 \u00a0 \"author\": \"Frank Herbert\",\n\u00a0 \u00a0 \"book\": \"Dune\",\n\u00a0 \u00a0 \"publish date\": \"08/01/1965\"\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "bookObj.publish date", "correct": false}, {"option": "bookObj['publish date'].value", "correct": false}, {"option": "bookObj.\"publish date\".value", "correct": false}, {"option": "bookObj['publish date']", "correct": true}], "level": "Easy"}, {"question": "<p>What will be returned by the following JavaScript function?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\n(function () {\n\u00a0 \u00a0 var testValue1 = '8',\n\u00a0 \u00a0 \u00a0 \u00a0 testValue2 = '13',\n\u00a0 \u00a0 \u00a0 \u00a0 testValue3 = 8,\n\u00a0 \u00a0 \u00a0 \u00a0 testValue4 = 138,\n\u00a0 \u00a0 \u00a0 \u00a0 compare1 = (testValue1 == testValue3) ? 'same' : 'different',\n\u00a0 \u00a0 \u00a0 \u00a0 compare2\u00a0= (testValue1 === testValue3) ? 'same' : 'different',\n        compare3\u00a0= (testValue2 + testValue3\u00a0=== testValue4) ? 'same' : 'different';\n\u00a0 \u00a0 \n\u00a0 \u00a0 return compare1 + ' ' + compare2 + ' ' + compare3;\n}());</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "different same same", "correct": false}, {"option": "same different different", "correct": true}, {"option": "same same different", "correct": false}, {"option": "undefined", "correct": false}], "level": "Easy"}, {"question": "<p>Given the JavaScript below, what will the variable \"clickedElement\" be?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\ndocument.getElementById('listContainer').addEventListener('click', function (event) {\n    var clickedElement = this;\n});</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The event type", "correct": false}, {"option": "Reference to a DOM node", "correct": true}, {"option": "String", "correct": false}, {"option": "Array", "correct": false}], "level": "Easy"}, {"question": "<p>Given the HTML and JavaScript below, what will be returned by calling getAdidasLength()?</p>\n\n<p><img alt=\"\" height=\"371\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/f0a83cab-06c7-4271-b87a-f521bb4e5728.png\" width=\"518\"/></p>", "options": [{"option": "0", "correct": false}, {"option": "3", "correct": true}, {"option": "2", "correct": false}, {"option": "5", "correct": false}], "level": "Medium"}, {"question": "<p>What does the following JavaScript do?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\n(function () {\n    doSomethingAwesome();\n}());</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Executes the doSomethingAwesome function after the entire page and all of its resources are fully loaded", "correct": false}, {"option": "Executes the doSomethingAwesome function after the DOM is fully loaded", "correct": false}, {"option": "Executes the doSomethingAwesome function immediately", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What will be returned by the following JavaScript function?</p>\n\n<pre class=\"prettyprint\">\n<code>// JavaScript\n\n(function () {\n    var ix = (function () {\n        return true;\n    }());\n\n    return typeof ix;\n}());</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "\"string\"", "correct": false}, {"option": "\"boolean\"", "correct": true}, {"option": "true", "correct": false}, {"option": "\"function\"", "correct": false}], "level": "Easy"}, {"question": "<p>Consider the following pseudocode fragment, where x is an integer variable that has been initialized.<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"168\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/e6c6aa9d-2b51-4545-8640-9a1305b91a9d.PNG\" width=\"207\"/></p>\n\n<p>Which of the statements are true at the end of the while loop?<br/>\n\u00a0</p>\n\n<p>I\u00a0 \u00a0 \u00a0 (I == 12) or (I == x)<br/>\nII\u00a0 \u00a0 \u00a0If x > 12, then I = 12<br/>\nIII\u00a0\u00a0\u00a0\u00a0If J == 24 then x == 5</p>", "options": [{"option": "None\r\n", "correct": false}, {"option": "I only\r\n", "correct": false}, {"option": "II only\r\n", "correct": false}, {"option": "II and III only", "correct": false}, {"option": "I, II and III \r\n", "correct": true}], "level": "Medium"}, {"question": "<p>Consider the following recursive function<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"164\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/8d6f0cd0-3cc5-48e9-b1ab-6cfd773c1d8f.PNG\" width=\"350\"/></p>\n\n<p>What is the value returned by Rec(3)<br/>\n\u00a0</p>", "options": [{"option": "120", "correct": false}, {"option": "-120", "correct": false}, {"option": "Won\u2019t terminate", "correct": true}, {"option": "Non-deterministic\r\n", "correct": false}, {"option": "-14400\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following program?</p>\n\n<p><br/>\n<img alt=\"\" height=\"379\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/b92413e4-2c2a-4174-9703-982814b1a6a0.PNG\" width=\"457\"/></p>", "options": [{"option": "21 Super Class", "correct": false}, {"option": "Super Class 21", "correct": false}, {"option": "Compilation error\r\n", "correct": true}, {"option": "12 Super Class\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<p><img alt=\"\" height=\"396\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/a358adb4-c583-4c4d-9463-05e357a0ee45.PNG\" width=\"593\"/><br/>\n\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Compiler error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "ArrayIndexOutOfBoundsException", "correct": false}, {"option": "a[1] = 2\r\na[2] = 3\r\na[3] = 4\r\nerror = ArrayIndexOutOfBoundsException", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following:</p>\n\n<p><img alt=\"\" height=\"281\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/4f4ec71e-b7d8-46ad-a292-3bf00b611261.PNG\" width=\"439\"/></p>\n\n<p>\u00a0</p>", "options": [{"option": "Derived::show() called", "correct": false}, {"option": "Base::show() called", "correct": false}, {"option": "Compiler error", "correct": false}, {"option": "Exception\r\n", "correct": true}, {"option": "Base::show() called\r\nDerived::show() called", "correct": false}], "level": "Medium"}, {"question": "<p>Output of following Java program?<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"419\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/9cb90362-5621-41cd-97d0-67942280c859.PNG\" width=\"376\"/></p>", "options": [{"option": "Base\r\nDerived\r\nDerived\r\n", "correct": true}, {"option": "Base\r\nBase\r\nDerived", "correct": false}, {"option": "Base\r\nDerived\r\nBase\r\n", "correct": false}, {"option": "Base\r\nBase\r\nBase\r\nDerived", "correct": false}], "level": "Medium"}, {"question": "<p>What is the difference between == and === in JavaScript?\u00a0</p>", "options": [{"option": "== represent abstract equality and allows type coercion, whereas === uses strict equality and will not coerce its arguments.", "correct": true}, {"option": "=== can be used to test deep equality of arrays and objects, whereas == cannot.\r\n", "correct": false}, {"option": "Javascript does not have === operator. ", "correct": false}, {"option": "These operators are interchangeable and both test for equality.\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What will the following code output to the console? SE</p>\n\n<p>console.log(1 + -\"1\" + \"2\" + \"2\");<br/>\nconsole.log(\"2\" + \"2\" + 1 + -\"1\");</p>", "options": [{"option": "\u201c022\u201d\r\n\u201c220\u201d\r\n", "correct": false}, {"option": "\u201c022\u201d\r\n", "correct": true}, {"option": "4\r\n4\r\n", "correct": false}, {"option": "\u201c04\u201d\r\n\u201c221\u201d\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the following code?\u00a0</p>\n\n<p>\u00a0</p>\n\n<p><img alt=\"\" height=\"149\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/756d1c6f-bbc5-4304-a797-61f83d4ed1f7.PNG\" width=\"280\"/></p>", "options": [{"option": "cool", "correct": false}, {"option": "super", "correct": true}, {"option": "error\r\n", "correct": false}, {"option": "nil\r\n", "correct": false}, {"option": "undefined\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>Consider the following pseudocode fragment, where x is an integer variable that has been initialized.<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"168\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/e6c6aa9d-2b51-4545-8640-9a1305b91a9d.PNG\" width=\"207\"/></p>\n\n<p>Which of the statements are true at the end of the while loop?<br/>\n\u00a0</p>\n\n<p>I\u00a0 \u00a0 \u00a0 (I == 12) or (I == x)<br/>\nII\u00a0 \u00a0 \u00a0If x > 12, then I = 12<br/>\nIII\u00a0\u00a0\u00a0\u00a0If J == 24 then x == 5</p>", "options": [{"option": "None\r\n", "correct": false}, {"option": "I only\r\n", "correct": false}, {"option": "II only\r\n", "correct": false}, {"option": "II and III only", "correct": false}, {"option": "I, II and III \r\n", "correct": true}], "level": "Medium"}, {"question": "<p>Consider the following recursive function<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"164\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/8d6f0cd0-3cc5-48e9-b1ab-6cfd773c1d8f.PNG\" width=\"350\"/></p>\n\n<p>What is the value returned by Rec(3)<br/>\n\u00a0</p>", "options": [{"option": "120", "correct": false}, {"option": "-120", "correct": false}, {"option": "Won\u2019t terminate", "correct": true}, {"option": "Non-deterministic\r\n", "correct": false}, {"option": "-14400\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following program?</p>\n\n<p><br/>\n<img alt=\"\" height=\"379\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/b92413e4-2c2a-4174-9703-982814b1a6a0.PNG\" width=\"457\"/></p>", "options": [{"option": "21 Super Class", "correct": false}, {"option": "Super Class 21", "correct": false}, {"option": "Compilation error\r\n", "correct": true}, {"option": "12 Super Class\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<p><img alt=\"\" height=\"396\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/a358adb4-c583-4c4d-9463-05e357a0ee45.PNG\" width=\"593\"/><br/>\n\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Compiler error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "ArrayIndexOutOfBoundsException", "correct": false}, {"option": "a[1] = 2\r\na[2] = 3\r\na[3] = 4\r\nerror = ArrayIndexOutOfBoundsException", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following:</p>\n\n<p><img alt=\"\" height=\"281\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/4f4ec71e-b7d8-46ad-a292-3bf00b611261.PNG\" width=\"439\"/></p>\n\n<p>\u00a0</p>", "options": [{"option": "Derived::show() called", "correct": false}, {"option": "Base::show() called", "correct": false}, {"option": "Compiler error", "correct": false}, {"option": "Exception\r\n", "correct": true}, {"option": "Base::show() called\r\nDerived::show() called", "correct": false}], "level": "Medium"}, {"question": "<p>Output of following Java program?<br/>\n\u00a0</p>\n\n<p><img alt=\"\" height=\"419\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/9cb90362-5621-41cd-97d0-67942280c859.PNG\" width=\"376\"/></p>", "options": [{"option": "Base\r\nDerived\r\nDerived\r\n", "correct": true}, {"option": "Base\r\nBase\r\nDerived", "correct": false}, {"option": "Base\r\nDerived\r\nBase\r\n", "correct": false}, {"option": "Base\r\nBase\r\nBase\r\nDerived", "correct": false}], "level": "Medium"}, {"question": "<p>What is the difference between == and === in JavaScript?\u00a0</p>", "options": [{"option": "== represent abstract equality and allows type coercion, whereas === uses strict equality and will not coerce its arguments.", "correct": true}, {"option": "=== can be used to test deep equality of arrays and objects, whereas == cannot.\r\n", "correct": false}, {"option": "Javascript does not have === operator. ", "correct": false}, {"option": "These operators are interchangeable and both test for equality.\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What will the following code output to the console? SE</p>\n\n<p>console.log(1 + -\"1\" + \"2\" + \"2\");<br/>\nconsole.log(\"2\" + \"2\" + 1 + -\"1\");</p>", "options": [{"option": "\u201c022\u201d\r\n\u201c220\u201d\r\n", "correct": false}, {"option": "\u201c022\u201d\r\n", "correct": true}, {"option": "4\r\n4\r\n", "correct": false}, {"option": "\u201c04\u201d\r\n\u201c221\u201d\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of the following code?\u00a0</p>\n\n<p>\u00a0</p>\n\n<p><img alt=\"\" height=\"149\" src=\"https://he-s3.s3.amazonaws.com/media/uploads/756d1c6f-bbc5-4304-a797-61f83d4ed1f7.PNG\" width=\"280\"/></p>", "options": [{"option": "cool", "correct": false}, {"option": "super", "correct": true}, {"option": "error\r\n", "correct": false}, {"option": "nil\r\n", "correct": false}, {"option": "undefined\r\n", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the output of following program ?</p>\n\n<p>\u00a0</p>\n\n<p><code>public</code> <code>class</code> <code>Prg {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[]){</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(</code><code>'A'</code> <code>+ </code><code>'B'</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>}</code></p>\n\n<p><code>}</code></p>", "options": [{"option": "AB", "correct": false}, {"option": "195", "correct": false}, {"option": "131", "correct": true}, {"option": "Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n\n<p><code>public</code> <code>class</code> <code>Prg {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[]){</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(</code><code>\"A\"</code> <code>+ </code><code>\"B\"</code> <code>+ </code><code>'A'</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>}</code></p>\n\n<p><code>}</code></p>", "options": [{"option": "ABA", "correct": true}, {"option": "AB65", "correct": false}, {"option": "Error", "correct": false}, {"option": "AB", "correct": false}], "level": "Easy"}, {"question": "<p>What is the ouput of the below program?</p>\n\n<p><code>public</code> <code>class</code> <code>prg {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args) {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(</code><code>\"Hello\"</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.println(</code><code>\"Guys!\"</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>}</code></p>\n\n<p><code>}</code></p>", "options": [{"option": "HelloGuys!", "correct": true}, {"option": "Hello Guys!", "correct": false}, {"option": "Hello\r\n Guys!", "correct": false}, {"option": "Compile with a Warning", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of following program?</p>\n\n<p><code>public</code> <code>class</code> <code>prg {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>public</code> <code>static</code> <code>void</code> <code>main(String[] args) {</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>char</code> <code>a=</code><code>0x41</code><code>;\u00a0\u00a0\u00a0 </code><code>//Unicode of 'A'</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>char</code> <code>b=</code><code>0x42</code><code>;\u00a0\u00a0\u00a0 </code><code>//Unicode of 'B'</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code>\u00a0</p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(a+</code><code>\"\"</code> <code>+ b+</code><code>\"\"</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(</code><code>\"-\"</code><code>);</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.print(a+b);\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 </code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>}</code></p>\n\n<p><code>}</code></p>", "options": [{"option": "AB-AB", "correct": false}, {"option": "AB-131", "correct": true}, {"option": "AB-ERROR", "correct": false}, {"option": "A B -131", "correct": false}], "level": "Easy"}, {"question": "<p>What is byte code in Java?</p>", "options": [{"option": "It is another name for java source file that contain the information about the hardware.", "correct": false}, {"option": "It is a binary code generated by the Java Virtual Machine for operating system.", "correct": false}, {"option": "It is an intermediate code generated by the java compiler for Java Virtual Machine.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of following program?</p>\n\n<p><code>class</code> <code>Prg</code></p>\n\n<p><code>{</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>public</code> <code>static</code> <code>void</code> <code>main(String args[])</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>{</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>const</code> <code>int</code> <code>a=</code><code>10</code><code>;</code></p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</code><code>System.out.println(a);</code></p>\n\n<p><code>\u00a0</code>\u00a0</p>\n\n<p><code>\u00a0\u00a0\u00a0\u00a0</code><code>}</code></p>\n\n<p><code>}</code></p>", "options": [{"option": "10", "correct": false}, {"option": "a", "correct": false}, {"option": "Unprintable Character", "correct": false}, {"option": "Error", "correct": true}], "level": "Easy"}, {"question": "<p>Which is the correct declaration of a boolean variable?</p>", "options": [{"option": "boolean isAdult='false';", "correct": false}, {"option": "boolean isAdult=0;", "correct": false}, {"option": "boolean isAdult=\"false\";", "correct": false}, {"option": "boolean isAdult=false;", "correct": true}], "level": "Easy"}, {"question": "<p>Which statement is true?</p>\n\n<pre class=\"prettyprint\"><code>public void test(int x) \n{ \n    int odd = 1; \n    if(odd) /* Line 4 */\n    {\n        System.out.println(\"odd\"); \n    } \n    else \n    {\n        System.out.println(\"even\"); \n    } \n</code></pre>", "options": [{"option": "Compilation fails", "correct": true}, {"option": "\"odd\" will always be output.", "correct": false}, {"option": "\"even\" will always be output.", "correct": false}, {"option": "\"odd\" will be output for odd values of x, and \"even\" for even values", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class While \n{\n    public void loop() \n    {\n        int x= 0;\n        while ( 1 ) /* Line 6 */\n        {\n            System.out.print(\"x plus one is \" + (x + 1)); /* Line 8 */\n        }\n    }\n}</code></pre>", "options": [{"option": "There is a syntax error on line 1.", "correct": false}, {"option": "There are syntax errors on lines 1 and 6.", "correct": false}, {"option": "There are syntax errors on lines 1, 6, and 8.", "correct": false}, {"option": "There is a syntax error on line 6.", "correct": true}, {"option": "x plus one is 1", "correct": false}], "level": "Easy"}, {"question": "<p>Based on the below program which of the options is true?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public void foo( boolean a, boolean b)\n{ \n    if( a ) \n    {\n        System.out.println(\"A\"); /* Line 5 */\n    } \n    else if(a &amp;&amp; b) /* Line 7 */\n    { \n        System.out.println( \"A &amp;&amp; B\"); \n    } \n    else /* Line 11 */\n    { \n        if ( !b ) \n        {\n            System.out.println( \"notB\") ;\n        } \n        else \n        {\n            System.out.println( \"ELSE\" ) ; \n        } \n    } \n}</code></pre>", "options": [{"option": "If a is true and b is true then the output is \"A && B\"", "correct": false}, {"option": "If a is true and b is false then the output is \"notB\"", "correct": false}, {"option": "If a is false and b is true then the output is \"ELSE\"", "correct": true}, {"option": "If a is false and b is false then the output is \"ELSE\"", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n\n<pre class=\"prettyprint\"><code>public class Foo \n{  \n    public static void main(String[] args) \n    {\n        try \n        { \n            return; \n        } \n        finally \n        {\n            System.out.println( \"Finally\" ); \n        } \n    } \n}</code></pre>", "options": [{"option": "Finally", "correct": true}, {"option": "Compilation fails.", "correct": false}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>try \n{ \n    int x = 0; \n    int y = 5 / x; \n} \ncatch (Exception e) \n{\n    System.out.println(\"Exception\"); \n} \ncatch (ArithmeticException ae) \n{\n    System.out.println(\" Arithmetic Exception\"); \n} \nSystem.out.println(\"finished\");</code></pre>", "options": [{"option": "finished", "correct": true}, {"option": "Exception", "correct": false}, {"option": "Compilation fails.", "correct": false}, {"option": "Arithmetic Exception", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the below program?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class X \n{  \n    public static void main(String [] args) \n    {\n        try \n        {\n            badMethod();  \n            System.out.print(\"A\"); \n        }  \n        catch (Exception ex) \n        {\n            System.out.print(\"B\");  \n        } \n        finally \n        {\n            System.out.print(\"C\"); \n        } \n        System.out.print(\"D\"); \n    }  \n    public static void badMethod() \n    {\n        throw new Error(); /* Line 22 */\n    } \n}</code></pre>", "options": [{"option": "ABCD", "correct": false}, {"option": "Compilation fails.", "correct": false}, {"option": "C is printed before exiting with an error message", "correct": true}, {"option": "BC is printed before exiting with an error message.", "correct": false}], "level": "Easy"}, {"question": "<p>What line of code should replace the missing statement to make this program compile?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>/* Missing Statement ? */\npublic class foo \n{\n    public static void main(String[]args)throws Exception \n    {\n        java.io.PrintWriter out = new java.io.PrintWriter(); \n        new java.io.OutputStreamWriter(System.out,true); \n        out.println(\"Hello\"); \n    } \n}</code></pre>", "options": [{"option": "No statement required.", "correct": true}, {"option": "import java.io.*;", "correct": false}, {"option": "include java.io.*;", "correct": false}, {"option": "import java.io.PrintWriter;", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following line of code is suitable to start a thread ?</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class X implements Runnable \n{ \n    public static void main(String args[]) \n    {\n        /* Missing code? */\n    } \n    public void run() {} \n}</code></pre>", "options": [{"option": "Thread t = new Thread(X);", "correct": false}, {"option": "Thread t = new Thread(X); t.start();", "correct": false}, {"option": "X run = new X(); Thread t = new Thread(run); t.start();", "correct": true}, {"option": "Thread t = new Thread(); x.run();", "correct": false}], "level": "Easy"}, {"question": "<p>Given a List of fruits, chose the correct way of looping through the list and print the fruits starting with 'A' using Java 8 lambda expressions.</p>\n\n<p>\u00a0</p>\n\n<p>List&lt;String&gt; fruits = new ArrayList&lt;String&gt;();</p>\n\n<p>fruits.add(\"Apple\");</p>\n\n<p>fruits.add(\"Grapes\");</p>\n\n<p>fruits.add(\"Pineapple\");</p>", "options": [{"option": "fruits.forEach(fruits->{\r\n\t\tif(fruits.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(fruits);\r\n\t\t}\r\n\t});", "correct": false}, {"option": "fruits.forEach(item->{\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": true}, {"option": "fruits.forEach(item-> new Lambda{\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": false}, {"option": "fruits.forEach(String item-> fruits(i){\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": false}], "level": "Easy"}, {"question": "<p>Given the following snippet of Java 8 code, choose the correct code which should be inserted in place of XX in order to compile successfully.</p>\n\n<p>class Hello{</p>\n\n<p>\u00a0 \u00a0 public static void main(String[] args){</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0List&lt;String&gt; books = new ArrayList&lt;String&gt;();</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Docker in Action\");</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Java 8 for Dummies\");</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Cloud computing for newbies\");</p>\n\n<pre>\u00a0\u00a0\u00a0\u00a0List&lt;string&gt; filteredBooks = books.stream().map(XX).filter(book-&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0book.contains(\"Docker\")).collect(Collectors.toList());</pre>\n\n<p>\u00a0 \u00a0 }</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0class Book{</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 private String name;</p>\n\n<p>\u00a0 \u00a0\u00a0\u00a0 \u00a0 public String getName(){</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 return name;</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 }</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0}</p>\n\n<p>}</p>", "options": [{"option": "Book:getName", "correct": false}, {"option": "String::getName", "correct": false}, {"option": "Book::getName", "correct": true}, {"option": "Book->getName()", "correct": false}], "level": "Medium"}, {"question": "<p>Given a List of fruits, chose the correct way of looping through the list and print the fruits starting with 'A' using Java 8 lambda expressions.</p>\n\n<p>\u00a0</p>\n\n<p>List&lt;String&gt; fruits = new ArrayList&lt;String&gt;();</p>\n\n<p>fruits.add(\"Apple\");</p>\n\n<p>fruits.add(\"Grapes\");</p>\n\n<p>fruits.add(\"Pineapple\");</p>", "options": [{"option": "fruits.forEach(fruits->{\r\n\t\tif(fruits.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(fruits);\r\n\t\t}\r\n\t});", "correct": false}, {"option": "fruits.forEach(item->{\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": true}, {"option": "fruits.forEach(item-> new Lambda{\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": false}, {"option": "fruits.forEach(String item-> fruits(i){\r\n\t\tif(item.startsWith(\"A\")){\r\n\t\t\tSystem.out.println(item);\r\n\t\t}\r\n\t});", "correct": false}], "level": "Easy"}, {"question": "<p>Given the following snippet of Java 8 code, choose the correct code which should be inserted in place of XX in order to compile successfully.</p>\n\n<p>class Hello{</p>\n\n<p>\u00a0 \u00a0 public static void main(String[] args){</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0List&lt;String&gt; books = new ArrayList&lt;String&gt;();</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Docker in Action\");</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Java 8 for Dummies\");</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0books.add(\"Cloud computing for newbies\");</p>\n\n<pre>\u00a0\u00a0\u00a0\u00a0List&lt;string&gt; filteredBooks = books.stream().map(XX).filter(book-&gt; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0book.contains(\"Docker\")).collect(Collectors.toList());</pre>\n\n<p>\u00a0 \u00a0 }</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0class Book{</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 private String name;</p>\n\n<p>\u00a0 \u00a0\u00a0\u00a0 \u00a0 public String getName(){</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 return name;</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 }</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0}</p>\n\n<p>}</p>", "options": [{"option": "Book:getName", "correct": false}, {"option": "String::getName", "correct": false}, {"option": "Book::getName", "correct": true}, {"option": "Book->getName()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java 8, what is the component of functional interfaces?</p>", "options": [{"option": "Exactly one abstract method", "correct": true}, {"option": "Multiple abstract methods", "correct": false}, {"option": "Abstract as well as concrete methods", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following statements about Lambda Expressions are true?<br>\n<br>\n1. Enables you to treat functionality as a method argument<br>\n2. Allows you to write functions that do not belong to a class<br>\n3. You should create a functional interface for calling a lambda expression<br>\n4. Lambda expressions cannot have empty bodies</p>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "1 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functional interfaces were currently introduced in Java 8:</p>\n\n<ol>\n\t<li>Runnable\u00a0</li>\n\t<li>List\u00a0</li>\n\t<li>Callable\u00a0</li>\n\t<li>Collection</li>\n</ol>", "options": [{"option": "1 and 3", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "2, 3, and 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is a spliterator?</p>", "options": [{"option": "Split Iterator  ", "correct": false}, {"option": "Splitable iterator", "correct": true}, {"option": "Splitable interface", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Easy"}, {"question": "<p>Functional interfaces are defined in the ________________ package.</p>", "options": [{"option": "java.net", "correct": false}, {"option": "java.io", "correct": false}, {"option": "java.util", "correct": true}, {"option": "java.lang", "correct": false}], "level": "Easy"}, {"question": "<p>The following code is written in Java 7:</p>\n\n<pre class=\"prettyprint\"><code>Arrays.sort(testStrings, new Comparator&lt;String&gt;() {\n@Override\npublic int compare(String s1, String s2) {\nreturn(s1.length() - s2.length());\n}\n});</code></pre>\n\n<p><br>\nWhich of the following is the correct Java 8 alternative?</p>", "options": [{"option": "Arrays.sort(testStrings, (s1, s2) -> s1.length() - s2.length());", "correct": true}, {"option": "Arrays.sort(testStrings, (s1, s2) :: s1.length() - s2.length())", "correct": false}, {"option": "Arrays.sort(((s1, s2),testStrings)  -> s1.length() - s2.length());", "correct": false}, {"option": "Arrays.sorted(testStrings, (s1, s2) -> s1.length() - s2.length());", "correct": false}], "level": "Hard"}, {"question": "<p>In Java 8, the DateTimeException class implements the ______________ interface.</p>", "options": [{"option": "Comparable", "correct": false}, {"option": "Serializable", "correct": true}, {"option": "Chronology", "correct": false}, {"option": "TemporalAmount", "correct": false}], "level": "Easy"}, {"question": "<p>Among the following Java annotations, which is newly introduced in Java 8?</p>", "options": [{"option": "@Override", "correct": false}, {"option": "@Deprecated", "correct": false}, {"option": "@Repeatable", "correct": true}, {"option": "@SuppressWarnings", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, the forEach() method takes the ______________ object as an argument.</p>", "options": [{"option": "java.util.function.Consumer", "correct": true}, {"option": "java.util.Consumer", "correct": false}, {"option": "java.lang.function.Consumer", "correct": false}, {"option": "java.lang.Consumer", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, you can pass references of methods using the__________keyword.</p>", "options": [{"option": "colon (:)", "correct": false}, {"option": "arrow (->)", "correct": false}, {"option": "Double colon (::)", "correct": true}, {"option": "dot (.)", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nenum Name \n{\nAlice, Smith, Bob, Jones\n}\n\nclass HackerEarth\n {\n   public static void main (String args[]) \n   {\n   Set&lt;Name&gt; obj = new TreeSet&lt;Name&gt;();\n   obj.add(Name.Alice);\n   obj.add(Name.Smith);\n   obj.add(Name.Bob);\n   obj.add(Name.Smith);\n    for(Name d: obj)\n\t{\n    System.out.println(d);\n    }\n   }\n }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Alice\r\nSmith\r\nBob", "correct": true}, {"option": "Alice, Smith, Bob, Smith", "correct": false}, {"option": "Alice\r\nSmith\r\nBob\r\nSmith", "correct": false}, {"option": "Alice\r\nSmith\r\nBob\r\nJones", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>String Names = new String(\"Alice,Bob,Smith\");\nNames = Names.replaceAll(\",\", \":\");\nSystem.out.println(Names);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Alice Bob Smith", "correct": false}, {"option": "Alice:Bob:Smith", "correct": true}, {"option": "Alice,Bob,Smith", "correct": false}, {"option": "Syntax Error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following functional interfaces are valid?<br>\n<br>\n1. public interface Added{int getInput(int a, int b);}<br>\n<br>\n2. public interface SmartAdded extends Added{int getInput(double a, double b);}<br>\n<br>\n3. public interface Nothing{}<br>\n<br>\n4. interface FuncInt {<br>\n\u00a0 \u00a0 int getInput(int num1, int num2);<br>\n\u00a0 \u00a0 default int getValue(){<br>\n\u00a0 \u00a0 return 0;<br>\n\u00a0 \u00a0 } }</p>", "options": [{"option": "1 and 4", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class ShowValue{\nfinal int num = 10;\npublic void display()\n{\nint num =12;\nRunnable r = new Runnable(){\nfinal int num = 15;\npublic void run(){\nint num = 20;\nSystem.out.println(this.num);\n}\n};\nr.run();\n}\npublic static void main(String args[])\n{\nShowValue sv = new ShowValue();\nsv.display();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10", "correct": false}, {"option": "12", "correct": false}, {"option": "15", "correct": true}, {"option": "20", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>List&lt;Integer&gt; array1 = Arrays.asList(1, 2, 3);\nList&lt;Integer&gt; array2 = Arrays.asList(3, 4);\nList&lt;int[]&gt; pairs =\narray1.stream()\n.flatMap(i -&gt; array2.stream()\n.map(j -&gt; new int[]{i, j})\n)\n.collect(toList());</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": " [(1, 3), (1, 4), (2, 3), (2, 4), (3, 3), (3, 4)]", "correct": true}, {"option": "[(1, 3), (2, 4), (3, null)]", "correct": false}, {"option": "[(3,1),(4,1),(3,2),(4,2),(3,3),(4,3)]", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>Stream.iterate(new int[]{2, 3},\nt -&gt; new int[]{arr[1],arr[0] + arr[1]}) limit(10)\n.map(arr -&gt; arr[0])\n.forEach(System.out::println);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0, 1, 1, 2, 3, 5, 8, 13, 21, 34...", "correct": false}, {"option": "2, 3, 5, 8, 13, 21, 34, 55\u2026", "correct": true}, {"option": "0,1, 2, 3, 5, 8, 13, 21, 34\u2026", "correct": false}, {"option": "1, 2, 3, 5, 8, 13, 21, 34\u2026", "correct": false}], "level": "Medium"}, {"question": "<p>In Java 8, which of the following statements is used to define a predicate?</p>", "options": [{"option": "Predicate is an anonymous function that accepts one argument and produces a result", "correct": true}, {"option": "Predicate is an anonymous function that accepts no argument and produces a result", "correct": false}, {"option": "Predicate is an anonymous function that accepts an argument and produces no result", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>\"hackerearth\".chars().distinct().peek(ch-&gt;System.out.print(ch)).sorted();</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "a,c,e,h,k,r,t", "correct": false}, {"option": "t,r,k,h,e,c,a", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "No output", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>interface LangFunction \n {\n   void callMe();\n }\n\nclass HackerEarth{\n public static void main(String args[])\n {\n  String str = \"Hacking\";\n  LangFunction Lf = ()-&gt; System.out.println(str+\"java\");\n  str=\"ay\";\n  Lf.callMe();\n }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HelloWorldjava", "correct": false}, {"option": "HelloWorlday ", "correct": false}, {"option": "ayjava", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n {\n   public static void main(String[] args) \n {\n   int sum = 0;\n   int a = 3;\n    while(sum++ &lt; 3)\n {\n    int b = (1 + 2 * sum) % 3;\n      switch(b) \n     {\n     default:\n     case 0:\n       a -= 1; \n       break;\n     case 1: \n       a += 5;\n     }\n }\n    System.out.println(a);\n }\n }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1", "correct": false}, {"option": "6", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class _Hacker\n{\n private static int $;\n public static void main(String[] main) {\n String h_e;\n System.out.print($);\n System.out.print(h_e);\n }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compiler error (Class name cannot start with an underscore (_))", "correct": false}, {"option": "Compiler error (Local variables should be assigned before referencing)", "correct": true}, {"option": "0 Null", "correct": false}, {"option": "Null Null", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth{\n  public static void main(String[] args)\n   {\n    int count = 0;\n    int a = 3;\n    while(count++ &lt; 3)\n    {\n    int b = (1 + 2 * count) % 3;\n    switch(b)\n      {\n       default:\n       case 0: a -= 1; break;\n       case 1: a += 5;\n      }\n    }\nSystem.out.println(a);\n  }\n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "6", "correct": true}, {"option": "13", "correct": false}, {"option": "4", "correct": false}, {"option": "Compiler error  ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nclass HackerEarth\n{\n  public static void main(String[] args)\n   {\n    int[] array = {6,9,8};\n    List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n    list.add(array[0]);\n    list.add(array[2]);\n    list.set(1, array[1]);\n    list.remove(0);\n    System.out.println(list);\n   }\n}\n</code></pre>\n\n<p><br>\n\u00a0</p>", "options": [{"option": "[8]", "correct": false}, {"option": "[9]", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Gives an exception\r\nThrows an exception", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Program1\n{\n public static void main(String[] args)\n{\n int[] array = {6,9,8};\n List&lt;Integer&gt; list = new ArrayList&lt;&gt;();\n list.add(array[0]);\n list.add(array[2]);\n list.set(1, array[1]);\n list.remove(0);\n System.out.println(list);\n }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[8]", "correct": false}, {"option": "[9]", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Gives an exception", "correct": false}], "level": "Medium"}, {"question": "<p>In Java 8, which of the following correctly represents <strong>lambda</strong> operator?</p>", "options": [{"option": "=>", "correct": false}, {"option": "->", "correct": true}, {"option": ":", "correct": false}, {"option": "::", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>interface StrFunc\n {\n  String disp(String n);\n }\n\n    class HackerEarth\n    {\n        public static void main(String args[])\n        {\n        StrFunc output = (str) -&gt; {\n        String result = \"\";\n        int a;\n        for(a = str.length()-1; a &gt;= 0; a--)\n        result += str.charAt(a);\n        return result;\n        };\n\n    System.out.println(output.disp(\"HACKEREARTH\"));\n    }\n }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "HTRAEREKCAH", "correct": true}, {"option": "HACKEREARTH", "correct": false}, {"option": "HCERAT", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java 8, which of the following syntaxes is used to employ an instance method reference using <strong>lambda </strong>expression?</p>", "options": [{"option": "objReference::methodName", "correct": true}, {"option": "objReference:methodName", "correct": false}, {"option": "objReference->methodName", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following syntaxes is used to create references to constructors?</p>", "options": [{"option": "ClassName : new ", "correct": false}, {"option": "ClassName :: new", "correct": true}, {"option": "ClassName : new ClassName", "correct": false}, {"option": "ClassName :: new ClassName", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following operations are related to the <strong>Map</strong> interface?</p>", "options": [{"option": "insert() and delete()", "correct": false}, {"option": "get() and put()", "correct": true}, {"option": "add() and remove()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following methods are used to store and load information from the Properties object to a disk?</p>", "options": [{"option": "store() and keep()", "correct": false}, {"option": "store() and load()", "correct": true}, {"option": "stored() and loaded()", "correct": false}, {"option": "keep() and load()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, what type of bit values does an array holds that is created by the <strong>BitSet </strong>class?</p>", "options": [{"option": "integer", "correct": false}, {"option": "double", "correct": false}, {"option": "boolean", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following interfaces are defined by the Stream API for handling primitive type streams?<br>\n<br>\n1. IntStream<br>\n2.\u00a0 DoubleStream<br>\n3. FloatStream<br>\n4. LongStream</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "1, 2, and 4", "correct": true}, {"option": "1, 2, 3 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.util.stream.*;\n\nclass HackerEarth {\n  public static void main(String[] args)\n  {\n   ArrayList&lt;Integer&gt; myList = new ArrayList&lt;&gt;( );\n   myList.add(7);\n   myList.add(4);\n   myList.add(10);\n   myList.add(3);\n   myList.add(17);\n   Stream&lt;Integer&gt; myStream = myList.stream();\n\n   Stream&lt;Integer&gt; myVals = myList.stream().sorted().filter((n) -&gt; (n % 2) == 1);\n   myVals = myList.stream().filter( (n) -&gt; (n % 2) == 1)\n   .filter((n) -&gt; n &gt; 5);\n   myVals.forEach((n) -&gt; System.out.print(n + \" \") );\n   }\n}</code></pre>\n\n<p><br>\n\u00a0</p>", "options": [{"option": "3 7 17", "correct": false}, {"option": "7 17", "correct": true}, {"option": "7 10 17", "correct": false}, {"option": "3 4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java 8, which of the following methods defined by collection is used to obtain a parallel stream?</p>", "options": [{"option": "parallel()", "correct": false}, {"option": "parallelInput()", "correct": false}, {"option": "getParallelStream()", "correct": false}, {"option": "parallelStream()", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>interface Climb\n {\n  boolean isTooHigh(int height, int limit);\n }\n\npublic class Climber\n {\n  public static void main(String[] args)\n {\n  check((h, l) -&gt; h.append(l).isEmpty(), 5);\n }\n\nprivate static void check(Climb climb, int height)\n {\n  if (climb.isTooHigh(height, 10))\n  System.out.println(\"too high\");\n  else\n  System.out.println(\"OK\");\n }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "too high", "correct": false}, {"option": "OK", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.List;\nimport java.util.stream.Stream;\nimport static java.util.stream.Collectors.toList;\n\nclass TestNumbers {\n\n  public static List&lt;Integer&gt; generate(int numbers) {\n  return Stream.iterate(1, i -&gt; ++i)\n  .filter(i -&gt; i == Stream.of(String.valueOf(i).split(\" \"))\n  .map(Integer::valueOf)\n  .map(n -&gt; (n*n*n))\n  .mapToInt(n -&gt; n)\n  .sum())\n  .limit(numbers)\n  .collect(toList());\n }\n\npublic static void main(String[] args) {\n  List&lt;Integer&gt; generate = TestNumbers.generate(3);\n  System.out.println(generate);\n  }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "27", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "1, 153, 370", "correct": true}, {"option": "3, 3, 2003", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\npublic class HackerEarth\n  {\n   public static void main(String a[]) {\n\n   Map&lt;String, String&gt; Hacker = new HashMap&lt;&gt;();\n   Hacker.put(\"Key 1\", \"Value 1\");\n   Hacker.put(\"Key 2\", \"Value 2\");\n   HackerEarth.iterateMap(Hacker);\n}\n\npublic static void iterateMap(Map&lt;String, String&gt; Hacker)\n   {\n    for(Entry&lt;String, String&gt; entry:Hacker.entrySet())\n     {\n      System.out.print(entry.getValue()+\", \"+entry.getKey());\n     }\n   }\n }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Key 1 Value 1, Key 2 Value 2", "correct": false}, {"option": "Value 1 Key 1, Value 2, Key 2", "correct": false}, {"option": "Value 1, Key 1Value 2, Key 2", "correct": true}, {"option": "Key 1, Value 1Key 2, Value 2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\npublic class HackerEarth{\n\n   public static void main(String args[])\n    {\n      List&lt;String&gt; Languages = Arrays.asList(\"Python\",\"Java\",\"python\");\n      Map&lt;String, Integer&gt; LanguagesLength = \n      Languages.stream().collect(Collectors.toMap(Function.identity(), String::length));\n\n      System.out.println(\"list: \" + Languages);\n\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "list : [Python, Java, python]", "correct": true}, {"option": "list: [Python, Java]", "correct": false}, {"option": "list : [Java,python]", "correct": false}, {"option": "\"Returns exception in thread \"\"main\"\" java.lang.IllegalStateException: Duplicate key Python\r\n\"", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.stream.IntStream;\nimport java.util.stream.Stream;\n\nclass HackerEarth\n {\n  public static void main(String args[])\n  {\n    Stream&lt;double[]&gt; HackValue = IntStream.rangeClosed(1, 100)\n    .boxed().flatMap(a -&gt;IntStream.rangeClosed(a, 10)\n    .mapToObj(\n    b -&gt; new double[] {a,b, Math.sqrt(a * a + b * b)})\n    .filter (t -&gt; t[2] % 1 == 0));\n \nHackValue.limit(5)\n    .forEach(t-&gt; System.out.println(t[0] + \", \" + t[1] + \", \" + t[2]));\n   }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "3.0, 4.0, 5.0             \r\n6.0, 8.0, 10.0", "correct": true}, {"option": "3.0, 4.0, 5.0             \r\n6.0, 8.0, 10.0         \r\n5.0, 12.0, 13.0", "correct": false}, {"option": "3.0, 4.0, 5.0", "correct": false}, {"option": "6.0, 8.0, 10.0         \r\n5.0, 12.0, 13.0", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these codes is the equivalent lambda version of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>Collections.sort(users, new Comparator&lt;Author&gt;()\n{\npublic int compare(Author a1, Author a2)\n{\nreturn a1.compareTo(a2.id);\n}\n}\n);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Collections.sort(authors, (Author a1, Author a2) -> a1.compareTo(a2));\r\n", "correct": true}, {"option": "Collections.sort(authors, (Author a1, Author a2) => a1.compareTo(a2));\r\n", "correct": false}, {"option": "Collections.sort { authors, (Author a1, Author a2) -> a1.compareTo(a2) };", "correct": false}, {"option": "Collections.sort( (Author a1, Author a2) -> a1.compareTo(a2));", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following classes or interfaces have been recently introduced in Java 8?<br>\n<br>\n1. PrimitiveIterator<br>\n2. StringJoiner<br>\n3. StringFilter<br>\n4.\u00a0UncheckedIOException</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 4", "correct": true}, {"option": "2 and 3", "correct": false}, {"option": "1, 3, and 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n  {\n\t\tpublic static void main(String[] args)\n\t{\n\t\tint val = 10;\n\t\tif((val&gt;10 ? val++: --val)&lt;10)\n\t{\n\t\tSystem.out.print(\"MAC\");\n\t}\n\t\tif(val&lt;10)\n\t\tSystem.out.print(\"PC\");\n\t}\n  }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "MAC", "correct": false}, {"option": "PC", "correct": false}, {"option": "MACPC", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java 8 code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.lang.annotation.*;\n\n public class HackerEarth\n{\n\n @Target({ElementType.TYPE_PARAMETER, ElementType.TYPE_USE})\n @interface MyAnnotation { }\n\n @Retention(RetentionPolicy.RUNTIME)\n @interface Hints \n {\n  Hint[] value();\n }\n\n @Repeatable(Hints.class)\n @Retention(RetentionPolicy.RUNTIME)\n @interface Hint\n {\n  String value();\n }\n\n @Hint(\"hint1\")\n @Hint(\"hint2\")\n\n class Person { }\n\n public static void main(String[] args) \n  {\n  Hint hint = Person.class.getAnnotation(Hint.class);\n  System.out.println(hint);\n  Hints hints1 = Person.class.getAnnotation(Hints.class);\n  System.out.println(hints1.value().length);\n  Hint[] hints2 = Person.class.getAnnotationsByType(Hint.class);\n  System.out.println(hints2.length);\n  }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "2\r\n2\r\nnull", "correct": false}, {"option": "2\r\nnull\r\n2", "correct": false}, {"option": "null\r\n2\r\n2 ", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In\u00a0Java, which of the following is the\u00a0root interface of the <strong>collections f</strong>ramework?</p>", "options": [{"option": "java.util.Collection", "correct": true}, {"option": "java.util.Collections", "correct": false}, {"option": "java.lang.Collection ", "correct": false}, {"option": "java.lang.Collections ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following interfaces is a part of the collections<strong> </strong>framework but does not inherit from the collection interface?</p>", "options": [{"option": "List", "correct": false}, {"option": "Map", "correct": true}, {"option": "Set", "correct": false}, {"option": "Queue", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, where should\u00a0the <strong>script</strong> tag be placed?\u00a0</p>", "options": [{"option": "Head", "correct": false}, {"option": "Head and body", "correct": true}, {"option": "Title and body", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>What are the different types of dialog boxes supported by JavaScript?</p>\n\n<ol>\n\t<li>Alert dialog box</li>\n\t<li>Information dialog box</li>\n\t<li>Confirmation dialog box</li>\n\t<li>Prompt dialog box</li>\n</ol>", "options": [{"option": "1, 2, 3", "correct": false}, {"option": "1, 3, 4", "correct": true}, {"option": "1, 2, 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what does the <strong>isNaN </strong>function do?</p>", "options": [{"option": "Returns true if the argument is a number", "correct": false}, {"option": "Returns false if the argument is not a number", "correct": false}, {"option": "Returns true if the argument is not a number", "correct": true}, {"option": "Returns false if the argument is a number", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which function is used to execute another function after a specified time interval?</p>", "options": [{"option": "Timeout( )", "correct": false}, {"option": "TimeInterval( )", "correct": false}, {"option": "setTimeout( )", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following attributes is used to include external JavaScript code inside an HTML document?</p>", "options": [{"option": "src", "correct": true}, {"option": "ext", "correct": false}, {"option": "script", "correct": false}, {"option": "link", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about IntelliJ is correct:</p>\n\n<ol>\n\t<li>It wraps a statement by using the try-catch or if-else blocks with simple keystrokes</li>\n\t<li>It does not allow various databases such as SQL, Oracle, PostgreSQL, and Microsoft SQL Server to be directly accessed from the IDE</li>\n\t<li>It supports different languages such as Java, JavaScript, Clojure, etc</li>\n</ol>", "options": [{"option": "1 and 3", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following computer languages has been used to write IntelliJ IDEA?</p>", "options": [{"option": "SQL", "correct": false}, {"option": "C#", "correct": false}, {"option": "Java", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following companies has developed IntelliJ IDEA?</p>", "options": [{"option": "Xamarin", "correct": false}, {"option": "JetBrains", "correct": true}, {"option": "Atlassian", "correct": false}, {"option": "Heroku", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following editions are supported by IntelliJ IDEA?</p>", "options": [{"option": "Community and professional", "correct": false}, {"option": "Ultimate and professional", "correct": false}, {"option": "Community and ultimate", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following inbuilt tools is available in IntelliJ IDEA?</p>", "options": [{"option": "Decompiler", "correct": false}, {"option": "Docker support", "correct": false}, {"option": "Version control", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following operating systems supports IntelliJ IDEA?</p>", "options": [{"option": "Windows 2003", "correct": false}, {"option": "Windows XP ", "correct": false}, {"option": "Windows 10 ", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In IntelliJ IDEA, which of the following statements about the refactoring technique is correct?</p>", "options": [{"option": "It is a technique of restructuring codes without changing its functionality and usability.", "correct": false}, {"option": "It can be used to improve the readability and performance of codes.", "correct": false}, {"option": "It can be used to remove the duplicate functionalities.\r\n", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In IntelliJ IDEA, which of the prerequisites is required for installing the Selenium WebDriver:<br>\n<br>\n1. IntelliJ<br>\n2. JDK<br>\n3. Spring<br>\n<br>\n<br>\n\u00a0</p>", "options": [{"option": "1 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What are the advantages of using Integrated Development Environments over plain text editors:<br>\n<br>\n1. It is integrated with useful tools such as compilers, debuggers, version control systems, frameworks etc.<br>\n2. It supports unit testing, integration testing, and code coverage via plugins.<br>\n3. It does not support code navigation, code completion, and code generation features.<br>\n<br>\n<br>\n<br>\n\u00a0</p>", "options": [{"option": "1 and 2", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In IntelliJ IDEA, which of the following steps is used to create a temporary configuration:<br>\n<br>\n1. Create a Java class<br>\n2. Click the name of the class and Run option<br>\n3. After the first Run, the temporary configuration is added to the menu<br>\n4. To save the created configuration as a permanent configuration, configure it with IntelliJ<br>\n\u00a0</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following built-in tools are supported by IntelliJ IDEA?</p>", "options": [{"option": "Toolchain and Apache", "correct": false}, {"option": "Install Docker and Maven", "correct": false}, {"option": "Maven and Gradle", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following unit testing frameworks is supported by IntelliJ IDEA?</p>", "options": [{"option": "JUnit", "correct": false}, {"option": "TestNG", "correct": false}, {"option": "Spock", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following inbuilt Java debuggers is supported by IntelliJ IDEA?</p>", "options": [{"option": "Breakpoints", "correct": false}, {"option": "Step into", "correct": false}, {"option": "Resume program", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In IntelliJ IDEA, which of the following statements about the benefits of VisualVM tool for profiling of a Java application is correct:<br>\n<br>\n1. VisualVM tool integrates JDK tools and provides you efficient profiling capabilities.<br>\n2. VisualVM tool analyzes memory allocations to different applications.<br>\n3. VisualVM tool cannot monitor application threads.<br>\n\u00a0</p>", "options": [{"option": "1 and 2", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following version control systems is supported by IntelliJ IDEA?</p>", "options": [{"option": "GitHub ", "correct": false}, {"option": "Subversion", "correct": false}, {"option": "Mercurial", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements about building NetBeans RCP applications with IntelliJ IDEA is correct:<br>\n<br>\n1. The application can be built with some important features such as wizards, menu actions\u00a0etc.<br>\n2. The application cannot be built.</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following methods acts\u00a0as\u00a0a bridge between collections and older APIs that expect arrays while giving the input?</p>", "options": [{"option": "toArray()", "correct": true}, {"option": "toArrays()", "correct": false}, {"option": "Array.join()", "correct": false}, {"option": "Array.bridge()", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java 8, which the following methods is used to obtain an instance of an iterator from a collection?</p>", "options": [{"option": "iterators()", "correct": false}, {"option": "iterator()", "correct": true}, {"option": "getIterator()", "correct": false}, {"option": "getIterators()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code> var foo = \"Hello\";\n(function()\n { \n    var bar = \" World\";\n    alert(foo + bar); \n })();\nalert(foo + bar);\n</code></pre>", "options": [{"option": "Hello World", "correct": false}, {"option": "Reference Error: bar is not defined", "correct": false}, {"option": "Error: No output", "correct": false}, {"option": "Both (1) and (2)", "correct": true}], "level": "Medium"}, {"question": "<p>What does the rendering engine do when it encounters JavaScript?</p>", "options": [{"option": "Skips the code", "correct": false}, {"option": "Continues painting", "correct": false}, {"option": "Switches to the JavaScript Interpreter", "correct": true}, {"option": "Compiles the JavaScript to Bytecode", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used for grouping objects and storing the results in a <strong>Ma</strong><strong>p</strong><em>\u00a0</em>instance?</p>", "options": [{"option": "Collectors.groupingBy()", "correct": true}, {"option": "Collectors.groupBy()", "correct": false}, {"option": "Collectors.partitioningBy()", "correct": false}, {"option": "Collectors.partitionBy()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following exceptions is thrown if you attempt to modify the contents of an unmodifiable<em>\u00a0</em>collection?</p>", "options": [{"option": "ClassCastException", "correct": false}, {"option": "UnsupportedOperationException", "correct": true}, {"option": "IllegalArgumentException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following exceptions is generated when you try to add an object that is incompatible\u00a0to a collection?</p>", "options": [{"option": "UnsupportedOperationException", "correct": false}, {"option": "ClassCastException", "correct": true}, {"option": "NullPointerException", "correct": false}, {"option": "IllegalStateException", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following methods is used\u00a0to empty a collection?</p>", "options": [{"option": "clear()", "correct": true}, {"option": "empty()", "correct": false}, {"option": "remove()", "correct": false}, {"option": "removeAll()", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following methods does all of the following:</p>\n\n<ul>\n\t<li>Locks objects down</li>\n\t<li>Makes the object non-extensible and its properties non-configurable</li>\n\t<li>Makes the object immutable</li>\n</ul>", "options": [{"option": "Object.preventExtensions()", "correct": false}, {"option": "Object.seal()", "correct": false}, {"option": "Object.lock()", "correct": false}, {"option": "Object.freeze()", "correct": true}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following processes changes the state of an object to a string in order to restore it when required?</p>", "options": [{"option": "Protoype", "correct": false}, {"option": "Class", "correct": false}, {"option": "Extensibility", "correct": false}, {"option": "Serialization", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, what is the purpose of the extensible attribute of an object?</p>", "options": [{"option": "Make all the own properties of an object non-configurable", "correct": true}, {"option": "To configure a writable property", "correct": false}, {"option": "Lock down objects into a known state and prevent outside tampering", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following are the different variants of the <strong>Date()</strong> constructor that is used to create the date object:</p>\n\n<ol>\n\t<li>var\u00a0d =\u00a0new\u00a0Date();</li>\n\t<li>var\u00a0d =\u00a0new\u00a0Date(<em>milliseconds</em>);</li>\n\t<li>var\u00a0d =\u00a0new\u00a0Date(<em>dateString</em>);</li>\n\t<li>var\u00a0d =\u00a0new\u00a0Date(<em>year</em>,\u00a0<em>month</em>,\u00a0<em>day</em>,\u00a0<em>hours</em>,\u00a0<em>minutes</em>,\u00a0<em>seconds</em>,\u00a0<em>milliseconds</em>);</li>\n</ol>\n\n<p>\u00a0\u00a0\u00a0</p>", "options": [{"option": "1, 2, 3", "correct": false}, {"option": "2, 3, 4", "correct": true}, {"option": "1, 2, 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">How do you add JavaScript methods to an HTML element such that they will be inherited by the objects that represent the HTML tags in the current document?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "HTMLElement.prototype(\u2026)", "correct": false}, {"option": "HTMLElement.prototype", "correct": true}, {"option": " HTML.addmethods()", "correct": false}, {"option": "HTML.elements(add)", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which handler is triggered when the content of the document in a window is stable and ready for manipulation?</p>", "options": [{"option": "Onload ", "correct": true}, {"option": "Manipulate", "correct": false}, {"option": "Create ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, what is the basic purpose of the <strong>toLocaleString()</strong>?</p>", "options": [{"option": "To return a localized object representation", "correct": false}, {"option": "To return a parsed string", "correct": false}, {"option": "To return a local time in the string format", "correct": false}, {"option": "To return a localized string representation of the object", "correct": true}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following objects contains the <strong>localStorage</strong>\u00a0and <strong>sessionStorage</strong> properties?</p>", "options": [{"option": "Window", "correct": true}, {"option": "Element", "correct": false}, {"option": "Hash", "correct": false}, {"option": "DOM", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, what is the main difference between the <strong>localStorage</strong> and <strong>sessionStorage</strong> properties?</p>", "options": [{"option": "Lifetime", "correct": false}, {"option": "Scope", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which\u00a0of the following functions is used to store a value?</p>", "options": [{"option": "SetItem()", "correct": true}, {"option": "Set()", "correct": false}, {"option": "StoreItem()", "correct": false}, {"option": "Store()", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function x()\n{\ndocument.write(5+3+\"6\");\n}</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "536", "correct": true}, {"option": "86", "correct": false}, {"option": "8", "correct": false}, {"option": "Error", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In web development, which of the following frameworks focuses on <strong>DOM</strong> and <strong>Ajax</strong> utilities:</p>\n\n<ol>\n\t<li>jQuery</li>\n\t<li>Prototype</li>\n\t<li>Dojo</li>\n</ol>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "Only 3", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In\u00a0JavaScript, which of the following methods\u00a0supports addEventListner() in browsers and is also used to cancel the default action for an event by invoking a method of the event object?</p>", "options": [{"option": "preventBrowsers()\r\n", "correct": false}, {"option": "preventDefault()", "correct": true}, {"option": "preventPropagation()", "correct": false}, {"option": "preventEvent()", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var s = \"7123456 or 90000?\";\nvar pattern = /d{4}/;\nvar output = s.match(pattern);\ndocument.write(output);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "7123", "correct": true}, {"option": "71234", "correct": false}, {"option": "90000", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, if the modifier key is set to False in an event, then the\u00a0<strong>altKey</strong>, <strong>ctrlKey</strong>, <strong>metaKey</strong>, and <strong>shiftKey</strong> properties are set to True. Which of the following objects contains these properties?\u00a0</p>", "options": [{"option": "Key down", "correct": false}, {"option": "Key event", "correct": true}, {"option": "Key up", "correct": false}, {"option": "Key press", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, when an event occurs on an object\u00a0in which order are the handlers registered for the event invoked?</p>", "options": [{"option": "In the order of occurence", "correct": false}, {"option": "In the order of registeration", "correct": true}, {"option": "In the order of invokation", "correct": false}, {"option": "In the order of initialization", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following expressions will select a form name 'address' with the first element having the word 'street'?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "document.forms.address[0]", "correct": false}, {"option": "document.forms.address.street", "correct": false}, {"option": "document.address.street", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript frameworks is used by Google for Gmail?</p>", "options": [{"option": "Dojo", "correct": false}, {"option": "GWT", "correct": false}, {"option": "Closure", "correct": true}, {"option": "YUI", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following services\u00a0enables networking through scripted HTTP requests?</p>", "options": [{"option": "XMLHttpResponse", "correct": false}, {"option": "XMLRequest", "correct": false}, {"option": "XMLHttpRequest", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following pages communicates\u00a0with server-side CGI scripts through HTML form submissions and can be written without using JavaScript?</p>", "options": [{"option": "Static web pages", "correct": false}, {"option": "Interactive web pages", "correct": true}, {"option": "Conditional web pages", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if the pointer of a mouse is placed on an element, then which of the following methods is used to display the coordinates of that element?</p>", "options": [{"option": "getBoundingClientRect()", "correct": false}, {"option": "getElementFromPoint()", "correct": false}, {"option": "elementFromPoint()", "correct": true}, {"option": "getElementCoordinates()", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following functions is used to deregister event handler <strong>f</strong>\u00a0in JavaScript?</p>", "options": [{"option": " deleteAllListeners(name)", "correct": false}, {"option": "deleteListener(name,f)", "correct": false}, {"option": "removerListener(name,f)", "correct": true}, {"option": "removeAllListeners(name)", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following objects is an <strong>event emitter</strong> in JavaScript?</p>", "options": [{"option": "once", "correct": false}, {"option": "process", "correct": true}, {"option": "listeners", "correct": false}, {"option": "on", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">When do uncaught exceptions generate events in JavaScript?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "When handlers are registered", "correct": true}, {"option": "When handlers are deregistered", "correct": false}, {"option": "When handler functions are called", "correct": false}, {"option": "When handlers do not have a matching catch clause", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, when a node cannot write the data immediately and must buffer it internally, what is the return value of the<strong> write()</strong> method?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following functions is a synonym for <strong>on()</strong>?</p>", "options": [{"option": "addListener()", "correct": true}, {"option": "listeners()", "correct": false}, {"option": "once()", "correct": false}, {"option": "add()", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following will you use to invoke a function as the method of an object even when the function is not a method of that object?</p>", "options": [{"option": "Constructor invocation", "correct": false}, {"option": "New invocation", "correct": false}, {"option": "Indirect invocation", "correct": true}, {"option": "Direct invocation", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following exceptions is generated when you try to remove an element from an empty queue?</p>", "options": [{"option": "IllegalArgumentException", "correct": false}, {"option": "NoSuchElementException", "correct": true}, {"option": "EmptyQueueException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following statements about the <strong>poll()<em>\u00a0</em></strong>method that is declared by a queue is correct?</p>", "options": [{"option": "Returns the element at the head of the queue and elements are not removed in the process", "correct": false}, {"option": "Attempts to add an element to the queue", "correct": false}, {"option": "Returns the element at the head of the queue and elements are removed in the process", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth\n{\n\tpublic static void main(String args[]) \n\t{\n\t\tArrayList&lt;String&gt; h = new ArrayList&lt;String&gt;();\n\t\tSystem.out.println(h.size());\n\t\th.add(\"h\");\n\t\th.add(\"a\");\n\t\th.add(\"c\");\n\t\th.add(1, \"k\");\n\t\tSystem.out.println(h.size());\n\t\th.remove(\"a\");\n\t\th.remove(2);\n\t\tSystem.out.println(h.size());\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0 \r\n4 \r\n2", "correct": true}, {"option": "null \r\n4 \r\n2", "correct": false}, {"option": "1 5 3", "correct": false}, {"option": "0\r\n4 \r\n3", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth\n{\n\tpublic static void main(String args[])\n\t {\n\t\tArrayList&lt;Double&gt; vals = new ArrayList&lt;&gt;();\n\t\tvals.add(1.0);\n\t\tvals.add(4.0);\n\t\tvals.add(16.0);\n\t\tSpliterator&lt;Double&gt; spltitr = vals.spliterator();\n\t\twhile(spltitr.tryAdvance((n) -&gt; System.out.print(\" \"+n)));\n\t\tSystem.out.println();\n\t\tspltitr = vals.spliterator();\n\t\tArrayList&lt;Double&gt; sqrs = new ArrayList&lt;&gt;();\n\t\twhile(spltitr.tryAdvance((n) -&gt; sqrs.add(Math.sqrt(n))));\n\t\tspltitr = sqrs.spliterator();\n\t\tspltitr.forEachRemaining((n) -&gt; System.out.print(\" \"+n));\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1.0 4.0 16.0\r\n1.0 2.0 4.0", "correct": true}, {"option": "1.0 2.0 4.0\r\n1.0 4.0 16.0", "correct": false}, {"option": "1 4 16\r\n1 2 4", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following static variables are defined in the <strong>c<strong>ollections</strong> </strong>class?</p>\n\n<ol>\n\t<li>EMPTY_SET</li>\n\t<li>EMPTY_LIST</li>\n\t<li>EMPTY_MAP</li>\n\t<li>EMPTY_TREE</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "1 and 2", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript functions returns a new function when it is invoked on function <strong>f</strong> and passed on object <strong>o</strong>?</p>", "options": [{"option": "apply( )", "correct": false}, {"option": "call( )", "correct": false}, {"option": "bind( )", "correct": true}, {"option": "string( )", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following methods is used to invoke a function on the elements of an array of arbitrary length?</p>", "options": [{"option": "Apply( )", "correct": true}, {"option": "Call()", "correct": false}, {"option": "Bind()", "correct": false}, {"option": "String()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the significance of <strong>closures </strong>in JavaScript?</p>", "options": [{"option": "Closures are function objects", "correct": false}, {"option": "Closures are the scope within which the variables of a function are resolved", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var scope = \"global scope\";\nfunction checkscope() {\nvar scope = \"local scope\";\nfunction f()\n{\n\u00a0\u00a0\u00a0\u00a0 return scope;\n}\nreturn f;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Returns a null value", "correct": false}, {"option": "Returns an exception", "correct": false}, {"option": "Returns a value within the scope", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following uses the maximum number of CPU cycles?</p>", "options": [{"option": "Graphical user interface", "correct": false}, {"option": "Statically-generated graphics", "correct": false}, {"option": "Dynamically-generated graphics", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following statements about the <strong>dynamic scoping</strong> paradigm is correct?</p>", "options": [{"option": "Variables can be declared outside a scope", "correct": true}, {"option": "Variables must be declared outside a scope", "correct": false}, {"option": "Variables cannot be declared outside a scope", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript functions will you use to invoke function <strong>f</strong> that is available in class <strong>o</strong> and accepts two arguments <strong>a</strong> and <strong>b</strong>?</p>", "options": [{"option": "0(a,b);", "correct": false}, {"option": "O.f(a) && o.f(;", "correct": false}, {"option": "F(a,b);", "correct": false}, {"option": "0.f(a,b);", "correct": true}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following is not a valid <strong>promise</strong> method?</p>", "options": [{"option": "Promise.race()", "correct": false}, {"option": "Promise.some()", "correct": true}, {"option": "Promise.all()", "correct": false}, {"option": "Promise.reject()", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the\u00a0output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var greeting = \"Hello friends\";\ngreeting = \"See you later\";\nfor (var i = 0; i &lt; 2; i++) {\n\u00a0 var greeting = \"Good day\";\n}\nconsole.log(greeting);\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Hello friends", "correct": false}, {"option": "Good day", "correct": true}, {"option": "See you later", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the\u00a0output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>let x = 100;\nif (x &gt; 50) {\n\u00a0 let x = 10;\n}\nconsole.log(x);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10", "correct": false}, {"option": "50", "correct": false}, {"option": "100", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>const human= {\n\u00a0 name: 'Alice',\n\u00a0 age: 25,\n}\nperson.age = 26;\nconsole.log(person.age);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "25", "correct": false}, {"option": "26", "correct": true}, {"option": "Alice", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the error in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>console.log(j);\nlet j = \"I am alphabet J\";</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Undefined variable", "correct": false}, {"option": "Reference rrror: Cannot access lexical declaration `j` before initialization", "correct": true}, {"option": "No error and output is displayed", "correct": false}, {"option": "No error but nothing is displayed", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the\u00a0output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>const human= {\n\u00a0 age: 10,\n\u00a0 grow: () =&gt; {\n\u00a0\u00a0\u00a0 this.age++;\n\u00a0 },\n}\nhuman.grow();\nconsole.log(human.age);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10", "correct": true}, {"option": "11", "correct": false}, {"option": "12", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following APIs is mandatory for every ReactJS component?</p>", "options": [{"option": "getInitialState", "correct": false}, {"option": "render", "correct": true}, {"option": "renderComponent", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following methods will you use to access the state of a component that is available within a member function?</p>", "options": [{"option": "this.getState()", "correct": false}, {"option": "this.prototype.stateValue()", "correct": false}, {"option": "this.state()", "correct": false}, {"option": "this.values()", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass HackerEarth\n{\npublic static void main(String args[]) \n{\n\tLinkedList&lt;Integer&gt; list = new LinkedList&lt;Integer&gt;();\n\t\tlist.add(-8);\n\t\tlist.add(10);\n\t\tlist.add(-20);\n\t\tlist.add(null);\n\tComparator&lt;Integer&gt; r = Collections.reverseOrder();\n\tCollections.sort(list, r);\n\tfor(int i : list)\n\tSystem.out.print(i+ \" \");\n\tSystem.out.println();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "-20 -8 10", "correct": false}, {"option": "10 -8 -20", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error ", "correct": true}], "level": "Medium"}, {"question": "<p>In which of the following linear lists in Java does the last node point to the first node?</p>", "options": [{"option": "Singly linked list", "correct": false}, {"option": "Doubly linked list", "correct": false}, {"option": "Circular linked list", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods are newly introduced to the <strong>collection</strong> class?</p>\n\n<ol>\n\t<li>removeIf()</li>\n\t<li>stream()</li>\n\t<li>remove()</li>\n\t<li>parallelStream()</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "2, 3, and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code> \nimport java.util.Iterator;\nimport java.util.LinkedList;\n \npublic class HackerEarth {\n \n    public static void main(String a[]){\n         \n        LinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();\n        list.add(\"Val 1\");\n        list.add(\"Val 2\");\n        list.add(\"Val 3\");\n        list.add(\"Random\");\n        Iterator&lt;String&gt; itr = list.descendingIterator();\n        while(itr.hasNext()){\n            System.out.print(\" \"+itr.next());\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Val 1 Val 2 Val 3 Random", "correct": false}, {"option": "Val 1 Val 2 Val 3", "correct": false}, {"option": "Val 3 Val 2 Val 1", "correct": false}, {"option": "Random Val 3 Val 2 Val 1", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Collections;\nimport java.util.LinkedList;\n\npublic class Replace {\n\n\tpublic static void main(String a[]){\n\t\t\n\t\tLinkedList&lt;String&gt; list = new LinkedList&lt;String&gt;();\n\t\tlist.add(\"Java\");\n\t\tlist.add(\"is\");\n\t\tlist.add(\"multithreaded\");\n\t\tlist.add(\"and\");\n\t\tlist.add(\"Platform\");\n\t\tlist.add(\"Independent\");\n\t\t\n\t\tCollections.swap(list, 2, 6);\n\t\tfor(String str: list){\n\t\t\tSystem.out.print(\" \"+str);\n\t\t}\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Java independent multithreaded and platform is ", "correct": false}, {"option": "Java is and Platform Independent", "correct": false}, {"option": "Java is null and Platform Independent", "correct": false}, {"option": "Runtime Error - IndexOutOfBoundsException", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\nimport java.util.Map.Entry;\n\npublic class OrderValue{\n \n    public static void main(String a[]){\n        Map&lt;String, Integer&gt; names = new HashMap&lt;String, Integer&gt;();\n        names.put(\"Anne\", 10);\n        names.put(\"John\", 35);\n        names.put(\"Bob\", 2);\n        Set&lt;Entry&lt;String, Integer&gt;&gt; set = names.entrySet();\n        List&lt;Entry&lt;String, Integer&gt;&gt; list = new ArrayList&lt;Entry&lt;String, Integer&gt;&gt;(set);\n        Collections.sort( list, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;()\n        {\n          public int compare( Map.Entry&lt;String, Integer&gt; order1, Map.Entry&lt;String, Integer&gt; order2)\n            {\n                return (order2.getValue()).compareTo( order1.getValue() );\n            }\n        });\n        for(Map.Entry&lt;String, Integer&gt; entry:list){\n            System.out.print(\" \"+entry.getKey());\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Anne John Bob", "correct": false}, {"option": "John Anne Bob", "correct": true}, {"option": "35 10 2", "correct": false}, {"option": "10 35 2", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\nimport java.util.List;\n \npublic class StrPerm {\n \n    public static void main(String args[]) {\n \n        List&lt;String&gt; output = StrPerm.genPerm(\"AB\");\n        output.stream().forEach(System.out::println); \n    }\n \n    public static List&lt;String&gt; genPerm(String input) \n    {\n         List&lt;String&gt; strList = new ArrayList&lt;String&gt;();\n         StrPerm.permutations(\"\", input, strList);\n         return strList;\n    }\n \n    private static void permutations(String consChars, String str, List&lt;String&gt; opContainer){\n \n            for(int i=0; i&lt;str.length(); i++) {\n            permutations(consChars+str.charAt(i), str.substring(0,+str.substring(i+1),opContainer);\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "AB\r\nBA", "correct": false}, {"option": "AA\r\nBB", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "No output", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which\u00a0of the following methods is used to check if an <strong>ArrayList </strong>contains an object?</p>", "options": [{"option": "include()", "correct": false}, {"option": "includes()", "correct": false}, {"option": "contains()", "correct": true}, {"option": "contain()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java Collections Framework (JFC), which of the following interfaces cannot contain a duplicate element?</p>\n\n<ol>\n\t<li>Set</li>\n\t<li>List</li>\n\t<li>Map</li>\n\t<li>SortedSet</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "3", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to:</p>\n\n<ul>\n\t<li>Add an object to a map</li>\n\t<li>Delete\u00a0an object from a map</li>\n</ul>", "options": [{"option": "put() and remove()", "correct": true}, {"option": "put() and delete()", "correct": false}, {"option": "set() and remove()", "correct": false}, {"option": "set() and delete()", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following Java\u00a0<strong>c<strong>o</strong>llection </strong>classes grows dynamically?</p>", "options": [{"option": "Array", "correct": false}, {"option": "ArrayList", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>The <strong>Java collection framework</strong> package (java.util) comprises of:</p>\n\n<ol>\n\t<li>Interfaces</li>\n\t<li>Implementation classes</li>\n\t<li>Algorithms</li>\n</ol>", "options": [{"option": "2 and 3", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java, which of the following is an abstract method that is declared by the <strong>Iterable&lt;E&gt; </strong>interface to\u00a0retrieve the <strong>Iterator&lt;E&gt; </strong>object associated with all the collections?</p>", "options": [{"option": "iterator()", "correct": true}, {"option": "Listiterator()", "correct": false}, {"option": "Enumeration()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following methods will you use to ensure the correct order of an iteration while calling the forEach() function on a parallel stream?</p>", "options": [{"option": "forEachOrder()", "correct": false}, {"option": "forEachOrders()", "correct": false}, {"option": "forEachOrdered()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\npublic class ListProg {\n\n\tpublic static void main(String args[]) {\n\t\tList&lt;String&gt; myList = new ArrayList&lt;String&gt;();\n\n\t\tmyList.add(\"1\");\n\t\tmyList.add(\"2\");\n\t\tmyList.add(\"3\");\n\t\tmyList.add(\"4\");\n\n\t\tIterator&lt;String&gt; it = myList.iterator();\n\t\twhile (it.hasNext()) {\n\t\t\tString value = it.next();\n\t\t\tSystem.out.println(\" \" + value);\n\t\t\tif (value.equals(\"2\"))\n\t\t\t\tmyList.remove(value);\n\t\t}\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1\r\n2\r\n3\r\n4", "correct": false}, {"option": "1\r\n3\r\n4", "correct": false}, {"option": "1\r\n2 \r\nRuntime Error-ConcurrentModificationException is generated", "correct": true}, {"option": "Runtime Error-ConcurrentModificationException is generated", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.List;\nimport java.util.ArrayList;\n \npublic class ListMut {\n\n   public void Display()\n   {\n      List&lt;String&gt; list = new ArrayList&lt;String&gt;();\n      list.add(\"Alice\");\n      list.add(\"Smith\");\n      list.add(\"Jones\");\n \n      for (String str : list) \n      {\n         str += \"50\";  \n      }\n      System.out.println(list);  \n   }\n\n   public static void main(String[] args) \n   {\n      ListMut obj = new ListMut();\n      obj.Display();\n   }\n      \n}\n   </code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[Alice, Smith, Jones]", "correct": true}, {"option": "[Alice50, Smith50,  Jones50]", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "No output", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following methods is used to convert an array\u00a0into a list?</p>", "options": [{"option": "Arrays.toList()", "correct": true}, {"option": "Arrays.convertToList()", "correct": false}, {"option": "Arrays.asList()", "correct": false}, {"option": "Array.asList()", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following methods that is defined in the collections<em> </em>class is used to randomize an object that is stored in a list?\u00a0</p>", "options": [{"option": "random()", "correct": false}, {"option": "shuffle()", "correct": true}, {"option": "unordered()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java, which of the following is an abstract method that is defined by the <strong>java.lang </strong>comparable<em> </em>interface?</p>", "options": [{"option": "int compareFrom()", "correct": true}, {"option": "int compareTo()", "correct": false}, {"option": "String compareFrom()", "correct": false}, {"option": "String compareTo()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java\u00a0code: \u200b</p>\n\n<pre class=\"prettyprint\"><code>public class ShowValue{\nfinal int num = 10;\npublic void display()\n{\nint num =12;\nRunnable r = new Runnable(){\nfinal int num = 15;\npublic void run(){\nint num = 20;\nSystem.out.println(this.num);\n}\n};\nr.run();\n}\npublic static void main(String args[])\n{\nShowValue sv = new ShowValue();\nsv.display();\n}\n}\n</code></pre>\n\n<p>\u200b</p>", "options": [{"option": "10", "correct": false}, {"option": "12", "correct": false}, {"option": "15", "correct": true}, {"option": "20", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following <strong>lambda </strong>expressions are valid?</p>\n\n<ol>\n\t<li>() -&gt; \"Alice\"</li>\n\t<li>(String str) -&gt; {\"Bob\";}</li>\n\t<li>() -&gt; {return \"Smith\";}</li>\n\t<li>(Integer i) -&gt; return \"James\" + i;</li>\n</ol>", "options": [{"option": "1 and 3", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "1 and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java\u00a0code: \u200b</p>\n\n<pre class=\"prettyprint\"><code>import java.util.stream.*;\npublic class TestClass {\n\nprivate static class P {\n final int divisor;\n final String str;\n\nP(int divisor, String str) {\n this.divisor = divisor;\n this.str = str;\n }\n}\n\nprivate static String getString(int n) {\n return Stream.of(new P(3, \"Red\"), new P(7, \"Green\"))\n .filter(p -&gt; 0 == n % p.divisor)\n .map(p -&gt; p.str)\n .reduce((s1, s2) -&gt; s1 + s2)\n .orElse(String.valueOf(n));\n}\n\npublic static void main(String[] argc) {\n IntStream.range(1, 10)\n .mapToObj(TestClass::getString)\n .forEach(System.out::println);\n }\n}</code></pre>\n\n<p>\u200b</p>", "options": [{"option": "1 \r\n2 \r\nRed \r\n4 \r\n5 \r\nRed \r\nGreen \r\n8 \r\nRed", "correct": true}, {"option": "1 \r\n2 \r\nGreen \r\n4 \r\n5 \r\nGreen \r\nRed \r\n8", "correct": false}, {"option": "1 \r\n2 \r\nRed\r\nGreen \r\n4 \r\n5 \r\nRed \r\nGreen \r\nRed\r\nGreen", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java\u00a0code: \u200b</p>\n\n<pre class=\"prettyprint\"><code>\ninterface SmithAge{\n default Integer getAge(){\n return 30;}\n}\ninterface JohnAge{\n default Integer getAge(){\n return 42;}\n}\n\npublic class Age implements SmithAge, JohnAge {\n public static void main(String args[]) {\n System.out.println(new Age().getAge());\n }\n}\n</code></pre>", "options": [{"option": "30", "correct": false}, {"option": "42", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "No output", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following are <strong>checked </strong>exceptions in Java:</p>\n\n<ol>\n\t<li>InterruptedException</li>\n\t<li>ProtocolException</li>\n\t<li>SecurityException</li>\n\t<li>MissingResourceException</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "1 and 2", "correct": true}, {"option": "3 and 4", "correct": false}, {"option": "2 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods are declared by the <strong>BaseStream</strong> interface?</p>\n\n<ol>\n\t<li>void close()</li>\n\t<li>boolean isParallel()</li>\n\t<li>S parallel()</li>\n\t<li>S unordered()</li>\n</ol>\n\n<p><strong><em>Note</em></strong>: Here, S specifies the type of stream that extends the <strong>BaseStream</strong> interface.</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these statements about <strong>functional programming</strong> in Java are correct:</p>\n\n<ol>\n\t<li>Uses mutable data</li>\n\t<li>Stateless programming mode</li>\n\t<li>Ideal for parallel programming</li>\n\t<li>Supports abstraction of\u00a0data</li>\n</ol>", "options": [{"option": "2 and 3", "correct": true}, {"option": "1 and 4", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods are declared by the <strong>Set </strong>interface:</p>\n\n<ol>\n\t<li>add()</li>\n\t<li>remove()</li>\n\t<li>delete()</li>\n\t<li>contains()</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 4", "correct": true}, {"option": "1, 3, and 4", "correct": false}, {"option": "1 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about a double-ended queue is correct?</p>", "options": [{"option": "Elements can be inserted or deleted only at one end.", "correct": false}, {"option": "Elements can be inserted at both ends, but deleted from one end", "correct": false}, {"option": "Elements can be deleted from both ends, but insertion only at one end", "correct": false}, {"option": "Elements can be inserted or deleted at both ends", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about a\u00a0<strong>map </strong>collection is correct?</p>", "options": [{"option": "Duplicate keys or values are allowed", "correct": false}, {"option": "Duplicate keys are allowed but duplicate values are not allowed", "correct": false}, {"option": "Duplicate keys are not allowed but duplicate values are allowed", "correct": true}, {"option": "Duplicate keys or values are not allowed", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following utility classes is available in the Java\u00a0collections framework?</p>", "options": [{"option": "java.util.Array and java.util.Collection", "correct": false}, {"option": "java.util.Arrays and java.util.Collections", "correct": true}, {"option": "java.util.Arrays and java.util.Collection", "correct": false}, {"option": "java.util.Array and java.util.Collections", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Collections;\nimport java.util.*;\n\npublic class MapProg{\n    public static void main(String args[]) {\n            Set&lt;String&gt; setObj = new LinkedHashSet&lt;String&gt;();\n            setObj.add(\"Java\");\n            setObj.add(\"OOP\");\n            Set&lt;String&gt; newSetObj = Collections.unmodifiableSet(setObj);\n            newSetObj.add(\"Programming\");\n            System.out.print(\" \"+newSetObj);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Java OOP Programming", "correct": false}, {"option": "Java OOP", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about the\u00a0<strong>Comparator Interface</strong> is correct?</p>\n\n<ol>\n\t<li>It must be implemented by all the elements in a SortedSet.</li>\n\t<li>It defines a function that is used to compare\u00a0two objects.</li>\n\t<li>It can be used to design the custom-ordering scheme.</li>\n\t<li>It is used to order the objects of user-defined classes.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "2, 3, and 4", "correct": true}, {"option": "1 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.Collections;\nimport java.util.*;\n\npublic class MyString \n{\n\tpublic MyString(String val) \n\t{\n\tthis.val = val;\n\t}\nprivate String val;\n\npublic static void main(String args[]) \n{\n\tMap&lt;String, Integer&gt; map1 = new HashMap&lt;String, Integer&gt;();\n\tString str1 = new String(\"Java OOPs!\");\n\tString str2 = new String(\"Java OOPs\");\n\tmap1.put(str1, new Integer(10));\n\tmap1.put(str2, new Integer(20));\n\tMap&lt;MyString, Integer&gt; map2 = new HashMap&lt;MyString, Integer&gt;();\n\tMyString str3 = new MyString(str1);\n\tMyString str4 = new MyString(str2);\n\tmap2.put(str3, new Integer(10));\n\tmap2.put(str4, new Integer(20));\n\tSystem.out.println(map1.get(str1));\n\tSystem.out.println(map2.get(str3));\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10\r\n20", "correct": false}, {"option": "20\r\n10", "correct": false}, {"option": "10\r\n10 ", "correct": true}, {"option": "20\r\n20", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>\n class HackerEarth\n{\n\tstatic String strVal;\n\tpublic static void main(String[] args) \n\t{\n\t\tHackerEarth h1 = new HackerEarth();\n\t\tstrVal = h1.getString(\"Program\");\n\t\tSystem.out.print(\" \"+strVal);\n\t}\n\npublic static String getString(String str){\n\n   StringBuffer strBuf = new StringBuffer(str.length());\n\n   for(int i=str.length() -1 ; i&gt;0;i--)\n   {\n     strBuf.append(str.charAt(i));\n   } \n   return strBuf.toString();\n}\t\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "margor", "correct": true}, {"option": "margorP", "correct": false}, {"option": "margo", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following interfaces are implemented by a\u00a0<strong>HashMap</strong>?</p>\n\n<ol>\n\t<li>Serializable</li>\n\t<li>Map</li>\n\t<li>Cloneable</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which\u00a0of the following methods is used to retrieve a portion of an <strong>ArrayList</strong>?</p>", "options": [{"option": "subSection()", "correct": false}, {"option": "subPortion()", "correct": false}, {"option": "subList()", "correct": true}, {"option": "subArray()", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.HashMap;\nimport java.util.Set;\n \nclass charCount\n{\n    static void charNum(String inputString)\n    {\n        HashMap&lt;Character, Integer&gt; charMap = new HashMap&lt;Character, Integer&gt;();\n        char[] strArray = inputString.toCharArray();\n        for (char c : strArray)\n        {\n            if(charMap.containsKey(c))\n            {\n                charMap.put(c, charMap.get(c)+1);\n            }\n            else\n            {\n                charMap.put(c, 1);\n            }\n        }\n        Set&lt;Character&gt; charsInString = charMap.keySet();\n        for (Character ch : charsInString)\n        {\n            if(charMap.get(ch) &gt; 1)\n            {\n               System.out.println(ch +\" : \"+ charMap.get(ch));\n            }\n        }\n    }\n \n    public static void main(String[] args)\n    {\n       charNum(\"JavaJ2Ee\");\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "a : 2\r\nE : 2\r\nJ : 2", "correct": false}, {"option": "a : 2\r\nJ : 2", "correct": true}, {"option": "J : 2 \r\na : 2\r\nE : 1\r\ne : 1\r\nv : 1", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\n\nclass Sports {\npublic void Print() {\nSystem.out.println(\"Sport\");\n} \n}\n\nclass Football extends Sports { \npublic void Print() {\nSystem.out.println(\"Football\");\n}\n}\n\nclass Main{\npublic static void DoPrint(Sports o) {\no.Print(); \n}\npublic static void main(String[] args) {\nSports x = new Sports();\nSports y = new Football();\nFootball z = new Football();\nDoPrint(x);\nDoPrint(y);\nDoPrint(z);\n}\n}\n</code></pre>", "options": [{"option": "Sport Football Football", "correct": true}, {"option": "Sport Sport Football", "correct": false}, {"option": "Sport Football Sport", "correct": false}, {"option": "Football Sport Football", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Num\n{\nint val = 1234567;\n\npublic Num()\n{\nval = val++ + --val - val;\n}\n\nstatic int staticMethod(int x)\n{\nreturn --x;\n}\n}\n\nclass Derived extends Num\n{\npublic Derived()\n{\nSystem.out.println(staticMethod(val));\n}\n}\n\npublic class Main\n{\npublic static void main(String[] args)\n{\nDerived obj = new Derived();\n}\n\n}</code></pre>", "options": [{"option": "1234567", "correct": false}, {"option": "1234568", "correct": false}, {"option": "1234566", "correct": true}, {"option": "1234565", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class StrDemo\n{\nstatic String strVal;\npublic static void main(String[] args) \n{\nStrDemo obj = new StrDemo();\nstrVal = obj.getString(\"Program\");\nSystem.out.print(\" \"+strVal);\n}\n\npublic static String getString(String str){\n\nStringBuffer strBuf = new StringBuffer(str.length());\n\nfor(int i=str.length() -1 ; i&gt;0;i--)\n{\nstrBuf.append(str.charAt(i));\n} \nreturn strBuf;\n} \n}</code></pre>", "options": [{"option": "margor", "correct": false}, {"option": "margorP", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Class_A \n{\nint x = 100;\nvoid test() \n{\nClass_B obj_B = new Class_B();\nobj_B.display();\n}\nclass Class_B\n{\nint y = 10; \nvoid display() \n{\nSystem.out.println(\"display: \" +x);\n}\n}\nvoid showy() {\nSystem.out.println(y);\n}\n}\n\nclass ClassDemo {\npublic static void main(String args[]) \n{\nClass_A obj_A = new Class_A();\nobj_A.test();\n}\n}</code></pre>", "options": [{"option": "display: 100 10", "correct": false}, {"option": "display : 100", "correct": false}, {"option": "10.0", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, ___________ is a mechanism that binds code with the data that it manipulates and keeps both safe from outside interference and misuse.</p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": true}, {"option": "Polymorphism", "correct": false}, {"option": "Binding", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, ________________ is the mechanism through which a call to an overridden method is resolved at runtime rather than during compilation.</p>", "options": [{"option": "Dynamic method binding", "correct": false}, {"option": "Dynamic method dispatch", "correct": true}, {"option": "Dynamic method passing", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class GenValue\n{\nint getResult(int n) \n{\nint result;\nif(n==1) return 1;\nresult = getResult(n-1) * n+1;\nreturn result;\n}\n}\nclass Recursion \n{\npublic static void main(String args[]) {\nGenValue f = new GenValue();\nSystem.out.println(\" \" + f.getResult(5));\n}\n} \n </code></pre>", "options": [{"option": "120", "correct": false}, {"option": "206", "correct": true}, {"option": "150", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about <strong>hashCode </strong>in Java are true?</p>\n\n<ol>\n\t<li>If two objects are declared equal using the <em>equals()</em> method, then they must have the same hash codes.</li>\n\t<li>If two objects are declared equal using the <em>equals() </em>method, they may or may not have the same hash codes.</li>\n\t<li>During the execution of a Java application, if the <em>hashCode()</em> method is called on the same object multiple times, then the method must return the same integer value.</li>\n\t<li>The Object class has a <em>hashCode()</em> method that returns only positive integers.</li>\n</ol>", "options": [{"option": "1 and 3", "correct": true}, {"option": "2 and 4", "correct": false}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 3 and 4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n\tprivate boolean[] arr = new boolean[2]; // An instance variable\n\tpublic HackerEarth() \n\t{\n\t\tfor (int i = 0; i &lt; arr.length; i++) \n\t\t{\n\t\t\tSystem.out.println(\" \"+arr[i]);\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) \n\t{\n\t\tnew HackerEarth();\n\t\tString[] str = new String[2]; \n\t\tfor (int i = 0; i &lt; str.length; i++) \n\t\t{\n\t\t\tSystem.out.println(\" \" + str[i]);\n\t\t}\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "false\r\nfalse\r\nnull\r\nnull", "correct": true}, {"option": "true\r\ntrue\r\nnull\r\nnull", "correct": false}, {"option": "0\r\n0\r\nnull\r\nnull", "correct": false}, {"option": "null\r\nnull\r\n0\r\n0", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about the benefits of the Java Database Connectivity interface are correct:</p>\n\n<ol>\n\t<li>Error-free and efficient SQL processing</li>\n\t<li>A simple syntax that is\u00a0easy to learn</li>\n\t<li>Queries are DBMS-specific in nature</li>\n</ol>", "options": [{"option": "1 and 2", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following collection classes is used to accept <strong>enum</strong> constants of an <strong>enum</strong> type?</p>", "options": [{"option": "java.util.EnumSet ", "correct": true}, {"option": "java.util.Enum ", "correct": false}, {"option": "java.util.EnumType", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods is used to return the size of a collection?</p>", "options": [{"option": "size()", "correct": true}, {"option": "getSize()", "correct": false}, {"option": "getCollectionSize()", "correct": false}, {"option": "collectionSize()", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following is used by a linked list?</p>", "options": [{"option": "Variables", "correct": false}, {"option": "Objects", "correct": false}, {"option": "Nodes", "correct": true}, {"option": "Structures", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\npublic class Program\t\n{\npublic static void main(String[] args)\n{\n\tList&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3);\n\tnumbers.stream().map(Program::divideByZero).forEach(System.out::println);\n}\n\npublic static int divideByZero(int n)\n{\n\treturn n / 0;\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Exception: java.lang.nullpointerexception", "correct": false}, {"option": "Exception: java.lang.ArithmeticException: / by zero", "correct": true}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which statement is NOT true in java language?</p>", "options": [{"option": "A public member of a class can be accessed in all the packages.", "correct": false}, {"option": "A private member of a class cannot be accessed by the methods of the same class.", "correct": true}, {"option": "A private member of a class cannot be accessed from its derived class.", "correct": false}, {"option": "A protected member of a class can be accessed from its derived class.", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>The fields in an <strong>interface </strong>are implicitly specified as</p>", "options": [{"option": "static only", "correct": false}, {"option": "protected", "correct": false}, {"option": "private", "correct": false}, {"option": "both static and final", "correct": true}, {"option": "none of the above", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which of the following is true about <strong>finally blocks</strong>?</p>", "options": [{"option": "A finally block is executed before the catch block but after the try block.", "correct": false}, {"option": "A finally block is executed, only after the catch block is executed.", "correct": false}, {"option": "A finally block is executed whether an exception is thrown or not.", "correct": true}, {"option": "A finally block is executed, only if an exception occurs.", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which of the following is true in Java?</p>", "options": [{"option": "In java, an instance field declared public generates a compilation error.", "correct": false}, {"option": "int is the name of a class available in the package java.lang", "correct": false}, {"option": "Instance variable names may only contain letters and digits.", "correct": false}, {"option": "A class has always a constructor (possibly automatically supplied by the java compiler).", "correct": true}, {"option": "The more comments in a program, the faster the program runs.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">What is\u00a0<strong>byte code</strong>\u00a0in the context of Java?</p>", "options": [{"option": "The type of code generated by a Java compiler.", "correct": true}, {"option": "The type of code generated by a Java Virtual Machine.", "correct": false}, {"option": "It is another name for a Java source file.", "correct": false}, {"option": "It is the code written within the instance methods of a class.", "correct": false}, {"option": "It is another name for comments written within a program.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">What is <strong>garbage collection</strong> in the context of Java?</p>", "options": [{"option": "The operating system periodically deletes all the java files available on the system.", "correct": false}, {"option": "Any package imported in a program and not used is automatically deleted.", "correct": false}, {"option": "When all references to an object are gone, the memory used by the object is automatically reclaimed.", "correct": true}, {"option": "The JVM checks the output of any Java program and deletes anything that doesn\u2019t make sense.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which is FALSE? In Java, a\u00a0<strong>protected member</strong> can be accessed in...</p>", "options": [{"option": "a subclass of the same package", "correct": false}, {"option": "a non-subclass of the same package", "correct": false}, {"option": "a non-subclass of different package", "correct": true}, {"option": "a subclass of different package", "correct": false}, {"option": "the same class", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">In Java, all exception types are subclasses of the built-in class</p>", "options": [{"option": "Exception", "correct": false}, {"option": "RuntimeException", "correct": false}, {"option": "Error", "correct": false}, {"option": "Throwable", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">In Java, objects are passed as</p>", "options": [{"option": "Copy of that object", "correct": false}, {"option": "Method called call by value", "correct": false}, {"option": "Memory address", "correct": true}, {"option": "Constructor", "correct": false}, {"option": "Default constructor", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Identify\u00a0from among the following, the <strong>incorrect </strong>variable name.</p>", "options": [{"option": "_theButton", "correct": false}, {"option": "$reallyBigNumber", "correct": false}, {"option": "2ndName", "correct": true}, {"option": "CurrentWeatherStateofplanet", "correct": false}, {"option": "my2ndFont", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">In object-oriented programming, the process by which one object acquires the properties of another object is called</p>", "options": [{"option": "Encapsulation", "correct": false}, {"option": "Polymorphism", "correct": false}, {"option": "Overloading", "correct": false}, {"option": "Inheritance", "correct": true}, {"option": "Overriding", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Identify from among the following, the <strong>incorrect </strong>description\u00a0related to Java:</p>", "options": [{"option": "Java Virtual Machine translates byte code into its own system\u2019s machine language and runs the resulting machine code", "correct": false}, {"option": "The arithmetic operations *, /, %, + and \u2013 have the same level of precedence", "correct": true}, {"option": "Comments do not cause any action to be performed during the program execution", "correct": false}, {"option": "All variables must be given a type when they are declared", "correct": false}, {"option": "Java variable names are case-sensitive.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Consider the following statement(s) about Java:</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">I.\u00a0 \u00a0All white-space characters (blanks) are ignored by the compiler.<br>\nII.\u00a0 Java keywords can be used as variable names.<br>\nIII. An identifier does not begin with a digit and does not contain any spaces.<br>\nIV. The execution of Java applications begins at method main.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">Which of them is <strong>correct</strong>?</p>", "options": [{"option": "Both (I) and (III)", "correct": false}, {"option": "Both (II) and (IV)", "correct": false}, {"option": "Both (I) and (II)", "correct": false}, {"option": "Both (III) and (IV) ", "correct": true}, {"option": "All (I), (II), (III) and (IV) ", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which of the following statements about <strong>Java Threads</strong> is correct?</p>", "options": [{"option": "Java threads don\u2019t allow parts of a program to be executed in parallel", "correct": false}, {"option": "Java is a single-threaded language", "correct": false}, {"option": "Java\u2019s garbage collector runs as a high priority thread", "correct": false}, {"option": "Ready, running and sleeping are three states that a thread can be in during its life cycle", "correct": true}, {"option": "Every java application is not multithreaded.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">The default value of a static integer variable of a class in Java is...</p>", "options": [{"option": "0", "correct": true}, {"option": "1", "correct": false}, {"option": "Garbage value", "correct": false}, {"option": "Null", "correct": false}, {"option": "-1", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Men { \n    public int number;\n}\n\npublic class Test{\n    public void doIt(int i , Men p){\n        i = 5;\n        p.number = 8;\n    }\n\n    public static void main(String args[]){\n        int x = 0;\n        Men p = new Men();\n        new Test().doIt(x, p);\n        System.out.println(x + \" \" + p.number);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "  0 8   ", "correct": true}, {"option": "  5 0   ", "correct": false}, {"option": "  0 0   ", "correct": false}, {"option": "  5 8   ", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, how is an object <strong>serialized</strong>?</p>", "options": [{"option": "The class of the object is made to implement the interface Serializable.", "correct": true}, {"option": "The method 'serializeObject()' is invoked on the object.", "correct": false}, {"option": "The static method 'serialize(Object obj)' is invoked from the class 'Serializer'.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java program:</p>\n\n<pre class=\"prettyprint\"><code>public class X {\n    public static void badMethod() {\n\n    } \n    public static void main(String [] args){\n        try{\n            badMethod();\n            System.out.print(\"A\");\n        }catch (Exception ex) {\n            System.out.print(\"B\");\n        } finally {\n            System.out.print(\"C\");\n        }\n        System.out.print(\"D\");\n    }\n}\n</code></pre>", "options": [{"option": "AC", "correct": false}, {"option": "ACD", "correct": true}, {"option": "BC", "correct": false}, {"option": "ABCD", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, what is the difference between <strong><code>==</code></strong> and <strong><code>===</code></strong> operators?</p>", "options": [{"option": "== performs strict comparison and === performs type converting comparison", "correct": false}, {"option": "=== performs strict comparison and == performs type converting comparison", "correct": true}, {"option": "Both the operators perform strict comparison", "correct": false}, {"option": "Both the operators perform type converting comparison ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n        y=4+\"4\";\n        document.write(y);\n    &lt;/script&gt;\n</code></pre>", "options": [{"option": "44", "correct": true}, {"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "4\"4\"", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>global object</strong> in JavaScript?</p>", "options": [{"option": "Register", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Easy"}, {"question": "<p>In JQuery, the code below is used to...</p>\n\n<pre class=\"prettyprint\"><code>$(document).ready(function() {\n// Some code.\n});</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Make sure no code is executed till the entire page is fully loaded", "correct": false}, {"option": "Make sure no code is executed till the DOM is fully loaded", "correct": false}, {"option": "Both A and B", "correct": false}, {"option": "Neither A nor B", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following is a <strong>stateless protocol</strong>?</p>", "options": [{"option": "HTML", "correct": false}, {"option": "XHTML", "correct": false}, {"option": "HTTP", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>JSON.parse()</strong> method is used to _____________________________________________.</p>", "options": [{"option": "Parse a string to an integer", "correct": false}, {"option": "Parse a string to JSON", "correct": true}, {"option": "Parse a string from JSON to JSON2", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In the following JavaScript code, the value of x is ________________.</p>\n\n<pre class=\"prettyprint\"><code>var x = 9 &lt;&lt; 2;\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "18", "correct": false}, {"option": "36", "correct": true}, {"option": "72", "correct": false}, {"option": "18", "correct": false}], "level": "Easy"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/9nzqyjhyn/Question2.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/523mq745b/Question3.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/88y69twb3/Question4.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/5ev0wd6zf/][img]https://s33.postimg.cc/5ev0wd6zf/Question1.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/tvd6quffv/][img]https://s33.postimg.cc/tvd6quffv/Question2.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/katk3yxtn/][img]https://s33.postimg.cc/katk3yxtn/Question3.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/64dt8quob/][img]https://s33.postimg.cc/64dt8quob/Question4.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "<a href=\"https://postimg.cc/image/5ev0wd6zf/\" target=\"_blank\"><img src=\"https://s33.postimg.cc/5ev0wd6zf/Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/9nzqyjhyn/Question2.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/523mq745b/Question3.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/88y69twb3/Question4.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/5ev0wd6zf/][img]https://s33.postimg.cc/5ev0wd6zf/Question1.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/tvd6quffv/][img]https://s33.postimg.cc/tvd6quffv/Question2.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/katk3yxtn/][img]https://s33.postimg.cc/katk3yxtn/Question3.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/64dt8quob/][img]https://s33.postimg.cc/64dt8quob/Question4.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "<a href=\"https://postimg.cc/image/5ev0wd6zf/\" target=\"_blank\"><img src=\"https://s33.postimg.cc/5ev0wd6zf/Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/9nzqyjhyn/Question2.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/523mq745b/Question3.jpg", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/88y69twb3/Question4.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/5ev0wd6zf/][img]https://s33.postimg.cc/5ev0wd6zf/Question1.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/tvd6quffv/][img]https://s33.postimg.cc/tvd6quffv/Question2.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/katk3yxtn/][img]https://s33.postimg.cc/katk3yxtn/Question3.jpg[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "[url=https://postimg.cc/image/64dt8quob/][img]https://s33.postimg.cc/64dt8quob/Question4.png[/img][/url]", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "<a href=\"https://postimg.cc/image/5ev0wd6zf/\" target=\"_blank\"><img src=\"https://s33.postimg.cc/5ev0wd6zf/Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "\n\n<a href=\"https://drive.google.com/drive/my-drive=\"_blank\"><img src=\"https:https://drive.google.com/drive/my-drive//Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png\n", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "\n\n<a href=\"https://drive.google.com/drive/my-drive=\"_blank\"><img src=\"https:https://drive.google.com/drive/my-drive//Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, what is the difference between <strong><code>==</code></strong> and <strong><code>===</code></strong> operators?</p>", "options": [{"option": "== performs strict comparison and === performs type converting comparison", "correct": false}, {"option": "=== performs strict comparison and == performs type converting comparison", "correct": true}, {"option": "Both the operators perform strict comparison", "correct": false}, {"option": "Both the operators perform type converting comparison ", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    &lt;script type=\"text/javascript\"&gt;\n        y=4+\"4\";\n        document.write(y);\n    &lt;/script&gt;\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "44", "correct": true}, {"option": "8", "correct": false}, {"option": "4", "correct": false}, {"option": "4\"4\"", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>global object</strong> in JavaScript?</p>", "options": [{"option": "Register", "correct": false}, {"option": "Location", "correct": false}, {"option": "Window", "correct": true}, {"option": "Position", "correct": false}], "level": "Easy"}, {"question": "<p>In JQuery, the code below is used to...</p>\n\n<pre class=\"prettyprint\"><code>$(document).ready(function() {\n// Some code.\n});</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Make sure no code is executed till the entire page is fully loaded", "correct": false}, {"option": "Make sure no code is executed till the DOM is fully loaded", "correct": true}, {"option": "Both A and B", "correct": false}, {"option": "Neither A nor B", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a <strong>stateless protocol</strong>?</p>", "options": [{"option": "FTP", "correct": false}, {"option": "TCP", "correct": false}, {"option": "HTTP", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>In JavaScript, the <strong>JSON.parse()</strong> method is used to _____________________________________________.</p>", "options": [{"option": "Parse a string to an integer", "correct": false}, {"option": "Parse a string to JSON", "correct": true}, {"option": "Parse a string from JSON to JSON2", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In the following JavaScript code, the value of x is ________________.</p>\n\n<pre class=\"prettyprint\"><code>var x = 9 &lt;&lt; 2;\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "18", "correct": false}, {"option": "36", "correct": true}, {"option": "72", "correct": false}, {"option": "32", "correct": false}], "level": "Easy"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png\n", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "\n\n<a href=\"https://drive.google.com/drive/my-drive=\"_blank\"><img src=\"https:https://drive.google.com/drive/my-drive//Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "What is the output of the following Java 8 code:\n<pre class=\"prettyprint\"> \n<code> \npublic class ShowValue{ \nfinal int num = 10; \npublic void display() \n{ \nint num =12; \nRunnable r = new Runnable(){ \nfinal int num = 15; \npublic void run(){ \nint num = 20; \nSystem.out.println(this.num); \n} \n}; \nr.run(); \n} \npublic static void main(String args[]) \n{ \nShowValue sv = new ShowValue(); \nsv.display(); \n} \n}\n</code></pre>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "https://s33.postimg.cc/ms5bb82an/Question1.png\n", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "\n\n<a href=\"https://drive.google.com/drive/my-drive=\"_blank\"><img src=\"https:https://drive.google.com/drive/my-drive//Question1.png\" alt=\"Question1\"/></a><br/><br/>", "options": [{"option": "12", "correct": true}, {"option": "10", "correct": false}, {"option": "22", "correct": false}, {"option": "20", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:<br>\nimport java.util.*;<br>\nclass Test {<br>\n\u00a0\u00a0\u00a0\u00a0public static void main(String args[] ) throws Exception {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TreeSet t=new TreeSet ();<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"H\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"A\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"C\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"K\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(t);<br>\n\u00a0\u00a0\u00a0\u00a0}<br>\n}</p>", "options": [{"option": "[H,A,C,K]", "correct": false}, {"option": "[K,C,A,H]", "correct": false}, {"option": "Exception", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:<br>\nimport java.util.*;<br>\nclass Test {<br>\n\u00a0\u00a0\u00a0\u00a0public static void main(String args[] ) throws Exception {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0TreeSet t=new TreeSet ();<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"H\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"A\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"C\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.add(new StringBuffer(\"K\"));<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(t);<br>\n\u00a0\u00a0\u00a0\u00a0}<br>\n}</p>", "options": [{"option": "[H,A,C,K]", "correct": false}, {"option": "[K,C,A,H]", "correct": false}, {"option": "Exception", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following data types are automatically implemented by using pointers:</p>\n\n<ol>\n\t<li>Integer</li>\n\t<li>Character</li>\n\t<li>Arrays</li>\n\t<li>Objects</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "3 and 4", "correct": true}, {"option": "1 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Given:<br>\npublic class Dish{<br>\nprivate String name;<br>\nprivate double calories;<br>\nprivate boolean vegetarian;<br>\n/* <strong>All Args Constructor as well as Getters &amp; Setters go below </strong>*/<br>\n}<br>\n<br>\npublic class DishImpl{<br>\nprivate static List&lt;Dish&gt; dishList;<br>\nstatic {<br>\ndishList = new ArrayList&lt;Dish&gt;;<br>\ndishList.addAll(Arrays.asList(new Dish[] {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"Prawns\", 198, false),<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"Samon\", 267, false),<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"Pork\", 357, false),<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"French Fries\", 510, true),<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"Veg Burger\", 213, true),<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0new Dish(\"Green Salad\", 79, true),</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }));<br>\n}<br>\npublic static void main(String[] args){<br>\nList&lt;String&gt; vegDishNames = /*Code for getting dish names*/<br>\n}<br>\n}<br>\n<br>\n<strong>What code should be placed at <em>/*Code for getting dish names*/ </em>for getting the List of all Vegetarian Dish Names? (Choose all that apply)</strong><br>\n\u00a0</p>", "options": [{"option": "dishList.stream().filter(Dish::isVegetarian).map(d -> d.getName()).collect(toList());", "correct": true}, {"option": "dishList.stream().filter(d -> d.isVegetarian()).flatmap(d -> d.getName()).collect(toList());", "correct": false}, {"option": "dishList.stream().filter(d -> d.isVegetarian()).flatmap(d -> d.getName()).collect(toList());", "correct": false}, {"option": "dishList.stream().flatmap(d -> d.getName()).filter(d -> d.isVegetarian()).collect(toList());", "correct": false}], "level": "Medium"}, {"question": "<p>Given:<br>\npublic static void before() {<br>\nSet set = new TreeSet();<br>\nset.add(\"2\");<br>\nset.add(3);<br>\nset.add(\"1\");<br>\nIterator it = set.iterator();<br>\nwhile (it.hasNext())<br>\nSystem.out.print(it.next() + \" \");<br>\n}<br>\n<br>\nWhich statements are true?</p>", "options": [{"option": "The before() method will print 1 2", "correct": false}, {"option": "The before() method will print 1 2 3", "correct": false}, {"option": "The before() method will print three numbers, but the order cannot be determined", "correct": false}, {"option": "The before() method will not compile", "correct": false}, {"option": "The before() method will throw an exception at runtime", "correct": true}], "level": "Easy"}, {"question": "<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">map.put(\u201csep\u201d,\u201dganesh\u201d);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">map.put(\u201cnov\u201d,\u201ddiwali\u201d);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">//Code</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">Map.forEach(todo);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\"><strong>Which fragment, inserted at //code will produce item as key and value</strong></p>", "options": [{"option": " Function<String, String> todo = (String k, String v) -> System.out.println(\u201cmonth:\u201d+k+\u201d  fes:\u201d+v);", "correct": false}, {"option": "Consumer<String, String> todo = (String k, String v) -> System.out.println(\u201cmonth:\u201d+k+\u201d  fes:\u201d+v);", "correct": false}, {"option": "Consumer<Map> todo = (Map m) -> System.out.println(\u201cmonth:\u201d+m.keySet()+\u201d  fes:\u201d+m.values());", "correct": false}, {"option": "BiConsumer<String, String> todo = (String k, String v) -> System.out.println(\u201cmonth:\u201d+k+\u201d  fes:\u201d+v);", "correct": true}], "level": "Easy"}, {"question": "<p>What is Predicate in Java 8</p>", "options": [{"option": "method", "correct": false}, {"option": "class", "correct": false}, {"option": "Interface", "correct": true}, {"option": "Framework", "correct": false}], "level": "Easy"}, {"question": "<p>void accept(T t) is method of</p>", "options": [{"option": "Consumer", "correct": true}, {"option": "Producer", "correct": false}, {"option": "Both", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">In java 8 parallel streams are almost always performs better then sequential stream.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in; text-align: justify;\">The following types of methods in an interface do not count for defining a functional interface:</p>", "options": [{"option": "Default methods", "correct": false}, {"option": "Static methods", "correct": false}, {"option": "Public methods inherited from the Object class", "correct": false}, {"option": "All of above", "correct": true}], "level": "Easy"}, {"question": "<p>A stream implementation may throw below exception if it detects that the stream is being reused :</p>", "options": [{"option": "IllegalStateException", "correct": true}, {"option": "StreamIndexOutOfBoundException", "correct": false}, {"option": "IllegalOperationException", "correct": false}, {"option": "NullPointerException", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>Which of these statements compile? (Choose all that apply.)</strong></p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">A. HashSet&lt;Number&gt; hs = new HashSet&lt;Integer&gt;();</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">B. HashSet&lt;? super ClassCastException&gt; set = new HashSet&lt;Exception&gt;();</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">C. List&lt;String&gt; list = new Vector&lt;String&gt;();</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">D. List&lt;Object&gt; values = new HashSet&lt;Object&gt;();</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">E. List&lt;Object&gt; objects = new ArrayList&lt;? extends Object&gt;();</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">F. Map&lt;String, ? extends Number&gt; hm = new HashMap&lt;String, Integer&gt;();</p>", "options": [{"option": "A, B, F", "correct": false}, {"option": "A, B, D", "correct": false}, {"option": "B,C,F", "correct": true}, {"option": "None", "correct": false}, {"option": "All", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>What is the result of the following code?</strong></p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">1: public class Hello&lt;T&gt; {</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">2: T t;</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">3: public Hello(T t) { this.t = t; }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">4: public String toString() { return t.toString(); }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">5: public static void main(String[] args) {</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">6: System.out.print(new Hello&lt;String&gt;(\"hi\"));</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">7: System.out.print(new Hello(\"there\"));</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">8: } }</p>", "options": [{"option": "hi", "correct": false}, {"option": "hi followed by a runtime exception", "correct": false}, {"option": "hithere", "correct": true}, {"option": "Compiler error on line 4", "correct": false}, {"option": "Compiler error on line 6", "correct": false}, {"option": "Compiler error on line 7", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Which terminal operations on the Stream class are reductions? (Choose all that apply.)</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">A. collect()</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">B. count()</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">C. findFirst()</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">D. map()</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">E. peek()</p>", "options": [{"option": "A, B, C", "correct": false}, {"option": "A, B", "correct": true}, {"option": "A, B, E", "correct": false}, {"option": "C", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>We have a method that returns a sorted list without changing the original. Which of the following can replace the method implementation to do the same with streams?</strong></p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">private static List&lt;String&gt; sort(List&lt;String&gt; list) {</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">List&lt;String&gt; copy = new ArrayList&lt;&gt;(list);</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">Collections.sort(copy, (a, b) -&gt; b.compareTo(a));</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">return copy;</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">}</p>", "options": [{"option": "return list.stream()\r\n.compare((a, b) -> b.compareTo(a)) .collect(Collectors.toList());\r\n", "correct": false}, {"option": "return list.stream()\r\n.compare((a, b) -> b.compareTo(a)) .sort();\r\n", "correct": false}, {"option": "return list.stream()\r\n.compareTo((a, b) -> b.compareTo(a)) .collect(Collectors.toList());\r\n", "correct": false}, {"option": "return list.stream()\r\n.compareTo((a, b) -> b.compareTo(a)) .sort();\r\n", "correct": false}, {"option": "return list.stream()\r\n.sorted((a, b) -> b.compareTo(a)) .collect();\r\n", "correct": false}, {"option": "return list.stream()\r\n.sorted((a, b) -> b.compareTo(a)) .collect(Collectors.toList());\r\n", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>Which of the following are true given the declaration IntStream is = IntStream. empty()? (Choose all that apply.)</strong></p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">A. is.average() returns the type int.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">B. is.average() returns the type OptionalInt.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">C. is.findAny() returns the type int.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">D. is.findAny() returns the type OptionalInt.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">E. is.sum() returns the type int.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">F. is.sum() returns the type OptionalInt.</p>", "options": [{"option": "D, E", "correct": true}, {"option": "B, D, E", "correct": false}, {"option": "A, C, E", "correct": false}, {"option": "C, E", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>Which of the following are true statements?</strong></p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">A. A traditional try statement without a catch block requires a finally block.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">B. A traditional try statement without a finally block requires a catch block.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">C. A traditional try statement with only one statement can omit the {}.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">D. A try-with-resources statement without a catch block requires a finally block.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">E. A try-with-resources statement without a finally block requires a catch block.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">F. A try-with-resources statement with only one statement can omit the {}.</p>", "options": [{"option": "A, B, D, E", "correct": false}, {"option": "A, B, F", "correct": false}, {"option": "A,B", "correct": true}, {"option": "All", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>What happens when more tasks are submitted to a thread executor than available threads?</strong></p>", "options": [{"option": "The thread executor will throw an exception when a task is submitted that is over its\r\nthread limit.\r\n", "correct": false}, {"option": "The task will be added to an internal queue and completed when there is an available thread.", "correct": true}, {"option": "The thread executor will discard any task over its thread limit.", "correct": false}, {"option": "The call to submit the task to the thread executor will wait until there is a thread avail-\r\nable before continuing.\r\n", "correct": false}, {"option": "The thread executor creates new temporary threads to complete the additional tasks.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\">Why does Console.readPassword() return a char[] array instead of a String object?</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">A. It improves performance.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">B. It is more secure.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">C. To encrypt the password data.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">D. To support all character encodings.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">E. Because Java puts all String values in a reusable pool.</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">F. So that the value can be removed from memory immediately after use.</p>", "options": [{"option": "A, C, D", "correct": false}, {"option": "A, C, E", "correct": false}, {"option": "B, C, D", "correct": false}, {"option": "B, E, F", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following\u00a0operations can be performed within binding expressions?</p>", "options": [{"option": "Creating objects", "correct": false}, {"option": "++ or --", "correct": false}, {"option": "Bitwise &", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p>In JavaScript, which of the following statements about the interpolation technique is correct?</p>", "options": [{"option": "It is a one-way data binding process.", "correct": false}, {"option": "Methods can also be used to bind data inside an interpolated expression.", "correct": false}, {"option": "It is used to assign an expression result to a variable.", "correct": true}, {"option": "It is used to assign values to attributes of the HTML elements.", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of\u00a0the following keywords is used to change\u00a0a method to a class method?</p>\n\n<p>\u00a0</p>", "options": [{"option": "finally ", "correct": false}, {"option": "boolean", "correct": false}, {"option": "static", "correct": true}, {"option": "case ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements\u00a0about variables in Java is true?</p>", "options": [{"option": "Non-static fields are also known as instance variables", "correct": true}, {"option": "Static fields are also known as instance variables", "correct": false}, {"option": "Local variables are also known as instance variables", "correct": false}, {"option": "Location variables are also known as instance variables", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following\u00a0is a commonly-used name for variables that are defined within a class?</p>", "options": [{"option": "Local variables", "correct": false}, {"option": "Location variables ", "correct": false}, {"option": "Common variables ", "correct": false}, {"option": "Instance variables", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>for(int i=0;i&lt;v3.length;i++){\nfor(int j=0;j&lt;((Object[])v3[i]).length;j++){\nSystem.out.print(((Object[])v3[i])[j] + \" \");\n}\n System.out.println();\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "123 246\r\n", "correct": true}, {"option": "123 456", "correct": false}, {"option": "123 246", "correct": false}, {"option": "123 321\r\n", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Names{\npublic static void main(String args[])\n{\nnew Employee().withArrays();\n}\n}\nclass Employee{\npublic void withArrays()\n{\nStr[] ourArray = {new Str(\"Andrew\"),\nnew Str(\"Mark\"),\nnew Str (\"William\")};\nfor(int cnt = 0;\ncnt &lt; ourArray.length;cnt++){\nSystem.out.print(\nourArray[cnt] + \" \");\n}\nSystem.out.println(\"\");\n} }\nclass Str{\nprivate String name;\npublic Str(String name){\nthis.name = name;\n}\npublic String toString(){\nreturn name;\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Str@152c2b Str@378b9d Str@940ffc", "correct": false}, {"option": "Andrew Mark William", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output for the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Company{\npublic static void main(String args[])\n{\nnew Employee().myData();\n}\n}\nclass Employee\n{\npublic void myData()\n{\nSystem.out.println(\"\\\"Backslash\\\"-&gt;n\\nUnderstand\");\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "\"Backslash\"->n\r\nUnderstand\r\n", "correct": true}, {"option": "n\"Backslashn\"->nnnnUnderstand", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Game{\npublic static void main(String args[])\n{\nnew Player().createArrays();\n}\n}\nclass Player{\npublic void createArrays(){\nint C[][] = new int[3][];\nC[0] = new int[1];\nC[1] = new int[2];\nC[2] = new int[3];\nfor(int a = 0;a &lt; C.length;a++){\nfor(int b=0;b &lt; C[a].length;b++){\nC[a][b] = a*b;\n}\n}\nfor(int a=0;a&lt;C.length;a++){\nfor(int b=0;b &lt; C[a].length;b++){\nSystem.out.print(\nC[a][b] + \" \");\n}\nSystem.out.println(\"\");\n}\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0\r\n0 1\r\n0 2 4", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Names{\npublic static void main(String args[])\n{\nnew Employee().withArrays();\n}\n}\nclass Employee{\npublic void withArrays(){\nint letsArray[3][5];\nfor(int i=0;i&lt;letsArray.length;i++){\nfor(int j=0;\nj&lt;letsArray[0].length;j++){\nletsArray[i][j] = i*j;\n}\n}\nfor(int i=0;i&lt;letsArray.length;i++){\nfor(int j=0;\nj&lt;letsArray[0].length;j++){\nSystem.out.print(letsArray[i][j] + \" \");\n}\nSystem.out.println(\"\");\n}\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Runtime error", "correct": false}, {"option": "0 0 0 0 0\r\n0 1 2 3 4\r\n0 2 4 6 8\r\n", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class Organization{\npublic static void main(String args[])\n{\nnew Staff().createArrays();\n}\n}\nclass Staff{\npublic void createArrays(){\nint[] X = new int[2];\nX[0] = 1;\nX[1] = 2;\nSystem.out.println(X[0] + X[1]);\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "3", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>public class Country{\npublic static void main(String args[])\n{\nnew City().withArrays();\n}\n}\nclass City{\npublic void withArrays(){\nint theArray[][];\ntheArray = new int[3][5];\nfor(int i = 0;i &lt; 3;i++){\nfor(int j = 0;j &lt; 5;j++){\ntheArray[i][j] = (i*j+1)*(-1);\n}\n}\nfor(int i = 0;i &lt; 3;i++){\nfor(int j = 0;j &lt; 6;j++){\nSystem.out.print(theArray[i][j] + \" \");\n}\nSystem.out.println(\"\");\n}\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Runtime error", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "-1 -1 -1 -1 -1\r\n-1 -2 -3 -4 -5\r\n-1 -3 -5 -7 -9\r\n", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>import java.awt.Label;\npublic class Country{\npublic static void main(String args[])\n{\nnew City().withArrays();\n}\n}\nclass City{\npublic void withArrays(){\nLabel[] Z = new Label[2];\nZ[0] = new Label(\"I\");\nZ[1] = new Label(\"P\");\nSystem.out.println(Z[0] + Z[1]);\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": true}, {"option": "IP", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class City{\npublic static void main(String args[])\n{\nnew Locality().andArrays();\n}\n}\nclass Locality{\npublic void andArrays(){\nInteger[] S = new Integer[2];\nS[0] = new Integer(1);\nSystem.out.println(S[1].intValue());\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "1", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is an <strong>escape sequence</strong> in Java?</p>", "options": [{"option": ":q", "correct": false}, {"option": ".a", "correct": false}, {"option": "/z", "correct": false}, {"option": "\\\\", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements about the <strong>escape sequence</strong> in Java is true?</p>", "options": [{"option": "A character preceded by a backslash (\\) is an escape sequence that has a special meaning to the compiler.", "correct": true}, {"option": "A character succeeded by a forward slash (/) is an escape sequence that has a special meaning to the compiler.", "correct": false}, {"option": "A character succeeded by a forward slash (/) is an escape sequence but has no special meaning to the compiler.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about <strong>lambda expressions</strong> in Java?</p>", "options": [{"option": "Lambda expressions are used to declare fields or additional methods.", "correct": false}, {"option": "Lambda expressions are used while encapsulating a single unit of behavior that you want to pass to another code.", "correct": true}, {"option": "Lambda expressions are used if your requirements are similar to those of a local class and you want to make the type more widely available.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about lambda expressions in Java is correct:</p>\n\n<ol>\n\t<li>Lambda expressions allow us to consider code as data.</li>\n\t<li>Lambda expressions allow us to consider data as code.</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to check whether a null value has been assigned to an optional variable?</p>\n\n<ol>\n\t<li>isVerify()</li>\n\t<li>isPresent()</li>\n\t<li>inPresent()</li>\n\t<li>isCheck()</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following methods can be used to create a copy of an existing object?</p>", "options": [{"option": "copy()", "correct": false}, {"option": "mirror()", "correct": false}, {"option": "clone()", "correct": true}, {"option": "identical()", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods cannot be overridden?</p>", "options": [{"option": "getClass()", "correct": true}, {"option": "toString()", "correct": false}, {"option": "equals()", "correct": false}, {"option": "hashCode()", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about Lambda expressions in Java is true:<br>\n<br>\n1. It is used to encapsulate a unit of behavior that you want to pass to another code, for example, to perform a certain action on each element of a collection when a process is completed or it encounters an error.<br>\n<br>\n2. It is used to create a simple instance of a functional interface without a constructor, a named type, fields, or additional methods.</p>", "options": [{"option": "Both of these", "correct": false}, {"option": "None of these", "correct": true}, {"option": "Statement 1 is true\r\nStatement 2 is false", "correct": false}, {"option": "Statement 1 is false\r\nStatement 2 is true", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following expressions is a function that can be created without belonging to any class?</p>\n\n<ol>\n\t<li>Assignment</li>\n\t<li>Object</li>\n\t<li>Variable</li>\n\t<li>Lambda</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "4", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of\u00a0the following is used to process collections of objects in Java?</p>", "options": [{"option": "Time API", "correct": false}, {"option": "Stream API", "correct": true}, {"option": "Scanner API", "correct": false}, {"option": "Java Advanced Imaging", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following receives an input from collections, arrays, or I/O channels?</p>", "options": [{"option": "Java stream", "correct": true}, {"option": "Hash table", "correct": false}, {"option": "Linked list", "correct": false}, {"option": "Array", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following facilitates parallel execution by reframing the computation as a pipeline of aggregate operations\u00a0rather than as imperative options on individual elements?</p>", "options": [{"option": "Hash table", "correct": false}, {"option": "Time API", "correct": false}, {"option": "Streams", "correct": true}, {"option": "None of these ", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about streams is correct in Java?</p>\n\n<ol>\n\t<li>Operations on streams can be executed either serially or\u00a0parallelly.</li>\n\t<li>Operations on streams can be executed serially.</li>\n\t<li>Operations on streams can be executed parallelly.</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements\u00a0about streams in Java is true?</p>", "options": [{"option": "Streams may or may not have a defined encounter order", "correct": true}, {"option": "Streams always have an undefined encounter order", "correct": false}, {"option": "Streams always have a defined encounter order", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following operations determines whether a stream has an encounter order?</p>", "options": [{"option": "Source", "correct": false}, {"option": "Intermediate", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, the behavioral parameters to the stream operations generate a non-deterministic output through stream pipeline. Which of the following operations is used for this task?</p>", "options": [{"option": "Stateless", "correct": false}, {"option": "Stateful", "correct": true}, {"option": "Sorted", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about the <strong>map</strong> and <strong>flatMap</strong> stream operations is correct?</p>", "options": [{"option": "The map operation wraps its return value inside its ordinal type while the flatMap operation does not.", "correct": true}, {"option": "The flatMap operation wraps its return value inside its ordinal type while the map operation does not.", "correct": false}, {"option": "Map and flatMap operations do not wrap the return value inside the ordinal type.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, the splitting of operations into two categories is performed by the stream pipelining technique. Identify the two categories.</p>", "options": [{"option": "Field and method operations", "correct": false}, {"option": "System and platform operations", "correct": false}, {"option": "Intermediate and terminal operations", "correct": true}, {"option": "Indefinite and definite operations", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about the <strong>intermediate</strong> and <strong>terminal</strong> operations is correct:</p>\n\n<ol>\n\t<li>Intermediate operations do not process the stream at the call site and\u00a0can only process the data when there is a terminal operation.</li>\n\t<li>Intermediate operations\u00a0process the stream at the call site and\u00a0can only process the data when there is a terminal operation.</li>\n\t<li>Intermediate operations\u00a0process the stream at the call site and\u00a0can only process the data even when there is no terminal operation available.</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "1", "correct": true}, {"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following operations is related\u00a0to the <strong>filter()</strong>, <strong>map()</strong>, and <strong>flatMap()</strong>\u00a0methods?</p>", "options": [{"option": "Terminal", "correct": false}, {"option": "Intermediate ", "correct": true}, {"option": "Definite ", "correct": false}, {"option": "Infinite", "correct": false}], "level": "Medium"}, {"question": "<p>n Java, which of the following operations is related to the <strong>forEach()</strong>, <strong>reduce()</strong>, <strong>collect()</strong>, and <strong>sum()</strong> methods?</p>", "options": [{"option": "Terminal", "correct": true}, {"option": "Intermediate", "correct": false}, {"option": "Definite", "correct": false}, {"option": "Infinite", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is an example of an intermediate operation in Java?</p>", "options": [{"option": "forEach", "correct": false}, {"option": "sum", "correct": false}, {"option": "reduce", "correct": false}, {"option": "flatMap", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements about <strong>terminal operations</strong> is correct in Java?</p>", "options": [{"option": "It initiates the pipeline and terminates the stream processing.", "correct": false}, {"option": "It returns the stream that allows further operations on a stream.", "correct": false}, {"option": "It terminates the pipeline and initiates the stream processing.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following operations returns a stream?</p>", "options": [{"option": "Terminal", "correct": false}, {"option": "Intermediate", "correct": true}, {"option": "Reduce", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following operations returns a <strong>non-stream</strong> (cannot be chained) result such as a primitive value, collection, or no value?</p>", "options": [{"option": "Intermediate ", "correct": false}, {"option": "Indefinite", "correct": false}, {"option": "Infinite", "correct": false}, {"option": "Terminal", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following operations are <strong>stateful</strong> and<strong> stateless</strong>?</p>", "options": [{"option": "Intermediate", "correct": true}, {"option": "Terminal", "correct": false}, {"option": "Intermediate and terminal", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In\u00a0Java, which of the following operations\u00a0incorporates its state from previously seen elements while processing new elements?</p>\n\n<p>\u00a0</p>", "options": [{"option": "Stateless", "correct": false}, {"option": "Stateful ", "correct": true}, {"option": "Stateful and stateless", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following operations does not retain any state from a previously viewed element while processing a new element?</p>", "options": [{"option": "Stateless", "correct": true}, {"option": "Stateful", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following operations is associated with the <strong>distinct</strong> and <strong>sort</strong>\u00a0operations?</p>", "options": [{"option": "Stateless", "correct": false}, {"option": "Displaced ", "correct": false}, {"option": "Stateful", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following operations processes the\u00a0input before generating an output?</p>", "options": [{"option": "Stateful", "correct": true}, {"option": "Stateless", "correct": false}, {"option": "Displaced ", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements\u00a0about <strong>short-circuiting</strong> operations is correct?</p>\n\n<p>\u00a0</p>", "options": [{"option": "If an operation, when given an infinite amount of input, generates a finite stream as an output, then the operation is called an intermediate operation.", "correct": false}, {"option": "If an operation, when given an infinite amount of input, terminates in a finite time, then the operation is called a short-circuiting operation.", "correct": false}, {"option": "A short-circuiting operation is a\u00a0necessary\u00a0condition to process an infinite stream to terminate in a finite time.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following pipelines are formed by combining the <strong>intermediate</strong> and <strong>terminal</strong> operations?</p>", "options": [{"option": "Terminal", "correct": false}, {"option": "Java", "correct": false}, {"option": "Major", "correct": false}, {"option": "Stream", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, how can you traverse the same data source again after a terminal operation is performed and the stream pipeline is considered consumed, which means it can no longer be used?</p>", "options": [{"option": "Return to the data source to get a new stream", "correct": true}, {"option": "Copy the data to your local machine", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, how many standard constructors are provided by all the general-purpose, collection-implementation classes?</p>", "options": [{"option": "Two void (no arguments) constructors", "correct": false}, {"option": "Void (no arguments) constructor and a constructor with a single argument of the type Collection", "correct": true}, {"option": "Constructor with multiple arguments of type collection and no void (no arguments) constructor", "correct": false}, {"option": "Three constructors with multiple arguments of type collection and no void (no arguments) constructor", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the Java collections framework (JCF) is correct?</p>", "options": [{"option": "JCF provides the interfaces that define various collections and classes that are used to implement the collections", "correct": true}, {"option": "JCF provides the interfaces that define various collections but not the classes that are used to implement the collections", "correct": false}, {"option": "JCF provides the classes that are used to implement the collections but not the interfaces that define various collections", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what are the two <strong>root</strong>\u00a0interfaces for the Java collection classes?</p>", "options": [{"option": "Set and SortedSet", "correct": false}, {"option": "Deque and Queue ", "correct": false}, {"option": "Collection and Map", "correct": true}, {"option": "List and ArrayList", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following\u00a0interfaces is provided by the Java Collections Framework (JCF)?</p>", "options": [{"option": "Set", "correct": false}, {"option": "Queue", "correct": false}, {"option": "List", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following\u00a0classes is provided by the Java Collections Framework (JCF)?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "Vector", "correct": false}, {"option": "LinkedList", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements\u00a0about <strong>collections</strong> is correct?</p>", "options": [{"option": "Collections represent a single unit of objects (that is a group).", "correct": false}, {"option": "Collections are frameworks that provide an architecture to store and manipulate the group of objects.", "correct": false}, {"option": "Collections are used to search, sort, insert, manipulate, and delete data.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements\u00a0about the <strong>iterator</strong> interface is correct?</p>", "options": [{"option": "The iterator interface provides the facility of iterating elements in a forward direction only.", "correct": true}, {"option": "The iterator interface provides the facility of iterating elements in a backward direction only.", "correct": false}, {"option": "The iterator interface provides the facility of adding elements in a backward direction only.", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods exists in the <strong>iterator</strong> interface?</p>", "options": [{"option": "public boolean hasNext()", "correct": false}, {"option": "public Object next()", "correct": false}, {"option": "public void remove()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following\u00a0methods exists in the <strong>collection</strong> interface?</p>", "options": [{"option": "Boolean add (Object obj)", "correct": false}, {"option": "Boolean addAll (Collection c)", "correct": false}, {"option": "void clear()", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements\u00a0about the <strong>list</strong> interface is correct?</p>", "options": [{"option": "The list interface is the child interface of the collection interface.", "correct": false}, {"option": "The list interface inhibits a list type data structure in which the ordered collection of objects can be stored.", "correct": false}, {"option": "The list interface is implemented by the ArrayList, LinkedList, Vector, and Stack classes.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following entities is represented by a group of objects in a collection?</p>", "options": [{"option": "Elements", "correct": true}, {"option": "Foundations", "correct": false}, {"option": "Essentials", "correct": false}, {"option": "Features", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Student().createOverload();\n}\n}\nclass Student{\npublic void createOverLoad(){\nint x = 2;\ndouble y = 5.3;\nSystem.out.println(square(x) + \" \"\n+ square(y));\n}\npublic int square(int y){\nreturn y*y;\n}\npublic double square(double y){\nreturn y*y;\n}\n}\n</code></pre>", "options": [{"option": "2 28.09", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Student().createOverLoad();\n}\n}\nclass Student{\npublic void createOverLoad(){\nint a = 2;\ndouble b = 5.3;\nSystem.out.print(square(a) + \" \");\nSystem.out.print(square(b));\nSystem.out.println();\n}\npublic float square(float b){\nSystem.out.print(\"float \");\nreturn b*b;\n}\npublic double square(double b){\nSystem.out.print(\"double \");\nreturn b*b;\n}\n}</code></pre>", "options": [{"option": "float 2.0 double 28.09", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Teacher().createOverLoad();\n}\n}\nclass Teacher{\npublic void createOverLoad(){\ndouble w = 2.9;\ndouble x = 5.3;\nint y = square(w);\ndouble z = square(x);\nSystem.out.println(y + \" \" + z);\n}\npublic int square(double y){\nreturn (int)(y*y);\n}\npublic double square(double y){\nreturn y*y;\n}\n}</code></pre>", "options": [{"option": "8 28.09", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Student().beOverLoad();\n}\n}\nclass Student{\npublic void beOverLoad(){\nint a = 2;\ndouble b = 5.3;\nSystem.out.println(new Lowerschool().square(a) + \" \"\n+ new Lowerschool().square(b));\n}\n}\nclass Highschool{\npublic double square(double c){\nreturn c*c;\n}\n}\nclass Lowerschool extends Highschool{\npublic int square(int c){\nreturn c*c;\n}\n}</code></pre>", "options": [{"option": "4 28.09", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Student().createObj();\n}\n}\nclass Student{\npublic void createObj(){\nUniform obj = Uniform();\nSystem.out.println(obj);\n}\n}\nclass Uniform{\npublic String toString(){\nreturn \"Object Example\";\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Object Example", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class School{\npublic static void main(String args[])\n{\nnew Student().createObj();\n}\n}\nclass Student{\npublic void createObj(){\nUniform obj = new Uniform();\nSystem.out.println(obj);\n}\n}\nClass Uniform{\npublic String toString(){\nreturn \"Object Example\";\n}\n}</code></pre>", "options": [{"option": "Object example", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>What is the result of the following statements?</strong><br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>6. List list = new ArrayList();\n7. list.add(\u201cone\u201d);\n8. list.add(\u201ctwo\u201d);\n9. list.add(7);\n10. for(String s : list) {\n11.    System.out.print(s);\n\n12.  }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": " onetwo", "correct": false}, {"option": " onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "Compiler error on line 9", "correct": false}, {"option": "Compiler error on line 10", "correct": true}], "level": "Easy"}, {"question": "<p><strong>What is the result of the following statements?</strong></p>\n\n<pre class=\"prettyprint\"><code>3. ArrayList &lt; Integer &gt; values = new ArrayList &lt; Integer &gt; ();\n4. values.add(4);\n5. values.add(5);\n6. values.set(1, 6);\n7. values.remove(0);\n8. for(Integer v : values) {\n9. System.out.print(v);\n10. }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "4", "correct": false}, {"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "46", "correct": false}, {"option": "45", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the result of the following statements?</strong></p>\n\n<pre class=\"prettyprint\"><code>10. Stack &lt; String &gt; greetings = new Stack &lt; String &gt; ();\n11. greetings.push(\u201chello\u201d);\n12. greetings.push(\u201chi\u201d);\n13. greetings.push(\u201cola\u201d);\n14. greetings.pop();\n15. greetings.peek();\n16. Iterator iter = greetings.iterator();\n17. while(iter.hasNext()) {\n18. System.out.print(iter.next());\n19. }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hello", "correct": false}, {"option": "hellohi", "correct": true}, {"option": "hellohiola", "correct": false}, {"option": " hihello", "correct": false}, {"option": "The code does not compile.", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the result of the following program?</strong></p>\n\n<pre class=\"prettyprint\"><code>1. public class Hello &lt; T &gt;{\n2. T t;\n3.\n4. public Hello(T t) {\n5. this.t = t;\n6. }\n7.\n8. public String toString() {\n9. return t.toString();\n10. }\n11.\n12. public static void main(String [] args) {\n13. System.out.print(new Hello &lt; String &gt; (\u201chi\u201d));\n14. System.out.print(new Hello(\u201cthere\u201d));\n15. }\n16. }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hi", "correct": false}, {"option": "hi followed by a runtime exception", "correct": false}, {"option": "hithere", "correct": true}, {"option": "Compiler error on line 9", "correct": false}, {"option": "Compiler error on line 14 ", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the result of the following statements?</strong></p>\n\n<pre class=\"prettyprint\"><code>3. Map &lt; Integer, Integer &gt; map = new HashMap &lt; Integer, Integer &gt; (10);\n4. for(int i = 1; i &lt; = 10; i++) {\n5. map.put(i, i * i);\n6. }\n7. System.out.println(map.get(4));\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compiler error on line 3", "correct": false}, {"option": "Compiler error on line 5", "correct": false}, {"option": "Compiler error on line 7", "correct": false}, {"option": "16", "correct": true}, {"option": "25", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0in; margin-right: 0in;\"><strong>What is the result of the following statements?</strong></p>\n\n<pre class=\"prettyprint\"><code>3. List &lt; Integer &gt; list = Arrays. &lt; Integer &gt; asList(10, 4, -1, 5);\n4. Collections.sort(list);\n5. Integer [] array = list. &lt; Integer &gt; toArray(new Integer[4]);\n6. System.out.println(array[0]);\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compiler error on line 3", "correct": false}, {"option": "Line 4 throws an exception at runtime.", "correct": false}, {"option": "Compiler error on line 5", "correct": false}, {"option": "-1", "correct": true}, {"option": "10", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the result of the following code?</strong></p>\n\n<pre class=\"prettyprint\"><code>4. List &lt; String &gt; names = Arrays.asList(\u201cTom\u201d, \u201cDick\u201d, \u201cHarry\u201d, \u201cSue\u201d);\n5. Collections.sort(names);\n6. int x = Collections.binarySearch(names, \u201cTom\u201d);\n7. System.out.println(x);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "3", "correct": true}, {"option": "-1", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, which of the following statements about the garbage collection process is correct?</p>\n\n<ol>\n\t<li>Unused package in a program automatically gets deleted.</li>\n\t<li>The memory occupied by objects with no reference is automatically reclaimed for deletion.</li>\n\t<li>Java deletes all unused java files on the system.</li>\n\t<li>The JVM cleans output of Java program.</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "2", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "1 and 4", "correct": false}, {"option": "2 and 4", "correct": false}], "level": "Easy"}, {"question": "<p>In Java 8, if a Java source code is successfully compiled, then what is the extension of the Java file?</p>", "options": [{"option": ".class", "correct": true}, {"option": ".source", "correct": false}, {"option": ".compile", "correct": false}, {"option": ".java", "correct": false}], "level": "Easy"}, {"question": "<pre>What is the output of the following Javascript code?:\n0.1 + 0.2 === 0.3\n</pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Medium"}, {"question": "<pre>What is the output of the following Javascript code?:\n0.1 + 0.2 === 0.3\n</pre>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "false", "correct": true}, {"option": "true", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following declaration is used to instantiate a <strong>Thread</strong> object by using a constructor?</p>\n\n<pre>\n\u00a0</pre>", "options": [{"option": "Thread(String threadName, Runnable threadObj);", "correct": false}, {"option": "Thread(Runnable threadObj, String threadName);", "correct": true}, {"option": "Thread(Run threadObj, String threadName);", "correct": false}, {"option": "Thread(Runnable threadName, String threadObj);", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about a generic constructor is correct?</p>", "options": [{"option": "A constructor is generic if it declares one or more type variables.", "correct": false}, {"option": "A constructor can be declared generic irrespective of whether the class is declared generic.", "correct": false}, {"option": "A constructor contains the formal type parameters as its type variables.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about the synchronized methods is correct?</p>\n\n<ol>\n\t<li>A synchronized method is used to lock an object for any shared resource.</li>\n\t<li>When a thread invokes a synchronized method, it automatically acquires the lock for all the objects and releases it when the thread completes its task.</li>\n</ol>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java,\u00a0which of the following statements\u00a0about a\u00a0<strong>singleton </strong>application is correct?</p>", "options": [{"option": "It has a design solution where an application has only one instance of a class in all the possible scenarios without any exceptional conditions.", "correct": true}, {"option": "It has a design solution where an application has one or more instances of any class in all the possible scenarios without any exceptional conditions.", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following refers to the process of converting a typescript code into javascript code by using a\u00a0<strong>traceur</strong>?</p>", "options": [{"option": "Translation", "correct": false}, {"option": "Migration", "correct": false}, {"option": "Transpiling", "correct": true}, {"option": "Compilation", "correct": false}], "level": "Easy"}, {"question": "<p>In Javascript, how will you write the fat-arrow function that multiplies two numbers?</p>", "options": [{"option": "multi(a,b)=> a*b", "correct": false}, {"option": "multi = (a,b) =>a*b", "correct": false}, {"option": "let multi = (a,b) =>a*b", "correct": true}, {"option": "let multi => (a,b) =>a*b", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is a valid variable?</p>", "options": [{"option": "Instance variable", "correct": false}, {"option": "Static variable", "correct": false}, {"option": "Local variable", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements\u00a0about <strong>instance</strong> variables is correct?</p>\n\n<p>\u00a0</p>", "options": [{"option": "It does not contain a native modifier.", "correct": false}, {"option": "It can be marked as a final object.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements\u00a0about <strong>instance</strong> variables is correct?</p>", "options": [{"option": "The values stored in these variables are specific to instances and are not shared among instances.", "correct": false}, {"option": "These variables is used by objects to store their states.", "correct": false}, {"option": "These variables are defined without the static keyword, beyond the declaration of any method, and specific to objects.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements\u00a0about the <strong>static</strong> keyword is correct?</p>", "options": [{"option": "It cannot be applied to instance variables.", "correct": false}, {"option": "It can be applied to methods.", "correct": false}, {"option": "It cannot be applied to local variables.", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements correctly defines the purpose of the <strong>static</strong> keyword?</p>", "options": [{"option": "The static word can be used to attach a variable or method to a class", "correct": false}, {"option": "The variable or method that is marked static belongs to a specific class rather than to any specific instance.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the main difference between the <strong>primitive</strong> and <strong>reference</strong> variables?</p>", "options": [{"option": "The primitive type always contains a value, that means it cannot be declared as a null type, whereas the reference type can be declared as a null type, that denotes the absence of a value.", "correct": true}, {"option": "The primitive type does not contains a value, that means it is always declared as a null type, whereas the reference type always has a value, that denotes it cannot be declared as a null type. ", "correct": false}, {"option": "The primitive type can be declared as a null type but it is not mandatory, whereas the reference type always contains a value which that denotes, it cannot be declared as a null type.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following is a valid <strong>primitive</strong> data type?</p>", "options": [{"option": "Int", "correct": false}, {"option": "Boolean", "correct": false}, {"option": "Char", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p style=\"text-align: justify;\">Constructor can be inherited.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate static int[] a = { 1, 2, 3, 4, 5 };\n\t\t\n\tpublic static void main(String args[]) {\n\t\tfor(int i = 1; i &lt;= 5; ++i) {\n\t\t\tSystem.out.print(a[i]);\n\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "12345", "correct": false}, {"option": "1234 and then exception is thrown", "correct": false}, {"option": "nothing, exception is thrown", "correct": false}, {"option": "2345 and then exception is thrown", "correct": true}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tpublic static void main(String args[]) {\n\t\tA a = new A();\n\t\ta.foo();\n\t\t\n\t\tB b = new B();\n\t\tb.foo();\n\t\tb.bar();\n\t\t\n\t\tA ab = new B();\n\t\tab.foo();\n\t}\n};\n\nclass A {\n\tpublic void foo() {\n\t\tSystem.out.print(\"Foo\");\n\t}\n}\n\nclass B extends A {\n\tpublic void foo() {\n\t\tSystem.out.print(\"Bar\");\n\t}\n\tpublic void bar() {\n\t\tSystem.out.print(\"Surprise\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "FooBarSurpriseBar", "correct": true}, {"option": "FooFooBarSurpriseBar ", "correct": false}, {"option": "FooFooBarSurpriseFoo", "correct": false}, {"option": "FooBarSurpriseFoo", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate double array[] = { 1.0, 1.1, 1.2, 1.3, 1.4 }; \n\n\tpublic static void main(String args[]) {\n\t\t\tfor(int i = 0; i &lt; array.length; ++i) {\n\t\t\t\tfor(int j = 1; j &lt; i; ++j) {\n\t\t\t\t\tSystem.out.print(array[i*j % array.length] + \u201c \u201c);\n\t\t\t\t}\n\t\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1.2 1.3 1.1 1.4 1.3 1.2", "correct": true}, {"option": "1.2 1.3 1.4 1.1", "correct": false}, {"option": "1.1 1.2 1.3 1.4 1.5", "correct": false}, {"option": "exception is thrown", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">How many objects are eligible for garbage collection (GC) when // here is reached</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate Integer variable = 100;\n\t\n\tpublic JavaTest go(JavaTest j) {\n\t\tj = null;\n\t\treturn j;\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tJavaTest j1 = new JavaTest();\n\t\tJavaTest j2 = new JavaTest();\n\t\tJavaTest j3 = j1.go(j2);\n\t\tj1 = null;\n\t\t// here\n\t}\n};</code></pre>\n\n<p style=\"margin-left: 36pt; margin-right: 0cm; text-align: justify;\">\u00a0</p>", "options": [{"option": "2", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "It is impossible to know", "correct": false}, {"option": "Exception is thrown", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the size of int variable?</p>", "options": [{"option": "8 bit", "correct": false}, {"option": "16 bit", "correct": false}, {"option": "32 bit", "correct": true}, {"option": "64 bit", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\tint i = 3;\n\t\tif(i) {\n\t\t\tSystem.out.println(\"if\");\n\t\t} else {\n\t\t\tSystem.out.println(\"else\");\n\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "if", "correct": false}, {"option": "else", "correct": false}, {"option": "nothing", "correct": false}, {"option": "won\u2019t compile", "correct": true}, {"option": "exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">A class always has a default constructor.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p>Which Man class properly represents the relationship \u201cMan has a best friend who is a Dog\u201d?</p>", "options": [{"option": "class Man extends Dog {}", "correct": false}, {"option": "class Man implements Dog {}", "correct": false}, {"option": "class Man { private BestFriend dog; }", "correct": false}, {"option": "class Man { private Dog bestFriend; }", "correct": true}, {"option": "class Man { private List<BestFriend> dogs; }", "correct": false}, {"option": "class Man { private List<Dog> bestFriends; }", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of the following code sample?</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\tA a = new B();\n\t}\n};\n\nclass A {\n\tprivate final String member = \"MemberA\";\n\t{\n\t\tSystem.out.print(member);\n\t}\n\t\n\tpublic A() {\n\t\tSystem.out.print(\"A\");\n\t}\n}\n\nclass B extends A {\n\tprivate static final String STATIC = \"Static\";\n\tstatic {\n\t\tSystem.out.print(STATIC);\n\t}\n\t\n\tprivate String member = \"MemberB\";\n\t{\n\t\tSystem.out.print(member);\n\t}\n\t\n\tpublic B() {\n\t\tSystem.out.print(\"B\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "MemberAAMemberBBStatic", "correct": false}, {"option": "StaticMemberAAMemberBB", "correct": true}, {"option": "StaticMemberBBMemberAA", "correct": false}, {"option": "StaticAMemberABMemberB", "correct": false}, {"option": "MemberBBMemberAAStatic", "correct": false}, {"option": "Won\u2019t compile", "correct": false}, {"option": "Exception is thrown", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Abstract classes: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>", "options": [{"option": "Cannot have abstract derived classes.", "correct": false}, {"option": "Can have objects instantiated from them if the proper permissions are set.", "correct": false}, {"option": "Contain at most one abstract function.", "correct": false}, {"option": "Are defined, but the programmer never intends to instantiate any objects from them.", "correct": true}, {"option": "Must contain at least one abstract function", "correct": false}, {"option": "Must not contain any final functions ", "correct": false}, {"option": "Must not contain any static functions ", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is JRE?</p>", "options": [{"option": "JRE is a java based GUI application.", "correct": false}, {"option": "JRE is an application development framework.", "correct": false}, {"option": "JRE is an implementation of the Java Virtual Machine which executes Java programs.", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of the following code sample?</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\t\t((A)new B()).test();\n\t}\n};\n\nclass A {\n\tpublic void test() {\n\t\tSystem.out.println(\"TestA\");\n\t}\n}\n\nclass B extends A {\n\tpublic void test() {\n\t\tSystem.out.println(\"TestB\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "ClassCastException is thrown", "correct": false}, {"option": "TestA", "correct": false}, {"option": "TestB", "correct": true}, {"option": "Exception is thrown at runtime but it is not ClassCastException", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Can constructor be made final?</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Which of these statements is true about the following <em>PrintSomething</em> program?</p>\n\n<pre class=\"prettyprint\"><code>public class PrintSomething implements Runnable {\n   private String value;\n      public PrintSomething(String value) {\n      this.value = value;\n   }\n\n   public void run() {\n      try {\n        Thread.sleep((int) (Math.random() * 4000));\n      }catch(InterruptedException e) {}\n        System.out.print(value);\n   }\n\n   public static void main(String [] args) {\n       Runnable x = new PrintSomething(\u201cx\u201d);\n       Runnable y = new PrintSomething(\u201cy\u201d);\n       Thread one = new Thread(x);\n       Thread two = new Thread(y);\n       two.start();\n       one.start();\n   }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The output is always xy.  ", "correct": false}, {"option": "The output is always yx.  ", "correct": false}, {"option": "The output can be either xy or yx.  ", "correct": true}, {"option": "Exception is thrown at runtime.", "correct": false}, {"option": "Compiler error.", "correct": false}], "level": "Easy"}, {"question": "<p>What is static block?</p>", "options": [{"option": "It is used to create syncronized code.", "correct": false}, {"option": "There is no such block.", "correct": false}, {"option": "It is used to initialize the static data member., It is excuted before main method at the time of class loading.", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following statements?\u00a0</p>\n\n<pre class=\"prettyprint\"><code>List &lt;String&gt; list = new ArrayList &lt;String&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "onetwo", "correct": false}, {"option": "onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "compiler error on line list.add(7);  ", "correct": true}, {"option": "compiler error on line for(String s : list) {", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Suppose you have a collection of products for sale in a database and you need to display those products on a web page. The Java code on the server needs to be able to sort the products by price and category. Which of the following collections classes in the\u00a0 <em>java.util</em> package best suit your needs for this scenario?\u00a0</p>", "options": [{"option": "HashSet   ", "correct": false}, {"option": "HashMap   ", "correct": false}, {"option": "PriorityQueue", "correct": false}, {"option": "Arrays ", "correct": false}, {"option": "ArrayList ", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code sample?\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tprivate static class Stash {\n\t\tprivate int x;\n\t\t\n\t\tpublic int getValue() {\n\t\t\treturn x;\n\t\t}\n\t\t\n\t\tpublic void setValue(int newValue) {\n\t\t\tx = newValue;\n\t\t}\n\t};\n\n\tpublic static void foobar(Stash s) {\n\t\ts.setValue(2);\n\t\ts = new Stash();\n\t\ts.setValue(3);\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tStash s = new Stash();\n\t\t\t\n\t\ts.setValue(1);\n\t\tfoobar(s);\n\t\t\t\n\t\tSystem.out.println(s.getValue());\n\t}\n}; </code></pre>\n\n<p style=\"text-align: justify;\">\u00a0</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "0", "correct": false}, {"option": "compilation fails", "correct": false}, {"option": "exception is thrown at runtime         ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are not design patterns:</p>", "options": [{"option": "abstract factory, chain of responsibility, iterator, prototype", "correct": false}, {"option": "adapter, decorator, mediator, proxy", "correct": false}, {"option": "barricade, facade, memento, singleton", "correct": true}, {"option": "bridge, flyweight, null object, strategy", "correct": false}, {"option": "builder, interpreter, observer, visitor", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Constructor can be inherited.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate static int[] a = { 1, 2, 3, 4, 5 };\n\t\t\n\tpublic static void main(String args[]) {\n\t\tfor(int i = 1; i &lt;= 5; ++i) {\n\t\t\tSystem.out.print(a[i]);\n\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "12345", "correct": false}, {"option": "1234 and then exception is thrown", "correct": false}, {"option": "nothing, exception is thrown", "correct": false}, {"option": "2345 and then exception is thrown", "correct": true}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tpublic static void main(String args[]) {\n\t\tA a = new A();\n\t\ta.foo();\n\t\t\n\t\tB b = new B();\n\t\tb.foo();\n\t\tb.bar();\n\t\t\n\t\tA ab = new B();\n\t\tab.foo();\n\t}\n};\n\nclass A {\n\tpublic void foo() {\n\t\tSystem.out.print(\"Foo\");\n\t}\n}\n\nclass B extends A {\n\tpublic void foo() {\n\t\tSystem.out.print(\"Bar\");\n\t}\n\tpublic void bar() {\n\t\tSystem.out.print(\"Surprise\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "FooBarSurpriseBar", "correct": true}, {"option": "FooFooBarSurpriseBar ", "correct": false}, {"option": "FooFooBarSurpriseFoo", "correct": false}, {"option": "FooBarSurpriseFoo", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate double array[] = { 1.0, 1.1, 1.2, 1.3, 1.4 }; \n\n\tpublic static void main(String args[]) {\n\t\t\tfor(int i = 0; i &lt; array.length; ++i) {\n\t\t\t\tfor(int j = 1; j &lt; i; ++j) {\n\t\t\t\t\tSystem.out.print(array[i*j % array.length] + \u201c \u201c);\n\t\t\t\t}\n\t\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1.2 1.3 1.1 1.4 1.3 1.2", "correct": true}, {"option": "1.2 1.3 1.4 1.1", "correct": false}, {"option": "1.1 1.2 1.3 1.4 1.5", "correct": false}, {"option": "exception is thrown", "correct": false}, {"option": "class won\u2019t compile", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">How many objects are eligible for garbage collection (GC) when // here is reached</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\tprivate Integer variable = 100;\n\t\n\tpublic JavaTest go(JavaTest j) {\n\t\tj = null;\n\t\treturn j;\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tJavaTest j1 = new JavaTest();\n\t\tJavaTest j2 = new JavaTest();\n\t\tJavaTest j3 = j1.go(j2);\n\t\tj1 = null;\n\t\t// here\n\t}\n};</code></pre>\n\n<p style=\"margin-left: 36pt; margin-right: 0cm; text-align: justify;\">\u00a0</p>", "options": [{"option": "2", "correct": true}, {"option": "1", "correct": false}, {"option": "0", "correct": false}, {"option": "It is impossible to know", "correct": false}, {"option": "Exception is thrown", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the size of int variable?</p>", "options": [{"option": "8 bit", "correct": false}, {"option": "16 bit", "correct": false}, {"option": "32 bit", "correct": true}, {"option": "64 bit", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of following code:</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\tint i = 3;\n\t\tif(i) {\n\t\t\tSystem.out.println(\"if\");\n\t\t} else {\n\t\t\tSystem.out.println(\"else\");\n\t\t}\n\t}\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "if", "correct": false}, {"option": "else", "correct": false}, {"option": "nothing", "correct": false}, {"option": "won\u2019t compile", "correct": true}, {"option": "exception is thrown at runtime", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">A class always has a default constructor.</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p>Which Man class properly represents the relationship \u201cMan has a best friend who is a Dog\u201d?</p>", "options": [{"option": "class Man extends Dog {}", "correct": false}, {"option": "class Man implements Dog {}", "correct": false}, {"option": "class Man { private BestFriend dog; }", "correct": false}, {"option": "class Man { private Dog bestFriend; }", "correct": true}, {"option": "class Man { private List<BestFriend> dogs; }", "correct": false}, {"option": "class Man { private List<Dog> bestFriends; }", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of the following code sample?</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\tA a = new B();\n\t}\n};\n\nclass A {\n\tprivate final String member = \"MemberA\";\n\t{\n\t\tSystem.out.print(member);\n\t}\n\t\n\tpublic A() {\n\t\tSystem.out.print(\"A\");\n\t}\n}\n\nclass B extends A {\n\tprivate static final String STATIC = \"Static\";\n\tstatic {\n\t\tSystem.out.print(STATIC);\n\t}\n\t\n\tprivate String member = \"MemberB\";\n\t{\n\t\tSystem.out.print(member);\n\t}\n\t\n\tpublic B() {\n\t\tSystem.out.print(\"B\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "MemberAAMemberBBStatic", "correct": false}, {"option": "StaticMemberAAMemberBB", "correct": true}, {"option": "StaticMemberBBMemberAA", "correct": false}, {"option": "StaticAMemberABMemberB", "correct": false}, {"option": "MemberBBMemberAAStatic", "correct": false}, {"option": "Won\u2019t compile", "correct": false}, {"option": "Exception is thrown", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Abstract classes: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0</p>", "options": [{"option": "Cannot have abstract derived classes.", "correct": false}, {"option": "Can have objects instantiated from them if the proper permissions are set.", "correct": false}, {"option": "Contain at most one abstract function.", "correct": false}, {"option": "Are defined, but the programmer never intends to instantiate any objects from them.", "correct": true}, {"option": "Must contain at least one abstract function", "correct": false}, {"option": "Must not contain any final functions ", "correct": false}, {"option": "Must not contain any static functions ", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is JRE?</p>", "options": [{"option": "JRE is a java based GUI application.", "correct": false}, {"option": "JRE is an application development framework.", "correct": false}, {"option": "JRE is an implementation of the Java Virtual Machine which executes Java programs.", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of the following code sample?</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tpublic static void main(String args[]) {\n\t\t\t((A)new B()).test();\n\t}\n};\n\nclass A {\n\tpublic void test() {\n\t\tSystem.out.println(\"TestA\");\n\t}\n}\n\nclass B extends A {\n\tpublic void test() {\n\t\tSystem.out.println(\"TestB\");\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "ClassCastException is thrown", "correct": false}, {"option": "TestA", "correct": false}, {"option": "TestB", "correct": true}, {"option": "Exception is thrown at runtime but it is not ClassCastException", "correct": false}, {"option": "Compilation fails", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Can constructor be made final?</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": true}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Which of these statements is true about the following <em>PrintSomething</em> program?</p>\n\n<pre class=\"prettyprint\"><code>public class PrintSomething implements Runnable {\n   private String value;\n      public PrintSomething(String value) {\n      this.value = value;\n   }\n\n   public void run() {\n      try {\n        Thread.sleep((int) (Math.random() * 4000));\n      }catch(InterruptedException e) {}\n        System.out.print(value);\n   }\n\n   public static void main(String [] args) {\n       Runnable x = new PrintSomething(\u201cx\u201d);\n       Runnable y = new PrintSomething(\u201cy\u201d);\n       Thread one = new Thread(x);\n       Thread two = new Thread(y);\n       two.start();\n       one.start();\n   }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The output is always xy.  ", "correct": false}, {"option": "The output is always yx.  ", "correct": false}, {"option": "The output can be either xy or yx.  ", "correct": true}, {"option": "Exception is thrown at runtime.", "correct": false}, {"option": "Compiler error.", "correct": false}], "level": "Easy"}, {"question": "<p>What is static block?</p>", "options": [{"option": "It is used to create syncronized code.", "correct": false}, {"option": "There is no such block.", "correct": false}, {"option": "It is used to initialize the static data member., It is excuted before main method at the time of class loading.", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the result of the following statements?\u00a0</p>\n\n<pre class=\"prettyprint\"><code>List &lt;String&gt; list = new ArrayList &lt;String&gt;();\nlist.add(\u201cone\u201d);\nlist.add(\u201ctwo\u201d);\nlist.add(7);\nfor(String s : list) {\nSystem.out.print(s);\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "onetwo", "correct": false}, {"option": "onetwo7", "correct": false}, {"option": "onetwo followed by an exception", "correct": false}, {"option": "compiler error on line list.add(7);  ", "correct": true}, {"option": "compiler error on line for(String s : list) {", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">Suppose you have a collection of products for sale in a database and you need to display those products on a web page. The Java code on the server needs to be able to sort the products by price and category. Which of the following collections classes in the\u00a0 <em>java.util</em> package best suit your needs for this scenario?\u00a0</p>", "options": [{"option": "HashSet   ", "correct": false}, {"option": "HashMap   ", "correct": false}, {"option": "PriorityQueue", "correct": false}, {"option": "Arrays ", "correct": false}, {"option": "ArrayList ", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following code sample?\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class JavaTest {\n\n\tprivate static class Stash {\n\t\tprivate int x;\n\t\t\n\t\tpublic int getValue() {\n\t\t\treturn x;\n\t\t}\n\t\t\n\t\tpublic void setValue(int newValue) {\n\t\t\tx = newValue;\n\t\t}\n\t};\n\n\tpublic static void foobar(Stash s) {\n\t\ts.setValue(2);\n\t\ts = new Stash();\n\t\ts.setValue(3);\n\t}\n\t\n\tpublic static void main(String args[]) {\n\t\tStash s = new Stash();\n\t\t\t\n\t\ts.setValue(1);\n\t\tfoobar(s);\n\t\t\t\n\t\tSystem.out.println(s.getValue());\n\t}\n}; </code></pre>\n\n<p style=\"text-align: justify;\">\u00a0</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "0", "correct": false}, {"option": "compilation fails", "correct": false}, {"option": "exception is thrown at runtime         ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following are not design patterns:</p>", "options": [{"option": "abstract factory, chain of responsibility, iterator, prototype", "correct": false}, {"option": "adapter, decorator, mediator, proxy", "correct": false}, {"option": "barricade, facade, memento, singleton", "correct": true}, {"option": "bridge, flyweight, null object, strategy", "correct": false}, {"option": "builder, interpreter, observer, visitor", "correct": false}], "level": "Easy"}, {"question": "<p>In Redux, which of the following methods is used to make an object appear immutable?</p>", "options": [{"option": "Object.freeze()", "correct": true}, {"option": "Object.Immute()", "correct": false}, {"option": "Object.state.freeze()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is the correct order in which the major tasks performed by a servlet is executed?</p>\n\n<ol>\n\t<li>Read the implicit HTTP request data sent by various clients (browsers).</li>\n\t<li>Process the data and generate\u00a0results.</li>\n\t<li>Read the explicit data sent by clients (browsers).</li>\n\t<li>Send the explicit data (i.e., the document) to the clients (browsers).</li>\n\t<li>Send the implicit HTTP response to the clients (browsers).</li>\n</ol>", "options": [{"option": "3, 1, 2, 4, 5", "correct": true}, {"option": "1, 3, 2, 4, 5", "correct": false}, {"option": "1, 3, 2, 5, 4", "correct": false}, {"option": "3, 1, 2, 5, 4", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following packages are required for creating a <strong>servlet?</strong></p>", "options": [{"option": "java.servlet and java.servlet.http", "correct": false}, {"option": "javax.servlet and javax.servlet.http", "correct": true}, {"option": "util.servlet and util.servlet.http", "correct": false}, {"option": "servlet and servlet.http", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, which of the following statements about <strong>s</strong><strong>ervlets\u00a0</strong>are true?</p>\n\n<ol>\n\t<li>For every request made to a servlet, a new lightweight Java thread is created instead of a process.</li>\n\t<li>If 'N' requests are made to a servlet class, then 'N' copies of the servlet are loaded into the memory.</li>\n\t<li>Servlets remain in memory even after completing a response.</li>\n\t<li>Servlets do not use operating system shells for executing a system call.\u00a0\u00a0\u00a0\u00a0</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following methods comprises the <strong>servlet</strong> life cycle:</p>\n\n<ol>\n\t<li>init()</li>\n\t<li>clean()</li>\n\t<li>service()</li>\n\t<li>destroy()</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "3 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about the\u00a0<strong>service() </strong>method in servlet are valid:</p>\n\n<ol>\n\t<li>This method is called only once when the servlet is created.</li>\n\t<li>This method is responsible for handling requests coming from the client.</li>\n\t<li>This method invokes doGet(), doPost(), doPut(), etc. depending on the HTTP request type.</li>\n\t<li>This method is not responsible for writing the formatted response back to the client.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "2 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Servlet, which of the following\u00a0signatures of the <strong>service() </strong>method is\u00a0correct?</p>", "options": [{"option": "public void service(ServletRequest request, ServletResponse response) throws ServletException , IOException{ }", "correct": true}, {"option": "public int service(ServletRequest request, ServletResponse response) throws ServletException , IOException{ }", "correct": false}, {"option": "public void service(Request request, Response response) throws ServletException , IOException{ }", "correct": false}, {"option": "private void service(ServletRequest request, ServletResponse response) throws ServletException , IOException{ }", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following\u00a0<strong>servlet</strong> methods is used to handle a request coming from an HTML form with no METHOD specified?</p>", "options": [{"option": "doPost()", "correct": false}, {"option": "doGet()", "correct": true}, {"option": "doRequest", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following servlet methods is called for performing cleanup activities such as closing database connections, halting background tasks, etc?</p>", "options": [{"option": "public void destroy()", "correct": true}, {"option": "public void clean()", "correct": false}, {"option": "public void close()", "correct": false}, {"option": "public void reset()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods\u00a0returns\u00a0information about a\u00a0servlet\u00a0such as its name and version?</p>", "options": [{"option": "getServletInfo()", "correct": true}, {"option": "getServletInformation()", "correct": false}, {"option": "getInfoServlet()", "correct": false}, {"option": "getServletData()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following exceptions is thrown when\u00a0a servlet<strong> </strong>is unable to handle requests?</p>", "options": [{"option": "ServletUnavailableException", "correct": false}, {"option": "UnavailableException", "correct": true}, {"option": "UnavailableServletException", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods of the <strong>ServletRequest </strong>interface are used to access\u00a0attributes?</p>\n\n<ol>\n\t<li>getAttribute()</li>\n\t<li>getAttributeNames()</li>\n\t<li>setAttribute()</li>\n\t<li>setAttributeNames()</li>\n</ol>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods is provided by the\u00a0<em>HttpServletRequest </em>interface for accessing cookies present in a request?</p>", "options": [{"option": "getCookies()", "correct": true}, {"option": "getCookie()", "correct": false}, {"option": "retrieveCookie()", "correct": false}, {"option": "getServletCookies()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods of the <em>ServletResponse </em>interface allows a servlet to access and set buffering information?</p>\n\n<ol>\n\t<li>getBufferSize()</li>\n\t<li>reset()</li>\n\t<li>isCommitted()</li>\n\t<li>resetBuffer()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>How does a servlet container handle\u00a0an incoming servlet request?</p>", "options": [{"option": "If there is an active object for the servlet, then the container creates a Java thread to handle the request.", "correct": false}, {"option": "If there is no active object for the servlet, then the container instantiates a new object of that class, and the object handles the request.", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>How does the same servlet handle\u00a0multiple requests?</p>", "options": [{"option": "The container creates multiple threads to handle multiple requests to a single servlet. ", "correct": true}, {"option": "The container creates multiple processes to handle multiple requests to a single servlet. ", "correct": false}, {"option": "The container creates multiple instances of the same servlet to handle multiple requests. ", "correct": false}, {"option": "A servlet can handle only one request at a time. ", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is the correct form of the getSession() method which\u00a0is\u00a0used in servlets to retrieve the current user's session?</p>", "options": [{"option": "public HttpSession HttpServletRequest.getSession(boolean create);", "correct": true}, {"option": "public HttpSession HttpServletRequest.getSession(String create)", "correct": false}, {"option": "public HttpSession ServletRequest.getSession(boolean create)", "correct": false}, {"option": "public HttpServletRequest.getSession(boolean create)", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about servlet filter are true?</p>\n\n<ol>\n\t<li>Servlet filter only processes the initial HTTP request and response.</li>\n\t<li>It can be used to compress the response data that is sent to the client.</li>\n\t<li>It can be used for logging request parameters to log files.</li>\n\t<li>Servlet filters are pluggable.</li>\n</ol>", "options": [{"option": "1 and 2", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Servlets, which of the following conditions must be satisfied\u00a0before populating the post form\u00a0data to a parameter set?</p>\n\n<ol>\n\t<li>The request must be either HTTP or HTTPS.</li>\n\t<li>The HTTP method must be either POST or GET.</li>\n\t<li>The content type is application/x-www-form-urlencoded.</li>\n\t<li>The servlet has called any method\u00a0of the getParameter family on the request object.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following methods are\u00a0used by a servlet to set headers of an HTTP response?</p>", "options": [{"option": "setHeader()", "correct": false}, {"option": "addHeader()", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0which of the following situations will the headers set by the servlet be ignored by the servlet container?</p>", "options": [{"option": "If the headers are set before the response is committed.", "correct": false}, {"option": "If the headers are set after the response is committed.", "correct": true}, {"option": "If the headers contain data that represents a Date object.", "correct": false}, {"option": "If a set of header values already exists.", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about mapping a URL to a <strong>servlet </strong>are correct?</p>\n\n<ol>\n\t<li>A servlet must be declared with the <strong>&lt;servlet&gt; </strong>element.</li>\n\t<li>Mapping from the URL path to a servlet declaration is defined with the <strong>&lt;servlet-mapping&gt;</strong> element.</li>\n\t<li>Mappings between URL paths and servlets are defined in the <strong>web.json </strong>file.</li>\n\t<li>Using the same name for multiple servlets across the deployment descriptor is allowed.</li>\n</ol>", "options": [{"option": "1 and 2", "correct": true}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "1 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following deployment descriptors is used in servlets?</p>", "options": [{"option": "web.json", "correct": false}, {"option": "web.xml", "correct": true}, {"option": "web.js", "correct": false}, {"option": "web.html", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is used to retrieve the value of a parameter name that appears multiple times in a form data?</p>", "options": [{"option": "getParameter()", "correct": false}, {"option": "getParameterValues()", "correct": true}, {"option": "getMultipleValues()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In which of the following formats does\u00a0the <em>getParameterNames() </em>method obtains a\u00a0list of all the parameter names in a form?</p>\n\n<p>\u00a0</p>", "options": [{"option": "String", "correct": false}, {"option": "Array", "correct": false}, {"option": "Enumeration", "correct": true}, {"option": "List", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods are included in the ServletConfig interface:</p>\n\n<ol>\n\t<li>getInitParameter();</li>\n\t<li>getParameterNames();</li>\n\t<li>getServletContext();</li>\n\t<li>getServletName();</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "2, 3, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Servlets, which of the following options is the correct structure for\u00a0initializing the context parameter<em> </em>in\u00a0the web.xml file?\u00a0</p>", "options": [{"option": "<web-app>\r\n\t<context-param>\r\n\t\t.....\r\n\t</context-param>\r\n\t<servlet>\r\n\t\t.....\r\n\t</servlet>\r\n</web-app>", "correct": true}, {"option": "<web-app>\r\n\t<servlet>\r\n\t\t<context-param>\r\n\t\t.....\r\n\t\t</context-param>\r\n\t</servlet>\r\n</web-app>", "correct": false}, {"option": "<web-app>\r\n\t<servlet>\r\n\t\t<context>\r\n\t\t\t<context-param>\r\n\t\t\t\t.....\r\n\t\t\t</context-param>\r\n\t\t</context>\r\n\t</servlet>\r\n</web-app>", "correct": false}, {"option": "<web-app>\r\n\t<context>\r\n\t\t<servlet>\r\n\t\t\t<context-param>\r\n\t\t\t\t.....\r\n\t\t\t</context-param>\r\n\t\t</servlet>\r\n\t</context>\r\n</web-app>", "correct": false}], "level": "Hard"}, {"question": "<p>Given:</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">1. public class GC {</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">2. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private Object o;</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">3. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 private void doSomethingElse(Object obj) { o = obj; }</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">4. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 public void doSomething() {</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">5. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Object o = new Object();</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">6. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 doSomethingElse(o);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">7. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 o = new Object();</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">8. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 doSomethingElse(null);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">9. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 o = null;</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">10. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">11. }</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">When the doSomething method is called, after which line does the Object created in line 5 become available for garbage collection?</p>", "options": [{"option": "Line 5", "correct": false}, {"option": "Line 6", "correct": false}, {"option": "Line 7", "correct": false}, {"option": "Line 8", "correct": true}, {"option": "Line 9", "correct": false}, {"option": "Line 10", "correct": false}], "level": "Medium"}, {"question": "<p>Given:<br>\npublic class Test {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main(String [] args) {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int x = 5;<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean b1 = true;<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0boolean b2 = false;</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((x == 4) &amp;&amp; !b2 )<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(\"1 \");<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(\"2 \");</p>\n\n<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if ((b2 = true) &amp;&amp; b1 )<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(\"3 \");<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br>\n}</p>\n\n<p>What is the result?\u00a0\u00a0\u00a0\u00a0</p>", "options": [{"option": "2", "correct": false}, {"option": "3", "correct": false}, {"option": "1 2", "correct": false}, {"option": "2 3", "correct": true}, {"option": "1 2 3", "correct": false}, {"option": "Compilation fails.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium"}, {"question": "<p>Given:</p>\n\n<p>public class Pass {</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">public static void main(String [] args) {</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">int x = 5;</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">Pass p = new Pass();</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">p.doStuff(x);</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(\" main x = \" + x);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">}</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">void doStuff(int x) {</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">System.out.print(\" doStuff x = \" + x++);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0}</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">}</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">What is the result?</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}, {"option": "doStuff x = 6 main x = 6", "correct": false}, {"option": "doStuff x = 5 main x = 5", "correct": true}, {"option": "doStuff x = 5 main x = 6", "correct": false}, {"option": "doStuff x = 6 main x = 5", "correct": false}], "level": "Medium"}, {"question": "<p>Given</p>\n\n<p>public class ClassA {</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">public int getValue() {</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">int value=0;</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">boolean setting = true;</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">String title=\u201dHello\u201d;</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">if (value || (setting &amp;&amp; title == \u201cHello\u201d)) { return 1; }</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">if (value == 1 &amp; title.equals(\u201dHello\u201d)) { return 2; }</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0\u00a0\u00a0\u00a0\u00a0 }</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">}</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">And:</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">ClassA a = new ClassA();</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">a.getValue();</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">\u00a0</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">What is the result?</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": false}, {"option": "Compilation fails.", "correct": true}, {"option": "The code runs with no output.", "correct": false}, {"option": "An exception is thrown at runtime.", "correct": false}], "level": "Medium"}, {"question": "<p>Given:</p>\n\n<p>public class Base {</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">public static final String FOO = \"foo\";</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">public static void main(String[] args) {</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">Base b = new Base();</p>\n\n<p style=\"margin-left: 1in; margin-right: 0in;\">Sub s = new Sub();</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(Base.FOO);</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(Sub.FOO);</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(b.FOO);</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(s.FOO);</p>\n\n<p style=\"margin-left: 1.5in; margin-right: 0in;\">System.out.print(((Base)s).FOO);</p>\n\n<p style=\"margin-left: 0.5in; margin-right: 0in;\">}</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">}</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">class Sub extends Base {public static final String FOO=\"bar\";}</p>\n\n<p style=\"margin-left: 0in; margin-right: 0in;\">What is the result?</p>", "options": [{"option": "foofoofoofoofoo", "correct": false}, {"option": "foobarfoobarbar", "correct": false}, {"option": "foobarfoofoofoo", "correct": false}, {"option": "foobarfoobarfoo", "correct": true}, {"option": "barbarbarbarbar", "correct": false}, {"option": "foofoofoobarbar", "correct": false}, {"option": "foofoofoobarfoo", "correct": false}], "level": "Medium"}, {"question": "<p>Given:<br>\nclass One {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0public One() { System.out.print(1); }<br>\n}</p>\n\n<p>class Two extends One {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public Two() { System.out.print(2); }<br>\n}</p>\n\n<p>class Three extends Two {<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 \u00a0 public Three() { System.out.print(3); }<br>\n}</p>\n\n<p>public class Numbers{<br>\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main( String[] argv ) { new Three(); }<br>\n}</p>\n\n<p>What is the result when this code is executed?</p>", "options": [{"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "123", "correct": true}, {"option": "321", "correct": false}, {"option": "The code runs with no output.", "correct": false}], "level": "Medium"}, {"question": "<p>Which two are true? (Choose two.)</p>", "options": [{"option": "A finalizer may NOT be invoked explicitly.", "correct": false}, {"option": "The finalize method declared in class Object takes no action.", "correct": false}, {"option": "super.finalize() is called implicitly by any overriding finalize method.", "correct": false}, {"option": "The finalize method for a given object will be called no more than once by the garbage collector.", "correct": false}, {"option": "Theorder in which the two objects became finalizable.", "correct": false}, {"option": "B, C", "correct": false}, {"option": "B, D", "correct": true}, {"option": "D, C", "correct": false}], "level": "Medium"}, {"question": "<p>Which is true? (Choose all that apply.)</p>", "options": [{"option": "The invocation of an object\u2019s finalize() method is always the last thing that happens before an object is garbage collected (GCed).", "correct": false}, {"option": "When a stack variable goes out of scope it is eligible for GC.", "correct": false}, {"option": "Some reference variables live on the stack, and some live on the heap.", "correct": false}, {"option": "Only objects that have no reference variables referring to them can be eligible for GC.", "correct": false}, {"option": "It\u2019s possible to request the GC via methods in either java.lang.Runtime or java.lang.System classes.", "correct": false}, {"option": "C, E", "correct": true}, {"option": "D, E", "correct": false}, {"option": "C, D", "correct": false}], "level": "Medium"}, {"question": "<p>Which two statements are true? (Choose two.)</p>", "options": [{"option": "An encapsulated, public class promotes re-use.", "correct": false}, {"option": "Classes that share the same interface are always tightly encapsulated.", "correct": false}, {"option": "An encapsulated class allows subclasses to overload methods, but does NOT allow overriding methods.", "correct": false}, {"option": "An encapsulated class allows a programmer to change an implementation without affecting outside code.", "correct": false}, {"option": "A, B & D", "correct": false}, {"option": "A, D", "correct": true}], "level": "Medium"}, {"question": "<p>Which three statements are true? (Choose three.)</p>", "options": [{"option": "A final method in class X can be abstract if and only if X is abstract.", "correct": false}, {"option": "A protected method in class X can be overridden by any subclass of X", "correct": false}, {"option": "A public static method in class X can be called by a subclass of X without explicitly referencing the class X.", "correct": false}, {"option": "A method with the same signature as a private final method in class X can be implemented in a subclass of X", "correct": false}, {"option": "A protected method in class X can be overridden by a subclass of A only if the subclass is in the same", "correct": false}, {"option": "B, C & E", "correct": false}, {"option": "B, C & D", "correct": true}, {"option": "A, C & D", "correct": false}], "level": "Medium"}, {"question": "<p>In Servlets, which of the following are the logical data models for databases?</p>\n\n<ol>\n\t<li>Hierarchical database model</li>\n\t<li>Network model</li>\n\t<li>Relational model</li>\n\t<li>Document model</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>Find the output for the below mentioned code snippet:</p>\n\n<pre class=\"prettyprint\"><code>Let out = 0;\nfor (var i = 0; i &lt; 5; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out = out + 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 10);\n\u00a0\u00a0\u00a0\u00a0}\nConsole.log(\"output:\" + i);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Outputs: 0", "correct": false}, {"option": "Outputs: 5", "correct": true}, {"option": "Outputs: 1", "correct": false}, {"option": "Uncaught Reference Error, out not defined", "correct": false}], "level": "Medium"}, {"question": "<p>Find the output for the following code snippet:</p>\n\n<p>var\u00a0nameList = [\"John\",\u00a0\"Peter\",\u00a0\"Justin\",\u00a0\"Taylor\"];<br>\nnameList.unshift(\"Beyonce\",\"Lopez\");</p>\n\n<p>console.log(nameList);</p>", "options": [{"option": "[\"Beyonce\", \"Lopez\", \"John\", \"Peter\", \"Justin\", \"Taylor\"]", "correct": true}, {"option": "Uncaught ReferenceError: nameList is not defined", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "[ \"John\", \"Peter\", \"Justin\", \"Taylor\", \"Beyonce\", \"Lopez\"]", "correct": false}], "level": "Medium"}, {"question": "<p>Find the output for the below mentioned code snippet:</p>\n\n<pre class=\"prettyprint\"><code>Let out = 0;\nfor (var i = 0; i &lt; 5; i++) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out = 0;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0setTimeout(function () {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 out = out + 1;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}, 10);\n\u00a0\u00a0\u00a0\u00a0}\nConsole.log(\"output:\" + i);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Outputs: 0", "correct": false}, {"option": "Outputs: 5", "correct": true}, {"option": "Outputs: 1", "correct": false}, {"option": "Uncaught Reference Error, out not defined", "correct": false}], "level": "Medium"}, {"question": "<p>Find the output for the following code snippet:</p>\n\n<p>var\u00a0nameList = [\"John\",\u00a0\"Peter\",\u00a0\"Justin\",\u00a0\"Taylor\"];<br>\nnameList.unshift(\"Beyonce\",\"Lopez\");</p>\n\n<p>console.log(nameList);</p>", "options": [{"option": "[\"Beyonce\", \"Lopez\", \"John\", \"Peter\", \"Justin\", \"Taylor\"]", "correct": true}, {"option": "Uncaught ReferenceError: nameList is not defined", "correct": false}, {"option": "Undefined", "correct": false}, {"option": "[ \"John\", \"Peter\", \"Justin\", \"Taylor\", \"Beyonce\", \"Lopez\"]", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following strategies is used by the wound-wait scheme for deadlock prevention in databases?</p>", "options": [{"option": "When a transaction Ti requests the data item that is currently held by Tj, Ti is allowed to wait only if it has a timestamp smaller than that of Tj, otherwise Ti is rolled back.", "correct": false}, {"option": "When a transaction Ti requests the data item that is currently held by Tj, Ti is allowed to wait only if it has a timestamp larger than that of Tj, otherwise Tj is rolled back. ", "correct": true}, {"option": "When a transaction Ti requests the data item that is currently held by Tj, the transaction with the highest priority is executed and the lower priority transaction is held back.", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Three variables\u00a0are initialized in the\u00a0following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>type ClassType = [string, number, number, number];\nlet var1: ClassType = ['Red', 1,0,0];\nlet var2: [ string, number, number, number ]= ['Green', 0,1,0];\nlet var3 =['Blue', 0,0,1];</code></pre>\n\n<p>Which of these statements about this code is incorrect?\u00a0\u00a0</p>", "options": [{"option": "ClassType is an alias to tuple", "correct": false}, {"option": "All the three variables would compile to same javaScript type signature", "correct": false}, {"option": "ClassType is an array where type of the fixed number of elements is known", "correct": false}, {"option": "All the three variables are immutable", "correct": true}], "level": "Hard"}, {"question": "<p>What is the order of variables in Enum?<br>\n\u00a0</p>", "options": [{"option": "Ascending order", "correct": true}, {"option": "Descending order", "correct": false}, {"option": " Random order", "correct": false}, {"option": "depends on the order() method", "correct": false}], "level": "Easy"}, {"question": "<p>Which class does all the Enums extend?</p>\n\n<p>\u00a0</p>", "options": [{"option": " Object", "correct": false}, {"option": "Enums", "correct": false}, {"option": "Enum", "correct": true}, {"option": "EnumClass", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is an incorrect array declaration?</p>", "options": [{"option": " int arr[] = new int[5].\r\n", "correct": false}, {"option": "int [] arr = new int[5]", "correct": false}, {"option": "int arr[] = new int[5].\\", "correct": false}, {"option": "int arr[] = int [5] new", "correct": true}], "level": "Easy"}, {"question": "<p>Which component is responsible for converting bytecode into machine specific code?<br>\n\u00a0</p>", "options": [{"option": "JVM", "correct": true}, {"option": "JDK", "correct": false}, {"option": "JIT", "correct": false}, {"option": "JRE", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements are incorrect?<br>\n\u00a0</p>", "options": [{"option": " Equal to operator has least precedence", "correct": false}, {"option": "Brackets () have highest precedence", "correct": false}, {"option": "Division operator, /, has higher precedence than multiplication operator", "correct": true}, {"option": "Addition operator, +, and subtraction operator have equal precedence", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is necessary to specify at time of array initialization?<br>\n\u00a0</p>", "options": [{"option": " Row", "correct": true}, {"option": "Column", "correct": false}, {"option": "Both Row and Column", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>An array elements are always stored in ________ memory locations?<br>\n\u00a0</p>", "options": [{"option": "Sequential", "correct": true}, {"option": "Random", "correct": false}, {"option": "Sequential and Random", "correct": false}, {"option": "Binary search", "correct": false}], "level": "Easy"}, {"question": "<p>Generics does not work with?<br>\n<br>\n\u00a0</p>", "options": [{"option": "SET", "correct": false}, {"option": "LIST", "correct": false}, {"option": "ARRAY", "correct": true}, {"option": "TREE", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">. What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>1.  class string_class \n2.\t    {\n3.\t        public static void main(String args[])\n4.\t        {\n5.\t            String obj = \"I LIKE JAVA\";   \n6.\t            System.out.println(obj.length());\n7.\t        }\n8.\t    }\n</code></pre>", "options": [{"option": "9", "correct": true}, {"option": "10", "correct": false}, {"option": "11", "correct": false}, {"option": "12", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">What is the output of this program, Command line execution is done as \u2013 \u201cjava Output This is a command Line\u201d?</p>\n\n<pre class=\"prettyprint\"><code>1.\t    class Output \n2.\t    {\n3.\t        public static void main(String args[]) \n4.\t        {\n5.\t            System.out.print(\"args[0]\");\n6.\t        }\n7.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "java", "correct": true}, {"option": "Output", "correct": false}, {"option": "This", "correct": false}, {"option": "is", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>1.\t    class recursion \n2.\t    {\n3.\t        int fact(int n) \n4.\t        {\n5.\t            int result;\n6.\t            if (n == 1)\n7.\t                return 1;\n8.\t            result = fact(n - 1) * n;\n9.\t            return result;\n10.\t        }\n11.\t    } \n12.\t    class Output \n13.\t    {\n14.\t        public static void main(String args[]) \n15.\t        {\n16.\t            recursion obj = new recursion() ;\n17.\t            System.out.print(obj.fact(5));\n18.\t        }\n19.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "24", "correct": false}, {"option": "30", "correct": false}, {"option": "120", "correct": true}, {"option": "270", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">. What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class output \n2.\t    {\n3.\t        public static void main(String args[])\n4.\t        { \n5.\t           String s1 = \"Hello\";\n6.\t           String s2 = s1.replace('l','w');\n7.\t           System.out.println(s2);\n8.\t        }\n9.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hello", "correct": false}, {"option": "helwo", "correct": false}, {"option": "hewlo", "correct": false}, {"option": "hewwo", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class String_demo \n2.\t    {\n3.\t        public static void main(String args[])\n4.\t        {\n5.\t            char chars[] = {'a', 'b', 'c'};\n6.\t            String s = new String(chars);\n7.\t            System.out.println(s);\n8.\t        }\n9.\t   }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "abc", "correct": true}, {"option": "a", "correct": false}, {"option": "b", "correct": false}, {"option": "c", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>1.\t    class exception_handling \n2.\t    {\n3.\t        public static void main(String args[]) \n4.\t        {\n5.\t            try \n6.\t           {\n7.\t                int a, b;\n8.\t                b = 0;\n9.\t                a = 5 / b;\n10.\t                System.out.print(\"A\");\n11.\t            }\n12.\t            catch(ArithmeticException e) \n13.\t            {\n14.\t        \tSystem.out.print(\"B\");        \t\n15.\t            }\n16.\t        }\n17.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "CompilationError", "correct": false}, {"option": "NONE", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>    import java.util.*;\n           class Maps {\n        public static void main(String args[]) {\n            HashMap obj = new HashMap();\n            obj.put(\"A\", new Integer(1));\n            obj.put(\"B\", new Integer(2));\n            obj.put(\"C\", new Integer(3));\n            System.out.println(obj.get(\"B\"));\n        }\n    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "4", "correct": false}, {"option": "3", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>    class output {\n        public static void main(String args[])\n        { \n           StringBuffer s1 = new StringBuffer(\"Hello\");\n           StringBuffer s2 = s1.reverse();\n           System.out.println(s2);\n        }\n    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hello", "correct": false}, {"option": "olleH", "correct": true}, {"option": "HelloolleH", "correct": false}, {"option": "Helloo", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Observe the following code carefully and determine the result:</p>\n\n<pre class=\"prettyprint\"><code>62. Observe the following code carefully and determine the result:\nimport java.util.ArrayList;\nimport java.util.Iterator;\n\npublic class Test\n{ \n   public static void main(String args[])\n   { \n          ArrayList &lt;Integer&gt; al = new ArrayList &lt;Integer&gt; ();\n          al.add(5);\n          al.add(10);\n          al.add(15);\n          al.add(\"H\");\n          al.add(20);\n          al.add(25);\n          Iterator &lt;Integer&gt; i = al.iterator();\n          while(i.hasNext())\n                 System.out.println(i.next());\n   } \n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "5, 10, 15, H, 20, 25", "correct": false}, {"option": "5,10,15,20,25", "correct": false}, {"option": "run time error", "correct": false}, {"option": "compile time error", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Observe following code carefully and determine the result:</p>\n\n<pre class=\"prettyprint\"><code>class ShowValues\n{ \n       synchronized void printValues(int n)\n       {\n             for(int i=1; i&lt;=3; i++)\n             { \n                    System.out.println(n*i); \n                    try\n                    { \n                           Thread.sleep(500); \n                    }catch(Exception e){}\n             }        \n       } \n} \n        \nclass T1 extends Thread\n{ \n       ShowValues t; \n       T1(ShowValues t)\n       { \n             this.t=t; \n       } \n       public void run()\n       { \n             t.printValues(50); \n       }   \n} \nclass T2 extends Thread\n{ \n       ShowValues t; \n       T2(ShowValues t)\n       { \n             this.t=t; \n       } \n       public void run()\n       { \n             t.printValues(500); \n       } \n} \n        \n       public class Test\n       { \n       public static void main(String args[])\n       { \n             ShowValues object = new ShowValues();\n             T1 t1=new T1(object); \n                 T2 t2=new T2(object); \n                 t1.start(); \n                 t2.start(); \n          } \n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "50, 100, 150, 500, 1000, 1500", "correct": true}, {"option": "50, 500, 100, 1000, 150, 1500", "correct": false}, {"option": "1500, 1000, 500, 150, 100, 50", "correct": false}, {"option": "none", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class comma_operator \n2.\t    {\n3.\t        public static void main(String args[]) \n4.\t        {    \n5.\t             int sum = 0;\n6.\t             for (int i = 0, j = 0; i &lt; 5 &amp; j &lt; 5; ++i, j = i + 1)\n7.\t                 sum += i;\n8.\t \t     System.out.println(sum);\n9.\t        } \n10.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "5", "correct": false}, {"option": "6", "correct": true}, {"option": "7", "correct": false}, {"option": "14", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\"><strong>.</strong> What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class selection_statements \n2.\t    {\n3.\t        public static void main(String args[])\n4.\t        {\n5.\t            int var1 = 5; \n6.\t            int var2 = 6;\n7.\t            if ((var2 = 1) == var1)\n8.\t                System.out.print(var2);\n9.\t            else \n10.\t                System.out.print(++var2);\n11.\t        } \n12.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "2", "correct": true}, {"option": "1", "correct": false}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">. What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class array_output \n2.\t    {\n3.\t        public static void main(String args[]) \n4.\t        {\n5.\t            int array_variable[][] = {{ 1, 2, 3}, { 4 , 5, 6}, { 7, 8, 9}};\n6.\t            int sum = 0;\n7.\t            for (int i = 0; i &lt; 3; ++i)\n8.\t                for (int j = 0; j &lt;  3 ; ++j)\n9.\t                    sum = sum + array_variable[i][j];\n10.\t            System.out.print(sum / 5);\n11.\t        } \n12.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "8", "correct": false}, {"option": "9", "correct": false}, {"option": "10", "correct": true}, {"option": "11", "correct": false}], "level": "Easy"}, {"question": "<p style=\"text-align: justify;\">What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>1.\t    class evaluate \n2.\t    {\n3.\t        public static void main(String args[]) \n4.\t            {\n5.\t\t        int arr[] = new int[] {0 , 1, 2, 3, 4, 5, 6, 7, 8, 9};\n6.\t\t        int n = 6;\n7.\t                n = arr[arr[n] / 2];\n8.\t\t        System.out.println(arr[n] / 2);\n9.\t            } \n10.\t    }\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "3", "correct": false}, {"option": "0", "correct": false}, {"option": "6", "correct": false}, {"option": "1", "correct": true}], "level": "Easy"}, {"question": "<p>What would be the output of following code snippet?<br>\nint a = random.nextInt(15) + 1;<br>\n<br>\n\u00a0</p>", "options": [{"option": "Random number between 1 to 15, including 1 and 15", "correct": true}, {"option": "Random number between 1 to 15, excluding 15", "correct": false}, {"option": "Random number between 1 to 15, excluding 1", "correct": false}, {"option": "Random number between 1 to 15, excluding 1 and 15", "correct": false}], "level": "Easy"}, {"question": "<p>How many bits are used for generating random numbers?<br>\n<br>\n\u00a0</p>", "options": [{"option": "32", "correct": false}, {"option": "64", "correct": false}, {"option": "48", "correct": true}, {"option": "8", "correct": false}], "level": "Easy"}, {"question": "<p>\u00a0What is the return type of Math.random() method?<br>\n\u00a0</p>", "options": [{"option": " Integer", "correct": false}, {"option": "Double", "correct": true}, {"option": "String", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords is used by a class to use an interface defined previously?<br>\n<br>\n\u00a0</p>", "options": [{"option": "import", "correct": false}, {"option": "implements", "correct": true}, {"option": "Import", "correct": false}, {"option": "Implements", "correct": false}], "level": "Easy"}, {"question": "<p>Which of this class can be used to format dates and times?<br>\n<br>\n\u00a0</p>", "options": [{"option": "Date", "correct": true}, {"option": "SimpleDate", "correct": false}, {"option": "DateFormat", "correct": false}, {"option": "TimeFormat", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these class is implemented by FilterInputStream class?<br>\n<br>\n\u00a0</p>", "options": [{"option": "InputStream", "correct": true}, {"option": "InputOutputStream", "correct": false}, {"option": "BufferedInputStream", "correct": false}, {"option": "SequenceInputStream", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these method waits for the thread to terminate?<br>\n<br>\n\u00a0</p>", "options": [{"option": "sleep()", "correct": false}, {"option": "isAlive()", "correct": false}, {"option": "join()", "correct": true}, {"option": "stop()", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is a super class of all exception type classes?<br>\n<br>\n\u00a0</p>", "options": [{"option": "RuntimeExceptions", "correct": false}, {"option": "Throwable", "correct": true}, {"option": "String", "correct": false}, {"option": "Catchable", "correct": false}], "level": "Easy"}, {"question": "<p>What is the worst case complexity of accessing an element in ArrayList?<br>\n<br>\n\u00a0</p>", "options": [{"option": "O(n)", "correct": false}, {"option": "O(1)", "correct": true}, {"option": "O(nlogn)", "correct": false}, {"option": "O(logn)", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these method of class String is used to check whether a given object starts with a particular string literal?<br>\n<br>\n\u00a0</p>", "options": [{"option": "startsWith()", "correct": true}, {"option": "endsWith()", "correct": false}, {"option": "starts()", "correct": false}, {"option": "ends()", "correct": false}], "level": "Easy"}, {"question": "<p>If a class inheriting an abstract class does not define all of its function then it will be known as?</p>", "options": [{"option": "Abstract", "correct": true}, {"option": "Static class", "correct": false}, {"option": "Base class", "correct": false}, {"option": "None", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is correct way of inheriting class A by class B?<br>\n<br>\n\u00a0</p>", "options": [{"option": "class B + class A {}", "correct": false}, {"option": "class B inherits class A {}", "correct": false}, {"option": "class B extends A {}", "correct": true}, {"option": "class B extends class A {}", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords can be used to prevent inheritance of a class?<br>\n<br>\n\u00a0</p>", "options": [{"option": "super", "correct": false}, {"option": "constant", "correct": false}, {"option": "class", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these is supported by method overriding in Java?</p>\n\n<p>\u00a0</p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Polymorphism", "correct": true}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>What is use of interpreter?<br>\n<br>\n\u00a0</p>", "options": [{"option": "They convert bytecode to machine language code", "correct": false}, {"option": "They read high level code and execute them", "correct": true}, {"option": "They are intermediated between JIT and JVM", "correct": false}, {"option": " It is a synonym for JIT", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords is used to refer to member of base class from a subclass?<br>\n<br>\n\u00a0</p>", "options": [{"option": "upper", "correct": false}, {"option": "super", "correct": true}, {"option": "this", "correct": false}, {"option": "final", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is a correct statement about args in this line of code?<br>\npublic static void main(String args[])</p>", "options": [{"option": "args is a String", "correct": false}, {"option": "args is a Character", "correct": false}, {"option": "args is an array of String", "correct": true}, {"option": "args in an array of Character", "correct": false}], "level": "Easy"}, {"question": "<p>What is the process of defining a method in terms of itself, that is a method that calls itself?<br>\n<br>\n\u00a0</p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Recursion", "correct": true}, {"option": "Encapsulation", "correct": false}, {"option": "Abstraction", "correct": false}], "level": "Easy"}, {"question": "<p>What would be the behaviour if one parameterized constructor is explicitly defined?</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Compilation succeeds", "correct": false}, {"option": "Compilation succeeds but at the time of creating object using default constructor, it throws compilation error", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these class is superclass of every class in Java?<br>\n<br>\n\u00a0</p>", "options": [{"option": "String class", "correct": false}, {"option": "Abstract class", "correct": false}, {"option": "Object class", "correct": true}, {"option": "ArrayList class", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm; text-align: justify;\">What is the output of below code snippet?</p>\n\n<pre class=\"prettyprint\"><code>1.\tpublic class Test \n2.\t{\n3.\t\tpublic static void main(String[] args) \n4.\t        {\n5.\t\t\tSet s = new HashSet();\n6.\t\t\ts.add(new Long(10));\n7.\t\t\ts.add(new Integer(10));\n8.\t\t\tfor(Object object : s)\n9.\t                {\n10.\t\t\t    System.out.println(\"test - \"+object);\n11.\t\t\t}\n12.\t\t}\n13.\t}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": ") Test \u2013 10", "correct": false}, {"option": "Test \u2013 10\r\nTest \u2013 10\r\n", "correct": true}, {"option": "Runtime Exception", "correct": false}, {"option": "Compilation Failure", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Which statement is true regarding an object?</strong></p>", "options": [{"option": "An object is what classes instantiated are from", "correct": false}, {"option": "An object is an instance of a class", "correct": true}, {"option": "An object is a variable", "correct": false}, {"option": "An object is not an instance of a class.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 36pt; margin-right: 0cm;\">When is the B object, created in line 3, eligible for garbage collection?</p>\n\n<pre class=\"prettyprint\"><code>void start() {  \n    A a = new A(); \n    B b = new B(); \n    a.s(b);  \n    b = null; /* Line 5 */\n    a = null;  /* Line 6 */\n    System.out.println(\"start completed\"); /* Line 7 */\n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "after line 5", "correct": false}, {"option": "after line 6", "correct": false}, {"option": "after line 7", "correct": false}, {"option": "There is no way to be absolutely certain.", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 2.4pt; margin-right: 2.4pt; text-align: justify;\">What are Wrapper classes?</p>", "options": [{"option": "These are classes that wraps functionality of an existing class.", "correct": false}, {"option": "These are classes that allow primitive types to be accessed as objects", "correct": true}, {"option": "Both of the above.", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p>When static binding occurs?</p>", "options": [{"option": "Static binding occurs during runtime.", "correct": false}, {"option": "Static binding occurs during load time.\r\n", "correct": false}, {"option": "Static binding occurs during Compile time.", "correct": true}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 2.4pt; margin-right: 2.4pt; text-align: justify;\">What is local variable?</p>", "options": [{"option": "Variables defined inside methods, constructors or blocks are called local variables", "correct": true}, {"option": "Variables defined outside methods, constructors or blocks are called local variables.", "correct": false}, {"option": "Static variables defined outside methods, constructors or blocks are called local variables.", "correct": false}, {"option": "None of the above.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 36pt; margin-right: 0cm;\"><strong>What is the output of the following program?</strong></p>\n\n<pre class=\"prettyprint\"><code>class Helper \n{ \n    private int data; \n    private Helper() \n    { \n        data = 5; \n    } \n} \npublic class Test \n{ \n    public static void main(String[] args) \n    { \n        Helper help = new Helper(); \n        System.out.println(help.data); \n    } \n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "5", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "10", "correct": false}, {"option": "Runtime error", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 36pt; margin-right: 0cm;\"><strong>What is the output of the following program?</strong></p>\n\n<pre class=\"prettyprint\"><code>class Temp \n{ \n    private Temp(int data) \n    { \n        System.out.printf(\" Constructor called \"); \n    } \n    protected static Temp create(int data) \n    { \n        Temp obj = new Temp(data); \n        return obj; \n    } \n    public void myMethod() \n    { \n        System.out.printf(\" Method called \"); \n    } \n} \n  \npublic class Test \n{ \n    public static void main(String[] args) \n    { \n        Temp obj = Temp.create(20); \n        obj.myMethod(); \n    } \n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Constructor called Method called", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "none", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 36pt; margin-right: 0cm;\"><strong>What is the output of the following program?</strong></p>\n\n<pre class=\"prettyprint\"><code>public class Test \n{ \n    public Test() \n    { \n        System.out.printf(\"1\"); \n        new Test(10); \n        System.out.printf(\"5\"); \n    } \n    public Test(int temp) \n    { \n        System.out.printf(\"2\"); \n        new Test(10, 20); \n        System.out.printf(\"4\"); \n    } \n    public Test(int data, int temp) \n    { \n        System.out.printf(\"3\"); \n          \n    } \n      \n    public static void main(String[] args) \n    { \n        Test obj = new Test(); \n          \n    } \n      \n} \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "12345", "correct": true}, {"option": "15", "correct": false}, {"option": "12", "correct": false}, {"option": "13", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Which of the following does not belong: If a class inherits from some other class, it should</strong></p>", "options": [{"option": "Over-ride all the methods of its parent class", "correct": true}, {"option": "Make sure the result \u201ccontains\u201d its base class.", "correct": false}, {"option": "Over-ride or add the minimum to accomplish the derived class\u2019 purpose", "correct": false}, {"option": "Make use of the parent class\u2019s capabilities", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Given a class named student, which of the following is a valid constructor declaration for the class?</strong></p>", "options": [{"option": "Student (student s) { }", "correct": true}, {"option": "Student student ( ) { }", "correct": false}, {"option": "Private final student ( ) { }", "correct": false}, {"option": "Static void student(){ }", "correct": false}], "level": "Easy"}, {"question": "<p><strong>The concept of multiple inheritances is implemented in Java by</strong></p>\n\n<p>\u00a0</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">I. Extending two or more classes.<br>\nII. Extending one class and implementing one or more interfaces.<br>\nIII. Implementing two or more interfaces.</p>", "options": [{"option": "Only (II) ", "correct": false}, {"option": "(I) and (II) ", "correct": false}, {"option": "(II) and (III)", "correct": true}, {"option": "Only (I) ", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the error in the following class definitions?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">Abstract class xy<br>\n{<br>\nabstract sum (int x, int y) { }<br>\n}</p>", "options": [{"option": "Class header is not defined properly.", "correct": false}, {"option": "Constructor is not defined.", "correct": false}, {"option": "Method is not defined properly", "correct": true}, {"option": "No error.", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of these field declarations are legal within the body of an interface?</p>", "options": [{"option": "Private final static int answer = 42", "correct": false}, {"option": "public static int answer=42", "correct": true}, {"option": "final static answer =42", "correct": false}, {"option": "int answer", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">A package is a collection of</p>", "options": [{"option": "Classes ", "correct": false}, {"option": "Interfaces ", "correct": false}, {"option": "Editing tools", "correct": false}, {"option": "Classes and interfaces ", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Given the code</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">String s1 = \u201d yes\u201d ;<br>\nString s2 = \u201d yes \u201d ;<br>\nString s3 = new String ( s1);</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following would equate to true?</p>", "options": [{"option": " s1 == s2 ", "correct": true}, {"option": "s1 = s2 ", "correct": false}, {"option": "s3 == s1 ", "correct": false}, {"option": "s3=s1 ", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the result of compiling the following code:</p>\n\n<p>public class SuperClass {<br>\n\u00a0\u00a0 \u00a0public int doIt(String str, Integer... data)throws Exception{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0String signature = \"(String, Integer[])\";<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(str + \" \" + signature);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return 1;<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\npublic class SubClass extends SuperClass{<br>\n\u00a0\u00a0 \u00a0public int doIt(String str, Integer... data)<br>\n\u00a0\u00a0 \u00a0{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0String signature = \"(String, Integer[])\";<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"Overridden: \" + str + \" \" +<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0signature);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return 0;<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public static void main(String... args)<br>\n\u00a0\u00a0 \u00a0{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0SuperClass sb = new SubClass();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0sb.doIt(\"hello\", 3);<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\n\u00a0</p>", "options": [{"option": "Overridden: hello (String, Integer[])", "correct": false}, {"option": "hello (String, Integer[])", "correct": false}, {"option": "Compilation fails", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of bellow code ?</p>\n\n<p>public class Bean{<br>\n\u00a0\u00a0 \u00a0private String str;<br>\n\u00a0\u00a0 \u00a0Bean(String str ){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0this.str = str;<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public String getStr() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return str;<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public boolean equals(Object o){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0if (!(o instanceof Bean)) {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return false;<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return ((Bean) o).getStr().equals(str);<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public int hashCode() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return 12345;<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public String toString() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return str;<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\nimport java.util.HashSet;<br>\npublic class Test {<br>\n\u00a0\u00a0 \u00a0public static void main(String ... sss) {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0HashSet myMap = new HashSet();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0String s1 = new String(\"das\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0String s2 = new String(\"das\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Bean s3 = new Bean(\"abcdef\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Bean s4 = new Bean(\"abcdef\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0myMap.add(s1);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0myMap.add(s2);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0myMap.add(s3);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0myMap.add(s4);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(myMap);<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\n\u00a0</p>", "options": [{"option": "das abcdef", "correct": true}, {"option": "das abcdef das abcdef", "correct": false}, {"option": "das das abcdef abcdef", "correct": false}, {"option": "das", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p>1. public class Test {</p>\n\n<p>2. \u00a0\u00a0\u00a0\u00a0public static void main(String[] args){</p>\n\n<p>3. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0byte i = 128;</p>\n\n<p>4. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i);</p>\n\n<p>5. \u00a0\u00a0\u00a0\u00a0}</p>\n\n<p>6. }</p>", "options": [{"option": "128", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation fails with an error at line 3", "correct": true}, {"option": "Compilation fails with an error at line 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p>1. public class Test {</p>\n\n<p>2. \u00a0\u00a0\u00a0\u00a0static int i =5;</p>\n\n<p>3. \u00a0\u00a0\u00a0\u00a0public static void main(String... args) {</p>\n\n<p>4. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i++);</p>\n\n<p>5. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(i);</p>\n\n<p>6. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(++i);</p>\n\n<p>7. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(++i+i++);</p>\n\n<p>8. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\n<p>9. }</p>", "options": [{"option": "5 6 7 16\r\n", "correct": true}, {"option": "6 6 6 16", "correct": false}, {"option": "6 6 7 16\r\n", "correct": false}, {"option": "5 6 6 16", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p><br>\npublic class A {<br>\n\u00a0\u00a0 \u00a0public void printValue(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"A\");<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\npublic class B extends A {<br>\n\u00a0\u00a0 \u00a0public void printValue(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"B\");<br>\n\u00a0\u00a0 \u00a0}<br>\n}</p>\n\n<p>1.\u00a0\u00a0\u00a0\u00a0\u00a0public class Test {<br>\n2. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main(String... args) {<br>\n3.\u00a0\u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A b = new B();<br>\n4. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0newValue(b);<br>\n5. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br>\n6. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void newValue(A a){<br>\n7. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if(a instanceof B){<br>\n8. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0((B)a).printValue();<br>\n9. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}<br>\n10. \u00a0\u00a0\u00a0\u00a0}<br>\n11. }</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": true}, {"option": "Compilation fails with an error at line 4", "correct": false}, {"option": "Compilation fails with an error at line 8", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the bellow code?</p>\n\n<p>import java.util.Iterator;<br>\nimport java.util.Set;<br>\nimport java.util.TreeSet;<br>\npublic class Test {<br>\n\u00a0\u00a0 \u00a0public static void main(String... args) {</p>\n\n<p>\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Set s = new TreeSet();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0s.add(\"7\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0s.add(9);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Iterator itr = s.iterator();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0while (itr.hasNext())<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.print(itr.next() + \" \");<br>\n\u00a0\u00a0 \u00a0}<br>\n}</p>", "options": [{"option": "Compile error", "correct": false}, {"option": "Runtime Exception", "correct": true}, {"option": "7 9", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p>class A extends Thread{<br>\n\u00a0\u00a0 \u00a0int count = 0;<br>\n\u00a0\u00a0 \u00a0public void run(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"run\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0synchronized (this) {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0for(int i =0; i &lt; 50 ; i++){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0count = count + i;<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0notify();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\npublic class Test{<br>\n\u00a0\u00a0 \u00a0public static void main(String argv[]) {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0A a = new A();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0a.start();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0synchronized (a) {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"waiting\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0try{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0a.wait();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}catch(InterruptedException e){</p>\n\n<p>\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(a.count);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}</p>\n\n<p>\u00a0\u00a0 \u00a0}</p>\n\n<p>}</p>", "options": [{"option": "waiting run 25", "correct": false}, {"option": "waiting run 0", "correct": false}, {"option": "waiting run 1225 OR run waiting 1225", "correct": true}, {"option": "Compilation fails", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p><br>\npublic class B {<br>\n\u00a0\u00a0 \u00a0public static synchronized void printName(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0try{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"printName\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread.sleep(5*1000);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}catch(InterruptedException e){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public synchronized void printValue(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"printValue\");<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\npublic class Test extends Thread{<br>\n\u00a0\u00a0 \u00a0B b = new B();<br>\n\u00a0\u00a0 \u00a0public static void main(String argv[]) throws Exception{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Test t = new Test();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread t1 = new Thread(t,\"t1\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread t2 = new Thread(t,\"t2\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0t1.start();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0t2.start();<br>\n\u00a0\u00a0 \u00a0}</p>\n\n<p>\u00a0\u00a0 \u00a0public void run(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0if(Thread.currentThread().getName().equals(\"t1\")){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0b.printName();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}else{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0b.printValue();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0}</p>\n\n<p>}</p>", "options": [{"option": "print : printName , then wait for 5 seconds then print : printValue ", "correct": false}, {"option": "print : printName then print : printValue", "correct": true}, {"option": "print : printName then wait for 5 minutes then print : printValue", "correct": false}, {"option": "Compilation succeed but Runtime Exception", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p>public class B {<br>\n\u00a0\u00a0 \u00a0public synchronized void printName(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0try{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"printName\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread.sleep(5*1000);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}catch(InterruptedException e){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0public synchronized void printValue(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"printValue\");<br>\n\u00a0\u00a0 \u00a0}<br>\n}<br>\npublic class Test extends Thread{<br>\n\u00a0\u00a0 \u00a0B b = new B();<br>\n\u00a0\u00a0 \u00a0public static void main(String argv[]) throws Exception{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Test t = new Test();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread t1 = new Thread(t,\"t1\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0Thread t2 = new Thread(t,\"t2\");<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0t1.start();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0t2.start();<br>\n\u00a0\u00a0 \u00a0}</p>\n\n<p>\u00a0\u00a0 \u00a0public void run(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0if(Thread.currentThread().getName().equals(\"t1\")){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0b.printName();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}else{<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0b.printValue();<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}<br>\n\u00a0\u00a0 \u00a0}</p>\n\n<p>}<br>\n\u00a0</p>", "options": [{"option": "print : printName , then wait for 5 seconds then print : printValue ", "correct": true}, {"option": "print : printName then print : printValue", "correct": false}, {"option": "print : printName then wait for 5 minutes then print : printValue", "correct": false}, {"option": "Compilation succeed but Runtime Exception", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output for the below code ?</p>\n\n<p>\u00a0</p>\n\n<p><br>\nclass A implements Runnable{<br>\n\u00a0\u00a0 \u00a0public void run(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0System.out.println(\"run-a\");<br>\n\u00a0\u00a0 \u00a0}<br>\n}</p>\n\n<p>1. \u00a0\u00a0\u00a0\u00a0public class Test {</p>\n\n<p>2. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main(String... args) {</p>\n\n<p>3. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0A a = new A();</p>\n\n<p>4. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Thread t = new Thread(a);</p>\n\n<p>5. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.start();</p>\n\n<p>6. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0t.start();</p>\n\n<p>7. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\n<p>8. \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>", "options": [{"option": "run-a", "correct": false}, {"option": "run-a run-a", "correct": false}, {"option": "Compilation fails with an error at line 6", "correct": false}, {"option": "Compilation succeed but Runtime Exception", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output for the below code ?\u00a0</p>\n\n<pre class=\"prettyprint\"><code>public class MainClass {\n\n\tpublic static void main(String[] args) {\n\t\tInsuranceClass insuranceCls = new InsuranceClass() {\n\t\t\t\n\t\t\t@Override\n\t\t\tprotected String getInsuranceProductName() {\n\t\t\t\treturn \"CUSTOM PRODUCT\";\n\t\t\t}\n\t\t};\n\t\t\n\t\tSystem.out.println(insuranceCls.getInsuranceProductName());\n\t}\n}\n\npublic abstract class InsuranceClass extends Object  {\n\t\n\t/**\n\t * Gets Insurance Product Name\n\t * \n\t * @return Insurance Normalizaed Product name\n\t */\n\tprotected abstract String getInsuranceProductName();\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Runtime Exception", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "CUSTOM PRODUCT", "correct": true}, {"option": "BLANK", "correct": false}], "level": "Easy"}, {"question": "<p><strong>In\u00a0Java, a thread can be created by..........?</strong></p>", "options": [{"option": "Extending the thread class.", "correct": false}, {"option": "Implementing Runnable interface.", "correct": false}, {"option": "Both of the above", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p><strong><img alt=\"\" height=\"351\" src=\"https://lh5.googleusercontent.com/z7q5QLZ4jLJO7SDiWJkVpr_kz3zm-hEqlv40v-NzsvFW94xURJ4eOxSUFROj1S9ICWf1CASG52CahIW0GqPZxPfKG2I7fb0OlDnxyZmzXZbS7TNmT6H567Bv1YDmVlIgdGoN52X8\" width=\"624\"></strong></p>", "options": [{"option": "long", "correct": false}, {"option": "int", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Compilation clean but throws RuntimeException", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Which of the following supports the concept of hierarchical classification?</strong></p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Abstraction", "correct": false}, {"option": "Inheritance", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Which of the following concept is often expressed by the phrase, \u2018One interface, multiple methods\u2019?</strong></p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Polymorphism", "correct": true}, {"option": "Inheritance", "correct": false}, {"option": "Encapsulation", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the minimum value of \u2018short\u2019 data type?</strong></p>", "options": [{"option": "-32,768", "correct": true}, {"option": "-127", "correct": false}, {"option": "-2,147,483,648", "correct": false}, {"option": "-128", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the output of this program?</strong></p>\n\n<p>\u00a0</p>\n\n<p><strong>class Test {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0int a;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0public int b;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0private int c;</strong></p>\n\n<p><strong>}</strong></p>\n\n<p><strong>class AcessTest {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0public static void main(String args[])</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0{</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Test ob = new Test();</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.a = 10;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.b = 20;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.c = 30;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\" Output :a, b, and c\" + ob.a + \" \" + ob.b + \" \" + ob.c);</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>}</strong></p>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Output : a, b and c 10 20 30", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the output of this program?</strong></p>\n\n<p><strong>class A {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0int i, j;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0void showij() {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"i and j:\" + i +\" \"+j);</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>}</strong></p>\n\n<p><strong>class B extends A</strong></p>\n\n<p><strong>{</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0int k;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0void showk()</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0{</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"k: \"+ k);</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0void sum() {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"i + j + k:\" + (i + j + k));</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>} </strong></p>\n\n<p><strong>class SimpleInheritance {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0public static void main(String args[])</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0{ \u00a0\u00a0\u00a0</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0B subob = new B();</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subob.i = 5;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subob.j = 6;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subob.k = 9;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\"The contents are\");</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subob.showk();</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0subob.sum();</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>}</strong></p>", "options": [{"option": "Run-time error", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Output: The contents are k: 9", "correct": true}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>\n1. public class A {\n2. int add(int i, int j){\n3. return i+j;\n4. }\n5.}\n6.public class B extends A{\n7. public static void main(String argv[]){\n8. short s = 9;\n9. System.out.println(add(s,6));\n10. }\n11.}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compile fail due to error on line no 2", "correct": false}, {"option": "Compile fail due to error on line no 8", "correct": false}, {"option": "Compile fail due to error on line no 9", "correct": true}, {"option": "15", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public class A {\n int k;\n boolean istrue;\n static int p;\n public void printValue() {\n  System.out.print(k);\n  System.out.print(istrue);\n  System.out.print(p);\n }\n}\npublic class Test{\n public static void main(String argv[]){\n\n A a = new A();\n\n a.printValue();\n }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0 false 0", "correct": true}, {"option": "0 true 0", "correct": false}, {"option": "0 0 0", "correct": false}, {"option": "Compile error - static variable must be initialized before use", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public class Test{\nint _$;\nint $7;\nint do;\n public static void main(String argv[]){\n\n\n Test test = new Test();\n test.$7=7;\n test.do=9;\n\n System.out.println(test.$7);\n System.out.println(test.do);\n System.out.println(test._$);\n\n }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "7 9 0", "correct": false}, {"option": "7 0 0", "correct": false}, {"option": "Compile error - $7 is not valid identifier", "correct": false}, {"option": "Compile error - do is not valid identifier", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>package com;\nclass Animal {\n public void printName(){\n System.out.println(\"Animal\");\n }\n}\n\npackage exam;\nimport com.Animal;\npublic class Cat extends Animal {\n public void printName(){\n System.out.println(\"Cat\");\n }\n}\n\npackage exam;\nimport com.Animal;\npublic class Test {\npublic static void main(String[] args){\n Animal a = new Cat();\n a.printName();\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Animal", "correct": false}, {"option": "Cat", "correct": false}, {"option": "Animal Cat", "correct": false}, {"option": "Compile Error", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public class A {\nint i = 10;\npublic void printValue() {\nSystem.out.println(\"Value-A\");\n};\n}\n\npublic class B extends A{\nint i = 12;\npublic void printValue() {\nSystem.out.print(\"Value-B\");\n}\n}\npublic class Test{\n public static void main(String argv[]){\n\n A a = new B();\n a.printValue();\n System.out.println(a.i);\n\n }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Value-B 11", "correct": false}, {"option": "Value-B 10", "correct": true}, {"option": "Value-A 10", "correct": false}, {"option": "Value-A 11", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the following piece of code?</p>\n\n<p><strong><img alt=\"\" height=\"351\" src=\"https://lh5.googleusercontent.com/z7q5QLZ4jLJO7SDiWJkVpr_kz3zm-hEqlv40v-NzsvFW94xURJ4eOxSUFROj1S9ICWf1CASG52CahIW0GqPZxPfKG2I7fb0OlDnxyZmzXZbS7TNmT6H567Bv1YDmVlIgdGoN52X8\" width=\"624\"></strong></p>", "options": [{"option": "long", "correct": false}, {"option": "int", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "Compilation clean but throws RuntimeException", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Which of the following supports the concept of hierarchical classification?</strong></p>", "options": [{"option": "Polymorphism", "correct": false}, {"option": "Encapsulation", "correct": false}, {"option": "Abstraction", "correct": false}, {"option": "Inheritance", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Which of the following concept is often expressed by the phrase, \u2018One interface, multiple methods\u2019?</strong></p>", "options": [{"option": "Abstraction", "correct": false}, {"option": "Polymorphism", "correct": true}, {"option": "Inheritance", "correct": false}, {"option": "Encapsulation", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the minimum value of \u2018short\u2019 data type?</strong></p>", "options": [{"option": "-32,768", "correct": true}, {"option": "-127", "correct": false}, {"option": "-2,147,483,648", "correct": false}, {"option": "-128", "correct": false}], "level": "Easy"}, {"question": "<p><strong>What is the output of this program?</strong></p>\n\n<p>\u00a0</p>\n\n<p><strong>class Test {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0int a;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0public int b;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0private int c;</strong></p>\n\n<p><strong>}</strong></p>\n\n<p><strong>class AcessTest {</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0public static void main(String args[])</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0{</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0Test ob = new Test();</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.a = 10;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.b = 20;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0ob.c = 30;</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.println(\" Output :a, b, and c\" + ob.a + \" \" + ob.b + \" \" + ob.c);</strong></p>\n\n<p><strong>\u00a0\u00a0\u00a0}</strong></p>\n\n<p><strong>}</strong></p>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "Output : a, b and c 10 20 30", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public enum Test {\nBREAKFAST(7, 30), LUNCH(12, 15), DINNER(19, 45);\nprivate int hh;\nprivate int mm;\nTest(int hh, int mm) {\nassert (hh &gt;= 0 &amp;&amp; hh &lt;= 23) : \"Illegal hour.\";\nassert (mm &gt;= 0 &amp;&amp; mm &lt;= 59) : \"Illegal mins.\";\nthis.hh = hh;\nthis.mm = mm;\n}\npublic int getHour() {\nreturn hh;\n}\npublic int getMins() {\nreturn mm;\n}\npublic static void main(String args[]){\nTest t = new BREAKFAST;\nSystem.out.println(t.getHour() +\":\"+t.getMins());\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "7:30", "correct": false}, {"option": "Compile Error - an enum cannot be instantiated using the new operator.", "correct": true}, {"option": "12:30", "correct": false}, {"option": "19:45", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public class A {\n static{System.out.println(\"static\");}\n{ System.out.println(\"block\");}\npublic A(){\nSystem.out.println(\"A\");\n}\npublic static void main(String[] args){\nA a = new A();\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A block static", "correct": false}, {"option": "static block A", "correct": true}, {"option": "static A", "correct": false}, {"option": "A", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>1. public class Test {\n2. public static void main(String[] args){\n3. int i = 010;\n4. int j = 07;\n5. System.out.println(i);\n6. System.out.println(j);\n7. }\n8. }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "8 7", "correct": true}, {"option": "10 7", "correct": false}, {"option": "Compilation fails with an error at line 3", "correct": false}, {"option": "Compilation fails with an error at line 5", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>1. public class Test {\n2. public static void main(String[] args){\n3. byte b = 6;\n4. b+=8;\n5. System.out.println(b);\n6. b = b+7;\n7. System.out.println(b);\n8. }\n9. }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "14 21", "correct": false}, {"option": "14 13", "correct": false}, {"option": ".Compilation fails with an error at line 6", "correct": true}, {"option": ".Compilation fails with an error at line 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>1. public class Test {\n2. public static void main(String[] args){\n3. byte b = 6;\n4. b+=8;\n5. System.out.println(b);\n6. b = b+7;\n7. System.out.println(b);\n8. }\n9. }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "14 21", "correct": false}, {"option": "14 13", "correct": false}, {"option": "Compilation fails with an error at line 6", "correct": true}, {"option": "Compilation fails with an error at line 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>public class Test {\npublic static void main(String[] args){\nString value = \"abc\";\nchangeValue(value);\nSystem.out.println(value);\n}\npublic static void changeValue(String a){\na = \"xyz\";\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "abc", "correct": true}, {"option": "xyz", "correct": false}, {"option": "Compilation fails", "correct": false}, {"option": "Compilation clean but no output", "correct": false}], "level": "Easy"}, {"question": "<p>What happens when the following code is compiled and run. Select the one correct answer.</p>\n\n<pre class=\"prettyprint\"><code>for(int i = 2; i &lt; 4; i++)\n for(int j = 2; j &lt; 4; j++)\n if(i &lt; j)\n assert i!=j : i; </code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The class compiles and runs, but does not print anything.", "correct": true}, {"option": "The number 2 gets printed with AssertionError", "correct": false}, {"option": "compile error", "correct": false}, {"option": "The number 3 gets printed with AssertionError", "correct": false}], "level": "Medium"}, {"question": "<p>Is this code create new file name a.txt ?</p>\n\n<pre class=\"prettyprint\"><code>try{\nFile f = new File(\"a.txt\");\n}catch(Exception e){\n}catch(IOException io){\n} </code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "True", "correct": false}, {"option": "False", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the below code can be insert at line 7 to make clean compilation ?</p>\n\n<pre class=\"prettyprint\"><code>class A {\nA(String s) {\n}\nA() {\n}\n}\n1. class B extends A {\n2. B() { }\n3. B(String s) {\n4. super(s);\n5. }\n6. void test() {\n7. // insert code here\n8. }\n9. }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A a = new B();", "correct": true}, {"option": "A a = new B(5);", "correct": false}, {"option": "A a = new A(String s);", "correct": false}, {"option": "All of the above", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output for the below code ?</p>\n\n<pre class=\"prettyprint\"><code>interface A {\npublic void printValue();\n}\n1. public class Test{\n2. public static void main (String[] args){\n3. A a1 = new A() {\n4. public void printValue(){\n5. System.out.println(\"A\");\n6. }\n7. };\n8. a1.printValue();\n9. }\n10. }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation fails due to an error on line 3", "correct": false}, {"option": "A", "correct": true}, {"option": "Compilation fails due to an error on line 8", "correct": false}, {"option": "null", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these classes is not related to input and output stream in terms of functioning?</p>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "InputStream", "correct": false}, {"option": "Writer", "correct": false}, {"option": "File", "correct": true}, {"option": "Reader", "correct": false}], "level": "Easy"}, {"question": "<p>Which operator is used to invert all the digits in a binary representation of a number?</p>", "options": [{"option": "<<<", "correct": false}, {"option": "~", "correct": true}, {"option": ">>>", "correct": false}, {"option": "^", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements are incorrect?<br>\na) The left shift operator, &lt;&lt;, shifts all of the bits in a value to the left specified number of times<br>\nb) The right shift operator, &gt;&gt;, shifts all of the bits in a value to the right specified number of times<br>\nc) The left shift operator can be used as an alternative to multiplying by 2<br>\nd) The right shift operator automatically fills the higher order bits with 0</p>", "options": [{"option": "a", "correct": false}, {"option": "b", "correct": false}, {"option": "c", "correct": false}, {"option": "d", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<p>\u00a0 class bitwise_operator\u00a0{<br>\n\u00a0 \u00a0 \u00a0 \u00a0 public static void main(String args[])\u00a0\u00a0{ \u00a0 \u00a0<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int a = 3;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int b = 6;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int c = a | b;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int d = a &amp; b; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0System.out.println(c + \" \" \u00a0+ d);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0<br>\n\u00a0 \u00a0 }</p>", "options": [{"option": "7 2", "correct": true}, {"option": "7 7", "correct": false}, {"option": "7 5", "correct": false}, {"option": " 5 2", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<p>class leftshift_operator\u00a0<br>\n\u00a0 \u00a0 {<br>\n\u00a0 \u00a0 \u00a0 \u00a0 public static void main(String args[])\u00a0<br>\n\u00a0 \u00a0 \u00a0 \u00a0 { \u00a0 \u00a0 \u00a0 \u00a0<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte x = 64;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0int i;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0byte y;\u00a0<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0i = x &lt;&lt; 2;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0y = (byte) (x &lt;&lt; 2);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0System.out.print(i + \" \" + y);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 }\u00a0<br>\n\u00a0 \u00a0 }</p>", "options": [{"option": "0 64", "correct": false}, {"option": "64 0", "correct": false}, {"option": "0 256", "correct": false}, {"option": "256 0", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following program ?</p>\n\n<p>import java.util.List;<br>\nimport java.util.ArrayList;</p>\n\n<p>public class DemoTest {</p>\n\n<p>\u00a0 \u00a0 public static void main(String[] args) {</p>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 List&lt;Integer&gt; integerList = new ArrayList&lt;&gt;();<br>\n\u00a0 \u00a0 \u00a0 \u00a0 for (int i = 0; i &lt;= 100; i++) {<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 integerList.add(i);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 }</p>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 integerList.stream().filter(integer -&gt; integer % 2 == 0);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 integerList.forEach(System.out::println);<br>\n\u00a0 \u00a0 }<br>\n}</p>", "options": [{"option": "Print all the even NUMBER between 0 to 100", "correct": false}, {"option": "Print all the odd NUMBER between 0 to 100", "correct": false}, {"option": "Print all NUMBER between 0 to 100", "correct": true}, {"option": "compile-time Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following program ?</p>\n\n<p>import java.util.PriorityQueue;</p>\n\n<p>public class PriorityQueueQuestion {</p>\n\n<p>\u00a0 \u00a0 public static void main(String[] args) {</p>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 PriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;&gt;();</p>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 queue.add(11);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 queue.add(10);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 queue.add(22);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 queue.add(5);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 queue.add(12);<br>\n\u00a0 \u00a0 \u00a0 \u00a0 queue.add(2);</p>\n\n<p>\u00a0 \u00a0 \u00a0 \u00a0 while (queue.isEmpty() == false) {<br>\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 System.out.printf(\"%d \", queue.remove());<br>\n\u00a0 \u00a0 \u00a0 \u00a0 }<br>\n\u00a0 \u00a0 }<br>\n}</p>", "options": [{"option": "2 12 5 22 10 11", "correct": false}, {"option": "2 5 10 11 12 22", "correct": true}, {"option": "22 12 11 10 5 2", "correct": false}, {"option": "11 10 22 5 12 2 ", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following program ?</p>\n\n<p>1. public class TestNumber {<br>\n2. \u00a0 \u00a0 public static void main(String[] args) {<br>\n3. \u00a0 \u00a0 \u00a0 \u00a0 int i = 010;<br>\n4. \u00a0 \u00a0 \u00a0 \u00a0 int j = 07;<br>\n5.\u00a0<br>\n6. \u00a0 \u00a0 \u00a0 \u00a0 System.out.println(i);<br>\n7. \u00a0 \u00a0 \u00a0 \u00a0System.out.println(j);<br>\n\u00a0 \u00a0 }<br>\n}</p>", "options": [{"option": "8 7", "correct": true}, {"option": "10 7", "correct": false}, {"option": "Compilation fails with an error at line no 3", "correct": false}, {"option": "Compilation fails with an error at line no 4", "correct": false}], "level": "Easy"}, {"question": "<p>which of the following JavaScript code snippets will create an alert box containing \"Hello John Doe\"?</p>\n\n<p>a&gt;</p>\n\n<p>var Person = function(firstName, lastName, age) {<br>\n\u00a0\u00a0 \u00a0this.firstName = firstName;<br>\n\u00a0\u00a0 \u00a0this.lastName = lastName;<br>\n\u00a0\u00a0 \u00a0this.age = age;<br>\n}</p>\n\n<p>person = new Person(\"John\", \"Doe\", \"50\")\u00a0<br>\nPerson.prototype.sayHello = function() {<br>\n\u00a0\u00a0 \u00a0alert(\"Hello \" + this.firstName + \" \" + this.lastName)<br>\n}</p>\n\n<p>person.sayHello();</p>\n\n<p><br>\nb&gt;</p>\n\n<p>var Person = function(firstName, lastName, age) {<br>\n\u00a0\u00a0 \u00a0this.firstName = firstName;<br>\n\u00a0\u00a0 \u00a0this.lastName = lastName;<br>\n\u00a0\u00a0 \u00a0this.age = age;<br>\n}</p>\n\n<p>person = new Person(\"John\", \"Doe\", \"50\")\u00a0<br>\nPerson.sayHello = function() {<br>\n\u00a0\u00a0 \u00a0alert(\"Hello \" + this.firstName + \" \" + this.lastName)<br>\n}</p>\n\n<p>person.sayHello();</p>\n\n<p>c&gt;</p>\n\n<p>var person = {<br>\n\u00a0\u00a0 \u00a0firstName : \"John\",<br>\n\u00a0\u00a0 \u00a0lastName : \"Doe\",<br>\n\u00a0\u00a0 \u00a0age : \"50\"<br>\n}</p>\n\n<p>person.sayHello = function() {<br>\n\u00a0\u00a0 \u00a0alert(\"Hello \" + this.firstName + \" \" + this.lastName)<br>\n}</p>\n\n<p>person.sayHello();</p>\n\n<p><br>\nd&gt;</p>\n\n<p>var person = {<br>\n\u00a0\u00a0 \u00a0firstName : \"John\",<br>\n\u00a0\u00a0 \u00a0lastName : \"Doe\",<br>\n\u00a0\u00a0 \u00a0age : \"50\"<br>\n}</p>\n\n<p>person.prototype.sayHello = function() {<br>\n\u00a0\u00a0 \u00a0alert(\"Hello \" + this.firstName + \" \" + this.lastName)<br>\n}</p>\n\n<p>person.sayHello();</p>", "options": [{"option": "a & b", "correct": false}, {"option": "a & c", "correct": true}, {"option": "b & c", "correct": false}, {"option": "a & d", "correct": false}], "level": "Medium"}, {"question": "<p>var foo = {<br>\n\u00a0\u00a0 \u00a0name : 'abc',<br>\n\u00a0\u00a0 \u00a0hobbies: ['cricket','movies'] \u00a0\u00a0<br>\n}</p>\n\n<p>var boo = Object.assign({},foo);</p>\n\n<p>boo.name = 'xyz';<br>\nboo.hobbies.push('football');</p>\n\n<p>console.log(foo.name);<br>\nconsole.log(foo.hobbies);<br>\n\u00a0</p>", "options": [{"option": "xyz,    [\"cricket\", \"movies\", \"football\"]", "correct": false}, {"option": "abc,   [\"cricket\", \"movies\"]", "correct": false}, {"option": "xyz,   [\"cricket\", \"movies\"]", "correct": false}, {"option": "abc,   [\"cricket\", \"movies\", \"football\"] ", "correct": true}], "level": "Medium"}, {"question": "<p>What will be the value of 'profile.name'?</p>\n\n<p><br>\nlet profile = {<br>\n\u00a0\u00a0\u00a0 \u00a0name: 'Humpty'<br>\n};<br>\nObject.freeze(profile)<br>\nprofile.name = 'Dumpty';</p>", "options": [{"option": "Humpty", "correct": true}, {"option": "Dumpty", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the difference between the two lines given below ?</p>\n\n<p><br>\n!!(obj1 &amp;&amp; obj2);<br>\n(obj1 &amp;&amp; obj2);</p>", "options": [{"option": "Both the lines result in a boolean value \u201cTrue\u201d", "correct": false}, {"option": "Both the lines result in a boolean value \u201cFalse\u201d", "correct": false}, {"option": "Both the lines checks just for the existence of the object alone", "correct": false}, {"option": "The first line results in a real boolean value whereas the second line merely checks for the existence of the objects", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following property gives access to the JavaScript memory usage data?</p>", "options": [{"option": "performance.memory", "correct": true}, {"option": "memory(performance)", "correct": false}, {"option": "performance(memory)", "correct": false}, {"option": "memory.performance", "correct": false}], "level": "Hard"}, {"question": "<p>what will be the output of the following code?</p>\n\n<p>try {<br>\n\u00a0\u00a0 \u00a0console.log(1);<br>\n\u00a0\u00a0 \u00a0throw \"2\";<br>\n} catch(e) {<br>\n\u00a0\u00a0 \u00a0console.log(e);<br>\n}finally {<br>\n\u00a0\u00a0 \u00a0console.log(3);<br>\n}<br>\nconsole.log(4);</p>", "options": [{"option": "1,2,3,4", "correct": true}, {"option": "1,2", "correct": false}, {"option": "1,2,4", "correct": false}, {"option": "1,e", "correct": false}], "level": "Medium"}, {"question": "<p>what will be the output of the following code?</p>\n\n<p>function First() {<br>\n\u00a0\u00a0 \u00a0this.array1 = [1,2,3];<br>\n}</p>\n\n<p>var first = new First();<br>\nvar second = new First();</p>\n\n<p>First.prototype.array2 = ['a', 'b', 'c'];</p>\n\n<p>first.array1.push(4);<br>\nfirst.array2.push(\"d\");</p>\n\n<p>console.log(second.array1);<br>\nconsole.log(second.array2);</p>", "options": [{"option": "it will give an error", "correct": false}, {"option": "undefined & undefined", "correct": false}, {"option": "[1,2,3,4] & ['a', 'b', 'c', 'd']", "correct": false}, {"option": "[1,2,3] & ['a', 'b', 'c', 'd']", "correct": true}], "level": "Hard"}, {"question": "<p>what will be the output of the following code?</p>\n\n<p>(function() {<br>\n\u00a0\u00a0 \u00a0var z = b = 3;<br>\n})();</p>\n\n<p>console.log(b);<br>\nconsole.log(z);<br>\n\u00a0</p>", "options": [{"option": "3 & undefined", "correct": false}, {"option": "it will throw an error", "correct": false}, {"option": "3 & 3", "correct": false}, {"option": "3 & it will throw an error", "correct": true}, {"option": "undefined & undefined", "correct": false}], "level": "Medium"}, {"question": "<p>what will be the output of the code following code?<br>\n(function() {<br>\n\u00a0\u00a0 \u00a0console.log(1);<br>\n\u00a0\u00a0 \u00a0setTimeout(function() {console.log(2)}, 1000);<br>\n\u00a0\u00a0 \u00a0setTimeout(function() {console.log(3)}, 0);<br>\n\u00a0\u00a0 \u00a0console.log(4);<br>\n})()</p>", "options": [{"option": "1,2,3,4", "correct": false}, {"option": "1,4,3,2", "correct": true}, {"option": "1,3,4,2", "correct": false}, {"option": "1,4,2,3", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the return value of the following code?<br>\n[1,2,3,4][1,2]</p>", "options": [{"option": "4", "correct": false}, {"option": "3", "correct": true}, {"option": "10", "correct": false}, {"option": "1", "correct": false}], "level": "Medium"}, {"question": "<p>what will be the output of the following code?\u00a0</p>\n\n<p>var obj = {<br>\n\u00a0\u00a0 \u00a0name : \"joe\",\u00a0<br>\n\u00a0\u00a0 \u00a0sayName: function() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(this.name);<br>\n\u00a0\u00a0 \u00a0}<br>\n}</p>\n\n<p>var name = \"john\";<br>\nvar sayName = obj.sayName;</p>\n\n<p>sayName();</p>", "options": [{"option": "john", "correct": true}, {"option": "joe", "correct": false}], "level": "Medium"}, {"question": "<p>what will be the output of the following code?\u00a0</p>\n\n<p>var a = 10;</p>\n\n<p>function abc() {<br>\n\u00a0\u00a0 \u00a0console.log(a);<br>\n\u00a0\u00a0 \u00a0var a = 20;<br>\n\u00a0\u00a0 \u00a0console.log(a);<br>\n}</p>\n\n<p>abc();</p>", "options": [{"option": "10 & 20 ", "correct": false}, {"option": "10 and undefined", "correct": false}, {"option": "20 & 20", "correct": false}, {"option": "undefined & 20", "correct": true}], "level": "Easy"}, {"question": "<p>what will be the output of the following code?\u00a0</p>\n\n<p>var obj = {<br>\n\u00a0 \u00a0 1: \"a\",<br>\n\u00a0 \u00a0 2: \"b\"<br>\n}</p>\n\n<p>console.log(obj.1)</p>", "options": [{"option": "Wrong code. JavaScript object cannot have number as key", "correct": false}, {"option": "a", "correct": false}, {"option": "b", "correct": false}, {"option": " It will give an error", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the output of the following code?</p>\n\n<p>var x = 1;<br>\nvar output = (function(){<br>\n\u00a0 \u00a0 delete x;<br>\n\u00a0 \u00a0 return x;<br>\n\u00a0 })();<br>\n\u00a0\u00a0<br>\nconsole.log(output);</p>", "options": [{"option": "undefined", "correct": false}, {"option": "1", "correct": true}, {"option": "null", "correct": false}, {"option": "error", "correct": false}], "level": "Easy"}, {"question": "<p>What will be the output of x<br>\nvar x = 5;<br>\nconsole.log( x ** 2);</p>", "options": [{"option": "5", "correct": false}, {"option": "undefined", "correct": false}, {"option": "error", "correct": false}, {"option": "25", "correct": true}], "level": "Easy"}, {"question": "<p>class MyClass {\u00a0<br>\n\u00a0\u00a0 \u00a0var a=12;\u00a0<br>\n}\u00a0<br>\nvar obj=new MyClass();\u00a0<br>\nconsole.log(\"Value of a=\" + a);</p>\n\n<p>What is the output of above code?\u00a0</p>", "options": [{"option": "Error", "correct": true}, {"option": "Value of a =12 ", "correct": false}, {"option": "A is private and cannot be accessed ", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Suppose you received a sample code that includes example .ts file with the interfaces below:</p>\n\n<p>interface IStreet{<br>\n\u00a0 \u00a0 streetName: string;<br>\n}<br>\ninterface ICity extends IStreet{<br>\n\u00a0 \u00a0 cityName: string;<br>\n}<br>\ninterface IAddress extends ICity{<br>\n\u00a0 \u00a0 postalCode: number;<br>\n\u00a0 \u00a0 countryCode?: string;\u00a0<br>\n}</p>\n\n<p>You want to create a class that implements the IAddress interface.<br>\nWhich of the following member variables your class must include for avoiding a compiler error?</p>", "options": [{"option": "streetName and cityName", "correct": false}, {"option": "postalCode and countryCode", "correct": false}, {"option": "cityName, postalCode, and countryCode", "correct": false}, {"option": "streetName, cityName, and postalCode", "correct": true}, {"option": "streetName, cityName, postalCode, and countryCode", "correct": false}], "level": "Medium"}, {"question": "<p>typescript compiler use _ to check type when type is not given</p>", "options": [{"option": "type erasure", "correct": false}, {"option": "type inference", "correct": true}, {"option": "type annotations", "correct": false}, {"option": "none of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What does /[^(]* regular expression indicate ?</p>", "options": [{"option": "Match one or more characters that are not open parenthesis", "correct": false}, {"option": "Match zero or more characters that are open parenthesis", "correct": false}, {"option": "Match zero or more characters that are not open parenthesis", "correct": true}, {"option": "Match one or more characters that are open parenthesis", "correct": false}], "level": "Easy"}, {"question": "<p>\u00a0\u00a0\u00a0\u00a0abc()</p>\n\n<p>\u00a0\u00a0 \u00a0function abc() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(\"hello\");<br>\n\u00a0\u00a0 \u00a0}</p>\n\n<p>\u00a0\u00a0 \u00a0bcd()</p>\n\n<p>\u00a0\u00a0 \u00a0var bcd = function() {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(\"world\");<br>\n\u00a0\u00a0 \u00a0}</p>", "options": [{"option": "It will give an error", "correct": false}, {"option": "undefined and world", "correct": false}, {"option": "hello and undefined", "correct": false}, {"option": "hello and world", "correct": false}, {"option": "hello and error", "correct": true}], "level": "Easy"}, {"question": "<p>function f(input: boolean) {<br>\n\u00a0 \u00a0 let a = 100;</p>\n\n<p>\u00a0 \u00a0 if (input) {<br>\n\u00a0 \u00a0 \u00a0 \u00a0 let b = a + 1;<br>\n\u00a0 \u00a0 \u00a0 \u00a0 return b;<br>\n\u00a0 \u00a0 }<br>\n\u00a0 \u00a0 return b;<br>\n}</p>\n\n<p>\u00a0</p>\n\n<p>what will be the output for the code</p>", "options": [{"option": "Undefined", "correct": false}, {"option": "101", "correct": false}, {"option": "Compilation error for a", "correct": false}, {"option": "Compilation error for b", "correct": true}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the\u00a0purpose of the <strong>map()</strong> function in JavaScript?</p>", "options": [{"option": "Maps the elements of another array to itself", "correct": false}, {"option": "Passes each element of the array and returns the required mapped elements", "correct": false}, {"option": "Passes each element of the array on which it is invoked to the function that you specify and returns an array which contains the values returned by that function", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following operations is performed by the <strong>reduce</strong> and <strong>reduceRight</strong> method?</p>", "options": [{"option": "Filter and fold", "correct": false}, {"option": "Inject and fold", "correct": true}, {"option": "Finger and fold", "correct": false}, {"option": "Fold", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var numbers_arr = [66, 2, 1, 10, 25];\nvar sum = numbers_arr.reduce(myFunction);\nfunction myFunction(total, value)\n{\n\u00a0 return total * value;\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "66, 2, 1, 10, 25", "correct": false}, {"option": "33000", "correct": true}, {"option": "Null value", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Identify the error in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var numbers_arr = [22,23,15];\nvar mproduct = numbers_arr.reduce(myFunction, 100);\nfunction myFunction(total, value, index, array)\n\u00a0{\n\u00a0 return total + value;\n }</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The reduce function cannot accept an initial\u00a0value.", "correct": false}, {"option": "Index and array parameters cannot be used in a reduce function.", "correct": false}, {"option": "There is no error and the output is\u00a0displayed.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following loops does not provide a way to terminate an iteration before all the elements have been passed to the function?</p>", "options": [{"option": "for", "correct": false}, {"option": "for/in", "correct": false}, {"option": "forEach", "correct": true}, {"option": "every", "correct": false}], "level": "Easy"}, {"question": "<p>In\u00a0Java, what\u00a0is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class A{  \n   private double num = 100;\n   private int square(int a){\n\treturn a*a;\n   }\n}  \npublic class Begin{\n   public static void main(String []aa){  \n\tA obj = new A();  \n\tSystem.out.println(obj.num); \n\tSystem.out.println(obj.square(10));\n   }  \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "100 and 100", "correct": false}, {"option": "Runtime error", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Add{\n\n   protected int addNumbers(int a, int b){\n\treturn a+b;\n   }\n}\n\nclass Test extends Add{\n   public static void main(String []aa)\n{\n\tTest obj = new Test();\n\tSystem.out.println(obj.addNumbers(11, 22));\n   }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "addNumbers cannot be protected", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Class Add cannot be inherited", "correct": false}, {"option": "33", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what\u00a0is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>package animal;\n \nclass Deer{\n    public void play() {\n         System.out.println(\" Deer is beautiful\");\n    }\n}\n\npackage human;\nimport animal.Deer;\n \npublic class Person {\n    public void hunt() {\n       Deer d=new Deer(); \n    d.play(); \n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Deer is beautiful", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var numbers_arr = [45, 10];\nvar sum = numbers_arr.reduceRight(myFunction);\nfunction myFunction(total, value, index, array) {\n\u00a0 return total / value;\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "4.5", "correct": false}, {"option": "0.2222", "correct": true}, {"option": "5", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript functions is used to create an array that contains all the numbers greater than 100:</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>A</strong></p>\n\n<pre class=\"prettyprint\"><code>var numbers_arr = [100, 10, 1000, 1, 10000];\nvar over100 = numbers_arr.filter(myFunction);\nfunction myFunction(value, index, array) \n{\n  return value &gt;= 100;\n}</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>B</strong></p>\n\n<pre class=\"prettyprint\"><code>var numbers_arr = [100, 10, 1000, 1, 10000];\nvar over100 = numbers_arr.every(myFunction);\nfunction myFunction(value, index, array) \n{\n\u00a0 return value &gt;= 100;\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "A", "correct": true}, {"option": "B", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript statements is used to retrieve the output as an array of words from the following input array:</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Input</strong></p>\n\n<pre class=\"prettyprint\"><code>const inputWords = [\"spray\", \"limit\", \"elite\", \"exuberant\", \"destruction\", \"present\"];</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Output</strong></p>\n\n<pre class=\"prettyprint\"><code>[\"exuberant\", \"destruction\", \"present\"]</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "const longWords = words.every(word => word.length > 6);", "correct": false}, {"option": "const longWords = words.map(word => word.length > 6);", "correct": false}, {"option": "const longWords = words.filter(word => word.length > 6);", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if you are iterating elements of an array <strong>a</strong>, then which of the following statements is used to test the elements of the array in order to skip null, undefined, and non-existent elements?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "!a[i]", "correct": true}, {"option": "a[i]= = = undefined", "correct": false}, {"option": "!(i in a)", "correct": false}, {"option": "!a.hasOwnProperty(i)", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if the <strong>reduce()</strong> method is called on an empty array without initial value arguments, then which of the following objects is returned?</p>", "options": [{"option": "TypeError", "correct": true}, {"option": "SyntaxError", "correct": false}, {"option": "SemanticError", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In what order does the\u00a0<strong>reduceRight()</strong> method process an array in JavaScript?</p>", "options": [{"option": "Lowest to highest", "correct": true}, {"option": "Highest to lowest", "correct": false}, {"option": "Right to left", "correct": false}, {"option": "Left to right", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following operators is used to identify an array?</p>", "options": [{"option": "isarrayType", "correct": false}, {"option": "==", "correct": false}, {"option": "===", "correct": false}, {"option": "Typeof", "correct": true}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which\u00a0statement\u00a0in the following JavaScript code\u00a0causes an error:</p>\n\n<pre class=\"prettyprint\"><code>x = new Array();\nx[0] = 12;\nx[1] = false;\nx[2] = \u201ctext\u201d;\nx[3] = a;</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "x[1] = false;", "correct": false}, {"option": "x[3] = a;", "correct": false}, {"option": "x[2] = \"text\";", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What are the values of <strong>x[1]</strong> and <strong>x[2]</strong> in the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>x = new Array();\ny = new Array();\nx[1] = 4;\ny[2] = 6;\nx = y;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "4, undefined", "correct": false}, {"option": "Undefined, 6", "correct": true}, {"option": "4, 6", "correct": false}, {"option": "6, 4", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if an array contains five elements <span class=\"mathjax-latex\">\\(x=[1,2,3,4,5]\\)</span>, then what is the result of the following expression:</p>\n\n<pre class=\"prettyprint\"><code>x.length=0</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Checks whether the length of the array is zero", "correct": false}, {"option": "Deletes all elements of the array", "correct": true}, {"option": "Replaces all elements of the array that contain zero", "correct": false}, {"option": "Adds zero at the beginning of all the elements of the array", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following methods is used to remove\u00a0and return\u00a0the last element of an array?</p>", "options": [{"option": "pop()", "correct": true}, {"option": "push()", "correct": false}, {"option": "filter()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if the value of variable <strong>x</strong>\u00a0is <strong>25</strong> and it is of\u00a0the\u00a0<strong>number</strong> type, then which of the following conditional statements is used to execute the embedded code?</p>", "options": [{"option": "if (x == 25) { \u2026 }", "correct": false}, {"option": "if x = 25 \u2026", "correct": false}, {"option": "if (x === 25) { \u2026 }", "correct": true}, {"option": "if x = 25 then \u2026", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of these is used to return the first value of the following array:</p>\n\n<pre class=\"prettyprint\"><code>var myArr = [0, 2, 4, 6, 8];\nvar myVal = \u2026</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "myArr[0];", "correct": true}, {"option": "myArr.pop();", "correct": false}, {"option": "myArr[1];", "correct": false}, {"option": "myArr.shift();", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following methods is used to remove an element in an array and replace it with another element?</p>", "options": [{"option": "Array.filter()", "correct": false}, {"option": "Array.splice()", "correct": true}, {"option": "Array.map()", "correct": false}, {"option": "Array.split()", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, which of the following statements is used to loop through an array?</p>", "options": [{"option": "for (i < sampleArray.length; i++)", "correct": false}, {"option": "for (i = 0; i <= sampleArray.length;)", "correct": false}, {"option": "for (var i=0; i < sampleArray.length)\r\n", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the error\u00a0in the following code:</p>\n\n<pre class=\"prettyprint\"><code>private class A\n{\n    ....\n      private class B\n           {\n       ......       \n........\n}\n\n}</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Class B cannot be private", "correct": false}, {"option": "Class A cannot be private", "correct": true}, {"option": "Both of these", "correct": false}, {"option": "No error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class A\n{\n\tpublic void inA()\n\t{\n\t\tSystem.out.println(\"Class A\");\n\t}\n\t}\n\nclass B extends A\n{\n\tvoid inA()\n\t{\n\t\tSystem.out.println(\"Class B\");\n\t}\n\t\n}\n\npublic class Examp2 {\n\tpublic static void main(String []aa)\n\t{\n\tB b=new B();\n\tb.inA();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Class B", "correct": false}, {"option": "Class A", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Class B is printed twice", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class A{\n    public int x;\n     private int y;\n\n    void cal(int a, int b){\n        x =  a + 1;\n        y =  b;\n    }        \n\n}    \n\nclass Begin {\n    public static void main(String []aa)\n    {\n        A obj = new A();   \n        obj.cal(2, 3);\n        System.out.println(obj.x + \" \" + obj.y);     \n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "3 3", "correct": false}, {"option": "2 3", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var x = 21;\nvar test_result = function () \n{\n\u00a0\u00a0\u00a0 console.log(x);\n\u00a0\u00a0\u00a0 var x = 20;\n};\ntest_result ();</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "20", "correct": false}, {"option": "21", "correct": false}, {"option": "Undefined value", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>Var sample_array =\u00a0 [[0, 1], [2, 3], [4, 5]];\nvar result = sample_array.reduce(function(a, b) {\n\u00a0\u00a0\u00a0 return a.concat(b);\n},[ ]);\nconsole.log(result);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[ 0, 1, 2, 3, 4, 5 ]", "correct": true}, {"option": "[ 012345 ]", "correct": false}, {"option": "[[0, 1], [2, 3], [4, 5]]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In JavaScript, what is the difference in the output when you use functions 1 and 2 respectively on the following array:</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Array</strong></p>\n\n<pre class=\"prettyprint\"><code>const iceCreams_arr = [\n\u00a0 { flavour: 'pineapple', colour: 'white' },\n\u00a0 { flavour: 'strawberry', colour: 'red' },\n\u00a0 { flavour: 'watermelon', colour: 'red' },\n\u00a0 { flavour: 'chocolate', colour: 'brown' },\n\u00a0 { flavour: 'mango', colour: 'yellow' }\n];</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Function 1</strong></p>\n\n<pre class=\"prettyprint\"><code>let flavours = [];\nfor (let i = 0; i &lt; iceCreams_arr.length; i++) {\n\u00a0\u00a0\u00a0 flavours.push(iceCreams_arr[i].flavour)\n}\nconsole.log(flavours);</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>Function 2</strong></p>\n\n<pre class=\"prettyprint\"><code>const flavours = iceCreams_arr.map(icecream_arr =&gt; icecream_arr.flavour)\nconsole.log(flavours);</code></pre>\n\n<p>\u200b</p>", "options": [{"option": "The first method transforms the original array by using the push() method.", "correct": false}, {"option": "The second method creates a new array of strings by using the map() method.", "correct": false}, {"option": "Both methods create a new array of strings containing all the flavors of ice creams.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var arr_sample= ['a','b','c','d'];\nconsole.log(arr_sample.indexOf(7));\u00a0</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "d", "correct": false}, {"option": "0", "correct": false}, {"option": "-1", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the length of the following array in JavaScript:</p>\n\n<pre class=\"prettyprint\"><code>var array = [ [1,2,3], [4,5,6]\u00a0];</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "6", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">Which of the following JavaScript functions is used to\u00a0remove blank, null, zero, and false values from an array:</p>\n\n<p><strong>A</strong></p>\n\n<pre class=\"prettyprint\"><code>function filter_array(array) {\n\u00a0 array = array.filter(isJunk_data);\n\u00a0 return array;\n}\nfunction isJunk_data(value) {\n\u00a0 if(value !== false || value !== null || value !== 0 || value !== \"\") {\n\u00a0\u00a0\u00a0 return value;\n\u00a0 }\n}</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\"><strong>B</strong></p>\n\n<pre class=\"prettyprint\"><code>function filter_array(array) {\n\u00a0 array = array.map(isJunk_data);\n\u00a0 return array;\n}\nfunction isJunk_data(value) {\n\u00a0 if(value !== false || value !== null || value !== 0 || value !== \"\") {\n\u00a0\u00a0\u00a0 return value;\n\u00a0 }\n}</code></pre>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">\u00a0</p>", "options": [{"option": "A", "correct": true}, {"option": "B", "correct": false}, {"option": "Both of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, if you rewrite the following code using the <strong>function</strong> method, then which of these statements is correct:</p>\n\n<pre class=\"prettyprint\"><code>const arr = [20, 40, 50];\nlet total = 0;\nfor(let i = 0; i &lt; arr.length; i++)\n{\n\u00a0\u00a0\u00a0 total += arr[i];\n}\nconsole.log(total);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "const arr = [20, 40, 50];\r\nconst sample_Function = (val1, curr1) => val1+ curr1;\r\nconst sum = arr.filter(sample_Function, 0);\r\nconsole.log(sum);", "correct": false}, {"option": "const arr = [20, 40, 50];\r\nconst sample_Function = (val1, curr1) => val1+ curr1;\r\nconst sum = arr.reduce(sample_Function, 0);\r\nconsole.log(sum);", "correct": true}, {"option": "const arr = [20, 40, 50];\r\nconst sample_Function = (val1, curr1) => val1+ curr1;\r\nconst sum = arr.map(sample_Function, 0);\r\nconsole.log(sum);", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function year_range(st_year, end_year) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const year_range = [];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (let i = st_year; i &lt;= end_year; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0year_range.push(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const new_array = [];\n\u00a0 year_range.forEach(\n\u00a0\u00a0 year =&gt; {\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (test_Year(year))\n\u00a0\u00a0\u00a0\u00a0\u00a0 new_array.push(year);\n\u00a0\u00a0 });\n\u00a0 return new_array;\n\u00a0\u00a0\u00a0\u00a0 }\nfunction test_Year(year) {\n\u00a0\u00a0 if ((year % 4 === 0 &amp;&amp; year % 100 !== 0) || (year % 100 === 0 &amp;&amp; year % 400 === 0)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return year;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n}\nconsole.log(leap_year_range(2000,2012));\u200b\u200b\u200b\u200b\u200b\u200b\u200b</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[2000, 2012]", "correct": false}, {"option": "[2000, 2004, 2008, 2012]", "correct": true}, {"option": "[2004, 2008, 2012]", "correct": false}, {"option": "[2000, 2004, 2008]", "correct": false}], "level": "Hard"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">In JavaScript, what is the difference\u00a0between the\u00a0<strong>==</strong> and <strong>===</strong> operators?</p>\n\n<p>\u00a0</p>", "options": [{"option": "No difference", "correct": false}, {"option": "== compares the type and value of variables", "correct": false}, {"option": "=== compares only the type of variables", "correct": false}, {"option": "None of these", "correct": true}], "level": "Easy"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">What is the output of the following JavaScript function:</p>\n\n<pre class=\"prettyprint\"><code>[\u201c1\u201d, \u201c2\u201d, \u201c3\u201d].map(parseInt);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[1,2,,3]", "correct": false}, {"option": "[1, NaN, NaN]", "correct": true}, {"option": "[\u201c1\u201d, \u201c2\u201d, \u201c3\u201d]", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class A{\n\n    public int x;\n\n    protected int y;\n\n    void cal(int a, int b){\n\n        x =  a + 1;\n\n        y =  b;\n\n    }        \n\n}    \n\nclass B {\n\n    public static void main(String args[])\n\n    {\n\n        A obj = new A();   \n\n        obj.cal(2, 3);\n\n        System.out.println(obj.x + \" \" + obj.y);     \n\n    }\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "2 3", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "3 3", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>In\u00a0Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>package pack;  \npublic class A{  \nprotected void msg(){System.out.println(\"Hello\");}  \n}  \n\npackage mypack;  \nimport pack.*;  \n  \nclass B extends A{  \n  public static void main(String args[]){  \n   B obj = new B();  \n   obj.msg();  \n  }  \n}  </code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Hello", "correct": true}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>public class Examp3 {\n\tint a;int b=9;\n\t\n\tpublic int sum()\n\t{\n\t    \treturn a+b;\n\t}\n\t\n\tprivate int add()\n\t{\n\t\treturn a+b;\n\t}\n\n\tint result()\n\t{\n\t\treturn new Examp3().add();\n\t}\n\t\n\tpublic static void main(String []aa)\n\t{\n\t\tExamp3 e=new Examp3();\n\t\tSystem.out.println(e.sum()+e.result()+e.add());\n\t\t\n\t}\n}</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "27", "correct": true}, {"option": "0", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class Main {\n\tint a;int b=9;\n\t\n\tpublic int sum()\n\t{\n\t    \treturn a+b;\n\t}\n\t\n\tprivate int add()\n\t{\n\t\treturn a+b;\n\t}\n\n\tint result()\n\t{\n\t\treturn new Main().add();\n\t}\n}\n\npublic class Examp3\n{\n\t\n\tpublic static void main(String []aa)\n\t{\n\t\tMain e=new Main();\n\t\tSystem.out.println(e.sum()+e.result());\n\t\t\n\t}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "9", "correct": false}, {"option": "18", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Hard"}, {"question": "<p>In\u00a0Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>public class Main /**Line A**/\n{\n\tint a=9;int b=9;\n\t\t\t\n\tprivate int add() /**Line B**/\n\t{\n\t\treturn a+b;\n\t}\n\tint result() \n\t{\n\t\treturn new Main().add();\n\t}\n}\n\npublic class Examp3  \n{\n\t\n\tpublic static void main(String []aa)\n\t{\n\t\tMain e=new Main();\n\t\tSystem.out.println(2*e.result()); /**Line C**/\n\t\t\n\t}\n}\n</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": true}, {"option": "Line B", "correct": false}, {"option": "Line C", "correct": false}, {"option": "No error: Output is 36", "correct": false}], "level": "Hard"}, {"question": "<p>In\u00a0Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class Examp {\n\t  \n\tpublic int a;\n\t    private  Examp() \n\t    {\n\t    \tthis.a=10; /**Line A**/\n\t    }\n\t    \n\t    public void print()\n\t    {\n\t    \tSystem.out.println(a);\n\t    }\n\t    \n\t    public static Examp set()\n\t    {\n\t    \treturn new Examp(); /**Line B**/\n\t    }\n\n}\n\npublic class Examp4{\n\t\n\tpublic static void main(String aa[])\n\t{\n\t\tExamp e=Examp.set();\n\t\te.print();\n\t\t\n\t}\n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0", "correct": false}, {"option": "Error at Line A", "correct": false}, {"option": "10", "correct": true}, {"option": "Error at Line B", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code> class Examp {\n\t  \n\tprivate  int a;\n\t    private  Examp()\n\t    {\n\t    \tthis.a=10;\n\t    \t\n\t    }\n\t    \n\t    public void print()\n\t    {\n\t    \tprotected int a=20;\n\t    \tSystem.out.println(a);\n\t    }\n\t    \n\t    protected static Examp set()\n\t    {\n\t    \treturn new Examp();\n\t    }\n\n}\n\npublic class Examps{\n\t\n\tpublic static void main(String aa[])\n\t{\n\t\tExamp e=Examp.set();\n\t\te.print();\n\t\t\n\t}\n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "10", "correct": false}, {"option": "20", "correct": false}, {"option": "0", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>class B1\n{\n\tpublic B1(){}\n\t\n\tprivate int a=10;  /**Line A**/\n\tprotected int b=30;\n\t\n\tprotected void sum()\n\t{\n\t\t new B1().get();\n\t}\n\tprivate void  get()   /**Line B**/\n\t{\n\t   System.out.println(a+b);\n\t}\n}\n\nclass B2 extends B1\n{\n\tprotected int c=10;\n\t\n\tprotected void add()  \n\t{\n\t\t sum();   /**Line C**/\n\t}\n\t\n\t}\npublic class Examp7 {\n\tpublic static void main(String []aa)\n\t{\n\tnew B2().add();\n\t}\n}\n</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "Line B", "correct": false}, {"option": "Line C", "correct": false}, {"option": "Output is 40", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class B1\n{\n\tprivate int a=10;\n\tprotected int b=30;\n\tpublic B1(int a,int b){\n\t\t\n\t\tthis.a=a;this.b=b;\n\t}\n\tprotected void sum(int a,int b)\n\t{\n\t\t new B1(a,b).get();\n\t}\n\tprivate void  get()\n\t{\n\t   System.out.println(a+b);\n\t}\n}\n\nclass B2 extends B1\n{\n\tprivate B2(int a, int b) {\n\t\tsuper(a, b);\n\t}\n\tprotected int c=10;\n\t\n\tprotected void add()\n\t{\n\t\t sum(10,20);\n\t}\n\t\n\t}\npublic class Examp7 {\n\tpublic static void main(String []aa)\n\t{\n\tnew B2(2,3).add();\n\t}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "40", "correct": false}, {"option": "30", "correct": false}, {"option": "5", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>abstract class MyClass{\n\t   private void disp1() /**Line A**/\n    {\n\t     System.out.println(\"Parent class\");\n\t   }\n\t   abstract public void disp2();\n\t   abstract void disp3();\n\t   abstract protected void disp4();\n\t}\n\n\tclass Demo extends MyClass{\n\t   \n\t     void disp2() /**Line B**/\n\t   {\n\t       System.out.println(\"1\");\n\t   }\n\t    void disp3() /**Line C**/\n\t    {\n\t    \t System.out.println(\"2\");\n\t    }\n\t    protected void disp4()  \n\t    {\n\t    \t System.out.println(\"3\");\n\t    }\n\t   public static void main(String args[]){\n\t       Demo obj = new Demo(); \n\t   }\n\t}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "Line B", "correct": true}, {"option": "Line C", "correct": false}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>abstract class MyClass{\n\t   private void disp1() /**Line A**/\n{\n\t     System.out.println(\"Parent class\");\n\t   }\n\t   abstract public void disp2();\n\t   abstract  void disp3();\n\t   abstract protected void disp4();\n\t}\n\n\tclass Demo extends MyClass{\n\t   \n\t     public void disp2() \n\t   {\n\t       System.out.println(\"1\");\n\t   }\n\t    void disp3() /**Line B**/\n\t    {\n\t    \t System.out.println(\"2\");\n\t    }\n\t    public void disp4() /**Line C**/\n\t    {\n\t    \t System.out.println(\"3\");\n\t    }\n\t   public static void main(String args[]){\n\t       Demo obj = new Demo();\n\t      \n\t   }\n\t}</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "Line B", "correct": false}, {"option": "Line C", "correct": false}, {"option": "No error", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>package Practi;\n\npublic class Examp8 {\n\t protected int a=10;\n\t public int b=9;\n\t \n\t protected Examp8(int a, int b)  /**Line A**/\n\t {\n\t\t this.a=a;\n\t\t this.b=b;\n\t }\n\t protected void add()   \n\t {\n\t\t System.out.println(a+b);\n\t }\n}\npackage Doprctice;\nimport Practi.Examp8;\npublic class Examp8con extends Examp8 \n{\n\tpublic Examp8con(int a,int b) \n{\n\t\tsuper(a,b);\n\t}\n\t\n\tpublic static void main(String []aa)\n\t{\n\t\tExamp8con e=new Examp8con(15,10);\n\t\te.add();    /**Line B**/\n\t}\n     \n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "The output is 19.", "correct": false}, {"option": "Line B", "correct": false}, {"option": "The output is 25.", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>package Practi;\n\npublic class Examp8 {\n\t protected int a=10;\n\t public int b=9;\n\t int c=100;\n\t \n\t protected Examp8(int a, int b)\n\t {\n\t\t this.a=a;\n\t\t this.b=b;\n\t\t c=99; \n}\n\t \n\t protected void add()\n\t {\n\t\t System.out.println(a+b+c);\n\t }\n}\npackage Doprctice;\nimport Practi.Examp8;\npublic class Examp8con extends Examp8 {\n\t\n\tpublic Examp8con(int a,int b){\n\t\tsuper(a,b);\n\t}\n\t\n\tpublic static void main(String []aa)\n\t{\n\t\tExamp8con e=new Examp8con(15,10);\n\t\te.c=110;\n        e.add();\n\t}\n     \n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "135", "correct": false}, {"option": "124", "correct": false}, {"option": "129", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Medium"}, {"question": "<p><strong>What would be the output when we try to print \"foo\"\u00a0?</strong></p>\n\n<p>const foo = { \"bar\": \"baz\" };</p>\n\n<p>(() =&gt; {</p>\n\n<p>foo[\"bar\"] = \"abc\";</p>\n\n<p>console.log(foo); // outputs to</p>\n\n<p>})();</p>", "options": [{"option": "Uncaught SyntaxError: Identifier 'foo' has already been", "correct": true}, {"option": "{\"bar\":\"baz\"}", "correct": false}, {"option": "{\"bar\":\"abc\"}", "correct": false}, {"option": "Uncaught TypeError: Assignment to constant variable.", "correct": false}], "level": "Medium"}, {"question": "<p><strong>Output for the below statement?</strong></p>\n\n<p>const mapObject = new Map();</p>\n\n<p>mapObject.set(NaN, \"Hacker\");</p>\n\n<p>mapObject.get(NaN); // Output\u00a0</p>", "options": [{"option": "NaN", "correct": false}, {"option": "undefined", "correct": false}, {"option": "Hacker", "correct": true}, {"option": "Map is not a function", "correct": false}], "level": "Medium"}, {"question": "<p><strong>Select the wrong statement from the below</strong></p>", "options": [{"option": "let and var are used for function declaration", "correct": false}, {"option": "var is function scope", "correct": false}, {"option": "let is blocked scope", "correct": false}, {"option": "variable declared with let can be defined through out program", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Select the correct statement\u00a0for the below answers when foo1 is logged\u00a0?</strong></p>\n\n<p>const foo = {</p>\n\n<p>\"bar\":\"baz\"</p>\n\n<p>}</p>\n\n<p>const foo1 = Object.freeze(\"bar\");</p>\n\n<p>foo[\"bar\"] = \"foobar\";</p>\n\n<p>console.log(foo1) // output ?</p>", "options": [{"option": "{\"bar\":\"foobar\"}", "correct": false}, {"option": "{\"bar\":\"baz\"}", "correct": true}, {"option": "freezed object cannot be modified", "correct": false}, {"option": "{\"bar\":\"baz\", \"bar\":\"foobar\"}", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Will the below output print true or false ?</strong></p>\n\n<p>const numberList = [1,2,3,4,5];</p>\n\n<p>console.log(typeof(numberList) === 'array')</p>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}], "level": "Easy"}, {"question": "<p><strong>valueOf() is used\u00a0?\u00a0\u00a0</strong>\u00a0\u00a0</p>", "options": [{"option": "to get the primitive values", "correct": true}, {"option": "to compare the values", "correct": false}, {"option": "to get the data type of values", "correct": false}, {"option": "to create a new value", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Spread\u00a0operator in javascript primarily used\u00a0?</strong></p>", "options": [{"option": "to concatenate the object", "correct": false}, {"option": "to create a new objects", "correct": false}, {"option": "to remove the objects", "correct": false}, {"option": "to merge two objects", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Select a\u00a0non primitive data type from below:</strong></p>", "options": [{"option": "string", "correct": false}, {"option": "null", "correct": false}, {"option": "undefined", "correct": false}, {"option": "array", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Select the statement which is false about the arrow functions from below:</strong></p>", "options": [{"option": "can be used as constructors", "correct": true}, {"option": "short hand representation for functions", "correct": false}, {"option": "does not have own arguments", "correct": false}, {"option": "does not have own 'this'", "correct": false}], "level": "Medium"}, {"question": "<p><strong>What is the output for the below log ?</strong></p>\n\n<p>(function () {</p>\n\n<p>var foo = \"bar\"; // Outputs: \"bar\"</p>\n\n<p>console.log(foo);</p>\n\n<p>})();</p>\n\n<p>console.log(foo); // Output\u00a0 ?</p>", "options": [{"option": "ReferenceError: foo is not defined ", "correct": true}, {"option": "bar", "correct": false}, {"option": "foo is not declared", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>package Practi;\n\npublic class Examp8 {\n\t protected int a=10;\n\t public int b=9;\n\t int c=100;\n\t \n\t  Examp8(int a, int b)\n\t {\n\t\t this.a=a;\n\t\t this.b=b;\n\t\t c=1;\n\t }\n\t protected void add()\n\t {\n\t\t System.out.println(a+b+c);\n\t }\n\n}\npackage Doprctice;\nimport Practi.Examp8;\npublic class Examp8con extends Examp8 {\n\t\n\tpublic Examp8con(int a,int b){\n\t\tsuper(a,b);\n\t}\t\n\tpublic static void main(String []aa)\n\t{\n\t\tExamp8con e=new Examp8con(15,10);\n\t    e.add();\n\t} \n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "26", "correct": false}, {"option": "125", "correct": false}, {"option": "20", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of these lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>package Practi;\npublic class Examp10 {\n\n\tprotected int a;\n\tpublic int b;\n\tint c;\n\tprotected int d;\n\t\n\tpublic Examp10()\n\t{\n\t\ta=10;\n\t\tb=15;\n\t\tc=10;d=10;\n\t}\n\n\tpublic void sum3()\n\t{\n\t\tSystem.out.println(a+b+c+d); /**Line A**/\n\t}\n}\npackage Doprctice;\nimport Practi.Examp10;\n\npublic class Examp10con extends Examp10{\n  Examp10con(){}\n\t public void sum3()\n\t{\n\t\tSystem.out.println(a+b+c+d); /**Line B**/\n\t}\n\t public static void main(String []aa)\n\t {\n\t\t Examp10con e=new Examp10con(); \n          e.sum3();  /**Line C**/\n\t\t\t \n }\n}\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "Line B", "correct": true}, {"option": "Line C", "correct": false}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following lines can cause an error in the following code:</p>\n\n<pre class=\"prettyprint\"><code>class CPU {\n    double price;\n    String manufacturer;\n    class Processor{\n        double cores;\n       private String manufacturer; /**Line A**/\n        double getCache(){\n           ....\n        }\n    }\n    protected class RAM   /**Line B**/\n{\n        double memory;\n        String manufacturer;\n        double getClockSpeed(){\n           .....\n        }\n    }\n}\npublic class Main {\n    public static void main(String[] aa) {\n        CPU cpu = new CPU();\n        CPU.RAM ram = cpu.new RAM(); /**Line C**/\n...\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Line A", "correct": false}, {"option": "Line B", "correct": false}, {"option": "Line C", "correct": false}, {"option": "No error", "correct": true}], "level": "Medium"}, {"question": "<p>In\u00a0Java, what is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class MyOuterClass\n {\n\t   private int x= 1;\n\t   private String st=\"Number\";\n\t   public void innerInstance()\n\t   {\n\t       MyInnerClass inner = new MyInnerClass();\n\t       inner. seeOuter(); /**Line A**/\n\t   }\n\t   public static void main(String args[]){\n\t       MyOuterClass obj = new MyOuterClass();\n\t       obj.innerInstance();\n\t   }\n\t   \n\t  private class MyInnerClass /**Line B**/\n{\n\t       private void seeOuter () {\n\t          System.out.println(st+\" \"+x);\n\t       }\n\t   } \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Compilation error", "correct": false}, {"option": "No output", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Number 1", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, what\u00a0is the output of the following code:</p>\n\n<pre class=\"prettyprint\"><code>class MyOuterClass {\n\t   protected int x= 1;\n\t   private String st=\"Number\"; \n\t   private void innerInstance()\n\t   {\n\t       MyInnerClass inner = new MyInnerClass();\n\t       inner. seeOuter();\n\t   }\n\t   public static void main(String args[]){\n\t       MyOuterClass obj = new MyOuterClass();\n\t       obj.innerInstance();\n\t   }\n\t   \n\t  private class MyInnerClass {\n\t       private void seeOuter () {\n\t    \t   protected int x=2;  / **Line A**/\n\n\t          System.out.println(st+\" \"+x);   /**Line B**/\n\t       }\n\t   } \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Error", "correct": true}, {"option": "Number  1", "correct": false}, {"option": "Number  2", "correct": false}, {"option": "No output", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Temp\n{\tprivate int x=10;\n\tprotected int y=10;\n\nprotected Temp()\n{\nthis(5);\n}\nprivate Temp(int x)\n{\nthis(x, 15);\n\n}\nprotected Temp(int x, int y)\n{\nSystem.out.println(x * y);\n}\npublic static void main(String aa[])\n{\nnew Temp();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "100", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "75", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Temp\n{\n\tprivate static  int x=10;\n\tprivate static  int y=10;\nprivate Temp()\n{\nthis(5);\n}\nprivate Temp(int x)\n{\nthis(x, y);\n\n}\nprivate Temp(int x, int y)\n{\nSystem.out.println(x * y);\n}\npublic final static void main(String args[])\n{\nTemp t=new Temp();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "100", "correct": false}, {"option": "No output", "correct": false}, {"option": "50", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following\u00a0statements are correct:</p>\n\n<ol>\n\t<li><strong>Public:</strong>\u00a0 \u00a0 \u00a0 \u00a0Visible to all classes</li>\n\t<li><strong>Protected:</strong>\u00a0Visible to classes within the package</li>\n\t<li><strong>Default:</strong>\u00a0 \u00a0 \u00a0 Visible to classes within the package and subclasses of other packages</li>\n</ol>", "options": [{"option": "1", "correct": true}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In java, which of the following statements about access modifiers are true:</p>\n\n<ol>\n\t<li>Access modifiers define the visibility of a class.</li>\n\t<li>If no keyword is mentioned then that is default access modifier.</li>\n\t<li>The four access modifiers in java include public, private, protected, and default.</li>\n\t<li>Private and protected keywords cannot be used for classes and interfaces.</li>\n</ol>", "options": [{"option": "Only 1, 2, and 4 ", "correct": false}, {"option": "Only 4 ", "correct": false}, {"option": "Both 1 and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following access specifiers is used when\u00a0instances cannot be created in a class?</p>", "options": [{"option": "Private default constructor", "correct": false}, {"option": "All private constructors", "correct": true}, {"option": "Only default constructor is to be public", "correct": false}, {"option": "Only default constructor is to be protected", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following access specifiers must be used in order to inherit all the parent class members and access them from outside the class and packages?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Default or Protected", "correct": false}, {"option": "Public", "correct": true}, {"option": "Protected", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following access specifiers can be used for an interface in Java?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Public", "correct": true}, {"option": "All of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these is\u00a0the access modifier for the variable '<strong>a'</strong><em>\u00a0</em>in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class A\n{\nint a = 25;\nprivate int b=26;\nprotected int c=9;\nboolean m1() \n{\n    .....\n}\n.....\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Default", "correct": true}, {"option": "Public", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following methods is used for pure internal behaviors to a class that will never be shared outside itself?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Private", "correct": true}, {"option": "Public", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following access modifiers is typically used within related classes to allow only internal access to data?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Default", "correct": false}, {"option": "Public ", "correct": false}, {"option": "Protected", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements about access modifiers in Java is true?</p>", "options": [{"option": "The protected modifiers\u00a0have more visibility or scope compared to private and lesser as\u00a0compared to default modifiers.", "correct": false}, {"option": "The public\u00a0modifiers\u00a0have more visibility or scope compared to private and lesser as\u00a0compared to protected modifiers.", "correct": false}, {"option": "The protected modifiers\u00a0have more visibility or scope compared to private and lesser as\u00a0compared to public modifiers.", "correct": true}, {"option": "The public modifiers\u00a0have more visibility or scope compared to private and lesser as\u00a0compared to default\u00a0modifiers.", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following access specifiers is used in a class such that the members of the class can be accessed by a different class in the same package?</p>", "options": [{"option": "Public", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Default", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these causes an error in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\tclass A\n\t{  ......\n\tprivate class B\n\t{\n\t   ....\n\t}\n\t}\n\t\n\tpublic class Main extends A\n\t{\n\tpublic static void main(String[] aa)\n\t{\n\t     B b = new B();\n          .....\n\t}\n\t}\n</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "Class A should be public", "correct": false}, {"option": "Class B cannot be private", "correct": false}, {"option": "Class B cannot be instantiated outside the Class A", "correct": true}, {"option": "No error", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about access modifiers is true:</p>\n\n<ol>\n\t<li>Access specifiers are keywords in object-oriented languages that set the accessibility of\u00a0classes, methods, and other members.</li>\n\t<li>Access modifiers are a specific part of a programming language syntax that is used to facilitate the encapsulation of components.</li>\n\t<li>The public access specifier gives access to the member function from outside the class.\u00a0</li>\n</ol>", "options": [{"option": "Only 2 is true", "correct": false}, {"option": "Both 2 and 3 are true", "correct": false}, {"option": "Both 1 and 3 are true", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about access modifiers is correct:</p>\n\n<ol>\n\t<li>A public member cannot\u00a0and a protected\u00a0member can be accessed\u00a0by the members of another package.</li>\n\t<li>A protected member cannot\u00a0and\u00a0a public member can be accessed\u00a0by the members of another package.</li>\n\t<li>A public member cannot\u00a0and a public member can be accessed\u00a0by the members of another package.</li>\n\t<li>A private member cannot\u00a0and a protected\u00a0member can be accessed\u00a0by the members of another package.</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "3", "correct": false}, {"option": "4", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following levels are the access modifiers restricted to?</p>", "options": [{"option": "Member and data", "correct": false}, {"option": "Method and member", "correct": false}, {"option": "Class and member", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following lists of data instances is accessible in the class A3?</p>\n\n<pre class=\"prettyprint\"><code>public class A1 \n{\n public int x;\n private int y;\n protected int z;\n \u2026\n }\n public class A2 extends A1 {\n protected int a; \nprivate int b; \n\u2026} \npublic class A3 extends A2 { \nprivate int q;\n\u2026\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "x, y, z, a, b, q ", "correct": false}, {"option": "a, b, q ", "correct": false}, {"option": "x, z, a, q ", "correct": true}, {"option": "x, a, q ", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following is not a keyword in Java?</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Public", "correct": false}, {"option": "Default", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is also known as native access modifier and universal access modifier in Java?</p>", "options": [{"option": "Private and Protected respectively", "correct": false}, {"option": "Protected and Public respectively", "correct": false}, {"option": "Private and Public respectively", "correct": true}, {"option": "Public and Default respectively", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these causes an error in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>package practii;\npublic class A {\n\t int a;\n\tprivate String b;\n\t\n\t public A(int a, String b)\n\t{\n\t\tthis.a=a;\n\t\tthis.b=b;\n\t}\n\tprotected void get()\n\t{\n\t\tprint();\n\t}\n\tpublic void print()\n\t{\n\t\tSystem.out.println(b+\" \"+a);\n\t}\n}\npackage Practi;\nimport practii.A;\n\n class B extends A{\n\tpublic B(int a, String b) {\n\t\tsuper(a, b);\n\t\t}\n\tpublic static void main(String []aa)\n\t{\n\t\tA a=new A(100,\"Modifier\");\n\t\ta.get();\n\t}\n}\n</code></pre>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "The class B should be  public", "correct": false}, {"option": "Constructor for class A should be protected", "correct": false}, {"option": "The function get() should be public", "correct": true}, {"option": "Output is \"Modifier  100\"", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following servlet code:</p>\n\n<pre class=\"prettyprint\"><code>\n@WebServlet(urlPatterns = {\"/Sendredirect\"})\npublic class Sendredirect extends HttpServlet {\n.......\n @Override\n   public void doGet(HttpServletRequest req,HttpServletResponse res)  \nthrows ServletException,IOException  \n{  \nres.setContentType(\"text/html\");  \nPrintWriter pw=.......  \n  \nres.sendRedirect(\"http://www.google.com\");  \n  \npw.close();  \n}\n...\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "The code does not execute.", "correct": false}, {"option": "A blank page is displayed.", "correct": false}, {"option": "Home page of Google is displayed.", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is\u00a0the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>......\n........\n@WebServlet(urlPatterns = {\"/Login\"})\npublic class Login extends HttpServlet {\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)  \n        throws ServletException, IOException {  \n  \n    response.setContentType(\"text/html\");  \n    PrintWriter out =.......... \n    String n= ........ \n    String p=\"servlet\";\n          \n    if(p.equals(\"servlet\")){  \n        RequestDispatcher rd=request.getRequestDispatcher(\"Sendredirect\");  /**Line A**/\n\n           rd.forward(request, response);  /**Line B**/\n       \n.......\n    }  \n    \n    }  \n   </code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Error at line  A", "correct": false}, {"option": "Error at line B", "correct": false}, {"option": "No error ", "correct": true}, {"option": "Error at both lines A and B", "correct": false}], "level": "Medium"}, {"question": "<p>What is the error in the following servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class A extends HttpServlet {\npublic void doGet(HttpServletRequest req, HttpServletResponse res)\nthrows ServletException, IOException {\nres.setContentType(\"text/html\");\nPrintWriter out =.....\nHttpSession session = req.getSession();\u00a0 \u00a0/**Line A**/\nsession.setAttribute(\"name\",new B(getServletContext()));\u00a0 /**Line B**/\n........\n\n......\n\npublic class B\u00a0implements HttpSessionBindingListener {\nServletContext context;\u00a0\npublic B(SessionContext context)\u00a0 \u00a0 /**Line C**/\n\n{\nthis.context = context;\n}\npublic void valueBound(HttpSessionBindingEvent event) {\ncontext.log(\"The value bound is \" + event.getName());\n}\npublic void valueUnbound(HttpSessionBindingEvent event) {\ncontext.log(\"The value unbound is \" + event.getName());\n.....\n\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "At Line A", "correct": false}, {"option": "At Line B", "correct": false}, {"option": "At Line C", "correct": true}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>@WebServlet(name = \"EmployeeServlet\", urlPatterns = \"/employeeServlet\")\npublic class EmployeeServlet extends HttpServlet {\n ..........\n    private Gson gson = new Gson();\n ..........\n    @Override\n    protected void doGet\n(\n      HttpServletRequest req, \n      HttpServletResponse res) throws ...... {\n         \n        Employee employee = .........\n        String employeeString = this.gson.toJson(employee);  /**Line A**/\n \n        PrintWriter out = res.getWriter();\n        res.setContentType(\"text/html\"); /**Line B**/\n        res.setCharacterEncoding(\"UTF-8\"); /**Line C**/\n        out.print(employeeString);\n        out.flush(); \n   ......  \n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "At Line A", "correct": false}, {"option": "At line B", "correct": true}, {"option": "At Line C", "correct": false}, {"option": "No error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class MultipartServlet extends HttpServlet {\n\n @Override\n protected void doPost(HttpServletRequest request, HttpServletResponse response)throws....\n\n{if (ServletFileUpload.isMultipartContent(response)) /**Line A**/\n { \n    DiskFileItemFactory factory = new DiskFileItemFactory();\nfactory.setSizeThreshold(.....);\nfactory.setRepository(........);\n\nServletFileUpload upload = new ServletFileUpload(factory); /**Line B**/ \n    ........\n    String uploadPath = .......;\n    File uploadDir = new File(uploadPath); /**Line C**/\n    .....\n....\n}\n\n           \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "At Line A", "correct": true}, {"option": "At Line B", "correct": false}, {"option": "At Line C", "correct": false}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>@WebServlet(\"/download\")\npublic class DownloadServlet extends HttpServlet {\n    ........\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws....\n      {  \n        res.setContentType(\"text/plain\");\n        res.setHeader(......);\n \n        InputStream in = req.getServletContext().getResourceAsStream(......); /**Line A**/\n          OutputStream out = res.getOutputStream() /**Line B**/\n {\n            byte[] buffer = new byte[......];\n         \n            int numBytesRead;\n            while ((numBytesRead = in.read(buffer)) &gt; 0)\n {\n                out.write(buffer, 0, numBytesRead); /**Line C**/\n            }\n        }\n......</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "At Line A", "correct": false}, {"option": "At Line B", "correct": false}, {"option": "At line C", "correct": false}, {"option": "No error", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements describes the advantages of Servlets:</p>\n\n<ol>\n\t<li>The Servlet is a server-side component which gives a powerful mechanism for developing server side application.</li>\n\t<li>A web developer can create a fast and efficient server-side program by using Servlets.</li>\n\t<li>The Servlet provides ways to perform\u00a0authentication and authorization in a web application.</li>\n\t<li>Servlet plays an important role in exploring the internet, reusability, performance, and scalability.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What is the ouput of the following Servlet code:</p>\n\n<p>'''</p>\n\n<p>\u00a0</p>\n\n<pre class=\"prettyprint\"><code>&lt;web-app&gt;\n    &lt;context-param&gt;  \n       &lt;param-name&gt;user_name&lt;/param-name&gt;  \n       &lt;param-value&gt;Servlet Programming.&lt;/param-value&gt;  \n    &lt;/context-param&gt;  \n   \n  &lt;servlet&gt; \n    &lt;servlet-name&gt;DemoServletContext&lt;/servlet-name&gt;\n    &lt;servlet-class&gt;DemoServletContext&lt;/servlet-class&gt;\n  &lt;/servlet&gt;\n......\n&lt;/web-app&gt;\n....\n........\npublic class DemoServletContext extends HttpServlet {\n    public void doGet(HttpServletRequest req, HttpServletResponse res)\n            throws ...... {\n        res.setContentType(\"text/html\");\n        PrintWriter out = res.getWriter();\n        ServletContext context = getServletContext(); /**Line A**/\n        String fullname = context.getInitParameter(\"user_name\");  /**Line B**/\n        out.print(\"&lt;b&gt;\"+fullname+\"&lt;/b&gt;\");\n         out.print(........);  \n        out.flush();\n        out.close();\n    }\n \n.......\n</code></pre>\n\n<p>\u00a0</p>\n\n<p>'''</p>", "options": [{"option": "Error at Line A", "correct": false}, {"option": "Error at Line B", "correct": false}, {"option": "Servlet Programming.", "correct": true}, {"option": "No output", "correct": false}], "level": "Medium"}, {"question": "<p>What is the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>@WebServlet(urlPatterns = {\"/MyFilter\"})\n\n   public class MyFilter implements Filter  /**Line A**/\n{  \n   @Override  \npublic void init(FilterConfig arg0) throws ServletException {\n    }  \n       @Override  \npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n throws  ServletException  /**Line B**/\n {             \n    PrintWriter out=response.getWriter();  \n    String userName = request.getParameter(.....);\n    out.print(\"&lt;h2&gt;Hello \"+userName+\"&lt;/h2&gt;\");  \n            \n    chain.forward(request, response);  /**Line C**/\n     out.print(......);  \n    }  \n    public void destroy() {\n    //servlet filter destroy\n    }  \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "At Line A", "correct": false}, {"option": "At Line B", "correct": false}, {"option": "At Line C", "correct": true}, {"option": "No error", "correct": false}], "level": "Medium"}, {"question": "<p>In which of the following modes can the servlets can be used?</p>\n\n<ol>\n\t<li>Filter chains can be used to collect servlets together</li>\n\t<li>Support HTTP protocol</li>\n\t<li>Used for CGI based applications</li>\n\t<li>Dynamic generation of servlets</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "2, 3, and 4", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements about WEB-INF directory is true:</p>\n\n<ol>\n\t<li>/WEB-INF/classes/*: It contains compiled class files.</li>\n\t<li>/WEB-INF/lib/*.jar: It contains different library jar files.</li>\n\t<li>/WEB-INF/web.xml: It is a deployment descriptor that specifies\u00a0the web application configuration.</li>\n</ol>", "options": [{"option": "2 and 3", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Servlets, which of the following returns the\u00a0IP address of a client?</p>", "options": [{"option": "request.getRemoteName()", "correct": false}, {"option": "request.getLocalAddr()", "correct": false}, {"option": "request.getRemoteAddr()", "correct": true}, {"option": "request.getRemoteHost()", "correct": false}], "level": "Medium"}, {"question": "<p>in Servlets, which of the following statements defines the use of <strong>filters</strong>:</p>\n\n<ol>\n\t<li>Security checks</li>\n\t<li>Data compression</li>\n\t<li>Response compression</li>\n\t<li>Logging and auditing</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "Only 1", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>@WebServlet(name = \"MyServlet1\", urlPatterns = {\"/MyServlet1\"})\npublic class MyServlet1 extends HttpServlet {\n   \n    String msg = \"\";\n\n    @Override\n    public void init(ServletConfig config) \n    {    \n        msg = \"Hello from Servlets!\";\n    }\n\n    @Override\n    public void doGet(HttpServletRequest request,\n        HttpServletResponse response)\n        throws IOException, ServletException\n    {\n        response.setContentType(\"html\");\n        PrintWriter out = response.getWriter();\n\n        out.println(\"&lt;HTML&gt;\");\n         out.println(msg);\n        out.println(\"&lt;/HTML&gt;\");\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Error at init() method", "correct": false}, {"option": "Error at Get() method", "correct": false}, {"option": "Output cannot be predicted", "correct": false}, {"option": "Hello from Servlets!", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements about the difference between\u00a0ServletConfig and ServletContext is valid:</p>\n\n<ol>\n\t<li>ServletConfig is a unique object per servlet whereas ServletContext is a unique object for a complete application.</li>\n\t<li>We cannot set attributes in ServletConfig object whereas we can set attributes in ServletContext that other servlets can use in their implementation.</li>\n\t<li>ServletConfig is used to provide init parameters to the servlet whereas ServletContext is used to provide application-level init parameters.</li>\n</ol>", "options": [{"option": "2 and 3", "correct": false}, {"option": "1 and 3", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these\u00a0are\u00a0different ways of\u00a0servlet authentication:</p>\n\n<ol>\n\t<li>HTTP basic authentication</li>\n\t<li>HTTP digest authentication</li>\n\t<li>HTTPS authentication</li>\n\t<li>Form-based login</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2, 3, and 4", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following options is used to\u00a0get the actual path of servlet in a server?</p>\n\n<p>\u00a0</p>", "options": [{"option": "getServletContext().getAttribute(request.getPath())", "correct": false}, {"option": "getServletContext().getServerInfo(request.getServletPath())", "correct": false}, {"option": "getServletContext().getRealPath(request.getServletPath())", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class MyServlet1 extends HttpServlet \n{\n   \n    String msg = \"\";\n\n    @Override\n    public void init(ServletConfig config)\n    {   \n        msg = \"Hello from Servlets!\";\n        destroy();          \n    }\n     @Override\n    public void doGet(HttpServletRequest request,\n        HttpServletResponse response)\n        throws IOException, ServletException\n    {     \n        response.setContentType(\"html\");\n        PrintWriter out = response.getWriter();\n\n        out.println(\"&lt;HTML&gt;\");\n         out.println(msg);\n        out.println(\"&lt;/HTML&gt;\");\n    }\n    \n    @Override\n    public void destroy()\n    {\n\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "No output", "correct": false}, {"option": "Error at init() method", "correct": false}, {"option": "Hello from Servlets!", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following\u00a0Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>@WebServlet(name = \"MyServlet1\", urlPatterns = {\"/MyServlet1\"})\npublic class MyServlet1 extends HttpServlet {\n   \n    String msg = \"\";\n\n    @Override\n    public void init(ServletConfig config)\n    {   \n        msg = \"Hello from Servlets!\";\n        destroy();          \n    }\n    \n    @Override\n    public void init()\n    {\n        msg=\"Servlets!\";\n      destroy();\n    }\n     @Override\n    public void doGet(HttpServletRequest request,\n        HttpServletResponse response)\n        throws IOException, ServletException\n    {       \n        response.setContentType(\"html\");\n        PrintWriter out = response.getWriter();\n\n        out.println(\"&lt;HTML&gt;\");\n         out.println(msg);\n        out.println(\"&lt;/HTML&gt;\");\n    }\n    \n    @Override\n    public void destroy()\n    {\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "No output", "correct": false}, {"option": "Servlets!", "correct": false}, {"option": "Hello from Servlets!", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these options initializes an object\u00a0called 'factory' in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class MyServlet2 implements Servlet {\n\n public void _jspService(HttpServletRequest request,\n                        HttpServletResponse response)\n       throws ..... {\n\n    JspFactory  factory     = (______________);\n    PageContext pageContext = factory.getPageContext(\n                                        this,\n                                        request,\n                                        response,\n                                        .........);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "ServletConfig.getDefaultFactory()", "correct": false}, {"option": "JspFactory.getFactory()", "correct": false}, {"option": "JspFactory.getDefaultFactory()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following collection types are associated with J2EE:</p>\n\n<ol>\n\t<li>Set type</li>\n\t<li>List type</li>\n\t<li>Array type</li>\n\t<li>Bag type</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following\u00a0wrapper classes\u00a0are provided\u00a0by Java\u00a0servlet:</p>\n\n<ol>\n\t<li>java.serlet.ServletRequestWrapper</li>\n\t<li>javax.servlet.ServletResponseWrapper</li>\n\t<li>javax.servlet.http.HTTPServletResponseWrapper</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "Only 3", "correct": false}, {"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements about Java servlet is true:</p>\n\n<ol>\n\t<li>javax.servlet.Servlet<strong> </strong>is an interface.</li>\n\t<li>javax.servlet.GenericServlet<strong> </strong>is protocol independent and an abstract class.</li>\n\t<li>javax.servlet.http.HttpServlet is an abstract class for communication\u00a0over the HTTP protocol.</li>\n</ol>", "options": [{"option": "Only 1", "correct": false}, {"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "All of these", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class MyServlet1 extends HttpServlet {\n   \n    String msg = \"\";\n\n    @Override\n    public void init(ServletConfig config)\n    {   \n        destroy();  \n        msg = \"Hello from Servlets!\";\n              \n    }\n    \n    @Override\n    public void init()\n    {\n        msg=\"Servlets!\";destroy();\n    }\n     @Override\n    public void doGet(HttpServletRequest request,\n        HttpServletResponse response)\n        throws IOException, ServletException\n    {     \n        response.setContentType(\"html\");\n        PrintWriter out = response.getWriter();\n\n        out.println(\"&lt;HTML&gt;\");\n         out.println(msg);\n        out.println(\"&lt;/HTML&gt;\");\n    }\n    \n    @Override\n    public void destroy() \n    {\n        System.out.println(\"Destroy method called!\");\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Destroy method called!", "correct": false}, {"option": "Servlets!", "correct": false}, {"option": "Hello from Servlets!", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these\u00a0options initializes the <em>out </em>object in the following\u00a0Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public void doGet(HttpServletRequest req, HttpServletResponse resp)\n        throws ......\n{\n\n    PageContext pageContext = JspFactory.getDefaultFactory().getPageContext(......);\n           \n    JspWriter out = (__________);\n    if (.......) \n{\n        resp.getWriter().println(\"OK\");\n    } else {\n        resp.getWriter().println(\"FAIL\");\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "SevletConfig.setOut()", "correct": false}, {"option": "pageContext.writer();", "correct": false}, {"option": "pageContext.getOut()", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these\u00a0options\u00a0initializes the <em>ServletContext</em> object in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public void doGet(HttpServletRequest req,\n        HttpServletResponse response)\n        throws........\n    {   \n        response.setContentType(\"html\");\n        PrintWriter out = response.getWriter();\n        ServletContext sc=(___________);\n        \n......\n.............\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "getContext()", "correct": false}, {"option": "req.getServletContext()", "correct": true}, {"option": "req.getContextPath()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>What of the following statements regarding the JSP and JavaBeans is true:</p>\n\n<ol>\n\t<li>Custom tags are available only in JSP 1.1 and later, but JavaBeans can be used in all JSP 1.x versions.</li>\n\t<li>Custom tags require quite a bit more work to set up than do beans.</li>\n\t<li>Complex operations can be reduced to a significantly simpler form with custom tags than with beans.</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "All of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these\u00a0will the Servlet resulting from\u00a0a JSP page implement or extend if the<em><strong>\u00a0</strong>isThreadSafe </em>attribute\u00a0in the JSP page is assigned the\u00a0boolean value\u00a0false?</p>\n\n<p>\u00a0</p>", "options": [{"option": "Runnable interface", "correct": false}, {"option": "Executor class", "correct": false}, {"option": "SingleThreadModel interface", "correct": true}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the error in the following Servlet code:</p>\n\n<pre class=\"prettyprint\"><code>public class DownloadFile extends javax.servlet.http.HttpServlet implements\n        javax.servlet.Servlet \n{\n    static final long serialVersionUID = 1L;\n    ..........\n    String filePath;\n \n    protected void doGet(HttpServletRequest request,\n            HttpServletResponse response) throws .....\n {\n \n        filePath = getServletContext().getRealPath(\"\") + File.separator\n                + \"AAA.txt\";\n        File file = new File(filePath);\n        int length = 0;\n        ServletOutputStream outStream = response.setOutputStream(); /**Line A**/\n        response.setContentType(\"text/html\"); \n        response.setContentLength((int) file.length());\n        ..........\n........\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "extends javax.servlet.HttpServlet", "correct": false}, {"option": "implements javax.servlet.ServletContext", "correct": false}, {"option": "At Line A", "correct": true}, {"option": "No error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following sorting algorithms is implemented in the following\u00a0Java code:</p>\n\n<pre class=\"prettyprint\"><code>public void Sort(int[] num) \n\n{\nboolean flag;\ndo \n  {\n   flag = false;\n   for (int i = 0; i &lt; num.length - 1; i++)\n\n   {\n    if (num[i + 1] &lt; num[i]) {\n    int tmp = num[i + 1];\n    num[i + 1] = num[i];\n    num[i] = tmp;\n    flag = true;\n   }\n }\n}\n\nwhile (flag);\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Bubble sort", "correct": true}, {"option": "Selection sort", "correct": false}, {"option": "Quick sort", "correct": false}, {"option": "Insertion sort", "correct": false}], "level": "Hard"}, {"question": "<p>What is the following condition known as:</p>\n\n<blockquote>\n<p>When a recursive method calls itself too many times, the stack memory fills up and\u00a0no\u00a0more method calls will be able to allocate their necessary variables.</p>\n</blockquote>", "options": [{"option": "Stack overflow", "correct": true}, {"option": "Stack overload", "correct": false}, {"option": "Stack full", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following is used\u00a0to get\u00a0a reference to the\u00a0static method?</p>", "options": [{"option": "SomeClass :: staticMethodName", "correct": true}, {"option": "SomeClass : staticMethodName", "correct": false}, {"option": "SomeClass -> staticMethodName", "correct": false}, {"option": "SomeClass = staticMethodName", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n{\n\t\n\tvoid printNumber()\n\t{\n\t\tSystem.out.println(\"This is Java\");\n\t}\n\t\n\tpublic static void main(String[] args)\n\t\n\t{\t\n\t\tint x = printNumber();\n\t}\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "This is Java ", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Run-time error", "correct": false}, {"option": "Garbage value", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth\n\n{\n\n    public static void main(String[] args)\n    {\n\n        Integer var1 = new Integer(25);\n        Integer var2 = new Integer(25);\n        System.out.println(\"\" + (var1 == var2));\n        System.out.println(\"\" + var1.equals(var2));\n\n    }\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "true\r\nfalse", "correct": false}, {"option": "true\r\ntrue", "correct": false}, {"option": "false\r\nfalse", "correct": false}, {"option": "false\r\ntrue", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth\n\n{\n\n    public static void main(String[] args) \n\n     {\n\n        Integer var1 = Integer.valueOf(34);\n        Integer var2 = Integer.valueOf(34);\n        System.out.println(\"\" + (var1 == var2));\n        System.out.println(\"\" + var1.equals(var2));\n\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "true\r\ntrue", "correct": true}, {"option": "true\r\nfalse", "correct": false}, {"option": "false\r\ntrue", "correct": false}, {"option": "false\r\nfalse", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n{\n\n\tpublic static void main(String args[])\n\t{\n\t\tSystem.out.printf(\"%s and %&lt;S\",\"Hello\");\n\t}\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hello and Hello", "correct": false}, {"option": "HELLO and Hello", "correct": false}, {"option": "Hello and HELLO", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Easy"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.printf(\"%b %n\", 19856);\t\n\t}\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "19856", "correct": false}, {"option": "true", "correct": true}, {"option": "false", "correct": false}, {"option": "null", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods is used to copy the elements of one array to another?</p>", "options": [{"option": "arraycopy()", "correct": true}, {"option": "copy()", "correct": false}, {"option": "copyarray()", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements are true about the\u00a0<strong>shallow copy</strong>\u00a0of an array:</p>\n\n<ol>\n\t<li>Elements of both the original and the cloned array refer to the same object in memory.</li>\n\t<li>Elements of the original and the cloned array refer to different objects in memory.</li>\n\t<li>You can modify the objects using their references stored in the original array as well as the cloned array.</li>\n\t<li>The original array can be modified even if a copy of the original array is passed to a method.</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "1, 3, and 4", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, and 3", "correct": false}, {"option": "1, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements are true about the <strong>instanceof operator</strong>?</p>\n\n<ol>\n\t<li>It helps to determine whether a reference variable has a reference to an object of a class or a subclass of the class at run-time.</li>\n\t<li>It only does a run-time check.</li>\n\t<li>It is used to check if an object is an instance of a class or not.</li>\n\t<li>It goes through two types of checks: compile-time check and run-time check.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "1, and 2", "correct": false}, {"option": "2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following types of bindings are available in Java?</p>", "options": [{"option": "Static Binding and Dynamic Binding", "correct": false}, {"option": "Early Binding and Late Binding", "correct": false}, {"option": "Both of these options", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following types of methods and fields of a class is used for <strong>Early binding</strong>?</p>", "options": [{"option": "Static and Non-static fields", "correct": false}, {"option": "Static Methods", "correct": false}, {"option": "Non-static final methods", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements must be valid for <strong>method overriding </strong>in Java:</p>\n\n<p>1. The method can be either a static method or an instance method.</p>\n\n<p>2. The overriding method must have the same name as the overridden method.</p>\n\n<p>3. The order of the parameters in the overriding method and the overridden method can be different.</p>\n\n<p>4. If the overridden method has package-level access, the overriding method may have public, protected, or package-level<br>\naccess</p>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "2, and 4", "correct": true}, {"option": "2, 3, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java which keyword is used to access a <strong>overridden </strong>method from a subclass?</p>", "options": [{"option": "static ", "correct": false}, {"option": "super", "correct": true}, {"option": "final", "correct": false}, {"option": "override", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following statements about <strong>method overloading </strong>are valid<strong>:</strong></p>\n\n<ol>\n\t<li>Any method (static or non-static) can be overloaded.</li>\n\t<li>Overloading has nothing to do with Inheritance.</li>\n\t<li>Return types of overloaded methods do not play any roles in overloading.</li>\n\t<li>Overloaded methods must differ in the number of parameters, their types or orders.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, 3, and 4", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following keywords is used to call a <strong>constructor</strong> from <strong>another constructor </strong>of the same class?</p>", "options": [{"option": "super", "correct": false}, {"option": "this", "correct": true}, {"option": "static", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these statements about the following Java code is valid:</p>\n\n<pre class=\"prettyprint\"><code>\npublic class HackerEarth\n\n{\n\nprotected double val = 10.5;\n\n}\n\npublic class Hacker extends HackerEarth \n\n{\n\nprotected String val = \"Java\";\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "String val hides double val in class HackerEarth.", "correct": true}, {"option": "Double val hides String val in class Hacker.", "correct": false}, {"option": "They do not hide each other.", "correct": false}, {"option": "Not allowed", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n\n{\n\n       protected int var1 = 200;\n       private String var2 = \"Scala\";   \n\n}\n\nclass Hacker extends HackerEarth\n\n{\n\n    public int var1 = 500;\n    public String var2 = \"Python\";\n\n    public void display()\n\n    {\n\n        System.out.println(\"\"+var1);\n        System.out.println(\"\"+super.var2);\n\n    }\n\n}\n\npublic class HackerEarthMain\n\n{\n\n    public static void main(String[] args)\n\n    {\n\n       Hacker obj = new Hacker();\n    \n       obj.display();\n    \n    }\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "500\r\nPython", "correct": false}, {"option": "200\r\nScala", "correct": false}, {"option": "500\r\nScala", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of these keywords will you use to create a class that\u00a0represents a concept rather than objects?</p>\n\n<p>\u00a0</p>", "options": [{"option": "static ", "correct": false}, {"option": "final", "correct": false}, {"option": "abstract", "correct": true}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements about <strong>abstract classes </strong>in Java are true:</p>\n\n<ol>\n\t<li>An abstract class can contain only abstract methods.</li>\n\t<li>An abstract method cannot be declared static.</li>\n\t<li>An abstract method in a class can override an abstract method in its superclass without providing an implementation.</li>\n\t<li>You can declare a class as abstract even though it\u00a0does not have any abstract methods.</li>\n</ol>", "options": [{"option": "1, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "2, 3, and 4", "correct": true}, {"option": "1, 2, and 3", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following codes will you use to override all the subclasses of the class HackerEarth and provide an implementation for the <strong>equals(), hashCode(), </strong>and <strong>toString() </strong>methods of the <strong>Object </strong>class?</p>", "options": [{"option": "public abstract class HackerEarth {\r\npublic abstract int hashCode();\r\npublic abstract boolean equals(Object obj);\r\npublic abstract String toString();\r\n}", "correct": true}, {"option": "public abstract class HackerEarth {\r\npublic abstract double hashCode();\r\npublic abstract int equals(Object obj);\r\npublic abstract String toString();\r\n}", "correct": false}, {"option": "public class HackerEarth {\r\npublic int hashCode();\r\npublic boolean equals(Object obj);\r\npublic String toString();\r\n}", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{    \n    public void m1(double num)\n    {    \n        System.out.println(\"Inside HackerEarth Class \" + num);    \n    }\n}\n\nclass Hacker extends HackerEarth\n{\n    public void m1(int num)\n    {    \n        System.out.println(\"Inside Hacker Class \" + num);\n    }\n}\n\npublic class HackerEarthMain\n{\n    public static void main(String[] args)\n    {\n        HackerEarth obj = new Hacker();\n        obj.m1(10);    \n    }\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Inside HackerEarth Class 10.0", "correct": true}, {"option": "Inside Hacker Class 10", "correct": false}, {"option": "Compile-time Error", "correct": false}, {"option": "Run-time Error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following keywords is used to implement an <strong>interface </strong>in Java?</p>", "options": [{"option": "implement", "correct": false}, {"option": "implements", "correct": true}, {"option": "extends", "correct": false}, {"option": "extend", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following methods can be declared in an\u00a0<strong>interface:</strong></p>", "options": [{"option": "Abstract methods", "correct": false}, {"option": "Static methods", "correct": false}, {"option": "Default methods", "correct": false}, {"option": "All of these", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following statements about the <strong>default </strong>methods<strong> </strong>in<strong> </strong>Java are true:</p>\n\n<ol>\n\t<li>It provides a default implementation for a method.</li>\n\t<li>It is declared by using the keyword <strong>default.</strong></li>\n\t<li>It can be declared as static or abstract.</li>\n\t<li>A default method does not have access to the instance of variables of a\u00a0class that is used to implement\u00a0the interface.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": true}, {"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface HackerEarth \n\n{\n\n    public void work();\n\nclass NoWork implements HackerEarth\n\n{\n\n    private NoWork() \n    {\n         System.out.println(\"No Coding in Java\");    \n    }\n    \n    public void work()\n    {\n        System.out.println(\"Code in Java\");    \n    }\n\n}\n\nHackerEarth obj = new NoWork();\n\n}\n\npublic class HackerMain\n\n{\n\n    public static void main(String[] args)\n    {\n        getWork(HackerEarth.obj);\n    }\n\n    public static void getWork(HackerEarth obj) \n    {\n        obj.work();\n    }\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Code in Java", "correct": false}, {"option": "No Coding in Java", "correct": false}, {"option": "No Coding in Java\r\nCode in Java", "correct": true}, {"option": "Code in Java\r\nNo Coding in Java", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following keywords is used to inherit one interface from another interface in Java?</p>", "options": [{"option": "extends", "correct": true}, {"option": "implements", "correct": false}, {"option": "extend", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of\u00a0the following is inherited by a\u00a0subinterface from its superinterface?</p>\n\n<ol>\n\t<li>Abstract methods</li>\n\t<li>Default methods</li>\n\t<li>Constant fields</li>\n\t<li>Static methods</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": true}, {"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following statements about\u00a0<strong>reference types\u00a0</strong>is true:</p>\n\n<ol>\n\t<li>They hold the value of the object they refer to.</li>\n\t<li>A reference can be assigned to another object of the same type.</li>\n\t<li>A reference can be assigned to a new object using the new keyword.</li>\n\t<li>Reference types will throw a compiler error if you attempt to assign them null.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following declarations are\u00a0valid:</p>\n\n<ol>\n\t<li>int num, String value;</li>\n\t<li>boolean var1, var2;</li>\n\t<li>double d1, double d2;</li>\n\t<li>int val1; val2;</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "2 and 4", "correct": false}, {"option": "Only 2", "correct": true}, {"option": "2 and 3", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following keywords is used to declare a\u00a0<strong>class variable</strong>?</p>", "options": [{"option": "static", "correct": true}, {"option": "final", "correct": false}, {"option": "abstract", "correct": false}, {"option": "None of these", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these\u00a0statements will output\u00a0\"Java Scala\" for the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth\n{\n\npublic static void main(String[] args) \n{\n\n\tSystem.out.println(args[1]);\n\n}\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "java HackerEarth Python Java Scala", "correct": false}, {"option": "java HackerEarth \"Java Scala\" Python", "correct": false}, {"option": "java HackerEarth Python \"Java Scala\"", "correct": false}, {"option": "Runtime error", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the following statements are true:</p>\n\n<ol>\n\t<li>An instance variable of type boolean defaults to false.</li>\n\t<li>An instance variable of type boolean defaults to true.</li>\n\t<li>An instance variable of type int defaults to 0.</li>\n\t<li>An instance variable of type int defaults to null.</li>\n</ol>\n\n<p>\u00a0</p>", "options": [{"option": "1 and 3", "correct": true}, {"option": "1 and 4", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "2 and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these\u00a0statements about the following Java code are valid:</p>\n\n<ol>\n\t<li>finalize() is guaranteed to be called.</li>\n\t<li>finalize() might or might not be called.</li>\n\t<li>Garbage collection might or might not run.</li>\n\t<li>Garbage collection is guaranteed to run.</li>\n</ol>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n{\n\tprotected void finalize() \n\t{\n\t\tSystem.out.println(\"Coding!\");\n\t}\n\npublic static void main(String[] args)\n{\n\tHackerEarth hacker = new HackerEarth();\n\thacker = null;\n\tSystem.gc();\n} \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1 and 3", "correct": false}, {"option": "2 and 3", "correct": true}, {"option": "1 and 4", "correct": false}, {"option": "2 and 4", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n{\n\n\tpublic static void main(String[] args)\n\t{\n\n\tint[] values = new int[3];\n\tvalues[0] = 10;\n\tvalues[1] = new Integer(5);\n\tvalues[2] = 15;\n\n\tfor(int i=1; i&lt;values.length; i++) \n\t{\n\t\tSystem.out.println(values[i]-values[i-1]);\n\t}\n\n\t} \n\t\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "-510", "correct": false}, {"option": "-5\r\n10", "correct": true}, {"option": "10\r\n-5", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n{\n\n\tpublic static void main(String[] args)\n\n\t{\n\t    String string = \"Python\";\n\t    System.out.println(string.substring(3, 2));\n\n\t}\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "on", "correct": false}, {"option": "ho", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"abc\".equals(\"ABC\"));\t\n\n\t}\n\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "true", "correct": false}, {"option": "false", "correct": true}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\npublic class HackerEarth \n{\n\tpublic static void main(String[] args)\n\t\n\t{\n\t\tHackerEarth h1 = new HackerEarth();\n\t\tHackerEarth h2 = new HackerEarth();\n\t\tHackerEarth h3 = h1;\n\n\t\tSystem.out.println(h1 == h3);\n\t\tSystem.out.println(h1 == h2);\n\t\tSystem.out.println(h1.equals(h2)); \t\n\t}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "true\r\nfalse\r\nfalse", "correct": true}, {"option": "true\r\ntrue\r\nfalse\r\n", "correct": false}, {"option": "false\r\nfalse\r\nfalse", "correct": false}, {"option": "false\r\ntrue\r\ntrue", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\npublic class HackerEarth \n{\n\n\tpublic static void main(String[] args)\n\t\n\t{\n\t\tStringBuilder sb = new StringBuilder();\n\t\tsb.append(\"aaa\").insert(1, \"bb\").insert(4, \"ccc\");\n\t\tSystem.out.println(sb); \n\t\n\t}\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "bbaaaccc", "correct": false}, {"option": "bbcccaaa", "correct": false}, {"option": "abbaaccc", "correct": false}, {"option": "abbaccca", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following are valid method declarations in Java?</p>\n\n<ol>\n\t<li>final public void Hacker( ) { }</li>\n\t<li>public void final Hacker( ) { }</li>\n\t<li>public modifier void Hacker( ) { }</li>\n\t<li>public static final void Hacker( ) { }</li>\n</ol>", "options": [{"option": "1, and 4", "correct": true}, {"option": "2, and 3", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth \n\n{\n\tprivate static String str1 = \"Java\";\n\tprivate String str2 = \"Scala\";\n\t\n\tpublic static void Java() \n\t{\n\t\tSystem.out.println(str1);\n\t}\n\t\n\tpublic static void Scala() \n\t\n\t{\n\t\t System.out.println(str2);\n}\n\n\tpublic static void main(String args[])\n\n\t{\n\t    Java();\n\t    Scala();\n\t}\n}\n\t</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Java\r\nScala", "correct": false}, {"option": "Java", "correct": false}, {"option": "Compile time Error", "correct": true}, {"option": "Run-time Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\npublic class HackerEarth \n\n{\n\tpublic void code(String s)\n\t{\n\t\tSystem.out.print(\"Java \");\n\t}\n\n\tpublic void write(Object o) \n\t{\n\t\tSystem.out.print(\"Language\");\n\t}\n\npublic static void main(String[] args)\n\n{\n\tHackerEarth r = new HackerEarth();\n\n\tr.code(\"Object \");\n\tr.write(555);\n\n}\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Object 555", "correct": false}, {"option": "Java Object ", "correct": false}, {"option": "Object Language", "correct": false}, {"option": "Java Language", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\npublic class HackerEarth \n\n{\nstatic\n{ \n\t code(2); \n}\n\nstatic void code(int val)\n{\n\t System.out.print(val + \" \");\n}\n\nHackerEarth() \n{\n\t code(5); \n}\n\nstatic \n{\n\t code(4);\n}\n\n{\n\t code(6);\n}\n\nstatic \n{\n\t new HackerEarth();\n}\n\n{\n\t code(8); \n}\n\npublic static void main(String[] args)\n{\n\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "2 4 6 8 5", "correct": true}, {"option": "2 4 8 6 5", "correct": false}, {"option": "5 4 6 8 2", "correct": false}, {"option": "Run-time Error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements are true ?</p>\n\n<p>i. A reference to an object may be cast to a superclass of the object without an explicit cast.</p>\n\n<p>ii. All cast exceptions can be detected at compile-time.</p>\n\n<p>iii. A concrete subclass must implement all methods defined in an inherited interface.</p>\n\n<p>iv. a public instance method can be overridden in a subclass and calls to it will be replaced even in the superclass it was defined</p>\n\n<p>\u00a0</p>", "options": [{"option": "i, ii, and iii", "correct": false}, {"option": "iii, and iv", "correct": true}, {"option": "ii, and iv", "correct": false}, {"option": "i, ii, and iv", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>    8 &gt; 7 &lt; 6;\n</code></pre>", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}, {"option": "TrueFalse", "correct": false}, {"option": "Error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>    function my_func(a, b, c) { \n        arguments[2] = 10; \n        alert(c); \n    } \n    my_func(20, 20, 20);\n</code></pre>", "options": [{"option": "Error ", "correct": false}, {"option": "10", "correct": true}, {"option": "20", "correct": false}, {"option": "2", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of these statements about the running behavior of <code>do while (a &lt; b)</code> is correct?</p>", "options": [{"option": "until a >= b", "correct": true}, {"option": "until a < b", "correct": false}, {"option": "until a > b", "correct": false}, {"option": "until a <= b", "correct": false}], "level": "Medium"}, {"question": "<p>In JavaScript, which of the following is not a valid variable name?</p>", "options": [{"option": "2names", "correct": true}, {"option": " _first_and_last_names", "correct": false}, {"option": "FirstAndLast", "correct": false}, {"option": "name12", "correct": false}], "level": "Easy"}, {"question": "<p>What is the\u00a0output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>var greeting = \"Hello friends\";\ngreeting = \"See you later\";\nfor (var i = 0; i &lt; 2; i++) {\n\u00a0 var greeting = \"Good day\";\n}\nconsole.log(greeting);\n</code></pre>", "options": [{"option": "Hello friends", "correct": false}, {"option": "Good day", "correct": true}, {"option": "See you later", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following JavaScript code:</p>\n\n<pre class=\"prettyprint\"><code>function year_range(st_year, end_year) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const year_range = [];\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (let i = st_year; i &lt;= end_year; i++)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 {\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0year_range.push(i);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 const new_array = [];\n\u00a0 year_range.forEach(\n\u00a0\u00a0 year =&gt; {\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (test_Year(year))\n\u00a0\u00a0\u00a0\u00a0\u00a0 new_array.push(year);\n\u00a0\u00a0 });\n\u00a0 return new_array;\n\u00a0\u00a0\u00a0\u00a0 }\nfunction test_Year(year) {\n\u00a0\u00a0 if ((year % 4 === 0 &amp;&amp; year % 100 !== 0) || (year % 100 === 0 &amp;&amp; year % 400 === 0)) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return year;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 } else {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 return false;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n}\nconsole.log(leap_year_range(2000,2012));\u200b\u200b\u200b\u200b\u200b\u200b\u200b</code></pre>", "options": [{"option": "[2000, 2012]", "correct": false}, {"option": "[2000, 2004, 2008, 2012]", "correct": true}, {"option": "[2004, 2008, 2012]", "correct": false}, {"option": "[2000, 2004, 2008]", "correct": false}], "level": "Hard"}, {"question": "<p>What will happen when you compile and run the following code?</p>\n\n<pre class=\"prettyprint\"><code>class One {\n    public One() {\n    }\n\n    public One(long l) {\n        System.out.print(\"long constructor\");\n    }\n}\n\nclass Two extends One {\n    public One(int i){ System.out.print(\"int constructor\"); }\n}\n\npublic class Test {\n    public static void main(String[] args) {\n        long l = 20l;\n        One one = new Two(l);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "int constructor", "correct": false}, {"option": "long constructor\u00a0", "correct": false}, {"option": "Compilation error", "correct": true}, {"option": "Runtime error", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the value of x after executing these statements?</p>\n\n<pre class=\"prettyprint\"><code>int x = 10, y = 15; \nx = ((x &lt; y) ? (y + x) : (y - x);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "25.0", "correct": true}, {"option": "5.0", "correct": false}, {"option": "10.0", "correct": false}, {"option": "15.0", "correct": false}], "level": "Medium"}, {"question": "<p>What is wrong in the following class definitions?</p>\n\n<pre class=\"prettyprint\"><code>abstract class Print {\n    abstract show();\n}\n\nclass Display extends Print {\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Nothing is wrong", "correct": false}, {"option": "Method show() should have a return type", "correct": false}, {"option": "Methods show() is not implemented in Display", "correct": true}, {"option": "Display does not contain any members.", "correct": false}], "level": "Medium"}, {"question": "<p>What does the following code represent</p>\n\n<pre class=\"prettyprint\"><code>abstract class Machine {\n Part part1; \n Part part2; \n} \n\nabstract class Part { \n String name; \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "\u201cis-a\u201d relationship", "correct": false}, {"option": "\u201chas-a\u201d relationship", "correct": true}, {"option": "visible relationship", "correct": false}, {"option": "invisible relationship", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of below code snippet?</p>\n\n<pre class=\"prettyprint\"><code>class A { } \n\nenum Enums extends A { \n ABC, BCD, CDE, DEF; \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Runtime Error", "correct": false}, {"option": "Compilation Error", "correct": true}, {"option": "It runs successfully", "correct": false}, {"option": "EnumNotDefined Exception", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following are legal lines of Java code?</p>\n\n<pre class=\"prettyprint\"><code>int w = (int)888.8;\nbyte x = (byte)100L; \nlong y = (byte)100; \nbyte z = (byte)100L;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "2 and 3", "correct": false}, {"option": "3 and 4", "correct": false}, {"option": "all are correct", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of the code below</p>\n\n<pre class=\"prettyprint\"><code>class increment { \n public static void main(String args[]) { \n  int g = 3; \n  System.out.print(++g * 8); \n } \n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "25.0", "correct": false}, {"option": "24.0", "correct": false}, {"option": "32.0", "correct": true}, {"option": "33.0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class array_output {\n    public static void main(String args[]) {\n        char array_variable[] = new char[10];\n        for (int i = 0; i &lt; 10; ++i) {\n            array_variable[i] = 'i';\n            System.out.print(array_variable[i] + \"\");\n            i++;\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "i i i i i", "correct": true}, {"option": "0 1 2 3 4", "correct": false}, {"option": "i j k l m", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class booloperators {\n    public static void main(String args[]) {\n        boolean var1 = true;\n        boolean var2 = false;\n        System.out.println((var1 &amp; var2));\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0.0", "correct": false}, {"option": "1.0", "correct": false}, {"option": "1", "correct": false}, {"option": "0", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output?</p>\n\n<pre class=\"prettyprint\"><code>class evaluate {\n    public static void main(String args[]) {\n        int a[] = { 1, 2, 3, 4, 5 };\n        int d[] = a;\n        int sum = 0;\n        for (int j = 0; j &lt; 3; ++j)\n            sum += (a[j] * d[j + 1]) + (a[j + 1] * d[j]);\n        System.out.println(sum);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "39.0", "correct": false}, {"option": "38.0", "correct": false}, {"option": "40.0", "correct": true}, {"option": "41.0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class array_output {\n    public static void main(String args[]) {\n        int array_variable[] = new int[10];\n        for (int i = 0; i &lt; 10; ++i) {\n            array_variable[i] = i / 2;\n            array_variable[i]++;\n            System.out.print(array_variable[i] + \" \");\n            i++;\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "0 2 4 6 8", "correct": false}, {"option": "1 2 3 4 5", "correct": true}, {"option": "0 1 2 3 4 5 6 7 8 9", "correct": false}, {"option": "1 2 3 4 5 6 7 8 9 10", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program, if we run as \u201cjava main_arguments 1 2 3\u201d?</p>\n\n<pre class=\"prettyprint\"><code>class main_arguments {\n    public static void main(String[] args) {\n        String[][] argument = new String[2][2];\n        int x;\n        argument[0] = args;\n        x = argument[0].length;\n        for (int y = 0; y &lt; x; y++)\n            System.out.print(\" \" + argument[0][y]);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1 1", "correct": false}, {"option": "1 0", "correct": false}, {"option": "1 0 3", "correct": false}, {"option": "1 2 3", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>class access {\n    static int x;\n\n    void increment() {\n        x++;\n    }\n}\n\nclass static_use {\n    public static void main(String args[]) {\n        access obj1 = new access();\n        access obj2 = new access();\n        obj1.x = 0;\n        obj1.increment();\n        obj2.increment();\n        System.out.println(obj1.x + \" \" + obj2.x);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1 2", "correct": false}, {"option": "1 1", "correct": false}, {"option": "2 2", "correct": true}, {"option": "Compilation Error", "correct": false}], "level": "Medium"}, {"question": "<p>Which are the session tracking techniques?</p>\n\n<pre class=\"prettyprint\"><code>  i. URL rewriting \n ii. Using session object \niii.Using response object \n iv. Using hidden fields \n  v. Using cookies\n vi. Using servlet object</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "i, ii, iii, vi", "correct": false}, {"option": "i, ii, iv, v", "correct": true}, {"option": "i, vi, iii, v", "correct": false}, {"option": "i, ii, iii, v", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass Output {\n    public static void main(String args[]) {\n        TreeSet t = new TreeSet();\n        t.add(\"3\");\n        t.add(\"9\");\n        t.add(\"1\");\n        t.add(\"4\");\n        t.add(\"8\");\n        System.out.println(t);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[1, 3, 5, 8, 9]", "correct": false}, {"option": "[3, 4, 1, 8, 9]", "correct": false}, {"option": "[9, 8, 4, 3, 1]", "correct": false}, {"option": "[1, 3, 4, 8, 9]", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass Maps {\n    public static void main(String args[]) {\n        TreeMap obj = new TreeMap();\n        obj.put(\"A\", new Integer(1));\n        obj.put(\"B\", new Integer(2));\n        obj.put(\"C\", new Integer(3));\n        System.out.println(obj.entrySet());\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[A, B, C]", "correct": false}, {"option": "[1, 2, 3]", "correct": false}, {"option": "{A=1, B=2, C=3}", "correct": false}, {"option": "[A=1, B=2, C=3]", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass vector {\n    public static void main(String args[]) {\n        Vector obj = new Vector(4, 2);\n        obj.addElement(new Integer(3));\n        obj.addElement(new Integer(2));\n        obj.addElement(new Integer(5));\n        System.out.println(obj.capacity());\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "2.0", "correct": false}, {"option": "3.0", "correct": false}, {"option": "4.0", "correct": true}, {"option": "6.0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass vector {\n    public static void main(String args[]) {\n        Vector obj = new Vector(4, 2);\n        obj.addElement(new Integer(3));\n        obj.addElement(new Integer(2));\n        obj.addElement(new Integer(6));\n        obj.insertElementAt(new Integer(8), 2);\n        System.out.println(obj);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[3, 2, 6]", "correct": false}, {"option": "[3, 2, 8]", "correct": false}, {"option": "[3, 2, 6, 8]", "correct": false}, {"option": "[3, 2, 8, 6]", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.util.*;\n\nclass stack {\n    public static void main(String args[]) {\n        Stack obj = new Stack();\n        obj.push(new Integer(3));\n        obj.push(new Integer(2));\n        obj.pop();\n        obj.push(new Integer(5));\n        System.out.println(obj);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[3, 5]", "correct": true}, {"option": "[3, 2]", "correct": false}, {"option": "[3, 2, 5]", "correct": false}, {"option": "[3, 5, 2]", "correct": false}], "level": "Medium"}, {"question": "<p>What would be the output of following code snippet?</p>\n\n<pre class=\"prettyprint\"><code>int a = random.nextInt(7) + 4;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Random number between 4 to 7, including 4 and 7", "correct": false}, {"option": "Random number between 4 to 7, excluding 4 and 7", "correct": false}, {"option": "Random number between 4 to 10, excluding 4 and 10", "correct": false}, {"option": "Random number between 4 to 10, including 4 and 10", "correct": true}], "level": "Medium"}, {"question": "<p>What is the output of this program if input given is \u2018abcqfghqbcd\u2019?</p>\n\n<pre class=\"prettyprint\"><code>class Input_Output {\n    public static void main(String args[]) throws IOException {\n        char c;\n        BufferedReader obj = new BufferedReader(new InputStreamReader(System.in));\n        do {\n            c = (char) obj.read();\n            System.out.print(c);\n        } while (c != 'q');\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "abcqfgh", "correct": false}, {"option": "abc", "correct": false}, {"option": "abcq", "correct": true}, {"option": "abcqfghq", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.io.*;\nimport java.net.*;\n\npublic class URLDemo {\n    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"https://www.ushur.com/welcome\");\n            System.out.println(\"Port Number: \" + url.getPort());\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Port Number: 8080", "correct": false}, {"option": "Port Number: null", "correct": false}, {"option": "Port Number: -1", "correct": true}, {"option": "none of the above", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of this program?</p>\n\n<pre class=\"prettyprint\"><code>import java.io.*;\nimport java.net.*;\n\npublic class URLDemo {\n    public static void main(String[] args) {\n        try {\n            InetAddress obj1 = InetAddress.getByName(\"ushur.com\");\n            System.out.print(obj1.getHostName());\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "ushur", "correct": false}, {"option": "www.ushur.com", "correct": false}, {"option": "ushur.com", "correct": true}, {"option": "none of the above", "correct": false}], "level": "Medium"}, {"question": "<p>The order of the three top level elements of the java source file are</p>", "options": [{"option": "Import, Package, Class", "correct": false}, {"option": "Class, Import, Package", "correct": false}, {"option": "Package, Import, Class", "correct": true}, {"option": "Random order", "correct": false}], "level": "Easy"}, {"question": "<p>The javac compiler</p>", "options": [{"option": "creates executable", "correct": false}, {"option": "translates java source code to byte code\u00a0", "correct": true}, {"option": "creates classes", "correct": false}, {"option": "produces java Interpreter", "correct": false}], "level": "Easy"}, {"question": "<p>While using threads which of the following is incorrect?</p>", "options": [{"option": "You invoke the Run method\u00a0", "correct": false}, {"option": "You implement Runnable interface", "correct": false}, {"option": "You extend from Thread class", "correct": false}, {"option": "You call the start method", "correct": true}], "level": "Medium"}, {"question": "<p>Two threads cannot simultaneously enter into the methods of the same object if the methods are</p>", "options": [{"option": "static", "correct": false}, {"option": "synchronized", "correct": true}, {"option": "private", "correct": false}, {"option": "package", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following will produce a value of 10 if x = 9.7?</p>", "options": [{"option": "floor(x)", "correct": false}, {"option": "abs(x)", "correct": false}, {"option": "rint(x)", "correct": false}, {"option": "round(x)", "correct": true}], "level": "Medium"}, {"question": "<p>The use of protected keyword to a member in a class will restrict its visibility as follows:</p>", "options": [{"option": "Visibility only in the class and its subclasses in the same package", "correct": false}, {"option": "Visibility only inside the same package.", "correct": false}, {"option": "Visibility in all classes in the same package and subclasses in other packages", "correct": true}, {"option": "Visibility only in the class where it is declared", "correct": false}], "level": "Medium"}, {"question": "<p>A package is a collection of</p>", "options": [{"option": "classes", "correct": false}, {"option": "interface", "correct": false}, {"option": "editing tools", "correct": false}, {"option": "classes and interfaces", "correct": true}], "level": "Easy"}, {"question": "<p>If we try to add Enum constants to a TreeSet, what sorting order will it use?</p>", "options": [{"option": "Sorted in the order of declaration of Enums", "correct": true}, {"option": "Sorted in alphabetical order of Enums", "correct": false}, {"option": "Sorted based on order() method", "correct": false}, {"option": "Sorted in descending order of names of Enums", "correct": false}], "level": "Hard"}, {"question": "<p>Which class does all the Enums extend?</p>", "options": [{"option": "Object", "correct": false}, {"option": "Enums", "correct": false}, {"option": "Enum", "correct": true}, {"option": "EnumClass", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following is the advantage of BigDecimal over double?</p>", "options": [{"option": "Syntax", "correct": false}, {"option": "Memory Usage", "correct": false}, {"option": "Garbage Collection", "correct": false}, {"option": "Precision", "correct": true}], "level": "Hard"}, {"question": "<p>How to convert Date object to String?</p>", "options": [{"option": "new Date().format();", "correct": false}, {"option": "new SimpleDateFormat(\"yyyy-mm-dd\u201d).parse(new Date());", "correct": false}, {"option": "new SimpleDateFormat(\"yyyy-mm-dd\u201d).format(new Date());", "correct": true}, {"option": "new Date().parse();", "correct": false}], "level": "Medium"}, {"question": "<p>How is Date stored in database?</p>", "options": [{"option": "java.sql.Date", "correct": true}, {"option": "java.util.Date", "correct": false}, {"option": "java.sql.DateTime", "correct": false}, {"option": "java.util.DateTime", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is necessary condition for automatic type conversion in Java?</p>", "options": [{"option": "The destination type is smaller than source type", "correct": false}, {"option": "The destination type is larger than source type", "correct": true}, {"option": "The destination type can be larger or smaller than source type", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Medium"}, {"question": "<p>What is the signature of the default constructor of this class? public class prototype { }</p>", "options": [{"option": "prototype( )", "correct": false}, {"option": "prototype(void)\u00a0", "correct": false}, {"option": "public prototype(void)", "correct": false}, {"option": "public prototype( )", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these operators is used to allocate memory to array variable in Java?</p>", "options": [{"option": "malloc", "correct": false}, {"option": "alloc", "correct": false}, {"option": "new", "correct": true}, {"option": "new malloc", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is an incorrect array declaration?</p>", "options": [{"option": "int arr[] = new int[5]", "correct": false}, {"option": "int [] arr = new int[5]", "correct": false}, {"option": "int arr[] = new int[5]", "correct": false}, {"option": "int arr[] = int [5] new\u00a0", "correct": true}], "level": "Medium"}, {"question": "<p>Generics do not work wit h arrays</p>", "options": [{"option": "1", "correct": true}, {"option": "0", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of relational operators?</p>", "options": [{"option": "integer", "correct": false}, {"option": "boolean", "correct": true}, {"option": "char", "correct": false}, {"option": "double", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is a garbage collection technique?</p>", "options": [{"option": "Cleanup model", "correct": false}, {"option": "Mark and sweep model\u00a0", "correct": true}, {"option": "Space management model", "correct": false}, {"option": "Sweep model", "correct": false}], "level": "Hard"}, {"question": "<p>Which exception is thrown when java is out of memory?</p>", "options": [{"option": "MemoryFullException", "correct": false}, {"option": "MemoryOutOfBoundsException\u00a0", "correct": false}, {"option": "OutOfMemoryError", "correct": true}, {"option": "MemoryError", "correct": false}], "level": "Hard"}, {"question": "<p>Garbage Collection can be controlled by a program?</p>", "options": [{"option": "1", "correct": false}, {"option": "0", "correct": true}], "level": "Medium"}, {"question": "<p>Which of the below is not a memory leak solution?</p>", "options": [{"option": "Code changes", "correct": false}, {"option": "JVM parameter tuning", "correct": false}, {"option": "Process restart", "correct": true}, {"option": "GC parameter tuning", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these can be overloaded?</p>", "options": [{"option": "Methods", "correct": false}, {"option": "Constructor", "correct": false}, {"option": "Both methods and constructiors", "correct": true}, {"option": "None of the mentioned", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is correct about passing an argument by call-by-value process?</p>", "options": [{"option": "Copy of argument is made into the formal parameter of the subroutine\u00a0", "correct": true}, {"option": "Reference to original argument is passed to formal parameter of the subroutine", "correct": false}, {"option": "Copy of argument is made into the formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument", "correct": false}, {"option": "Reference to original argument is passed to formal parameter of the subroutine and changes made on parameters of subroutine have effect on original argument", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these is used to access a member of class before object of that class is created?</p>", "options": [{"option": "public", "correct": false}, {"option": "private", "correct": false}, {"option": "static", "correct": true}, {"option": "protected", "correct": false}], "level": "Medium"}, {"question": "<p>Where can a protected modifier be accessed?</p>", "options": [{"option": "accessible only within the class", "correct": false}, {"option": "accessible only within package", "correct": false}, {"option": "accessible within package and outside the package but through inheritance only\u00a0", "correct": true}, {"option": "accessible by all", "correct": false}], "level": "Medium"}, {"question": "<p>What happens if constructor of class A is made private?</p>", "options": [{"option": "Any class can instantiate objects of class A", "correct": false}, {"option": "Objects of class A can be instantiated only within the class where it is declared", "correct": true}, {"option": "nherited class can instantiate objects of class A", "correct": false}, {"option": "classes within the same package as class A can instantiate objects of class A", "correct": false}], "level": "Hard"}, {"question": "<p>All the variables of interface should be?</p>", "options": [{"option": "default and final", "correct": false}, {"option": "default and static", "correct": false}, {"option": "public, static and final", "correct": true}, {"option": "protect, static and final", "correct": false}], "level": "Easy"}, {"question": "<p>What is true of final class?</p>", "options": [{"option": "Final class cause compilation failure", "correct": false}, {"option": "Final class cannot be instantiated", "correct": false}, {"option": "Final class cause runtime failure", "correct": false}, {"option": "Final class cannot be inherited", "correct": true}], "level": "Medium"}, {"question": "<p>Arrays in Java are implemented as?</p>", "options": [{"option": "class", "correct": false}, {"option": "object", "correct": true}, {"option": "variable", "correct": false}, {"option": "none of the above", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these keywords is used to prevent content of a variable from being modified?</p>", "options": [{"option": "final", "correct": true}, {"option": "last", "correct": false}, {"option": "constant", "correct": false}, {"option": "static", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these cannot be declared static?</p>", "options": [{"option": "class", "correct": false}, {"option": "object", "correct": true}, {"option": "variable", "correct": false}, {"option": "method", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following statements are incorrect</p>", "options": [{"option": "static methods can call other static methods only", "correct": false}, {"option": "static methods must only access static data", "correct": false}, {"option": "static methods can not refer to this or super in any way", "correct": false}, {"option": "when object of class is declared, each object contains its own copy of static variables", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these method of String class can be used to test to strings for equality?</p>", "options": [{"option": "isequal()", "correct": false}, {"option": "isequals()", "correct": false}, {"option": "equal()", "correct": false}, {"option": "equals()", "correct": true}], "level": "Easy"}, {"question": "<p>Which of the following is advantage of using PreparedStatement in Java?</p>", "options": [{"option": "Slow performance", "correct": false}, {"option": "Encourages SQL injection", "correct": false}, {"option": "Prevents SQL injection", "correct": true}, {"option": "More memory usage", "correct": false}], "level": "Medium"}, {"question": "<p>What does setAutoCommit(false) do?</p>", "options": [{"option": "commits transaction after each query", "correct": false}, {"option": "explicitly commits transaction", "correct": false}, {"option": "does not commit transaction automatically after each query", "correct": true}, {"option": "never commits transaction", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the following is used to call stored procedure?</p>", "options": [{"option": "Statement", "correct": false}, {"option": "PreparedStatement", "correct": false}, {"option": "CallableStatement", "correct": true}, {"option": "CalledStatement", "correct": false}], "level": "Medium"}, {"question": "<p>All methods must be implemented of an interface.</p>", "options": [{"option": "1", "correct": true}, {"option": "0", "correct": false}], "level": "Easy"}, {"question": "<p>What does an interface contain?</p>", "options": [{"option": "Method definition", "correct": false}, {"option": "Method declaration\u00a0", "correct": true}, {"option": "Method declaration and definition", "correct": false}, {"option": "Method name", "correct": false}], "level": "Easy"}, {"question": "<p>Which of this package is used for analyzing code during run-time?</p>", "options": [{"option": "java.applet", "correct": false}, {"option": "java.awt", "correct": false}, {"option": "java.io", "correct": false}, {"option": "java.lang.reflect", "correct": true}], "level": "Hard"}, {"question": "<p>Object of which class is used to compile regular expression?</p>", "options": [{"option": "Pattern class", "correct": true}, {"option": "Matcher class", "correct": false}, {"option": "PatternSyntaxException", "correct": false}, {"option": "None of the mentioned", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following matches nonword character using regular expression in java?</p>", "options": [{"option": "\\w", "correct": false}, {"option": "\\W", "correct": true}, {"option": "\\s", "correct": false}, {"option": "\\S", "correct": false}], "level": "Hard"}, {"question": "<p>What data structure should be used when number of elements is fixed?</p>", "options": [{"option": "Array", "correct": true}, {"option": "ArrayList", "correct": false}, {"option": "Vector", "correct": false}, {"option": "Set", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these keywords is used to generate an exception explicitly?</p>", "options": [{"option": "try", "correct": false}, {"option": "finally", "correct": false}, {"option": "throw", "correct": true}, {"option": "catch", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these clause will be executed even if no exceptions are found?</p>", "options": [{"option": "throws", "correct": false}, {"option": "finally", "correct": true}, {"option": "throw", "correct": false}, {"option": "catch", "correct": false}], "level": "Medium"}, {"question": "<p>Which of below is not a dependency management tool?</p>", "options": [{"option": "Ant", "correct": false}, {"option": "Maven", "correct": false}, {"option": "Gradle", "correct": false}, {"option": "Jenkins", "correct": true}], "level": "Medium"}, {"question": "<p>Which file is used to define dependency in maven?</p>", "options": [{"option": "build.xml", "correct": false}, {"option": "pom.xml", "correct": true}, {"option": "dependency.xml", "correct": false}, {"option": "version.xml", "correct": false}], "level": "Medium"}, {"question": "<p>Which command can be used to check maven version?</p>", "options": [{"option": "mvn -ver", "correct": false}, {"option": "maven -ver", "correct": false}, {"option": "maven -version", "correct": false}, {"option": "mvn -version", "correct": true}], "level": "Easy"}, {"question": "<p>What is true about a break?</p>", "options": [{"option": "Break stops the execution of entire program", "correct": false}, {"option": "Break halts the execution and forces the control out of the loop", "correct": true}, {"option": "Break forces the control out of the loop and starts the execution of next iteration", "correct": false}, {"option": "Break halts the execution of the loop for certain time frame", "correct": false}], "level": "Medium"}, {"question": "<p>What is true about do statement?</p>", "options": [{"option": "do statement executes the code of a loop at least once", "correct": true}, {"option": "do statement does not get execute if condition is not matched in the first iteration", "correct": false}, {"option": "do statement checks the condition at the beginning of the loop", "correct": false}, {"option": "do statement executes the code more than once always", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is correct way making a list that is upper bounded by class Number?</p>", "options": [{"option": "List<? extends Number>", "correct": true}, {"option": "List<extends ? Number>", "correct": false}, {"option": "List(? extends Number)", "correct": false}, {"option": "List(? UpperBounds Number)", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these method of Object class is used to obtain class of an object at run time?</p>", "options": [{"option": "get()", "correct": false}, {"option": "void getClass()", "correct": false}, {"option": "Class getClass()", "correct": true}, {"option": "None of the mentioned", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords cannot be used for a class which has been declared final?</p>", "options": [{"option": "abstract", "correct": true}, {"option": "extends", "correct": false}, {"option": "abstract and extends", "correct": false}, {"option": "none of the mentioned", "correct": false}], "level": "Medium"}, {"question": "<p>Do we have get(Object o) method in HashSet?</p>", "options": [{"option": "YES", "correct": false}, {"option": "NO", "correct": true}], "level": "Medium"}, {"question": "<p>What is the relation between HashSet and HashMap?</p>", "options": [{"option": "HashSet internally implements HashMap\u00a0", "correct": true}, {"option": "HashMap internally implements HashSet\u00a0", "correct": false}, {"option": "HashMap is the interface; HashSet is the concrete class", "correct": false}, {"option": "HashSet is the interface; HashMap is the concrete class", "correct": false}], "level": "Hard"}, {"question": "<p>What is the difference between TreeSet and SortedSet?</p>", "options": [{"option": "TreeSet is more efficient than SortedSet", "correct": false}, {"option": "SortedSet is more efficient than TreeSet", "correct": false}, {"option": "TreeSet is an interface; SortedSet is a concrete class", "correct": false}, {"option": "SortedSet is an interface; TreeSet is a concrete class", "correct": true}], "level": "Hard"}, {"question": "<p>What happens if two threads simultaneously modify TreeSet?</p>", "options": [{"option": "ConcurrentModificationException is thrown\u00a0", "correct": true}, {"option": "Both threads can perform action successfully", "correct": false}, {"option": "FailFastException is thrown", "correct": false}, {"option": "IteratorModificationException is thrown", "correct": false}], "level": "Hard"}, {"question": "<p>What is the unique feature of LinkedHashSet?</p>", "options": [{"option": "It is not a valid class", "correct": false}, {"option": "It maintains the insertion order and guarantees uniqueness", "correct": true}, {"option": "It provides a way to store key values with uniqueness", "correct": false}, {"option": "The elements in the collection are linked to each other", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these method is used to add an element to the start of a LinkedList object?</p>", "options": [{"option": "add()", "correct": false}, {"option": "first()", "correct": false}, {"option": "AddFirst()", "correct": false}, {"option": "addFirst()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these methods can be used to obtain a collection of keys in a map?</p>", "options": [{"option": "getAll()", "correct": false}, {"option": "getKeys()", "correct": false}, {"option": "keyAll()", "correct": false}, {"option": "keySet()", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these class object can be used to form a dynamic array?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "Map", "correct": false}, {"option": "Vector", "correct": false}, {"option": "ArrayList & Vector", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these class object uses the key to store value?</p>", "options": [{"option": "Dictionary", "correct": false}, {"option": "Map", "correct": false}, {"option": "Hashtable", "correct": false}, {"option": "All of the mentioned", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these method of Locale class can be used to obtain country of operation?</p>", "options": [{"option": "getCountry()", "correct": false}, {"option": "whichCountry()", "correct": false}, {"option": "DisplayCountry()", "correct": false}, {"option": "getDisplayCountry()", "correct": true}], "level": "Hard"}, {"question": "<p>Which class is used to generate random number?</p>", "options": [{"option": "java.lang.Object", "correct": false}, {"option": "java.util.randomNumber", "correct": false}, {"option": "java.util.Random", "correct": true}, {"option": "java.util.Object", "correct": false}], "level": "Medium"}, {"question": "<p>What would be the output of following code snippet? int a = random.nextInt(7) + 4;</p>", "options": [{"option": "Random number between 4 to 7, including 4 and 7", "correct": false}, {"option": "Random number between 4 to 7, excluding 4 and 7", "correct": false}, {"option": "Random number between 4 to 10, excluding 4 and 10", "correct": false}, {"option": "Random number between 4 to 10, including 4 and 10", "correct": true}], "level": "Medium"}, {"question": "<p>Which of these package contains classes and interfaces for networking?</p>", "options": [{"option": "java.io", "correct": false}, {"option": "java.util", "correct": false}, {"option": "java.net", "correct": true}, {"option": "java.network", "correct": false}], "level": "Easy"}, {"question": "<p>How many bits are there in a IPv4 IP address?</p>", "options": [{"option": "3 octets in 4 bits", "correct": false}, {"option": "4 bits in 3 octets", "correct": false}, {"option": "8 bits in 4 octets", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these class is used to encapsulate IP address and DNS?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "URL", "correct": false}, {"option": "InetAddress", "correct": true}, {"option": "ContentHandler", "correct": false}], "level": "Medium"}, {"question": "<p>Which of the below classes is used to create a server that listens for either local or remote client programs?</p>", "options": [{"option": "HttpServer", "correct": false}, {"option": "ServerSocket", "correct": true}, {"option": "MimeHeader", "correct": false}, {"option": "HttpResponse", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is a standard for communicating multimedia content over email?</p>", "options": [{"option": "HTTP", "correct": false}, {"option": "HTTPS", "correct": false}, {"option": "MIME", "correct": true}, {"option": "HTTPD", "correct": false}], "level": "Medium"}, {"question": "<p>What does URL stands for?</p>", "options": [{"option": "Uniform Resource Locator", "correct": true}, {"option": "Uniform Resource Latch", "correct": false}, {"option": "Universal Resource Locator", "correct": false}, {"option": "Universal Resource Latch", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these exceptions is thrown by URL class\u2019s constructors?</p>", "options": [{"option": "URLNotFound", "correct": false}, {"option": "URLSourceNotFound", "correct": false}, {"option": "MalformedURLException", "correct": true}, {"option": "URLNotFoundException", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is a bundle of information passed between machines?</p>", "options": [{"option": "MIME", "correct": false}, {"option": "Cache", "correct": false}, {"option": "Datagrams", "correct": true}, {"option": "DatagramSocket", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these class is necessary to implement datagrams?</p>", "options": [{"option": "DatagramPacket", "correct": false}, {"option": "DatagramSocket", "correct": false}, {"option": "Both DatagramPacket and DatagramSocket", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Hard"}, {"question": "<p>Which of these is a process of writing the state of an object to a byte stream?</p>", "options": [{"option": "Serialization", "correct": true}, {"option": "Externalization", "correct": false}, {"option": "File Filtering", "correct": false}, {"option": "All of the mentioned", "correct": false}], "level": "Medium"}, {"question": "<p>Which of these is an interface for control over serialization and deserialization?</p>", "options": [{"option": "Serializable", "correct": true}, {"option": "Externalization", "correct": false}, {"option": "FileFilter", "correct": false}, {"option": "ObjectInput", "correct": false}], "level": "Medium"}, {"question": "<p>How many methods Serializable has?</p>", "options": [{"option": "1.0", "correct": false}, {"option": "2.0", "correct": false}, {"option": "3.0", "correct": false}, {"option": "0.0", "correct": true}], "level": "Easy"}, {"question": "<p>If member does not implement serialization, which exception would be thrown?</p>", "options": [{"option": "RuntimeException", "correct": false}, {"option": "SerializableException", "correct": false}, {"option": "NotSerializableException", "correct": true}, {"option": "UnSerializedException", "correct": false}], "level": "Hard"}, {"question": "<p>Serializaed object can be transferred via network.</p>", "options": [{"option": "1", "correct": true}, {"option": "0", "correct": false}], "level": "Medium"}, {"question": "<p>What is the use of try &amp; catch?</p>", "options": [{"option": "It allows us to manually handle the exception", "correct": false}, {"option": "It allows to fix errors", "correct": false}, {"option": "It prevents automatic terminating of the program in cases when an exception occurs", "correct": false}, {"option": "All of the mentioned", "correct": true}], "level": "Medium"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p><br>\nWhat is the output of this program?</p>\n\n<p>function something(){<br>\n\u00a0\u00a0 \u00a0console.log(x);<br>\n\u00a0\u00a0 \u00a0setTimeout(function(){<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(x);<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0return x + 10;<br>\n\u00a0\u00a0 \u00a0}, 0);<br>\n\u00a0\u00a0 \u00a0var x = 20;<br>\n\u00a0\u00a0 \u00a0console.log(x);<br>\n\u00a0\u00a0 \u00a0x = x + 10;<br>\n\u00a0\u00a0 \u00a0return x;<br>\n}</p>\n\n<p>var y = something();<br>\nconsole.log(y);</p>", "options": [{"option": "Error: x is undefined", "correct": false}, {"option": "undefined 20 30 30", "correct": true}, {"option": "10 20 30 40", "correct": false}, {"option": "10 20 30 30", "correct": false}], "level": "Easy"}, {"question": "<p>What is the approximate time taken(in seconds) by this snippet to print all values in the console?</p>\n\n<p>for(let i=0; i &lt; 10; i++){<br>\n\u00a0\u00a0 \u00a0setTimeout(() =&gt; {<br>\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0console.log(i);<br>\n\u00a0\u00a0 \u00a0}, 1000);\u00a0<br>\n}</p>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": true}, {"option": "10", "correct": false}, {"option": "None of these", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth {\n\n    public static void main(String args[])\n\n    {\n\n        StringBuilder b = \"hacker\";\n        b.append(4).deleteCharAt(3).delete(3, b.length() - 1);\n        System.out.println(b);\n\n    }\n\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "hacker", "correct": false}, {"option": "hac", "correct": false}, {"option": "Compile time error", "correct": true}, {"option": "hac4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface IntNumber \n{\n    void ins(int item); \n    int delt();\n}\n\nclass HackerEarth implements IntNumber \n{\n    private int stck[];\n    private int pos;\n\nHackerEarth(int size)\n{\n    stck = new int[size];\n    pos = -1;\n}\n\npublic void ins(int item) \n{\n    if(pos==stck.length-1)  \n        System.out.println(\"Overflow.\");\n    else\n        stck[++pos] = item;\n}\n\npublic int delt() \n{\n    if(pos &lt; 0)\n    {\n        System.out.println(\"Underflow.\");\n        return 0;\n    }\n    else\n    return stck[pos--];\n}\n}\n\nclass Hacker \n{\npublic static void main(String args[]) \n{\n    HackerEarth obj = new HackerEarth(3);\n    for(int i=0; i&lt;4; i++) obj.ins(i);\n    for(int i=0; i&lt;=3; i++)\n    System.out.println(obj.delt());\n}\n}   \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Overflow\r\n2\r\n1\r\n0\r\nUnderflow\r\n0", "correct": true}, {"option": "2\r\n1\r\n0\r\n0", "correct": false}, {"option": "Overflow\r\n2\r\n1\r\n0\r\n0", "correct": false}, {"option": "2\r\n1\r\n0\r\nUnderflow\r\n0", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>interface IntNumber \n{\n    void ins(int item); \n    int delt();\n}\n\nclass HackerEarth implements IntNumber \n{\n    private int stck[];\n    private int pos;\n\nHackerEarth(int size)\n{\n    stck = new int[size];\n    pos = -1;\n}\n\npublic void ins(int item) \n{\n    if(pos==stck.length)  \n        System.out.println(\"Overflow.\");\n    else\n        stck[++pos] = item;\n}\n\npublic int delt() \n{\n    if(pos &lt;= 0)\n    {\n        System.out.println(\"Underflow.\");\n        return 0;\n    }\n    else\n    return stck[pos--];\n}\n}\n\nclass Hacker \n{\n\npublic static void main(String args[]) \n{\n    HackerEarth obj = new HackerEarth(3);\n    for(int i=0; i&lt;4; i++) obj.ins(i);\n    for(int i=0; i&lt;=3; i++)\n    System.out.println(obj.delt());\n}\n\n}   \n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Overflow\r\n2\r\n1\r\n0\r\n\r\n", "correct": false}, {"option": "Overflow\r\n2\r\n1\r\n0\r\nUnderflow\r\n0", "correct": false}, {"option": "Compile Time Error", "correct": false}, {"option": "An Exception is generated at run-time", "correct": true}], "level": "Hard"}, {"question": "<p>Which of the following statements about <strong>exceptions</strong>\u00a0in Java are true:</p>\n\n<ol>\n\t<li>All exception types are subclasses of the built-in class<em>Throwable</em>.</li>\n\t<li>The<em> Throwable </em>class\u00a0has 2 subclasses - <em>Exception </em>and<em> Error</em></li>\n\t<li>The <em>throws </em>statement is used to explicitly throw an exception.</li>\n\t<li>There are two ways to obtain a <em>Throwable </em>object - using a parameter in a catch clause or creating one with the <em>new</em> operator.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": true}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the error in the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\n    static void proc1()    \n    {\n        System.out.println(\"Inside Proc1\");\n        throw new IllegalAccessException(\"Java\");\n    }\n\npublic static void main(String args[]) \n{\n        proc1();\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Declaring that proc1 throws IllegalAccessException", "correct": false}, {"option": "Not defining a try-catch statement in the main() method", "correct": false}, {"option": "Both of these", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth \n{\nstatic void Java() \n{\n    try \n    {\n        System.out.println(\"inside Java\");\n        throw new RuntimeException(\"demo\");\n    }\n    finally \n    {\n        System.out.println(\"Java's finally\");\n    }\n}\n\nstatic void Python() \n{\n    try\n    {\n        System.out.println(\"inside Python\");\n        return;\n    }\n    finally \n    {\n        System.out.println(\"Python's finally\");\n    }\n}\n\npublic static void main(String args[]) \n{\n    try\n    {\n        Java();\n    }\n    catch (Exception e) \n    {\n        System.out.println(\"Exception caught\");\n    }\n    \nPython();\n\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "inside Java\r\nJava's finally\r\ninside Python\r\nPython's finally\r\nException caught", "correct": false}, {"option": "inside Java\r\nJava's finally\r\nException caught\r\ninside Python\r\nPython's finally", "correct": true}, {"option": "inside Java\r\nJava's finally\r\ninside Python\r\nPython's finally", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of\u00a0the following exceptions is generated when an attempt is made to create an object of an abstract class or interface in Java?</p>\n\n<p>\u00a0</p>", "options": [{"option": "InstantiateException", "correct": false}, {"option": "InstantiationException", "correct": true}, {"option": "IllegalAccessException", "correct": false}, {"option": "UnsupportedOperationException", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements about <strong>threads </strong>are true in\u00a0Java:</p>\n\n<ol>\n\t<li>The multithreading mechanism in Java\u00a0uses the polling<em> </em>method.</li>\n\t<li>Each object has its own, implicit\u00a0monitor that is automatically entered when one of the object\u2019s synchronized methods is called.</li>\n\t<li>A thread can be created by creating a class that extends the runnable<em> </em>interface.</li>\n\t<li>We can obtain a reference to the main thread by calling the currentThread()<em> </em>method.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1 and 2", "correct": false}, {"option": "2 and 4", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>enum Languages \n{\n    Python(10), Java(9), Angular(12);\n    private int coders; \n\n    Languages(int p)\n    {\n         coders = p;\n    }\n\n    int getcoders()\n    { \n        return coders; \n    }\n}\n\nclass HackerEarth1\n{\n    public static void main(String args[])\n    {\n        Languages ap;\n       \n        for(Languages a : Languages.values())\n        System.out.println(a + \" \" + a.getcoders() +\" coders.\");\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Python 10 coders.\r\nJava 9 coders.\r\nAngular 12 coders.", "correct": true}, {"option": "Angular 12 coders.\r\nPython 10 coders.\r\nJava 9 coders.\r\n", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Run-time error", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following are built-in <strong>annotations </strong>in Java:</p>\n\n<ol>\n\t<li>@Retention</li>\n\t<li>@Deprecated</li>\n\t<li>@SafeVarargs</li>\n\t<li>@Inherited</li>\n</ol>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>If the\u00a0input\u00a0is 'Javaq', then\u00a0what is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.io.*;\n\nclass HackerEarth\n{\n    public static void main(String args[]) \n    {\n        char c;\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter characters, 'q' to quit.\");\n        \n        do\n        {\n            c = (char) br.read();\n            System.out.println(c);\n        }\n        while(c != 'q');\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "J\r\na\r\nv\r\na\r\nq", "correct": false}, {"option": "J\r\na\r\nv\r\na", "correct": false}, {"option": "Compilation error\r\n", "correct": true}, {"option": "Run-time error", "correct": false}], "level": "Hard"}, {"question": "<p>If the following code is\u00a0executed by using the line 'java -ea HackerEarth', then what is the\u00a0output:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth\n{\nstatic int val = 3;\n\nstatic int getValue()\n{\n    return val--;\n}\n\npublic static void main(String args[])\n{\n    int n;\n    for(int i=0; i &lt; 5; i++)\n    {\n        n = getValue();\n        assert n &gt; 2;\n        System.out.println(\" \" + n);\n    }\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1\r\n2\r\n3\r\n4", "correct": false}, {"option": "3\r\n2\r\n1\r\n0", "correct": false}, {"option": "3\r\n2\r\n1\r\n0\r\n-1", "correct": true}, {"option": "3\r\n2\r\n1\r\nAn Exception will be thrown at this point", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class HackerEarth\n{\n  public static void main(String[] args) \n  {\n        HackerEarth obj = new HackerEarth();\n        obj.start();\n  }\n\n  private void start() \n  {\n        System.out.println(check(\"12345\"));\n        System.out.println(check(\"123456\"));\n        System.out.println(check(null));\n  }\n\n  private boolean check(String aString)\n  {\n    try\n    {\n        return aString.length() &gt; 5;\n    }\n    catch (NullPointerException e)\n    {\n        System.out.println(\"An Exception Occurred!\");\n        return false;\n    }\n  }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "false\r\ntrue", "correct": false}, {"option": "false\r\ntrue\r\nAn Exception Occurred!", "correct": false}, {"option": "false\r\ntrue\r\nAn Exception Occurred!\r\nfalse", "correct": true}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>If the input is 123, then what is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.io.IOException;\n\npublic class Hacker1 \n{\npublic static char readInput() \n{\n    char c = '\\u0000';\n    int input = 0;\n\n    try\n    {\n        input = System.in.read();\n        if (input != -1) \n        {\n            c = (char)input;\n        }\n    }\n\n    catch (IOException e)\n    {\n        System.out.print(\"An Exception occurred while reading input.\");\n    }\n    return c;\n}\n\npublic static void main(String[] args) \n{\n    char c = Hacker1.readInput();\n    System.out.println(c);\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "An exception occurred while reading the input.", "correct": false}, {"option": "1\r\n2\r\n3", "correct": false}, {"option": "1", "correct": true}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code-</p>\n\n<pre class=\"prettyprint\"><code>import java.util.regex.Pattern; \n\npublic class StringMatch\n{\n\npublic static void main(String[] args)\n{\n\nString regex = \".@.\";\n\nStringMatch.compare(\"Hacker@Earth.com\", regex);\nStringMatch.compare(\"a@N\", regex);\nStringMatch.compare(\"Java@Program\", regex);\n\n}\n\npublic static void compare(String str, String regex)\n{\n    if (str.matches(regex))\n    {\n        System.out.println(str + \" matches\");\n    }\n    else\n    {\n        System.out.println(str + \" does not match\");\n    }\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Hacker@Earth.com does not match\r\na@N matches\r\nJava@Program does not match", "correct": true}, {"option": "Hacker@Earth.com does not match\r\na@N matches\r\nJava@Program matches", "correct": false}, {"option": "Run-time error", "correct": false}, {"option": "Hacker@Earth.com matches\r\na@N matches\r\nJava@Program does not match", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.regex.Pattern;\nimport java.util.regex.Matcher;\n\npublic class StringMatch\n{\n\npublic static void main(String[] args) \n{\nString regex = \"\\\\b(\\\\d{3})\\\\d{7}\\\\b\";\nPattern p = Pattern.compile(regex);\nString source = \"3342449027, 2339829, and 6152534734\";\n\nMatcher m = p.matcher(source);\n\nwhile(m.find())\n{\n    String val = m.group();\n    String val2 = m.group(1);\n    System.out.println(\"Val: \" + val + \", Val2: \" + val2);\n}\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Val: 3342449027, Val2: 334\r\nVal: 6152534734, Val2: 615", "correct": true}, {"option": "Val: 3342449027, Val2: 33424\r\nVal: 6152534734, Val2: 61525", "correct": false}, {"option": "Val: 3342449027, Val2: 027\r\nVal: 6152534734, Val2: 734", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about <em>variables </em>and <em>objects </em>is\u00a0true:</p>\n\n<ol>\n\t<li>The scope of a local variable is less than the scope of a method if they are declared in a sub-block (for example, inside an <strong>if</strong> statement) in a method.</li>\n\t<li>In a method, if a local variable exists with the same name as an instance variable, the local variable takes precedence.</li>\n\t<li>An object can become inaccessible if it can no longer be referenced by any variable, which happens when a reference variable is explicitly set to null or when it goes out of scope.</li>\n\t<li>Declaring a reference object variable is not\u00a0the same as creating an object.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1 and 2", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "All of these", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about <strong>constructors</strong>\u00a0is true:</p>\n\n<ol>\n\t<li>If you define a return type for a constructor, then it will no longer be treated as a constructor. It will\u00a0be treated as a regular method\u00a0even though it shares the same name as its class.</li>\n\t<li>If you define both an initializer and a constructor for a class, the initializer block will be executed prior to the constructor.</li>\n\t<li>A constructor cannot call another overloaded constructor.</li>\n\t<li>A call to another constructor must be the first statement in a constructor.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": false}, {"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": true}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following methods accepts three integers as method arguments and returns their sum as a floating-point number?</p>", "options": [{"option": "public void addVals(byte val1, int val2, int val3) \r\n{\r\n    double sum = val1 + val2 + val3;\r\n}", "correct": false}, {"option": "public double addVals(byte val1, int val2, int val3) \r\n{\r\ndouble sum = val1 + val2 + val3;\r\nreturn sum;\r\n}", "correct": true}, {"option": "public double addVals(long val1, byte val2, double val3) \r\n{\r\nreturn val1 + val2 + val3;\r\n}", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Language \n{\n    public String name;\n}\n\nclass HackerEarth1\n{\n    public static void main(String[] args)\n    {\n        Language p = new Language();\n        p.name = \"EJava\";\n        func1(p);\n        System.out.println(p.name);\n        func2(p);\n        System.out.println(p.name);\n    }\n\n    static void func2(Language p)\n    {\n        p.name = \"Python\";\n        System.out.println(p.name);\n    }\n\n    static void func1(Language p) \n    {\n        p = new Language();\n        p.name = \"Angular\";\n        System.out.println(p.name);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Python\r\nPython\r\nAngular\r\nEjava", "correct": false}, {"option": "Angular\r\nEJava\r\nPython\r\nPython", "correct": true}, {"option": "Python\r\nAngular\r\nEJava\r\nPython\r\n", "correct": false}, {"option": "EJava\r\nAngular\r\nPython\r\nPython", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\n\npublic class HackerEarth1\n{\n    public static void main(String args[])\n    {\n        ArrayList&lt;StringBuilder&gt; myList = new ArrayList&lt;&gt;();\n        StringBuilder sb1 = new StringBuilder(\"Java\");\n        StringBuilder sb2 = new StringBuilder(\"Python\");\n        StringBuilder sb3 = new StringBuilder(\"Scala\");\n        StringBuilder sb4 = new StringBuilder(\"Angular\");\n        myList.add(sb1);\n        myList.add(sb2);\n        myList.add(sb3);\n        myList.add(sb4);\n        myList.remove(1);\n\n        for (StringBuilder element:myList)\n        System.out.println(element);\n        myList.remove(sb3);\n        myList.remove(new StringBuilder(\"Angular\"));\n        for (StringBuilder element : myList)\n        System.out.println(element);\n    }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Python\r\nAngular\r\nScala\r\nJava\r\nPython", "correct": false}, {"option": "Java\r\nScala\r\nAngular\r\nJava\r\nAngular", "correct": true}, {"option": "Python\r\nAngular\r\nScala\r\nAngular\r\nJava", "correct": false}, {"option": "None of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about the\u00a0<strong>overriding methods </strong>is true:</p>\n\n<ol>\n\t<li>The argument list passed to the overridden method in the base class must be the same as the argument list passed to the overriding method in the subclass.</li>\n\t<li>A derived class can override only non-final methods.</li>\n\t<li>An overridden method defined in the base class can be an abstract method or a non-abstract method.</li>\n\t<li>The name of the overridden method in the base class and the overriding method in the subclass can be different.</li>\n</ol>", "options": [{"option": "1, 2, and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "1, 3, and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following statements about <em>Interface</em>\u00a0are true:</p>\n\n<ol>\n\t<li>An interface can extend multiple interfaces.</li>\n\t<li>An interface cannot extend any class.</li>\n\t<li>Interface methods can define an implementation by using the\u00a0default methods.</li>\n\t<li>A static method in a class does not hide or override the static method in the interface that it implements.</li>\n</ol>", "options": [{"option": "1, 2, and 3", "correct": true}, {"option": "1, 2, and 4", "correct": false}, {"option": "1, 3, and 4", "correct": false}, {"option": "All of these", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class Java\n{\n    public void Skills() \n    {\n        System.out.println(\"Java\");\n    }\n}\nclass Scala\n{\n    public void Skills()\n    {\n        System.out.println(\"Scala\"); }\n    }\nclass Python \n{\n    public void Skills() \n    {\n        System.out.println(\"Python\"); \n    }\n}\n\nclass HackerEarth\n{\n    public void Codes() \n    {\n        Java f1 = new Scala();\n        Java f2 = new Python();\n        f1.Skills();\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Java", "correct": false}, {"option": "Scala", "correct": false}, {"option": "Python", "correct": false}, {"option": "Compilation error", "correct": true}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth {\n\nint getValue() \n{\n    int returnValue = 10;\n    try \n    {\n        String[] Languages = {\"Java\", \"Ruby\"};\n        System.out.println(Languages[5]);\n    }\n    catch (Exception e) \n    {\n        System.out.println(\"Catch Block :\" + returnValue);\n        return returnValue;\n    }\n    finally\n    {\n        returnValue += 10;\n        System.out.println(\"Finally Block :\" + returnValue);\n    }\nreturn returnValue;\n}\n\npublic static void main(String args[])\n{\n    HackerEarth var = new HackerEarth();\n    System.out.println(\"Main Block:\" + var.getValue());\n}\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Java\r\nRuby", "correct": false}, {"option": "Catch Block :10\r\nFinally Block :20\r\nMain Block:10", "correct": true}, {"option": "Catch Block :10\r\nFinally Block :20\r\nMain Block:20", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code-</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth \n{\nvoid func()\n{\ntry \n{\n    String str = null;\n    System.out.println(\"1\");\n    try\n    {\n        System.out.println(str.length());\n    }\n    catch (NullPointerException e) \n    {\n        System.out.println(\"inner\");\n    }\n    \n    System.out.println(\"2\");\n}\ncatch (NullPointerException e) \n{\n    System.out.println(\"outer\");\n}\n}\npublic static void main(String args[]) \n{\nHackerEarth obj = new HackerEarth();\nobj.func();\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1\r\ninner\r\n2", "correct": true}, {"option": "1\r\ninner\r\n2\r\nouter", "correct": false}, {"option": "1\r\nouter", "correct": false}, {"option": "1\r\ninner", "correct": false}], "level": "Hard"}, {"question": "<p>Which of the following statements do\u00a0not follow the correct syntax and cannot compile?</p>", "options": [{"option": "private void HackerEarth(String name)\r\n{\r\n    if (name.equals(\"Java\"))\r\n    throw new IllegalArgumentException(name);\r\n}", "correct": false}, {"option": "private void HackerEarth(int age) {\r\nif (age > 30)\r\nthrow Exception();\r\n}", "correct": true}, {"option": "public double HackerEarth() throws Exception {\r\nreturn 0.7;\r\n}", "correct": false}, {"option": "All of these will compile successfully", "correct": false}], "level": "Hard"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>\nclass HackerEarth \n{\n    int setValue() \n    {\n        int a = 10;\n        int b = 20;\n    try \n    {\n        ++a;\n        b++;\n    } \n\n    catch(java.io.FileNotFoundException e)\n    {\n        System.out.println(\"Error\");\n    }\n\n    finally \n    {\n        a++;\n        b--;\n    }\n    return a+b;\n\n}\n\npublic static void main(String args[]) \n{\n    System.out.println(new HackerEarth().setValue());\n}\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "32", "correct": false}, {"option": "33", "correct": false}, {"option": "Compile-time Error", "correct": true}, {"option": "Run-time Error", "correct": false}], "level": "Hard"}, {"question": "<p>Given:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class MyThread extends Thread {\n\t\t public static void main(String [] args) {\n\t\t\t MyThread t = new MyThread();\n\t\t\t Thread x = new Thread(t);\n\t\t\t x.start();\n\t\t\t }\n\t\t\t public void run() {\n\t\t\t for(int i=0;i&lt;3;++i) {\n\t\t\t\tSystem.out.print(i + \"..\");\n\t\t\t }\n\t\t }\n\t }</code></pre>\n\n<p>What is the result of this code?</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "1..2..3..", "correct": false}, {"option": "0..1..2..", "correct": true}, {"option": "An exception occurs at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>\u00a0Assume you have a class that holds two private variables: a and b. Which of the following<br>\n\u00a0pairs can prevent concurrent access problems in that class? (Choose all that apply.)\u00a0</p>", "options": [{"option": "public int read(){return a+b;}\r\npublic void set(int a, int b){this.a=a;this.b=b;}", "correct": false}, {"option": "public int read(){synchronized(this){return a+b;}}\r\npublic void set(int a, int b){synchronized(this){this.a=a;this.b=b;}}", "correct": true}, {"option": "public int read(){synchronized(a){return a+b;}}\r\npublic void set(int a, int b){synchronized(a){this.a=a;this.b=b;}}", "correct": false}, {"option": "public int read(){synchronized(a){return a+b;}}\r\npublic void set(int a, int b){synchronized(b){this.a=a;this.b=b;}}", "correct": false}, {"option": "public synchronized(this) int read(){return a+b;}\r\npublic synchronized(this) void set(int a, int b){this.a=a;this.b=b;}", "correct": false}], "level": "Medium"}, {"question": "<p>The following block of code creates a CopyOnWriteArrayList, adds elements to it, and prints<br>\n\u00a0the contents:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>   CopyOnWriteArrayList&lt;Integer&gt; cowList = new CopyOnWriteArrayList&lt;&gt;();\n\tcowList.add(4);\n\tcowList.add(2);\n\tIterator&lt;Integer&gt; it = cowList.iterator();\n\tcowList.add(6);\n\twhile(it.hasNext()) {\n\t  System.out.print(it.next() + \" \");\n        }</code></pre>\n\n<p>What is the result?</p>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "6", "correct": false}, {"option": "12", "correct": false}, {"option": "4  2", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}], "level": "Medium"}, {"question": "<p>Given:</p>\n\n<pre class=\"prettyprint\"><code>public class TwoThreads {\n\t\tstatic Thread laurel, hardy;\n\t\tpublic static void main(String[] args) {\n\t\t\tlaurel = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"A\");\n\t\t\t\ttry {\n\t\t\t\t   hardy.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t   System.out.println(\"B\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"C\");\n\t\t\t\t}\n\t\t\t};\n\t\t\thardy = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"D\");\n\t\t\t\t\ttry {\n\t\t\t\t\t  laurel.wait();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t  System.out.println(\"E\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"F\");\n\t\t\t\t}\n\t\t\t};\n\t\t\tlaurel.start();\n\t\t\thardy.start();\n\t\t}\n\t}</code></pre>\n\n<p>Which letters will eventually appear somewhere in the output?</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": false}, {"option": "Answer can not be reliably determined", "correct": false}, {"option": "Code does not compile.", "correct": false}, {"option": "A runtime exception will occur", "correct": false}, {"option": "A C D E F  (all letters will eventually appear)", "correct": true}], "level": "Easy"}, {"question": "<p>Given:<br>\n\u00a0</p>\n\n<pre class=\"prettyprint\"><code>class MyThread extends Thread {\n\t\t public static void main(String [] args) {\n\t\t\t MyThread t = new MyThread();\n\t\t\t Thread x = new Thread(t);\n\t\t\t x.start();\n\t\t\t }\n\t\t\t public void run() {\n\t\t\t for(int i=0;i&lt;3;++i) {\n\t\t\t\tSystem.out.print(i + \"..\");\n\t\t\t }\n\t\t }\n\t }</code></pre>\n\n<p>What is the result of this code?</p>", "options": [{"option": "Compilation fails", "correct": false}, {"option": "1..2..3..", "correct": false}, {"option": "0..1..2..", "correct": true}, {"option": "An exception occurs at runtime", "correct": false}], "level": "Easy"}, {"question": "<p>\u00a0Assume you have a class that holds two private variables: a and b. Which of the following<br>\n\u00a0pairs can prevent concurrent access problems in that class? (Choose all that apply.)\u00a0</p>", "options": [{"option": "public int read(){return a+b;}\r\npublic void set(int a, int b){this.a=a;this.b=b;}", "correct": false}, {"option": "public int read(){synchronized(this){return a+b;}}\r\npublic void set(int a, int b){synchronized(this){this.a=a;this.b=b;}}", "correct": true}, {"option": "public int read(){synchronized(a){return a+b;}}\r\npublic void set(int a, int b){synchronized(a){this.a=a;this.b=b;}}", "correct": false}, {"option": "public int read(){synchronized(a){return a+b;}}\r\npublic void set(int a, int b){synchronized(b){this.a=a;this.b=b;}}", "correct": false}, {"option": "public synchronized(this) int read(){return a+b;}\r\npublic synchronized(this) void set(int a, int b){this.a=a;this.b=b;}", "correct": false}], "level": "Medium"}, {"question": "<p>The following block of code creates a CopyOnWriteArrayList, adds elements to it, and prints<br>\n\u00a0the contents:\u00a0</p>\n\n<pre class=\"prettyprint\"><code>   CopyOnWriteArrayList&lt;Integer&gt; cowList = new CopyOnWriteArrayList&lt;&gt;();\n\tcowList.add(4);\n\tcowList.add(2);\n\tIterator&lt;Integer&gt; it = cowList.iterator();\n\tcowList.add(6);\n\twhile(it.hasNext()) {\n\t  System.out.print(it.next() + \" \");\n        }</code></pre>\n\n<p>What is the result?</p>\n\n<p>\u00a0</p>\n\n<p>\u00a0</p>", "options": [{"option": "6", "correct": false}, {"option": "12", "correct": false}, {"option": "4  2", "correct": true}, {"option": "Compilation fails", "correct": false}, {"option": "An exception is thrown at runtime", "correct": false}], "level": "Medium"}, {"question": "<p>Given:</p>\n\n<pre class=\"prettyprint\"><code>public class TwoThreads {\n\t\tstatic Thread laurel, hardy;\n\t\tpublic static void main(String[] args) {\n\t\t\tlaurel = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\tSystem.out.println(\"A\");\n\t\t\t\ttry {\n\t\t\t\t   hardy.sleep(1000);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t   System.out.println(\"B\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\"C\");\n\t\t\t\t}\n\t\t\t};\n\t\t\thardy = new Thread() {\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSystem.out.println(\"D\");\n\t\t\t\t\ttry {\n\t\t\t\t\t  laurel.wait();\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t  System.out.println(\"E\");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println(\"F\");\n\t\t\t\t}\n\t\t\t};\n\t\t\tlaurel.start();\n\t\t\thardy.start();\n\t\t}\n\t}</code></pre>\n\n<p>Which letters will eventually appear somewhere in the output?</p>", "options": [{"option": "A", "correct": false}, {"option": "B", "correct": false}, {"option": "C", "correct": false}, {"option": "D", "correct": false}, {"option": "Answer can not be reliably determined", "correct": false}, {"option": "Code does not compile.", "correct": false}, {"option": "A runtime exception will occur", "correct": false}, {"option": "A C D E F  (all letters will eventually appear)", "correct": true}], "level": "Easy"}, {"question": "<p>What will be the VALUE and TYPE of variable 'd' in the following code in JavaScript?</p>\n\n<pre class=\"prettyprint\"><code>var a = 10;\nvar b = 20;\nvar c = \"coep\";\n\nvar d = c + a + b;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "value: coep30, type: number", "correct": false}, {"option": "value: coep30, type: string", "correct": false}, {"option": "value: coep1020, type: string", "correct": true}, {"option": "value: coep1020, type: number", "correct": false}], "level": "Medium"}, {"question": "<p>What will be the VALUE and TYPE of variable 'd' in the following code in JavaScript?</p>\n\n<pre class=\"prettyprint\"><code>var a = 10;\nvar b = 20;\nvar c = \"coep\";\n\nvar d = c + a + b;</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "value: coep30, type: number", "correct": false}, {"option": "value: coep30, type: string", "correct": false}, {"option": "value: coep1020, type: string", "correct": true}, {"option": "value: coep1020, type: number", "correct": false}], "level": "Medium"}, {"question": "<p><strong>Given the following code, select the correct output for each of the console statements:</strong></p>\n\n<p>console.log(x);</p>\n\n<p>console.log(y());</p>\n\n<p>console.log(z());</p>\n\n<p>\u00a0</p>\n\n<p>var x = 'x';</p>\n\n<p>function y() {</p>\n\n<p>\u00a0 return \u2018y\u2019;</p>\n\n<p>}</p>\n\n<p>\u00a0</p>\n\n<p>var z = function() {</p>\n\n<p>\u00a0return \u2019z\u2019;</p>\n\n<p>}</p>", "options": [{"option": "undefined, y, undefined", "correct": false}, {"option": "undefined, undefined, undefined", "correct": false}, {"option": "undefined, y, error", "correct": true}, {"option": "undefined, error, error", "correct": false}], "level": "Medium"}, {"question": "A pipeline is a sequence of what operations in java 8", "options": [{"option": "multi-threading", "correct": false}, {"option": "stream", "correct": true}, {"option": "consequent", "correct": false}, {"option": "concurrent", "correct": false}], "level": "Easy"}, {"question": "Lambda expressions in java 8 are based on", "options": [{"option": "Procedural programming", "correct": false}, {"option": "Functional programming", "correct": true}, {"option": "Data programming", "correct": false}, {"option": "all", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "Lambda expressions in java 8 are based on", "options": [{"option": "Procedural programming", "correct": false}, {"option": "Functional programming", "correct": true}, {"option": "Data programming", "correct": false}, {"option": "all", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "PermGen space has been replaced with which of these in Java 8?", "options": [{"option": "PermSpace", "correct": false}, {"option": "PermSpaceGen", "correct": false}, {"option": "Metaspace", "correct": true}, {"option": "MetaGenSpace", "correct": false}], "level": "Hard"}, {"question": "In Java8, Which new class can be used Instead of System.getCurrentTimeMillis() to get a date and time in Java 8", "options": [{"option": "java.util.Date", "correct": false}, {"option": "java.util.Calendar", "correct": false}, {"option": "java.time", "correct": true}, {"option": "java.util.time", "correct": false}], "level": "Easy"}, {"question": "Which package contains Date/Time (JSR 310) API in Java 8?", "options": [{"option": "java.time", "correct": true}, {"option": "java.util.time", "correct": false}, {"option": "java.timedate", "correct": false}, {"option": "java.util.calendar", "correct": false}], "level": "Easy"}, {"question": "A method within a class is only accessible by classes that are defined within the same package as the class of the method. Which one of the following is used to enforce such restriction?", "options": [{"option": "Declare the method with the keyword public", "correct": false}, {"option": "Declare the method with the keyword protected", "correct": false}, {"option": "Do not declare the method with any accessibility modifiers", "correct": true}, {"option": "Declare the method with the keyword private", "correct": false}], "level": "Easy"}, {"question": "<p>Which one of the following is not true?</p>", "options": [{"option": "A class containing abstract methods is called an abstract class.", "correct": false}, {"option": "Abstract methods should be implemented in the derived class.", "correct": false}, {"option": "An abstract class cannot have non-abstract methods", "correct": true}, {"option": "A class must be qualified as \u2018abstract\u2019 class, if it contains one abstract method.", "correct": false}], "level": "Easy"}, {"question": "<p>What is the type and value of the following expression? (Notice the integer division)<br>\n-4 + 1/2 + 2*-3 + 5.0</p>", "options": [{"option": "int -5 ", "correct": false}, {"option": "double -4.5", "correct": false}, {"option": " int -4", "correct": false}, {"option": "double -5.0", "correct": true}], "level": "Medium"}, {"question": "<p>what is the output of below snippet?</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">System.out.print(\u201cH\u201d+\u201da\u201d);</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">System.out.print(\u2018H\u2019+\u2019a\u2019);</p>", "options": [{"option": "HaHa", "correct": false}, {"option": "Ha Ha", "correct": false}, {"option": "Ha169", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Medium"}, {"question": "<p>which one is preventing from Null Pointer Exception?</p>", "options": [{"option": " \u201dabc\u201d.equals(obj)", "correct": true}, {"option": "abc == obj", "correct": false}, {"option": "obj.equals(\u201cabc\u201d)", "correct": false}, {"option": "All the ablove", "correct": false}], "level": "Medium"}, {"question": "<p style=\"margin-left: 0cm; margin-right: 0cm;\">if(obj1.hashCode==obj2.hashCode)</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">SOP(\u201ctrue\u201d);</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">else</p>\n\n<p style=\"margin-left: 0cm; margin-right: 0cm;\">SOP(\u201cfalse\u201d);</p>", "options": [{"option": "Does not compare hashcode.", "correct": true}, {"option": "true", "correct": false}, {"option": "false", "correct": false}, {"option": "None", "correct": false}], "level": "Medium"}, {"question": "What are variables used for in JavaScript Programs?", "options": [{"option": "Storing numbers, dates, or other values", "correct": true}, {"option": "Varying randomly", "correct": false}, {"option": "Causing high-school algebra flashbacks", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "\u00a0_____ JavaScript statements embedded in an HTML page can respond to user events such as mouse-clicks, form input, and page navigation.", "options": [{"option": "Client-side", "correct": true}, {"option": "Server-side", "correct": false}, {"option": "Local", "correct": false}, {"option": "Native", "correct": false}], "level": "Easy"}, {"question": "Which of the following can't be done with client-side JavaScript?", "options": [{"option": "Validating a form", "correct": false}, {"option": "Sending a form's contents by email", "correct": false}, {"option": "Storing the form's contents to a database file on the server", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "______ tag is an extension to HTML that can enclose any number of JavaScript statements.", "options": [{"option": "<SCRIPT>", "correct": true}, {"option": "<BODY>", "correct": false}, {"option": "<HEAD>", "correct": false}, {"option": "<TITLE>", "correct": false}], "level": "Easy"}, {"question": "What is the correct JavaScript syntax to write \"Hello World\"?", "options": [{"option": "System.out.println(\"Hello World\")", "correct": false}, {"option": "println (\"Hello World\")", "correct": false}, {"option": "document.write(\"Hello World\")", "correct": true}, {"option": "response.write(\"Hello World\")", "correct": false}], "level": "Easy"}, {"question": "Which of the following way can be used to indicate the LANGUAGE attribute?", "options": [{"option": "<LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">", "correct": false}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\">\u00a0\u00a0\u00a0 JavaScript statements\u2026</SCRIPT>", "correct": true}, {"option": "<SCRIPT LANGUAGE=\"JavaScriptVersion\"!>\u00a0\u00a0\u00a0 JavaScript statements\u2026</SCRIPT>", "correct": false}], "level": "Easy"}, {"question": "Inside which HTML element do we put the JavaScript?", "options": [{"option": "<js>", "correct": false}, {"option": "<scripting>", "correct": false}, {"option": "<script>", "correct": true}, {"option": "<javascript>", "correct": false}], "level": "Easy"}, {"question": "What is the correct syntax for referring to an external script called \" abc.js\"?", "options": [{"option": "<script href=\" abc.js\">", "correct": false}, {"option": "<script name=\" abc.js\">", "correct": false}, {"option": "<script src=\" abc.js\">", "correct": true}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "Which types of image maps can be used with JavaScript?", "options": [{"option": "Server-side image maps", "correct": false}, {"option": "Client-side image maps", "correct": true}, {"option": "Server-side image maps and Client-side image maps", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "Which of the following navigator object properties is the same in both\u00a0\u00a0 Netscape and IE?", "options": [{"option": "navigator.appCodeName", "correct": true}, {"option": "navigator.appName", "correct": false}, {"option": "navigator.appVersion", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "Which is the correct way to write a JavaScript array?", "options": [{"option": "var txt = new Array(1:\"tim\",2:\"kim\",3:\"jim\")", "correct": false}, {"option": "var txt = new Array:1=(\"tim\")2=(\"kim\")3=(\"jim\")", "correct": false}, {"option": "var txt = new Array(\"tim\",\"kim\",\"jim\")", "correct": true}, {"option": "var txt = new Array=\"tim\",\"kim\",\"jim\"", "correct": false}], "level": "Easy"}, {"question": "What does the &lt;noscript&gt; tag do?", "options": [{"option": "Enclose text to be displayed by non-JavaScript browsers.", "correct": true}, {"option": "Prevents scripts on the page from executing.", "correct": false}, {"option": "Describes certain low-budget movies.", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "If para1 is the DOM object for a paragraph, what is the correct syntax to change the text within the paragraph?", "options": [{"option": "\"New Text\"?", "correct": false}, {"option": "para1.value=\"New Text\";", "correct": true}, {"option": "para1.firstChild.nodeValue= \"New Text\";", "correct": false}, {"option": "para1.nodeValue=\"New Text\";", "correct": false}], "level": "Easy"}, {"question": "JavaScript entities start with _______ and end with _________.", "options": [{"option": "Semicolon, colon", "correct": false}, {"option": "Semicolon, Ampersand", "correct": false}, {"option": "Ampersand, colon", "correct": false}, {"option": "Ampersand, semicolon", "correct": true}], "level": "Easy"}, {"question": "Which of the following best describes JavaScript?", "options": [{"option": "a low-level programming language.", "correct": false}, {"option": "a scripting language precompiled in the browser.", "correct": false}, {"option": "a compiled scripting language.", "correct": false}, {"option": "an object-oriented scripting language.", "correct": true}], "level": "Easy"}, {"question": "Choose the server-side JavaScript object?", "options": [{"option": "FileUpLoad", "correct": false}, {"option": "Function", "correct": false}, {"option": "File", "correct": true}, {"option": "Date", "correct": false}], "level": "Easy"}, {"question": "Choose the client-side JavaScript object?", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Easy"}, {"question": "Which of the following is not considered a JavaScript operator?", "options": [{"option": "new", "correct": false}, {"option": "this", "correct": true}, {"option": "delete", "correct": false}, {"option": "typeof", "correct": false}], "level": "Easy"}, {"question": "\u00a0______method evaluates a string of JavaScript code in the context of the specified object.", "options": [{"option": "Eval", "correct": true}, {"option": "ParseInt", "correct": false}, {"option": "ParseFloat", "correct": false}, {"option": "Efloat", "correct": false}], "level": "Easy"}, {"question": "Which of the following event fires when the form element loses the focus: &lt;button&gt;, &lt;input&gt;, &lt;label&gt;, &lt;select&gt;, &lt;textarea&gt;?", "options": [{"option": "onfocus", "correct": false}, {"option": "onblur", "correct": true}, {"option": "onclick", "correct": false}, {"option": "ondblclick", "correct": false}], "level": "Easy"}, {"question": "The syntax of Eval is ________________", "options": [{"option": "[objectName.]eval(numeriC.", "correct": false}, {"option": "[objectName.]eval(string)", "correct": true}, {"option": "[EvalName.]eval(string)", "correct": false}, {"option": "[EvalName.]eval(numeriC.", "correct": false}], "level": "Easy"}, {"question": "Which of the following is the structure of an if statement?", "options": [{"option": "if (conditional expression is true) thenexecute this codeend if", "correct": false}, {"option": "if (conditional expression is true)execute this codeend if", "correct": false}, {"option": "if (conditional expression is true)\u00a0\u00a0 {then execute this code>->}", "correct": true}, {"option": "if (conditional expression is true) then {execute this code}", "correct": false}], "level": "Easy"}, {"question": "The _______ method of an Array object adds and/or removes elements from an array.", "options": [{"option": "Reverse", "correct": false}, {"option": "Slice", "correct": false}, {"option": "Slice", "correct": false}, {"option": "Splice", "correct": true}], "level": "Easy"}, {"question": "To set up the window to capture all Click events, we use which of the following statement?", "options": [{"option": "window.captureEvents(Event.CLICK);", "correct": true}, {"option": "window.handleEvents (Event.CLICK);", "correct": false}, {"option": "window.routeEvents(Event.CLICK );", "correct": false}, {"option": "window.raiseEvents(Event.CLICK );", "correct": false}], "level": "Easy"}, {"question": "Which tag(s) can handle mouse events in Netscape?", "options": [{"option": "\u00a0<IMG>", "correct": false}, {"option": "<A>", "correct": true}, {"option": "<BR>", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "____________ is the tainted property of a window object.", "options": [{"option": "Pathname", "correct": false}, {"option": "Protocol", "correct": false}, {"option": "Defaultstatus", "correct": true}, {"option": "Host", "correct": false}], "level": "Easy"}, {"question": "To enable data tainting, the end user sets the _________ environment variable.", "options": [{"option": "ENABLE_TAINT", "correct": false}, {"option": "MS_ENABLE_TAINT", "correct": false}, {"option": "NS_ENABLE_TAINT", "correct": true}, {"option": "ENABLE_TAINT_NS", "correct": false}], "level": "Easy"}, {"question": "In JavaScript, _________ is an object of the target language data type that encloses an object of the source language.", "options": [{"option": "a wrapper", "correct": true}, {"option": "a link", "correct": false}, {"option": "a cursor", "correct": false}, {"option": "a form", "correct": false}], "level": "Easy"}, {"question": "When a JavaScript object is sent to Java, the runtime engine creates a Java wrapper of type ___________", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Easy"}, {"question": "_______ class provides an interface for invoking JavaScript methods and examining JavaScript properties.", "options": [{"option": "ScriptObject", "correct": false}, {"option": "JSObject", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "Jobject", "correct": false}], "level": "Easy"}, {"question": "\u00a0_________ is a wrapped Java array, accessed from within JavaScript code.", "options": [{"option": "JavaArray", "correct": true}, {"option": "JavaClass", "correct": false}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Easy"}, {"question": "A ________ object is a reference to one of the classes in a Java package, such as\u00a0netscape.javascript .", "options": [{"option": "JavaArray", "correct": false}, {"option": "JavaClass", "correct": true}, {"option": "JavaObject", "correct": false}, {"option": "JavaPackage", "correct": false}], "level": "Easy"}, {"question": "The JavaScript exception is available to the Java code as an instance of __________", "options": [{"option": "netscape.javascript.JSObject", "correct": false}, {"option": "netscape.javascript.JSException", "correct": true}, {"option": "netscape.plugin.JSException", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "To automatically open the console when a JavaScript error occurs which of the following is added to prefs.js?", "options": [{"option": "user_pref(\" javascript.console.open_on_error\", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_error \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error\", true);", "correct": true}], "level": "Easy"}, {"question": "To open a dialog box each time an error occurs, which of the following is added to prefs.js?", "options": [{"option": "user_pref(\"javascript.classic.error_alerts\", true);", "correct": true}, {"option": "user_pref(\"javascript.classic.error_alerts \", false);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", true);", "correct": false}, {"option": "user_pref(\"javascript.console.open_on_error \", false);", "correct": false}], "level": "Easy"}, {"question": "The syntax of a blur method in a button object is ______________", "options": [{"option": "Blur()", "correct": true}, {"option": "Blur(contrast)", "correct": false}, {"option": "Blur(value)", "correct": false}, {"option": "Blur(depth)", "correct": false}], "level": "Easy"}, {"question": "The syntax of capture events method for document object is ______________", "options": [{"option": "captureEvents()", "correct": false}, {"option": "captureEvents(args eventType)", "correct": false}, {"option": "captureEvents(eventType)", "correct": true}, {"option": "captureEvents(eventVal)", "correct": false}], "level": "Easy"}, {"question": "The syntax of close method for document object is ______________", "options": [{"option": "Close(doC.", "correct": false}, {"option": "Close(object)", "correct": false}, {"option": "Close(val)", "correct": false}, {"option": "Close()", "correct": true}], "level": "Easy"}, {"question": "&lt;script type=\"text/javascript\"&gt;<br>x=4+\"4\";<br>document.write(x);<br>&lt;/script&gt; <br><br>Output------?", "options": [{"option": "44.0", "correct": true}, {"option": "8.0", "correct": false}, {"option": "4.0", "correct": false}, {"option": "Error output", "correct": false}], "level": "Easy"}, {"question": "Is it possible to nest functions in JavaScript?", "options": [{"option": "True", "correct": true}, {"option": "False", "correct": false}], "level": "Easy"}, {"question": "&lt;script&gt;<br>document.write(navigator.appCodeName);<br>&lt;/script&gt;", "options": [{"option": "get code name of the browser of a visitor", "correct": true}, {"option": "set code name of the browser of a visitor", "correct": false}, {"option": "remove code name of the browser of a visitor", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "Scripting language are", "options": [{"option": "High Level Programming language", "correct": true}, {"option": "Assembly Level programming language", "correct": false}, {"option": "Machine level programming language", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "Which best explains getSelection()?", "options": [{"option": "Returns the VALUE of a selected OPTION.", "correct": false}, {"option": "Returns document.URL of the window in focus.", "correct": false}, {"option": "Returns the value of cursor-selected text", "correct": true}, {"option": "Returns the VALUE of a checked radio input.", "correct": false}], "level": "Easy"}, {"question": "Choose the client-side JavaScript object:", "options": [{"option": "Database", "correct": false}, {"option": "Cursor", "correct": false}, {"option": "Client", "correct": false}, {"option": "FileUpLoad", "correct": true}], "level": "Easy"}, {"question": "What is mean by \"this\" keyword in javascript?", "options": [{"option": "It refers current object", "correct": true}, {"option": "It referes previous object", "correct": false}, {"option": "It is variable which contains value", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "&lt;script language=\"javascript\"&gt;<br>function x()<br>{<br>document.write(2+5+\"8\");<br>}<br>&lt;/script&gt; ", "options": [{"option": "258.0", "correct": false}, {"option": "Error", "correct": false}, {"option": "7.0", "correct": false}, {"option": "78.0", "correct": true}], "level": "Easy"}, {"question": "&lt;script type=\"text/javascript\"&gt;<br>var s = \"9123456 or 80000?\";<br>var pattern = /\\d{4}/;<br>var output = s.match(pattern);<br>document.write(output);<br>&lt;/script&gt;", "options": [{"option": "9123.0", "correct": true}, {"option": "91234.0", "correct": false}, {"option": "80000.0", "correct": false}, {"option": "None of the above", "correct": false}], "level": "Easy"}, {"question": "The service(s) that enables networking through scripted HTTP requests is", "options": [{"option": "XMLHttpResponse", "correct": false}, {"option": "XMLRequest", "correct": false}, {"option": "XMLHttpRequest", "correct": true}, {"option": "All of the above", "correct": false}], "level": "Easy"}, {"question": "What is the correct JavaScript syntax to change the content of the HTML element below?<br><br>&lt;p id=\"demo\"&gt;This is a demonstration.&lt;/p&gt;", "options": [{"option": "document.getElement(\"p\").innerHTML=\"Hello World!\";", "correct": false}, {"option": "#demo.innerHTML=\"Hello World!\";", "correct": false}, {"option": "document.getElementByName(\"p\").innerHTML=\"Hello World!\";", "correct": false}, {"option": "document.getElementById(\"p\").innerHTML=\"Hello World!\";", "correct": true}], "level": "Easy"}, {"question": "How can you add a comment in a JavaScript?", "options": [{"option": "//Coments", "correct": false}, {"option": "Coments", "correct": false}, {"option": "<!--Coments-->", "correct": true}, {"option": "<Coments>", "correct": false}], "level": "Easy"}, {"question": "<p><strong>Predict the output</strong></p>\n\n<p>\u00a0</p>\n\n<p>class Test</p>\n\n<p>{</p>\n\n<p>int i;</p>\n\n<p>}</p>\n\n<p>class Main</p>\n\n<p>{</p>\n\n<p>\u00a0public static void main(String args[]) {</p>\n\n<p>\u00a0\u00a0\u00a0Test t;</p>\n\n<p>\u00a0\u00a0\u00a0System.out.println(t.i);</p>\n\n<p>}</p>\n\n<p>Test</p>\n\n<p>{</p>\n\n<p>int i;</p>\n\n<p>}</p>\n\n<p>class Main</p>\n\n<p>{</p>\n\n<p>\u00a0public static void main(String args[]) {</p>\n\n<p>\u00a0\u00a0\u00a0Test t;</p>\n\n<p>\u00a0\u00a0\u00a0System.out.println(t.i);</p>\n\n<p>}</p>", "options": [{"option": "0", "correct": false}, {"option": "Garbage Value", "correct": true}, {"option": "CompileTime Error", "correct": false}, {"option": "RunTime Error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, when we implement an interface method, it must be declared as:</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Default", "correct": false}, {"option": "Public", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these class is superclass of every class in Java?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "Object", "correct": false}, {"option": "Java.util.HashMap", "correct": true}, {"option": "LinkedList", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords can be used to prevent inheritance of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "constant", "correct": false}, {"option": "class", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>Predict output of the program-</p>\n\n<ol>\n\t<li>\n\t<p>class recursion</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int func (int n)</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int result;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = func (n - 1);</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0class Output</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main(String args[])</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0recursion obj = new recursion() ;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(obj.func(12));</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0}</p>\n\t</li>\n</ol>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "Stack Overflow\r\n", "correct": true}], "level": "Easy"}, {"question": "<p><strong>Predict the output</strong></p>\n\n<p>\u00a0</p>\n\n<p>class Test</p>\n\n<p>{</p>\n\n<p>int i;</p>\n\n<p>}</p>\n\n<p>class Main</p>\n\n<p>{</p>\n\n<p>\u00a0public static void main(String args[]) {</p>\n\n<p>\u00a0\u00a0\u00a0Test t;</p>\n\n<p>\u00a0\u00a0\u00a0System.out.println(t.i);</p>\n\n<p>}</p>\n\n<p>Test</p>\n\n<p>{</p>\n\n<p>int i;</p>\n\n<p>}</p>\n\n<p>class Main</p>\n\n<p>{</p>\n\n<p>\u00a0public static void main(String args[]) {</p>\n\n<p>\u00a0\u00a0\u00a0Test t;</p>\n\n<p>\u00a0\u00a0\u00a0System.out.println(t.i);</p>\n\n<p>}</p>", "options": [{"option": "0", "correct": false}, {"option": "Garbage Value", "correct": true}, {"option": "CompileTime Error", "correct": false}, {"option": "RunTime Error", "correct": false}], "level": "Easy"}, {"question": "<p>In Java, when we implement an interface method, it must be declared as:</p>", "options": [{"option": "Private", "correct": false}, {"option": "Protected", "correct": false}, {"option": "Default", "correct": false}, {"option": "Public", "correct": true}], "level": "Easy"}, {"question": "<p>Which of these class is superclass of every class in Java?</p>", "options": [{"option": "ArrayList", "correct": false}, {"option": "Object", "correct": false}, {"option": "Java.util.HashMap", "correct": true}, {"option": "LinkedList", "correct": false}], "level": "Easy"}, {"question": "<p>Which of these keywords can be used to prevent inheritance of a class?</p>", "options": [{"option": "super", "correct": false}, {"option": "constant", "correct": false}, {"option": "class", "correct": false}, {"option": "final", "correct": true}], "level": "Easy"}, {"question": "<p>Predict output of the program-</p>\n\n<ol>\n\t<li>\n\t<p>class recursion</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int func (int n)</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int result;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0result = func (n - 1);</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return result;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0class Output</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0public static void main(String args[])</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0{</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0recursion obj = new recursion() ;</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0System.out.print(obj.func(12));</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0}</p>\n\t</li>\n\t<li>\n\t<p>\u00a0\u00a0}</p>\n\t</li>\n</ol>", "options": [{"option": "0", "correct": false}, {"option": "1", "correct": false}, {"option": "Compilation Error", "correct": false}, {"option": "Stack Overflow\r\n", "correct": true}], "level": "Easy"}, {"question": "<p>What is the output of the following program?</p>\n\n<pre class=\"prettyprint\"><code>class TestNumbers {\n\n    public static List&lt;Integer&gt; generateList(int numbers) {\n\n        return Stream.iterate(1, i -&gt; ++i)\n        .map(n -&gt; Arrays.asList(n, n + n))\n        .flatMap(Collection::stream)\n        .filter( n -&gt; (n &amp; 0x2) == 0)\n        .limit(numbers)\n        .collect(Collectors.toList())\n        ;\n\n    }\n\n    public static void main(String[] args) {\n        List&lt;Integer&gt; generate = generateList(5);\n        System.out.println(generate);\n    }\n}</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[2, 2, 3, 6, 10]", "correct": false}, {"option": "[1, 4, 4, 8, 5]", "correct": true}, {"option": "[2, 2, 3, 3, 6]", "correct": false}, {"option": "[1, 4, 4, 5, 5]", "correct": false}], "level": "Hard"}, {"question": "<p>In data structures, what is\u00a0the output of the following Java 8 code:</p>\n\n<pre class=\"prettyprint\"><code>import java.util.ArrayList;\nimport java.util.List;\npublic class TestHack {\n        public static void main(String[] args) {\n                List&lt;Integer&gt; val1= new ArrayList&lt;&gt;();\n                val1.add(21); val1.add(13);\n                val1.add(30); val1.add(11);\n               val1.removelf(e -&gt; e%2 != 0);\n                System.out.println(val1);\n        }\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "[21,13,11]", "correct": false}, {"option": "[30]", "correct": true}, {"option": "[]", "correct": false}, {"option": "Compilation error", "correct": false}], "level": "Hard"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>public class StrDemo\n{\n\tstatic String strVal;\n\tpublic static void main(String[] args) \n\t{\n\t\tStrDemo obj = new StrDemo();\n\t\tstrVal = obj.getString(\"Program\");\n\t\tSystem.out.print(\" \"+strVal);\n\t}\n\npublic static String getString(String str){\n\n   StringBuffer strBuf = new StringBuffer(str.length());\n\n   for(int i=str.length() -1 ; i&gt;0 ; i--)\n   {\n     strBuf.append(str.charAt(i));\n   } \n   return strBuf.toString();\n}\t\n}\n</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "Program", "correct": false}, {"option": "margor", "correct": true}, {"option": "margorP", "correct": false}, {"option": "Returns an error", "correct": false}], "level": "Medium"}, {"question": "<p>In Java Collections Framework (JFC), which of the following interfaces cannot contain a duplicate element:</p>\n\n<pre class=\"prettyprint\"><code>1. Set\n2. List\n3. Map\n4. SortedSet</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "1 and 2", "correct": false}, {"option": "1, 2, and 3", "correct": false}, {"option": " 1, 3, and 4", "correct": true}, {"option": "2, 3, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>In Java, which of the following methods registers a thread in a thread scheduler:</p>\n\n<p>\u00a0</p>", "options": [{"option": "construct();", "correct": false}, {"option": "run();", "correct": false}, {"option": "start();", "correct": true}, {"option": "register();", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth extends Thread{\n\n    public static void main(String[] args) {\n        Thread hack = new Thread(\"Hack\");\n        Thread hack1 = new Thread(\"Hack1\");\n        try {\n            hack.join();\n            hack1.join();\n        } catch (InterruptedException e) {\n            System.out.println(\"Main Thread interrupted.\");\n        }\n    }\n\n    public void run(){\n        System.out.println(\"Run executed\");\n    }\n}\n</code></pre>", "options": [{"option": "Run-time error ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Main thread interrupted", "correct": false}, {"option": "No output", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>What is the output of the following Java code:</p>\n\n<pre class=\"prettyprint\"><code>class HackerEarth extends Thread{\n\n    public static void main(String[] args) {\n        Thread hack = new Thread(\"Hack\");\n        Thread hack1 = new Thread(\"Hack1\");\n        try {\n            hack.join();\n            hack1.join();\n        } catch (InterruptedException e) {\n            System.out.println(\"Main Thread interrupted.\");\n        }\n    }\n\n    public void run(){\n        System.out.println(\"Run executed\");\n    }\n}\n</code></pre>", "options": [{"option": "Run-time error ", "correct": false}, {"option": "Compilation error", "correct": false}, {"option": "Main thread interrupted", "correct": false}, {"option": "No output", "correct": true}], "level": "Hard"}, {"question": "<p>In Java, which of the following abstract methods are declared by the <strong>Iterator&lt;E&gt; </strong>interface?</p>\n\n<ol>\n\t<li>hasNext()</li>\n\t<li>next()</li>\n\t<li>remove()</li>\n\t<li>clear()</li>\n</ol>", "options": [{"option": "1 and 4", "correct": false}, {"option": "1, 2, and 3", "correct": true}, {"option": "2, 3, and 4", "correct": false}, {"option": "1, 2, and 4", "correct": false}], "level": "Medium"}, {"question": "<p>Quelle est la valeur de <em>foo.length</em> ?</p>\n\n<pre class=\"prettyprint\"><code>const foo = [];\nfoo.push(1);\nfoo.push(2);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "null", "correct": false}, {"option": "2", "correct": true}, {"option": "\"2\"", "correct": false}, {"option": "undefined", "correct": false}], "level": "Easy"}, {"question": "<p>En JavaScript, quel \u00e9v\u00e9nement est d\u00e9clench\u00e9 quand un \u00e9l\u00e9ment &lt;button&gt; ou &lt;textarea&gt; perd le focus ?</p>", "options": [{"option": "onblur", "correct": true}, {"option": "onclick", "correct": false}, {"option": "onfocus", "correct": false}, {"option": "onfocuslost", "correct": false}], "level": "Easy"}, {"question": "<p>Laquelle de ces r\u00e9ponses affichera 2 ?</p>\n\n<pre class=\"prettyprint\"><code>var myJson = {\n  \"cities\": [\n    {\"name\": \"Paris\", \"pop\": 2},\n    {\"name\": \"London\", \"pop\": 8},\n    {\"name\": \"New York\", \"pop\": 9}\n  ]\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "myJson->cities->Laos->pop", "correct": false}, {"option": "myJson.cities[0].pop", "correct": false}, {"option": "myJson.cities['Paris'].pop", "correct": false}, {"option": "myJson.cities.Paris.pop", "correct": true}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>a = new Array();\na['b'] = 'hello world';\nalert(a-&gt;b);</code></pre>\n\n<p>Quel est le r\u00e9sultat de ce bout de code ?</p>", "options": [{"option": "b", "correct": false}, {"option": "\"hello world\"", "correct": false}, {"option": "0", "correct": false}, {"option": "Une erreur de syntaxe", "correct": true}], "level": "Easy"}, {"question": "<p>Javascript est multithread\u00e9</p>", "options": [{"option": "Oui", "correct": false}, {"option": "Non", "correct": true}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>var a = {};\nvar b = a;\na.v = 1;\nb.v = 2;\nconsole.log(a.v);</code></pre>\n\n<p>Va \u00e9crire dans la console ...</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "undefined", "correct": false}, {"option": "Rien, une erreur appara\u00eetra", "correct": false}], "level": "Easy"}, {"question": "<p>Which of the following statements are true about AOP proxy?</p>\n\n<p>i. AOP proxies are created by Spring in order to implement the aspect contracts.</p>\n\n<p>ii. AOP proxies are always created with a JDK dynamic proxy.</p>\n\n<p>iii. Proxies are created by a BeanPostProcessor.</p>\n\n<p>iv. In the Spring Framework, an AOP proxy will be a JDK dynamic proxy or a CGLIB proxy.</p>", "options": [{"option": "i, and iii", "correct": true}, {"option": "i, ii, and iii", "correct": false}, {"option": "i, iii, and iv", "correct": false}, {"option": "i, and ii", "correct": false}], "level": "Hard"}, {"question": "<p>Quelle est la valeur de <em>foo.length</em> ?</p>\n\n<pre class=\"prettyprint\"><code>const foo = [];\nfoo.push(1);\nfoo.push(2);</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "null", "correct": false}, {"option": "2", "correct": true}, {"option": "\"2\"", "correct": false}, {"option": "undefined", "correct": false}], "level": "Easy"}, {"question": "<p>En JavaScript, quel \u00e9v\u00e9nement est d\u00e9clench\u00e9 quand un \u00e9l\u00e9ment &lt;button&gt; ou &lt;textarea&gt; perd le focus ?</p>", "options": [{"option": "onblur", "correct": true}, {"option": "onclick", "correct": false}, {"option": "onfocus", "correct": false}, {"option": "onfocuslost", "correct": false}], "level": "Easy"}, {"question": "<p>Laquelle de ces r\u00e9ponses affichera 2 ?</p>\n\n<pre class=\"prettyprint\"><code>var myJson = {\n  \"cities\": [\n    {\"name\": \"Paris\", \"pop\": 2},\n    {\"name\": \"London\", \"pop\": 8},\n    {\"name\": \"New York\", \"pop\": 9}\n  ]\n};</code></pre>\n\n<p>\u00a0</p>", "options": [{"option": "myJson->cities->Laos->pop", "correct": false}, {"option": "myJson.cities[0].pop", "correct": false}, {"option": "myJson.cities['Paris'].pop", "correct": false}, {"option": "myJson.cities.Paris.pop", "correct": true}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>a = new Array();\na['b'] = 'hello world';\nalert(a-&gt;b);</code></pre>\n\n<p>Quel est le r\u00e9sultat de ce bout de code ?</p>", "options": [{"option": "b", "correct": false}, {"option": "\"hello world\"", "correct": false}, {"option": "0", "correct": false}, {"option": "Une erreur de syntaxe", "correct": true}], "level": "Easy"}, {"question": "<p>Javascript est multithread\u00e9</p>", "options": [{"option": "Oui", "correct": false}, {"option": "Non", "correct": true}], "level": "Easy"}, {"question": "<pre class=\"prettyprint\"><code>var a = {};\nvar b = a;\na.v = 1;\nb.v = 2;\nconsole.log(a.v);</code></pre>\n\n<p>Va \u00e9crire dans la console ...</p>", "options": [{"option": "1", "correct": false}, {"option": "2", "correct": true}, {"option": "undefined", "correct": false}, {"option": "Rien, une erreur appara\u00eetra", "correct": false}], "level": "Easy"}]